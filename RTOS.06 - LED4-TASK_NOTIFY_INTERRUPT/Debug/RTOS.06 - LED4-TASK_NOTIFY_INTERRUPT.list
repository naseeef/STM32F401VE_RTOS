
RTOS.06 - LED4-TASK_NOTIFY_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08007434  08007434  00017434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075cc  080075cc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080075cc  080075cc  000175cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075d4  080075d4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075d4  080075d4  000175d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075d8  080075d8  000175d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080075dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000144a0  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144b4  200144b4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018faf  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003156  00000000  00000000  00038ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  0003c150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001188  00000000  00000000  0003d450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023728  00000000  00000000  0003e5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000156d0  00000000  00000000  00061d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7727  00000000  00000000  000773d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014eaf7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f6c  00000000  00000000  0014eb4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800741c 	.word	0x0800741c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800741c 	.word	0x0800741c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001440c 	.word	0x2001440c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fb25 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f897 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8f3 	bl	8000754 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //cyclic counter
  DWT_CTRL |= (1<<0);
 800056e:	4b3d      	ldr	r3, [pc, #244]	; (8000664 <main+0x108>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a3c      	ldr	r2, [pc, #240]	; (8000664 <main+0x108>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800057a:	f004 fc93 	bl	8004ea4 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(task_green_handler, "LED_Green", 200, NULL, 3, &ledg_handle);
 800057e:	4b3a      	ldr	r3, [pc, #232]	; (8000668 <main+0x10c>)
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2303      	movs	r3, #3
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	22c8      	movs	r2, #200	; 0xc8
 800058a:	4938      	ldr	r1, [pc, #224]	; (800066c <main+0x110>)
 800058c:	4838      	ldr	r0, [pc, #224]	; (8000670 <main+0x114>)
 800058e:	f002 f937 	bl	8002800 <xTaskCreate>
 8000592:	4603      	mov	r3, r0
 8000594:	4a37      	ldr	r2, [pc, #220]	; (8000674 <main+0x118>)
 8000596:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000598:	4b36      	ldr	r3, [pc, #216]	; (8000674 <main+0x118>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d00a      	beq.n	80005b6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	f383 8811 	msr	BASEPRI, r3
 80005a8:	f3bf 8f6f 	isb	sy
 80005ac:	f3bf 8f4f 	dsb	sy
 80005b0:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b2:	bf00      	nop
 80005b4:	e7fe      	b.n	80005b4 <main+0x58>

  status = xTaskCreate(task_red_handler, "LED_Red", 200, NULL, 2, &ledr_handle);
 80005b6:	4b30      	ldr	r3, [pc, #192]	; (8000678 <main+0x11c>)
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2302      	movs	r3, #2
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	22c8      	movs	r2, #200	; 0xc8
 80005c2:	492e      	ldr	r1, [pc, #184]	; (800067c <main+0x120>)
 80005c4:	482e      	ldr	r0, [pc, #184]	; (8000680 <main+0x124>)
 80005c6:	f002 f91b 	bl	8002800 <xTaskCreate>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a29      	ldr	r2, [pc, #164]	; (8000674 <main+0x118>)
 80005ce:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80005d0:	4b28      	ldr	r3, [pc, #160]	; (8000674 <main+0x118>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00a      	beq.n	80005ee <main+0x92>
        __asm volatile
 80005d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005dc:	f383 8811 	msr	BASEPRI, r3
 80005e0:	f3bf 8f6f 	isb	sy
 80005e4:	f3bf 8f4f 	dsb	sy
 80005e8:	60bb      	str	r3, [r7, #8]
    }
 80005ea:	bf00      	nop
 80005ec:	e7fe      	b.n	80005ec <main+0x90>

  status = xTaskCreate(task_blue_handler, "LED_Blue", 200, NULL, 1, &ledb_handle);
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <main+0x128>)
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2301      	movs	r3, #1
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	22c8      	movs	r2, #200	; 0xc8
 80005fa:	4923      	ldr	r1, [pc, #140]	; (8000688 <main+0x12c>)
 80005fc:	4823      	ldr	r0, [pc, #140]	; (800068c <main+0x130>)
 80005fe:	f002 f8ff 	bl	8002800 <xTaskCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <main+0x118>)
 8000606:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <main+0x118>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00a      	beq.n	8000626 <main+0xca>
        __asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	607b      	str	r3, [r7, #4]
    }
 8000622:	bf00      	nop
 8000624:	e7fe      	b.n	8000624 <main+0xc8>

  status = xTaskCreate(task_button_handler, "LED_Blue", 200, NULL, 4, &btn_handle);
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <main+0x134>)
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2304      	movs	r3, #4
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	22c8      	movs	r2, #200	; 0xc8
 8000632:	4915      	ldr	r1, [pc, #84]	; (8000688 <main+0x12c>)
 8000634:	4817      	ldr	r0, [pc, #92]	; (8000694 <main+0x138>)
 8000636:	f002 f8e3 	bl	8002800 <xTaskCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <main+0x118>)
 800063e:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <main+0x118>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d00a      	beq.n	800065e <main+0x102>
        __asm volatile
 8000648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064c:	f383 8811 	msr	BASEPRI, r3
 8000650:	f3bf 8f6f 	isb	sy
 8000654:	f3bf 8f4f 	dsb	sy
 8000658:	603b      	str	r3, [r7, #0]
    }
 800065a:	bf00      	nop
 800065c:	e7fe      	b.n	800065c <main+0x100>

  //start freertos scheduler
  vTaskStartScheduler();
 800065e:	f002 fb4f 	bl	8002d00 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000662:	e7fe      	b.n	8000662 <main+0x106>
 8000664:	e0001000 	.word	0xe0001000
 8000668:	20014370 	.word	0x20014370
 800066c:	08007434 	.word	0x08007434
 8000670:	080007ed 	.word	0x080007ed
 8000674:	2001437c 	.word	0x2001437c
 8000678:	20014368 	.word	0x20014368
 800067c:	08007440 	.word	0x08007440
 8000680:	08000865 	.word	0x08000865
 8000684:	20014378 	.word	0x20014378
 8000688:	08007448 	.word	0x08007448
 800068c:	080008e1 	.word	0x080008e1
 8000690:	20014374 	.word	0x20014374
 8000694:	08000965 	.word	0x08000965

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f006 feb0 	bl	800740c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <SystemClock_Config+0xb4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xb4>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xb4>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <SystemClock_Config+0xb8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <SystemClock_Config+0xb8>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b19      	ldr	r3, [pc, #100]	; (8000750 <SystemClock_Config+0xb8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000700:	2300      	movs	r3, #0
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fd81 	bl	8001210 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000714:	f000 f960 	bl	80009d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f000 ffe4 	bl	8001700 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800073e:	f000 f94b 	bl	80009d8 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_GPIO_Init+0x60>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <MX_GPIO_Init+0x60>)
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	6313      	str	r3, [r2, #48]	; 0x30
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_GPIO_Init+0x60>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077c:	f003 0308 	and.w	r3, r3, #8
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800078a:	480b      	ldr	r0, [pc, #44]	; (80007b8 <MX_GPIO_Init+0x64>)
 800078c:	f000 fce8 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000790:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000794:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_GPIO_Init+0x64>)
 80007a8:	f000 fb26 	bl	8000df8 <HAL_GPIO_Init>

}
 80007ac:	bf00      	nop
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020c00 	.word	0x40020c00

080007bc <button_interrupt_handler>:

/* USER CODE BEGIN 4 */
void button_interrupt_handler()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af02      	add	r7, sp, #8
	traceISR_ENTER();
 80007c2:	f006 facb 	bl	8006d5c <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle,0,eNoAction,NULL);
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <button_interrupt_handler+0x2c>)
 80007c8:	6818      	ldr	r0, [r3, #0]
 80007ca:	2300      	movs	r3, #0
 80007cc:	9301      	str	r3, [sp, #4]
 80007ce:	2300      	movs	r3, #0
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	2300      	movs	r3, #0
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	f003 fa00 	bl	8003bdc <xTaskGenericNotifyFromISR>
	traceISR_EXIT();
 80007dc:	f006 fb00 	bl	8006de0 <SEGGER_SYSVIEW_RecordExitISR>
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2001436c 	.word	0x2001436c

080007ec <task_green_handler>:

static void task_green_handler(void* parameters)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling L G");
 80007f4:	4815      	ldr	r0, [pc, #84]	; (800084c <task_green_handler+0x60>)
 80007f6:	f006 fd59 	bl	80072ac <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, 12);
 80007fa:	210c      	movs	r1, #12
 80007fc:	4814      	ldr	r0, [pc, #80]	; (8000850 <task_green_handler+0x64>)
 80007fe:	f000 fcc8 	bl	8001192 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2300      	movs	r3, #0
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	2000      	movs	r0, #0
 8000810:	f003 f828 	bl	8003864 <xTaskGenericNotifyWait>
 8000814:	4603      	mov	r3, r0
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <task_green_handler+0x68>)
 8000818:	6013      	str	r3, [r2, #0]
		if(status == pdTRUE)
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <task_green_handler+0x68>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d1e8      	bne.n	80007f4 <task_green_handler+0x8>
		{
			portENTER_CRITICAL();
 8000822:	f004 f807 	bl	8004834 <vPortEnterCritical>
			next_task_handle = ledr_handle;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <task_green_handler+0x6c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a0c      	ldr	r2, [pc, #48]	; (800085c <task_green_handler+0x70>)
 800082c:	6013      	str	r3, [r2, #0]
			//xTaskResumeAll();
			HAL_GPIO_WritePin(GPIOD, 12,GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	210c      	movs	r1, #12
 8000832:	4807      	ldr	r0, [pc, #28]	; (8000850 <task_green_handler+0x64>)
 8000834:	f000 fc94 	bl	8001160 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleted L G");
 8000838:	4809      	ldr	r0, [pc, #36]	; (8000860 <task_green_handler+0x74>)
 800083a:	f006 fd37 	bl	80072ac <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 800083e:	f004 f829 	bl	8004894 <vPortExitCritical>
			vTaskDelete(NULL);
 8000842:	2000      	movs	r0, #0
 8000844:	f002 f976 	bl	8002b34 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling L G");
 8000848:	e7d4      	b.n	80007f4 <task_green_handler+0x8>
 800084a:	bf00      	nop
 800084c:	08007454 	.word	0x08007454
 8000850:	40020c00 	.word	0x40020c00
 8000854:	2001437c 	.word	0x2001437c
 8000858:	20014368 	.word	0x20014368
 800085c:	2001436c 	.word	0x2001436c
 8000860:	08007464 	.word	0x08007464

08000864 <task_red_handler>:

	}
}

static void task_red_handler(void* parameters)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af02      	add	r7, sp, #8
 800086a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling L R");
 800086c:	4816      	ldr	r0, [pc, #88]	; (80008c8 <task_red_handler+0x64>)
 800086e:	f006 fd1d 	bl	80072ac <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, 13);
 8000872:	210d      	movs	r1, #13
 8000874:	4815      	ldr	r0, [pc, #84]	; (80008cc <task_red_handler+0x68>)
 8000876:	f000 fc8c 	bl	8001192 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 800087a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2300      	movs	r3, #0
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2000      	movs	r0, #0
 8000888:	f002 ffec 	bl	8003864 <xTaskGenericNotifyWait>
 800088c:	4603      	mov	r3, r0
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <task_red_handler+0x6c>)
 8000890:	6013      	str	r3, [r2, #0]
		if(status == pdTRUE)
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <task_red_handler+0x6c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d1e8      	bne.n	800086c <task_red_handler+0x8>
		{
			portENTER_CRITICAL();
 800089a:	f003 ffcb 	bl	8004834 <vPortEnterCritical>
			vTaskSuspendAll();
 800089e:	f002 fa91 	bl	8002dc4 <vTaskSuspendAll>
			next_task_handle = ledb_handle;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <task_red_handler+0x70>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <task_red_handler+0x74>)
 80008a8:	6013      	str	r3, [r2, #0]
			//xTaskResumeAll();
			HAL_GPIO_WritePin(GPIOD, 14,GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	210e      	movs	r1, #14
 80008ae:	4807      	ldr	r0, [pc, #28]	; (80008cc <task_red_handler+0x68>)
 80008b0:	f000 fc56 	bl	8001160 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleted L R");
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <task_red_handler+0x78>)
 80008b6:	f006 fcf9 	bl	80072ac <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 80008ba:	f003 ffeb 	bl	8004894 <vPortExitCritical>
			vTaskDelete(NULL);
 80008be:	2000      	movs	r0, #0
 80008c0:	f002 f938 	bl	8002b34 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling L R");
 80008c4:	e7d2      	b.n	800086c <task_red_handler+0x8>
 80008c6:	bf00      	nop
 80008c8:	08007470 	.word	0x08007470
 80008cc:	40020c00 	.word	0x40020c00
 80008d0:	2001437c 	.word	0x2001437c
 80008d4:	20014378 	.word	0x20014378
 80008d8:	2001436c 	.word	0x2001436c
 80008dc:	08007480 	.word	0x08007480

080008e0 <task_blue_handler>:

	}
}

static void task_blue_handler(void* parameters)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af02      	add	r7, sp, #8
 80008e6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling L B");
 80008e8:	4818      	ldr	r0, [pc, #96]	; (800094c <task_blue_handler+0x6c>)
 80008ea:	f006 fcdf 	bl	80072ac <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, 14);
 80008ee:	210e      	movs	r1, #14
 80008f0:	4817      	ldr	r0, [pc, #92]	; (8000950 <task_blue_handler+0x70>)
 80008f2:	f000 fc4e 	bl	8001192 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 80008f6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2300      	movs	r3, #0
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	2000      	movs	r0, #0
 8000904:	f002 ffae 	bl	8003864 <xTaskGenericNotifyWait>
 8000908:	4603      	mov	r3, r0
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <task_blue_handler+0x74>)
 800090c:	6013      	str	r3, [r2, #0]

		if(status == pdTRUE)
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <task_blue_handler+0x74>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d1e8      	bne.n	80008e8 <task_blue_handler+0x8>
		{
			portENTER_CRITICAL();
 8000916:	f003 ff8d 	bl	8004834 <vPortEnterCritical>
			vTaskSuspendAll();
 800091a:	f002 fa53 	bl	8002dc4 <vTaskSuspendAll>
			next_task_handle = NULL;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <task_blue_handler+0x78>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
			//xTaskResumeAll();
			HAL_GPIO_WritePin(GPIOD, 14,GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	210e      	movs	r1, #14
 8000928:	4809      	ldr	r0, [pc, #36]	; (8000950 <task_blue_handler+0x70>)
 800092a:	f000 fc19 	bl	8001160 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleted L B");
 800092e:	480b      	ldr	r0, [pc, #44]	; (800095c <task_blue_handler+0x7c>)
 8000930:	f006 fcbc 	bl	80072ac <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000934:	f003 ffae 	bl	8004894 <vPortExitCritical>
			vTaskDelete(btn_handle);
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <task_blue_handler+0x80>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f002 f8f9 	bl	8002b34 <vTaskDelete>
			vTaskDelete(NULL);
 8000942:	2000      	movs	r0, #0
 8000944:	f002 f8f6 	bl	8002b34 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling L B");
 8000948:	e7ce      	b.n	80008e8 <task_blue_handler+0x8>
 800094a:	bf00      	nop
 800094c:	0800748c 	.word	0x0800748c
 8000950:	40020c00 	.word	0x40020c00
 8000954:	2001437c 	.word	0x2001437c
 8000958:	2001436c 	.word	0x2001436c
 800095c:	0800749c 	.word	0x0800749c
 8000960:	20014374 	.word	0x20014374

08000964 <task_button_handler>:

	}
}

static void task_button_handler(void* parameters)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af02      	add	r7, sp, #8
 800096a:	6078      	str	r0, [r7, #4]

	uint8_t btn_read = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000974:	2101      	movs	r1, #1
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <task_button_handler+0x48>)
 8000978:	f000 fbda 	bl	8001130 <HAL_GPIO_ReadPin>
 800097c:	4603      	mov	r3, r0
 800097e:	73bb      	strb	r3, [r7, #14]

			if(btn_read)
 8000980:	7bbb      	ldrb	r3, [r7, #14]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d00b      	beq.n	800099e <task_button_handler+0x3a>
			{
				if(!prev_read)
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d108      	bne.n	800099e <task_button_handler+0x3a>
					{
						xTaskNotify(next_task_handle,0,eNoAction);
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <task_button_handler+0x4c>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	2300      	movs	r3, #0
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2300      	movs	r3, #0
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	f002 ffeb 	bl	8003974 <xTaskGenericNotify>
					}
			}
			prev_read = btn_read;
 800099e:	7bbb      	ldrb	r3, [r7, #14]
 80009a0:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(pdMS_TO_TICKS(10));
 80009a2:	200a      	movs	r0, #10
 80009a4:	f002 f974 	bl	8002c90 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80009a8:	e7e4      	b.n	8000974 <task_button_handler+0x10>
 80009aa:	bf00      	nop
 80009ac:	40020000 	.word	0x40020000
 80009b0:	2001436c 	.word	0x2001436c

080009b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d101      	bne.n	80009ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009c6:	f000 f915 	bl	8000bf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40001000 	.word	0x40001000

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 8000a22:	f003 fe89 	bl	8004738 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	2036      	movs	r0, #54	; 0x36
 8000a4a:	f000 f9ab 	bl	8000da4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a4e:	2036      	movs	r0, #54	; 0x36
 8000a50:	f000 f9c4 	bl	8000ddc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <HAL_InitTick+0xa0>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <HAL_InitTick+0xa0>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <HAL_InitTick+0xa0>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	f003 0310 	and.w	r3, r3, #16
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a70:	f107 0210 	add.w	r2, r7, #16
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fffc 	bl	8001a78 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a80:	f000 ffe6 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 8000a84:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a88:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8e:	0c9b      	lsrs	r3, r3, #18
 8000a90:	3b01      	subs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_InitTick+0xa8>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <HAL_InitTick+0xac>)
 8000a98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_InitTick+0xa8>)
 8000a9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_InitTick+0xa8>)
 8000aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_InitTick+0xa8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_InitTick+0xa8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <HAL_InitTick+0xa8>)
 8000ab6:	f001 f811 	bl	8001adc <HAL_TIM_Base_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d104      	bne.n	8000aca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ac0:	4806      	ldr	r0, [pc, #24]	; (8000adc <HAL_InitTick+0xa8>)
 8000ac2:	f001 f865 	bl	8001b90 <HAL_TIM_Base_Start_IT>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3730      	adds	r7, #48	; 0x30
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	20014380 	.word	0x20014380
 8000ae0:	40001000 	.word	0x40001000

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
button_interrupt_handler();
 8000b14:	f7ff fe52 	bl	80007bc <button_interrupt_handler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f000 fb55 	bl	80011c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <TIM6_DAC_IRQHandler+0x10>)
 8000b2a:	f001 f8a1 	bl	8001c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20014380 	.word	0x20014380

08000b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <SystemInit+0x20>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <SystemInit+0x20>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b62:	490e      	ldr	r1, [pc, #56]	; (8000b9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b78:	4c0b      	ldr	r4, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b86:	f7ff ffd7 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8a:	f006 fbff 	bl	800738c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b8e:	f7ff fce5 	bl	800055c <main>
  bx  lr    
 8000b92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ba0:	080075dc 	.word	0x080075dc
  ldr r2, =_sbss
 8000ba4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ba8:	200144b4 	.word	0x200144b4

08000bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <HAL_Init+0x40>)
 8000bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_Init+0x40>)
 8000bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <HAL_Init+0x40>)
 8000bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 f8d8 	bl	8000d8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bde:	200f      	movs	r0, #15
 8000be0:	f7ff ff28 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be4:	f7ff fefe 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023c00 	.word	0x40023c00

08000bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x20>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x24>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_IncTick+0x24>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008
 8000c18:	200143c8 	.word	0x200143c8

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	200143c8 	.word	0x200143c8

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	; (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ff4c 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db6:	f7ff ff61 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000dba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	68b9      	ldr	r1, [r7, #8]
 8000dc0:	6978      	ldr	r0, [r7, #20]
 8000dc2:	f7ff ffb1 	bl	8000d28 <NVIC_EncodePriority>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff80 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000dd4:	bf00      	nop
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff54 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	e16b      	b.n	80010ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e14:	2201      	movs	r2, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	f040 815a 	bne.w	80010e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d005      	beq.n	8000e4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d130      	bne.n	8000eac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	68da      	ldr	r2, [r3, #12]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	091b      	lsrs	r3, r3, #4
 8000e96:	f003 0201 	and.w	r2, r3, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	d017      	beq.n	8000ee8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d123      	bne.n	8000f3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	08da      	lsrs	r2, r3, #3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3208      	adds	r2, #8
 8000efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	08da      	lsrs	r2, r3, #3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3208      	adds	r2, #8
 8000f36:	69b9      	ldr	r1, [r7, #24]
 8000f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0203 	and.w	r2, r3, #3
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f000 80b4 	beq.w	80010e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b60      	ldr	r3, [pc, #384]	; (8001104 <HAL_GPIO_Init+0x30c>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a5f      	ldr	r2, [pc, #380]	; (8001104 <HAL_GPIO_Init+0x30c>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <HAL_GPIO_Init+0x30c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f9a:	4a5b      	ldr	r2, [pc, #364]	; (8001108 <HAL_GPIO_Init+0x310>)
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a52      	ldr	r2, [pc, #328]	; (800110c <HAL_GPIO_Init+0x314>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d02b      	beq.n	800101e <HAL_GPIO_Init+0x226>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a51      	ldr	r2, [pc, #324]	; (8001110 <HAL_GPIO_Init+0x318>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d025      	beq.n	800101a <HAL_GPIO_Init+0x222>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a50      	ldr	r2, [pc, #320]	; (8001114 <HAL_GPIO_Init+0x31c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d01f      	beq.n	8001016 <HAL_GPIO_Init+0x21e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4f      	ldr	r2, [pc, #316]	; (8001118 <HAL_GPIO_Init+0x320>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d019      	beq.n	8001012 <HAL_GPIO_Init+0x21a>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4e      	ldr	r2, [pc, #312]	; (800111c <HAL_GPIO_Init+0x324>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d013      	beq.n	800100e <HAL_GPIO_Init+0x216>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4d      	ldr	r2, [pc, #308]	; (8001120 <HAL_GPIO_Init+0x328>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d00d      	beq.n	800100a <HAL_GPIO_Init+0x212>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4c      	ldr	r2, [pc, #304]	; (8001124 <HAL_GPIO_Init+0x32c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d007      	beq.n	8001006 <HAL_GPIO_Init+0x20e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4b      	ldr	r2, [pc, #300]	; (8001128 <HAL_GPIO_Init+0x330>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d101      	bne.n	8001002 <HAL_GPIO_Init+0x20a>
 8000ffe:	2307      	movs	r3, #7
 8001000:	e00e      	b.n	8001020 <HAL_GPIO_Init+0x228>
 8001002:	2308      	movs	r3, #8
 8001004:	e00c      	b.n	8001020 <HAL_GPIO_Init+0x228>
 8001006:	2306      	movs	r3, #6
 8001008:	e00a      	b.n	8001020 <HAL_GPIO_Init+0x228>
 800100a:	2305      	movs	r3, #5
 800100c:	e008      	b.n	8001020 <HAL_GPIO_Init+0x228>
 800100e:	2304      	movs	r3, #4
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x228>
 8001012:	2303      	movs	r3, #3
 8001014:	e004      	b.n	8001020 <HAL_GPIO_Init+0x228>
 8001016:	2302      	movs	r3, #2
 8001018:	e002      	b.n	8001020 <HAL_GPIO_Init+0x228>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x228>
 800101e:	2300      	movs	r3, #0
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	f002 0203 	and.w	r2, r2, #3
 8001026:	0092      	lsls	r2, r2, #2
 8001028:	4093      	lsls	r3, r2
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001030:	4935      	ldr	r1, [pc, #212]	; (8001108 <HAL_GPIO_Init+0x310>)
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <HAL_GPIO_Init+0x334>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001062:	4a32      	ldr	r2, [pc, #200]	; (800112c <HAL_GPIO_Init+0x334>)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001068:	4b30      	ldr	r3, [pc, #192]	; (800112c <HAL_GPIO_Init+0x334>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800108c:	4a27      	ldr	r2, [pc, #156]	; (800112c <HAL_GPIO_Init+0x334>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001092:	4b26      	ldr	r3, [pc, #152]	; (800112c <HAL_GPIO_Init+0x334>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b6:	4a1d      	ldr	r2, [pc, #116]	; (800112c <HAL_GPIO_Init+0x334>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_GPIO_Init+0x334>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e0:	4a12      	ldr	r2, [pc, #72]	; (800112c <HAL_GPIO_Init+0x334>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3301      	adds	r3, #1
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	2b0f      	cmp	r3, #15
 80010f0:	f67f ae90 	bls.w	8000e14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3724      	adds	r7, #36	; 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40013800 	.word	0x40013800
 800110c:	40020000 	.word	0x40020000
 8001110:	40020400 	.word	0x40020400
 8001114:	40020800 	.word	0x40020800
 8001118:	40020c00 	.word	0x40020c00
 800111c:	40021000 	.word	0x40021000
 8001120:	40021400 	.word	0x40021400
 8001124:	40021800 	.word	0x40021800
 8001128:	40021c00 	.word	0x40021c00
 800112c:	40013c00 	.word	0x40013c00

08001130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e001      	b.n	8001152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800117c:	e003      	b.n	8001186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	041a      	lsls	r2, r3, #16
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	619a      	str	r2, [r3, #24]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001192:	b480      	push	{r7}
 8001194:	b085      	sub	sp, #20
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	460b      	mov	r3, r1
 800119c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011a4:	887a      	ldrh	r2, [r7, #2]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4013      	ands	r3, r2
 80011aa:	041a      	lsls	r2, r3, #16
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	400b      	ands	r3, r1
 80011b4:	431a      	orrs	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	619a      	str	r2, [r3, #24]
}
 80011ba:	bf00      	nop
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011d4:	695a      	ldr	r2, [r3, #20]
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	4013      	ands	r3, r2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d006      	beq.n	80011ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f806 	bl	80011f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40013c00 	.word	0x40013c00

080011f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e264      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d075      	beq.n	800131a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800122e:	4ba3      	ldr	r3, [pc, #652]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b04      	cmp	r3, #4
 8001238:	d00c      	beq.n	8001254 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123a:	4ba0      	ldr	r3, [pc, #640]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001242:	2b08      	cmp	r3, #8
 8001244:	d112      	bne.n	800126c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001246:	4b9d      	ldr	r3, [pc, #628]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001252:	d10b      	bne.n	800126c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	4b99      	ldr	r3, [pc, #612]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d05b      	beq.n	8001318 <HAL_RCC_OscConfig+0x108>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d157      	bne.n	8001318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e23f      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001274:	d106      	bne.n	8001284 <HAL_RCC_OscConfig+0x74>
 8001276:	4b91      	ldr	r3, [pc, #580]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a90      	ldr	r2, [pc, #576]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800127c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e01d      	b.n	80012c0 <HAL_RCC_OscConfig+0xb0>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x98>
 800128e:	4b8b      	ldr	r3, [pc, #556]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a8a      	ldr	r2, [pc, #552]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b88      	ldr	r3, [pc, #544]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a87      	ldr	r2, [pc, #540]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e00b      	b.n	80012c0 <HAL_RCC_OscConfig+0xb0>
 80012a8:	4b84      	ldr	r3, [pc, #528]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a83      	ldr	r2, [pc, #524]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b81      	ldr	r3, [pc, #516]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a80      	ldr	r2, [pc, #512]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fca8 	bl	8000c1c <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fca4 	bl	8000c1c <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e204      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e2:	4b76      	ldr	r3, [pc, #472]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0xc0>
 80012ee:	e014      	b.n	800131a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc94 	bl	8000c1c <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fc90 	bl	8000c1c <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e1f0      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	4b6c      	ldr	r3, [pc, #432]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0xe8>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d063      	beq.n	80013ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001326:	4b65      	ldr	r3, [pc, #404]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00b      	beq.n	800134a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001332:	4b62      	ldr	r3, [pc, #392]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800133a:	2b08      	cmp	r3, #8
 800133c:	d11c      	bne.n	8001378 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133e:	4b5f      	ldr	r3, [pc, #380]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d116      	bne.n	8001378 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	4b5c      	ldr	r3, [pc, #368]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <HAL_RCC_OscConfig+0x152>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e1c4      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001362:	4b56      	ldr	r3, [pc, #344]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4952      	ldr	r1, [pc, #328]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	e03a      	b.n	80013ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001380:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <HAL_RCC_OscConfig+0x2b0>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001386:	f7ff fc49 	bl	8000c1c <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138e:	f7ff fc45 	bl	8000c1c <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e1a5      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a0:	4b46      	ldr	r3, [pc, #280]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ac:	4b43      	ldr	r3, [pc, #268]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4940      	ldr	r1, [pc, #256]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	600b      	str	r3, [r1, #0]
 80013c0:	e015      	b.n	80013ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c2:	4b3f      	ldr	r3, [pc, #252]	; (80014c0 <HAL_RCC_OscConfig+0x2b0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff fc28 	bl	8000c1c <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d0:	f7ff fc24 	bl	8000c1c <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e184      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d030      	beq.n	800145c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d016      	beq.n	8001430 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HAL_RCC_OscConfig+0x2b4>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001408:	f7ff fc08 	bl	8000c1c <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001410:	f7ff fc04 	bl	8000c1c <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e164      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x200>
 800142e:	e015      	b.n	800145c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_RCC_OscConfig+0x2b4>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001436:	f7ff fbf1 	bl	8000c1c <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143e:	f7ff fbed 	bl	8000c1c <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e14d      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80a0 	beq.w	80015aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10f      	bne.n	800149a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001496:	2301      	movs	r3, #1
 8001498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_RCC_OscConfig+0x2b8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d121      	bne.n	80014ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_RCC_OscConfig+0x2b8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_RCC_OscConfig+0x2b8>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fbb3 	bl	8000c1c <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	e011      	b.n	80014de <HAL_RCC_OscConfig+0x2ce>
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	42470000 	.word	0x42470000
 80014c4:	42470e80 	.word	0x42470e80
 80014c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014cc:	f7ff fba6 	bl	8000c1c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e106      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014de:	4b85      	ldr	r3, [pc, #532]	; (80016f4 <HAL_RCC_OscConfig+0x4e4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d106      	bne.n	8001500 <HAL_RCC_OscConfig+0x2f0>
 80014f2:	4b81      	ldr	r3, [pc, #516]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a80      	ldr	r2, [pc, #512]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
 80014fe:	e01c      	b.n	800153a <HAL_RCC_OscConfig+0x32a>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d10c      	bne.n	8001522 <HAL_RCC_OscConfig+0x312>
 8001508:	4b7b      	ldr	r3, [pc, #492]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150c:	4a7a      	ldr	r2, [pc, #488]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6713      	str	r3, [r2, #112]	; 0x70
 8001514:	4b78      	ldr	r3, [pc, #480]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	4a77      	ldr	r2, [pc, #476]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	; 0x70
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0x32a>
 8001522:	4b75      	ldr	r3, [pc, #468]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	4a74      	ldr	r2, [pc, #464]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
 800152e:	4b72      	ldr	r3, [pc, #456]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	4a71      	ldr	r2, [pc, #452]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d015      	beq.n	800156e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001542:	f7ff fb6b 	bl	8000c1c <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff fb67 	bl	8000c1c <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	; 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e0c5      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	4b65      	ldr	r3, [pc, #404]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0ee      	beq.n	800154a <HAL_RCC_OscConfig+0x33a>
 800156c:	e014      	b.n	8001598 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff fb55 	bl	8000c1c <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff fb51 	bl	8000c1c <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e0af      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	4b5a      	ldr	r3, [pc, #360]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1ee      	bne.n	8001576 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d105      	bne.n	80015aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159e:	4b56      	ldr	r3, [pc, #344]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a55      	ldr	r2, [pc, #340]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80015a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 809b 	beq.w	80016ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015b4:	4b50      	ldr	r3, [pc, #320]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d05c      	beq.n	800167a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d141      	bne.n	800164c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c8:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <HAL_RCC_OscConfig+0x4ec>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fb25 	bl	8000c1c <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff fb21 	bl	8000c1c <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e081      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e8:	4b43      	ldr	r3, [pc, #268]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69da      	ldr	r2, [r3, #28]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	019b      	lsls	r3, r3, #6
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160a:	085b      	lsrs	r3, r3, #1
 800160c:	3b01      	subs	r3, #1
 800160e:	041b      	lsls	r3, r3, #16
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	061b      	lsls	r3, r3, #24
 8001618:	4937      	ldr	r1, [pc, #220]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800161e:	4b37      	ldr	r3, [pc, #220]	; (80016fc <HAL_RCC_OscConfig+0x4ec>)
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fafa 	bl	8000c1c <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162c:	f7ff faf6 	bl	8000c1c <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e056      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163e:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x41c>
 800164a:	e04e      	b.n	80016ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <HAL_RCC_OscConfig+0x4ec>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fae3 	bl	8000c1c <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fadf 	bl	8000c1c <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e03f      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x44a>
 8001678:	e037      	b.n	80016ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e032      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d028      	beq.n	80016e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d121      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d11a      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016b6:	4013      	ands	r3, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016be:	4293      	cmp	r3, r2
 80016c0:	d111      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	085b      	lsrs	r3, r3, #1
 80016ce:	3b01      	subs	r3, #1
 80016d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40007000 	.word	0x40007000
 80016f8:	40023800 	.word	0x40023800
 80016fc:	42470060 	.word	0x42470060

08001700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0cc      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001714:	4b68      	ldr	r3, [pc, #416]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d90c      	bls.n	800173c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b63      	ldr	r3, [pc, #396]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0b8      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d020      	beq.n	800178a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001754:	4b59      	ldr	r3, [pc, #356]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	4a58      	ldr	r2, [pc, #352]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800175e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800176c:	4b53      	ldr	r3, [pc, #332]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4a52      	ldr	r2, [pc, #328]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001776:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	494d      	ldr	r1, [pc, #308]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d044      	beq.n	8001820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	4b47      	ldr	r3, [pc, #284]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d119      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e07f      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d003      	beq.n	80017be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017be:	4b3f      	ldr	r3, [pc, #252]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e06f      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e067      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017de:	4b37      	ldr	r3, [pc, #220]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f023 0203 	bic.w	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4934      	ldr	r1, [pc, #208]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f0:	f7ff fa14 	bl	8000c1c <HAL_GetTick>
 80017f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	e00a      	b.n	800180e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f8:	f7ff fa10 	bl	8000c1c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	; 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e04f      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 020c 	and.w	r2, r3, #12
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	429a      	cmp	r2, r3
 800181e:	d1eb      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d20c      	bcs.n	8001848 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e032      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d008      	beq.n	8001866 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4916      	ldr	r1, [pc, #88]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d009      	beq.n	8001886 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	490e      	ldr	r1, [pc, #56]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001886:	f000 f821 	bl	80018cc <HAL_RCC_GetSysClockFreq>
 800188a:	4602      	mov	r2, r0
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	490a      	ldr	r1, [pc, #40]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	5ccb      	ldrb	r3, [r1, r3]
 800189a:	fa22 f303 	lsr.w	r3, r2, r3
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_RCC_ClockConfig+0x1c8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff f8c4 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023c00 	.word	0x40023c00
 80018bc:	40023800 	.word	0x40023800
 80018c0:	0800757c 	.word	0x0800757c
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000004 	.word	0x20000004

080018cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018d2:	2100      	movs	r1, #0
 80018d4:	6079      	str	r1, [r7, #4]
 80018d6:	2100      	movs	r1, #0
 80018d8:	60f9      	str	r1, [r7, #12]
 80018da:	2100      	movs	r1, #0
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018de:	2100      	movs	r1, #0
 80018e0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018e2:	4952      	ldr	r1, [pc, #328]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x160>)
 80018e4:	6889      	ldr	r1, [r1, #8]
 80018e6:	f001 010c 	and.w	r1, r1, #12
 80018ea:	2908      	cmp	r1, #8
 80018ec:	d00d      	beq.n	800190a <HAL_RCC_GetSysClockFreq+0x3e>
 80018ee:	2908      	cmp	r1, #8
 80018f0:	f200 8094 	bhi.w	8001a1c <HAL_RCC_GetSysClockFreq+0x150>
 80018f4:	2900      	cmp	r1, #0
 80018f6:	d002      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x32>
 80018f8:	2904      	cmp	r1, #4
 80018fa:	d003      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x38>
 80018fc:	e08e      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018fe:	4b4c      	ldr	r3, [pc, #304]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x164>)
 8001900:	60bb      	str	r3, [r7, #8]
       break;
 8001902:	e08e      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001904:	4b4b      	ldr	r3, [pc, #300]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x168>)
 8001906:	60bb      	str	r3, [r7, #8]
      break;
 8001908:	e08b      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800190a:	4948      	ldr	r1, [pc, #288]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x160>)
 800190c:	6849      	ldr	r1, [r1, #4]
 800190e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001912:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001914:	4945      	ldr	r1, [pc, #276]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x160>)
 8001916:	6849      	ldr	r1, [r1, #4]
 8001918:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800191c:	2900      	cmp	r1, #0
 800191e:	d024      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001920:	4942      	ldr	r1, [pc, #264]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x160>)
 8001922:	6849      	ldr	r1, [r1, #4]
 8001924:	0989      	lsrs	r1, r1, #6
 8001926:	4608      	mov	r0, r1
 8001928:	f04f 0100 	mov.w	r1, #0
 800192c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001930:	f04f 0500 	mov.w	r5, #0
 8001934:	ea00 0204 	and.w	r2, r0, r4
 8001938:	ea01 0305 	and.w	r3, r1, r5
 800193c:	493d      	ldr	r1, [pc, #244]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x168>)
 800193e:	fb01 f003 	mul.w	r0, r1, r3
 8001942:	2100      	movs	r1, #0
 8001944:	fb01 f102 	mul.w	r1, r1, r2
 8001948:	1844      	adds	r4, r0, r1
 800194a:	493a      	ldr	r1, [pc, #232]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x168>)
 800194c:	fba2 0101 	umull	r0, r1, r2, r1
 8001950:	1863      	adds	r3, r4, r1
 8001952:	4619      	mov	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	461a      	mov	r2, r3
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	f7fe fc82 	bl	8000264 <__aeabi_uldivmod>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4613      	mov	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	e04a      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196a:	4b30      	ldr	r3, [pc, #192]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x160>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	099b      	lsrs	r3, r3, #6
 8001970:	461a      	mov	r2, r3
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	f240 10ff 	movw	r0, #511	; 0x1ff
 800197a:	f04f 0100 	mov.w	r1, #0
 800197e:	ea02 0400 	and.w	r4, r2, r0
 8001982:	ea03 0501 	and.w	r5, r3, r1
 8001986:	4620      	mov	r0, r4
 8001988:	4629      	mov	r1, r5
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	014b      	lsls	r3, r1, #5
 8001994:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001998:	0142      	lsls	r2, r0, #5
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	1b00      	subs	r0, r0, r4
 80019a0:	eb61 0105 	sbc.w	r1, r1, r5
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	018b      	lsls	r3, r1, #6
 80019ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019b2:	0182      	lsls	r2, r0, #6
 80019b4:	1a12      	subs	r2, r2, r0
 80019b6:	eb63 0301 	sbc.w	r3, r3, r1
 80019ba:	f04f 0000 	mov.w	r0, #0
 80019be:	f04f 0100 	mov.w	r1, #0
 80019c2:	00d9      	lsls	r1, r3, #3
 80019c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019c8:	00d0      	lsls	r0, r2, #3
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	1912      	adds	r2, r2, r4
 80019d0:	eb45 0303 	adc.w	r3, r5, r3
 80019d4:	f04f 0000 	mov.w	r0, #0
 80019d8:	f04f 0100 	mov.w	r1, #0
 80019dc:	0299      	lsls	r1, r3, #10
 80019de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019e2:	0290      	lsls	r0, r2, #10
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	461a      	mov	r2, r3
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	f7fe fc36 	bl	8000264 <__aeabi_uldivmod>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4613      	mov	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x160>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	0c1b      	lsrs	r3, r3, #16
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a18:	60bb      	str	r3, [r7, #8]
      break;
 8001a1a:	e002      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x164>)
 8001a1e:	60bb      	str	r3, [r7, #8]
      break;
 8001a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a22:	68bb      	ldr	r3, [r7, #8]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	00f42400 	.word	0x00f42400
 8001a34:	017d7840 	.word	0x017d7840

08001a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000000 	.word	0x20000000

08001a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a54:	f7ff fff0 	bl	8001a38 <HAL_RCC_GetHCLKFreq>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	0a9b      	lsrs	r3, r3, #10
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	4903      	ldr	r1, [pc, #12]	; (8001a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a66:	5ccb      	ldrb	r3, [r1, r3]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40023800 	.word	0x40023800
 8001a74:	0800758c 	.word	0x0800758c

08001a78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	220f      	movs	r2, #15
 8001a86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0203 	and.w	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	08db      	lsrs	r3, r3, #3
 8001ab2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_RCC_GetClockConfig+0x60>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0207 	and.w	r2, r3, #7
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	601a      	str	r2, [r3, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40023c00 	.word	0x40023c00

08001adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e041      	b.n	8001b72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f839 	bl	8001b7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3304      	adds	r3, #4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f000 f9d8 	bl	8001ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d001      	beq.n	8001ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e04e      	b.n	8001c46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_TIM_Base_Start_IT+0xc4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d022      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x80>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd2:	d01d      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x80>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <HAL_TIM_Base_Start_IT+0xc8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d018      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x80>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <HAL_TIM_Base_Start_IT+0xcc>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d013      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x80>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1c      	ldr	r2, [pc, #112]	; (8001c60 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00e      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x80>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1b      	ldr	r2, [pc, #108]	; (8001c64 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d009      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x80>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a19      	ldr	r2, [pc, #100]	; (8001c68 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d004      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x80>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a18      	ldr	r2, [pc, #96]	; (8001c6c <HAL_TIM_Base_Start_IT+0xdc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d111      	bne.n	8001c34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d010      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0201 	orr.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c32:	e007      	b.n	8001c44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40010000 	.word	0x40010000
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	40000800 	.word	0x40000800
 8001c60:	40000c00 	.word	0x40000c00
 8001c64:	40010400 	.word	0x40010400
 8001c68:	40014000 	.word	0x40014000
 8001c6c:	40001800 	.word	0x40001800

08001c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d122      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d11b      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0202 	mvn.w	r2, #2
 8001c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8ee 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001cb8:	e005      	b.n	8001cc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f8e0 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f8f1 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d122      	bne.n	8001d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d11b      	bne.n	8001d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0204 	mvn.w	r2, #4
 8001cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8c4 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001d0c:	e005      	b.n	8001d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8b6 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f8c7 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d122      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d11b      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0208 	mvn.w	r2, #8
 8001d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2204      	movs	r2, #4
 8001d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f89a 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001d60:	e005      	b.n	8001d6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f88c 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f89d 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b10      	cmp	r3, #16
 8001d80:	d122      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b10      	cmp	r3, #16
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0210 	mvn.w	r2, #16
 8001d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f870 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001db4:	e005      	b.n	8001dc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f862 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f873 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d10e      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d107      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0201 	mvn.w	r2, #1
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7fe fde0 	bl	80009b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	2b80      	cmp	r3, #128	; 0x80
 8001e00:	d10e      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0c:	2b80      	cmp	r3, #128	; 0x80
 8001e0e:	d107      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f902 	bl	8002024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2a:	2b40      	cmp	r3, #64	; 0x40
 8001e2c:	d10e      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e38:	2b40      	cmp	r3, #64	; 0x40
 8001e3a:	d107      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f838 	bl	8001ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	d10e      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	d107      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0220 	mvn.w	r2, #32
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f8cc 	bl	8002010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a40      	ldr	r2, [pc, #256]	; (8001fe4 <TIM_Base_SetConfig+0x114>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d013      	beq.n	8001f10 <TIM_Base_SetConfig+0x40>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eee:	d00f      	beq.n	8001f10 <TIM_Base_SetConfig+0x40>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3d      	ldr	r2, [pc, #244]	; (8001fe8 <TIM_Base_SetConfig+0x118>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00b      	beq.n	8001f10 <TIM_Base_SetConfig+0x40>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3c      	ldr	r2, [pc, #240]	; (8001fec <TIM_Base_SetConfig+0x11c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <TIM_Base_SetConfig+0x40>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3b      	ldr	r2, [pc, #236]	; (8001ff0 <TIM_Base_SetConfig+0x120>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d003      	beq.n	8001f10 <TIM_Base_SetConfig+0x40>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3a      	ldr	r2, [pc, #232]	; (8001ff4 <TIM_Base_SetConfig+0x124>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d108      	bne.n	8001f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a2f      	ldr	r2, [pc, #188]	; (8001fe4 <TIM_Base_SetConfig+0x114>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d02b      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f30:	d027      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a2c      	ldr	r2, [pc, #176]	; (8001fe8 <TIM_Base_SetConfig+0x118>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d023      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a2b      	ldr	r2, [pc, #172]	; (8001fec <TIM_Base_SetConfig+0x11c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01f      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a2a      	ldr	r2, [pc, #168]	; (8001ff0 <TIM_Base_SetConfig+0x120>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01b      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a29      	ldr	r2, [pc, #164]	; (8001ff4 <TIM_Base_SetConfig+0x124>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d017      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a28      	ldr	r2, [pc, #160]	; (8001ff8 <TIM_Base_SetConfig+0x128>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a27      	ldr	r2, [pc, #156]	; (8001ffc <TIM_Base_SetConfig+0x12c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00f      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a26      	ldr	r2, [pc, #152]	; (8002000 <TIM_Base_SetConfig+0x130>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00b      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a25      	ldr	r2, [pc, #148]	; (8002004 <TIM_Base_SetConfig+0x134>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d007      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a24      	ldr	r2, [pc, #144]	; (8002008 <TIM_Base_SetConfig+0x138>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d003      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a23      	ldr	r2, [pc, #140]	; (800200c <TIM_Base_SetConfig+0x13c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d108      	bne.n	8001f94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <TIM_Base_SetConfig+0x114>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d003      	beq.n	8001fc8 <TIM_Base_SetConfig+0xf8>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a0c      	ldr	r2, [pc, #48]	; (8001ff4 <TIM_Base_SetConfig+0x124>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d103      	bne.n	8001fd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	615a      	str	r2, [r3, #20]
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	40000400 	.word	0x40000400
 8001fec:	40000800 	.word	0x40000800
 8001ff0:	40000c00 	.word	0x40000c00
 8001ff4:	40010400 	.word	0x40010400
 8001ff8:	40014000 	.word	0x40014000
 8001ffc:	40014400 	.word	0x40014400
 8002000:	40014800 	.word	0x40014800
 8002004:	40001800 	.word	0x40001800
 8002008:	40001c00 	.word	0x40001c00
 800200c:	40002000 	.word	0x40002000

08002010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f103 0208 	add.w	r2, r3, #8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f103 0208 	add.w	r2, r3, #8
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f103 0208 	add.w	r2, r3, #8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002092:	b480      	push	{r7}
 8002094:	b085      	sub	sp, #20
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	601a      	str	r2, [r3, #0]
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020da:	b480      	push	{r7}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f0:	d103      	bne.n	80020fa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	e00c      	b.n	8002114 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3308      	adds	r3, #8
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	e002      	b.n	8002108 <vListInsert+0x2e>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	429a      	cmp	r2, r3
 8002112:	d2f6      	bcs.n	8002102 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	601a      	str	r2, [r3, #0]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6892      	ldr	r2, [r2, #8]
 8002162:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6852      	ldr	r2, [r2, #4]
 800216c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	429a      	cmp	r2, r3
 8002176:	d103      	bne.n	8002180 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	1e5a      	subs	r2, r3, #1
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80021aa:	2301      	movs	r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10a      	bne.n	80021ce <xQueueGenericReset+0x2e>
        __asm volatile
 80021b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021bc:	f383 8811 	msr	BASEPRI, r3
 80021c0:	f3bf 8f6f 	isb	sy
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	60fb      	str	r3, [r7, #12]
    }
 80021ca:	bf00      	nop
 80021cc:	e7fe      	b.n	80021cc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d05d      	beq.n	8002290 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d059      	beq.n	8002290 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e4:	2100      	movs	r1, #0
 80021e6:	fba3 2302 	umull	r2, r3, r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d000      	beq.n	80021f0 <xQueueGenericReset+0x50>
 80021ee:	2101      	movs	r1, #1
 80021f0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d14c      	bne.n	8002290 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80021f6:	f002 fb1d 	bl	8004834 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002202:	6939      	ldr	r1, [r7, #16]
 8002204:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	441a      	add	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	2200      	movs	r2, #0
 8002214:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002226:	3b01      	subs	r3, #1
 8002228:	6939      	ldr	r1, [r7, #16]
 800222a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	441a      	add	r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	22ff      	movs	r2, #255	; 0xff
 800223a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	22ff      	movs	r2, #255	; 0xff
 8002242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d114      	bne.n	8002276 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01a      	beq.n	800228a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	3310      	adds	r3, #16
 8002258:	4618      	mov	r0, r3
 800225a:	f001 f8d3 	bl	8003404 <xTaskRemoveFromEventList>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d012      	beq.n	800228a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002264:	4b15      	ldr	r3, [pc, #84]	; (80022bc <xQueueGenericReset+0x11c>)
 8002266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	f3bf 8f6f 	isb	sy
 8002274:	e009      	b.n	800228a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	3310      	adds	r3, #16
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fedc 	bl	8002038 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	3324      	adds	r3, #36	; 0x24
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fed7 	bl	8002038 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800228a:	f002 fb03 	bl	8004894 <vPortExitCritical>
 800228e:	e001      	b.n	8002294 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10a      	bne.n	80022b0 <xQueueGenericReset+0x110>
        __asm volatile
 800229a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229e:	f383 8811 	msr	BASEPRI, r3
 80022a2:	f3bf 8f6f 	isb	sy
 80022a6:	f3bf 8f4f 	dsb	sy
 80022aa:	60bb      	str	r3, [r7, #8]
    }
 80022ac:	bf00      	nop
 80022ae:	e7fe      	b.n	80022ae <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80022b0:	697b      	ldr	r3, [r7, #20]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	e000ed04 	.word	0xe000ed04

080022c0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	4613      	mov	r3, r2
 80022cc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d02e      	beq.n	8002336 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022d8:	2100      	movs	r1, #0
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	fba3 2302 	umull	r2, r3, r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d000      	beq.n	80022e8 <xQueueGenericCreate+0x28>
 80022e6:	2101      	movs	r1, #1
 80022e8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d123      	bne.n	8002336 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022f6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80022fa:	d81c      	bhi.n	8002336 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	3350      	adds	r3, #80	; 0x50
 800230a:	4618      	mov	r0, r3
 800230c:	f002 fbbe 	bl	8004a8c <pvPortMalloc>
 8002310:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01c      	beq.n	8002352 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	3350      	adds	r3, #80	; 0x50
 8002320:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002322:	79fa      	ldrb	r2, [r7, #7]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f814 	bl	800235c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002334:	e00d      	b.n	8002352 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10a      	bne.n	8002352 <xQueueGenericCreate+0x92>
        __asm volatile
 800233c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002340:	f383 8811 	msr	BASEPRI, r3
 8002344:	f3bf 8f6f 	isb	sy
 8002348:	f3bf 8f4f 	dsb	sy
 800234c:	613b      	str	r3, [r7, #16]
    }
 800234e:	bf00      	nop
 8002350:	e7fe      	b.n	8002350 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002352:	69fb      	ldr	r3, [r7, #28]
    }
 8002354:	4618      	mov	r0, r3
 8002356:	3720      	adds	r7, #32
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d103      	bne.n	8002378 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e002      	b.n	800237e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800238a:	2101      	movs	r1, #1
 800238c:	69b8      	ldr	r0, [r7, #24]
 800238e:	f7ff ff07 	bl	80021a0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	68f9      	ldr	r1, [r7, #12]
 80023a0:	2073      	movs	r0, #115	; 0x73
 80023a2:	f004 f85d 	bl	8006460 <SEGGER_SYSVIEW_RecordU32x3>
}
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80023b0:	b590      	push	{r4, r7, lr}
 80023b2:	b08f      	sub	sp, #60	; 0x3c
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80023bc:	2300      	movs	r3, #0
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10a      	bne.n	80023e0 <xQueueReceive+0x30>
        __asm volatile
 80023ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	623b      	str	r3, [r7, #32]
    }
 80023dc:	bf00      	nop
 80023de:	e7fe      	b.n	80023de <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d103      	bne.n	80023ee <xQueueReceive+0x3e>
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <xQueueReceive+0x42>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <xQueueReceive+0x44>
 80023f2:	2300      	movs	r3, #0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10a      	bne.n	800240e <xQueueReceive+0x5e>
        __asm volatile
 80023f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	61fb      	str	r3, [r7, #28]
    }
 800240a:	bf00      	nop
 800240c:	e7fe      	b.n	800240c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800240e:	f001 fa0b 	bl	8003828 <xTaskGetSchedulerState>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <xQueueReceive+0x6e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <xQueueReceive+0x72>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <xQueueReceive+0x74>
 8002422:	2300      	movs	r3, #0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10a      	bne.n	800243e <xQueueReceive+0x8e>
        __asm volatile
 8002428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242c:	f383 8811 	msr	BASEPRI, r3
 8002430:	f3bf 8f6f 	isb	sy
 8002434:	f3bf 8f4f 	dsb	sy
 8002438:	61bb      	str	r3, [r7, #24]
    }
 800243a:	bf00      	nop
 800243c:	e7fe      	b.n	800243c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800243e:	f002 f9f9 	bl	8004834 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002446:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	2b00      	cmp	r3, #0
 800244c:	d02f      	beq.n	80024ae <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002452:	f000 f8bd 	bl	80025d0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002458:	4618      	mov	r0, r3
 800245a:	f004 fe3b 	bl	80070d4 <SEGGER_SYSVIEW_ShrinkId>
 800245e:	4604      	mov	r4, r0
 8002460:	2000      	movs	r0, #0
 8002462:	f004 fe37 	bl	80070d4 <SEGGER_SYSVIEW_ShrinkId>
 8002466:	4602      	mov	r2, r0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2101      	movs	r1, #1
 800246c:	9100      	str	r1, [sp, #0]
 800246e:	4621      	mov	r1, r4
 8002470:	205c      	movs	r0, #92	; 0x5c
 8002472:	f004 f86b 	bl	800654c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	1e5a      	subs	r2, r3, #1
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00f      	beq.n	80024a6 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002488:	3310      	adds	r3, #16
 800248a:	4618      	mov	r0, r3
 800248c:	f000 ffba 	bl	8003404 <xTaskRemoveFromEventList>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002496:	4b4d      	ldr	r3, [pc, #308]	; (80025cc <xQueueReceive+0x21c>)
 8002498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	f3bf 8f4f 	dsb	sy
 80024a2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80024a6:	f002 f9f5 	bl	8004894 <vPortExitCritical>
                return pdPASS;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e08a      	b.n	80025c4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d113      	bne.n	80024dc <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024b4:	f002 f9ee 	bl	8004894 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80024b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ba:	4618      	mov	r0, r3
 80024bc:	f004 fe0a 	bl	80070d4 <SEGGER_SYSVIEW_ShrinkId>
 80024c0:	4604      	mov	r4, r0
 80024c2:	2000      	movs	r0, #0
 80024c4:	f004 fe06 	bl	80070d4 <SEGGER_SYSVIEW_ShrinkId>
 80024c8:	4602      	mov	r2, r0
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2101      	movs	r1, #1
 80024ce:	9100      	str	r1, [sp, #0]
 80024d0:	4621      	mov	r1, r4
 80024d2:	205c      	movs	r0, #92	; 0x5c
 80024d4:	f004 f83a 	bl	800654c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80024d8:	2300      	movs	r3, #0
 80024da:	e073      	b.n	80025c4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	4618      	mov	r0, r3
 80024e8:	f001 f864 	bl	80035b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024ec:	2301      	movs	r3, #1
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024f0:	f002 f9d0 	bl	8004894 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024f4:	f000 fc66 	bl	8002dc4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80024f8:	f002 f99c 	bl	8004834 <vPortEnterCritical>
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002502:	b25b      	sxtb	r3, r3
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d103      	bne.n	8002512 <xQueueReceive+0x162>
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002518:	b25b      	sxtb	r3, r3
 800251a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251e:	d103      	bne.n	8002528 <xQueueReceive+0x178>
 8002520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002528:	f002 f9b4 	bl	8004894 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800252c:	1d3a      	adds	r2, r7, #4
 800252e:	f107 0310 	add.w	r3, r7, #16
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f001 f853 	bl	80035e0 <xTaskCheckForTimeOut>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d124      	bne.n	800258a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002542:	f000 f8bd 	bl	80026c0 <prvIsQueueEmpty>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d018      	beq.n	800257e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	3324      	adds	r3, #36	; 0x24
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fee9 	bl	800332c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800255a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800255c:	f000 f85e 	bl	800261c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002560:	f000 fc3e 	bl	8002de0 <xTaskResumeAll>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	f47f af69 	bne.w	800243e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800256c:	4b17      	ldr	r3, [pc, #92]	; (80025cc <xQueueReceive+0x21c>)
 800256e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	e75f      	b.n	800243e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800257e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002580:	f000 f84c 	bl	800261c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002584:	f000 fc2c 	bl	8002de0 <xTaskResumeAll>
 8002588:	e759      	b.n	800243e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800258a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800258c:	f000 f846 	bl	800261c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002590:	f000 fc26 	bl	8002de0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002596:	f000 f893 	bl	80026c0 <prvIsQueueEmpty>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	f43f af4e 	beq.w	800243e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80025a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a4:	4618      	mov	r0, r3
 80025a6:	f004 fd95 	bl	80070d4 <SEGGER_SYSVIEW_ShrinkId>
 80025aa:	4604      	mov	r4, r0
 80025ac:	2000      	movs	r0, #0
 80025ae:	f004 fd91 	bl	80070d4 <SEGGER_SYSVIEW_ShrinkId>
 80025b2:	4602      	mov	r2, r0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2101      	movs	r1, #1
 80025b8:	9100      	str	r1, [sp, #0]
 80025ba:	4621      	mov	r1, r4
 80025bc:	205c      	movs	r0, #92	; 0x5c
 80025be:	f003 ffc5 	bl	800654c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80025c2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3734      	adds	r7, #52	; 0x34
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd90      	pop	{r4, r7, pc}
 80025cc:	e000ed04 	.word	0xe000ed04

080025d0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d018      	beq.n	8002614 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	441a      	add	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d303      	bcc.n	8002604 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68d9      	ldr	r1, [r3, #12]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	461a      	mov	r2, r3
 800260e:	6838      	ldr	r0, [r7, #0]
 8002610:	f004 feee 	bl	80073f0 <memcpy>
    }
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002624:	f002 f906 	bl	8004834 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800262e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002630:	e011      	b.n	8002656 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	2b00      	cmp	r3, #0
 8002638:	d012      	beq.n	8002660 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3324      	adds	r3, #36	; 0x24
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fee0 	bl	8003404 <xTaskRemoveFromEventList>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800264a:	f001 f82f 	bl	80036ac <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	3b01      	subs	r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265a:	2b00      	cmp	r3, #0
 800265c:	dce9      	bgt.n	8002632 <prvUnlockQueue+0x16>
 800265e:	e000      	b.n	8002662 <prvUnlockQueue+0x46>
                        break;
 8002660:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	22ff      	movs	r2, #255	; 0xff
 8002666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800266a:	f002 f913 	bl	8004894 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800266e:	f002 f8e1 	bl	8004834 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002678:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800267a:	e011      	b.n	80026a0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d012      	beq.n	80026aa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3310      	adds	r3, #16
 8002688:	4618      	mov	r0, r3
 800268a:	f000 febb 	bl	8003404 <xTaskRemoveFromEventList>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002694:	f001 f80a 	bl	80036ac <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002698:	7bbb      	ldrb	r3, [r7, #14]
 800269a:	3b01      	subs	r3, #1
 800269c:	b2db      	uxtb	r3, r3
 800269e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	dce9      	bgt.n	800267c <prvUnlockQueue+0x60>
 80026a8:	e000      	b.n	80026ac <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80026aa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	22ff      	movs	r2, #255	; 0xff
 80026b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80026b4:	f002 f8ee 	bl	8004894 <vPortExitCritical>
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026c8:	f002 f8b4 	bl	8004834 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80026d4:	2301      	movs	r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	e001      	b.n	80026de <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026de:	f002 f8d9 	bl	8004894 <vPortExitCritical>

    return xReturn;
 80026e2:	68fb      	ldr	r3, [r7, #12]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <vQueueAddToRegistry+0x26>
        __asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	60fb      	str	r3, [r7, #12]
    }
 800270e:	bf00      	nop
 8002710:	e7fe      	b.n	8002710 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d024      	beq.n	8002766 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	e01e      	b.n	8002760 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002722:	4a1c      	ldr	r2, [pc, #112]	; (8002794 <vQueueAddToRegistry+0xa8>)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	429a      	cmp	r2, r3
 8002730:	d105      	bne.n	800273e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4a17      	ldr	r2, [pc, #92]	; (8002794 <vQueueAddToRegistry+0xa8>)
 8002738:	4413      	add	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
                    break;
 800273c:	e013      	b.n	8002766 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <vQueueAddToRegistry+0x6e>
 8002744:	4a13      	ldr	r2, [pc, #76]	; (8002794 <vQueueAddToRegistry+0xa8>)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d104      	bne.n	800275a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4a0f      	ldr	r2, [pc, #60]	; (8002794 <vQueueAddToRegistry+0xa8>)
 8002756:	4413      	add	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	3301      	adds	r3, #1
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2b07      	cmp	r3, #7
 8002764:	d9dd      	bls.n	8002722 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00f      	beq.n	800278c <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4618      	mov	r0, r3
 800277c:	f004 fcaa 	bl	80070d4 <SEGGER_SYSVIEW_ShrinkId>
 8002780:	4601      	mov	r1, r0
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	2071      	movs	r0, #113	; 0x71
 8002788:	f003 fe10 	bl	80063ac <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 800278c:	bf00      	nop
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	200143cc 	.word	0x200143cc

08002798 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80027a8:	f002 f844 	bl	8004834 <vPortEnterCritical>
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027b2:	b25b      	sxtb	r3, r3
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d103      	bne.n	80027c2 <vQueueWaitForMessageRestricted+0x2a>
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c8:	b25b      	sxtb	r3, r3
 80027ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ce:	d103      	bne.n	80027d8 <vQueueWaitForMessageRestricted+0x40>
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027d8:	f002 f85c 	bl	8004894 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d106      	bne.n	80027f2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	3324      	adds	r3, #36	; 0x24
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fdc1 	bl	8003374 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80027f2:	6978      	ldr	r0, [r7, #20]
 80027f4:	f7ff ff12 	bl	800261c <prvUnlockQueue>
    }
 80027f8:	bf00      	nop
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002800:	b580      	push	{r7, lr}
 8002802:	b08c      	sub	sp, #48	; 0x30
 8002804:	af04      	add	r7, sp, #16
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	4613      	mov	r3, r2
 800280e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4618      	mov	r0, r3
 8002816:	f002 f939 	bl	8004a8c <pvPortMalloc>
 800281a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00e      	beq.n	8002840 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002822:	2058      	movs	r0, #88	; 0x58
 8002824:	f002 f932 	bl	8004a8c <pvPortMalloc>
 8002828:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
 8002836:	e005      	b.n	8002844 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002838:	6978      	ldr	r0, [r7, #20]
 800283a:	f002 fa07 	bl	8004c4c <vPortFree>
 800283e:	e001      	b.n	8002844 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d013      	beq.n	8002872 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800284a:	88fa      	ldrh	r2, [r7, #6]
 800284c:	2300      	movs	r3, #0
 800284e:	9303      	str	r3, [sp, #12]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	9302      	str	r3, [sp, #8]
 8002854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68b9      	ldr	r1, [r7, #8]
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f80e 	bl	8002882 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002866:	69f8      	ldr	r0, [r7, #28]
 8002868:	f000 f8b0 	bl	80029cc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800286c:	2301      	movs	r3, #1
 800286e:	61bb      	str	r3, [r7, #24]
 8002870:	e002      	b.n	8002878 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002872:	f04f 33ff 	mov.w	r3, #4294967295
 8002876:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002878:	69bb      	ldr	r3, [r7, #24]
    }
 800287a:	4618      	mov	r0, r3
 800287c:	3720      	adds	r7, #32
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b088      	sub	sp, #32
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002892:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	461a      	mov	r2, r3
 800289a:	21a5      	movs	r1, #165	; 0xa5
 800289c:	f004 fdb6 	bl	800740c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028aa:	3b01      	subs	r3, #1
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	f023 0307 	bic.w	r3, r3, #7
 80028b8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <prvInitialiseNewTask+0x58>
        __asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	617b      	str	r3, [r7, #20]
    }
 80028d6:	bf00      	nop
 80028d8:	e7fe      	b.n	80028d8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01f      	beq.n	8002920 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028e0:	2300      	movs	r3, #0
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	e012      	b.n	800290c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	4413      	add	r3, r2
 80028ec:	7819      	ldrb	r1, [r3, #0]
 80028ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	4413      	add	r3, r2
 80028f4:	3334      	adds	r3, #52	; 0x34
 80028f6:	460a      	mov	r2, r1
 80028f8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	4413      	add	r3, r2
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3301      	adds	r3, #1
 800290a:	61fb      	str	r3, [r7, #28]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	2b09      	cmp	r3, #9
 8002910:	d9e9      	bls.n	80028e6 <prvInitialiseNewTask+0x64>
 8002912:	e000      	b.n	8002916 <prvInitialiseNewTask+0x94>
            {
                break;
 8002914:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800291e:	e003      	b.n	8002928 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292a:	2b04      	cmp	r3, #4
 800292c:	d90a      	bls.n	8002944 <prvInitialiseNewTask+0xc2>
        __asm volatile
 800292e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002932:	f383 8811 	msr	BASEPRI, r3
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	613b      	str	r3, [r7, #16]
    }
 8002940:	bf00      	nop
 8002942:	e7fe      	b.n	8002942 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	2b04      	cmp	r3, #4
 8002948:	d901      	bls.n	800294e <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800294a:	2304      	movs	r3, #4
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800294e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002952:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002958:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295c:	2200      	movs	r2, #0
 800295e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002962:	3304      	adds	r3, #4
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fb87 	bl	8002078 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	3318      	adds	r3, #24
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fb82 	bl	8002078 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002978:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	f1c3 0205 	rsb	r2, r3, #5
 8002980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002982:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002988:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	3350      	adds	r3, #80	; 0x50
 800298e:	2204      	movs	r2, #4
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f004 fd3a 	bl	800740c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299a:	3354      	adds	r3, #84	; 0x54
 800299c:	2201      	movs	r2, #1
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f004 fd33 	bl	800740c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	68f9      	ldr	r1, [r7, #12]
 80029aa:	69b8      	ldr	r0, [r7, #24]
 80029ac:	f001 fd94 	bl	80044d8 <pxPortInitialiseStack>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029c2:	bf00      	nop
 80029c4:	3720      	adds	r7, #32
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80029cc:	b5b0      	push	{r4, r5, r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80029d4:	f001 ff2e 	bl	8004834 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80029d8:	4b4f      	ldr	r3, [pc, #316]	; (8002b18 <prvAddNewTaskToReadyList+0x14c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3301      	adds	r3, #1
 80029de:	4a4e      	ldr	r2, [pc, #312]	; (8002b18 <prvAddNewTaskToReadyList+0x14c>)
 80029e0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80029e2:	4b4e      	ldr	r3, [pc, #312]	; (8002b1c <prvAddNewTaskToReadyList+0x150>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80029ea:	4a4c      	ldr	r2, [pc, #304]	; (8002b1c <prvAddNewTaskToReadyList+0x150>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029f0:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <prvAddNewTaskToReadyList+0x14c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d110      	bne.n	8002a1a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80029f8:	f000 fe7c 	bl	80036f4 <prvInitialiseTaskLists>
 80029fc:	e00d      	b.n	8002a1a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80029fe:	4b48      	ldr	r3, [pc, #288]	; (8002b20 <prvAddNewTaskToReadyList+0x154>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a06:	4b45      	ldr	r3, [pc, #276]	; (8002b1c <prvAddNewTaskToReadyList+0x150>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d802      	bhi.n	8002a1a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002a14:	4a41      	ldr	r2, [pc, #260]	; (8002b1c <prvAddNewTaskToReadyList+0x150>)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002a1a:	4b42      	ldr	r3, [pc, #264]	; (8002b24 <prvAddNewTaskToReadyList+0x158>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	4a40      	ldr	r2, [pc, #256]	; (8002b24 <prvAddNewTaskToReadyList+0x158>)
 8002a22:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a24:	4b3f      	ldr	r3, [pc, #252]	; (8002b24 <prvAddNewTaskToReadyList+0x158>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d016      	beq.n	8002a60 <prvAddNewTaskToReadyList+0x94>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f004 fa27 	bl	8006e88 <SEGGER_SYSVIEW_OnTaskCreate>
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	461d      	mov	r5, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	461c      	mov	r4, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	1ae3      	subs	r3, r4, r3
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	462b      	mov	r3, r5
 8002a5c:	f002 fabc 	bl	8004fd8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f004 fa94 	bl	8006f90 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	4b2d      	ldr	r3, [pc, #180]	; (8002b28 <prvAddNewTaskToReadyList+0x15c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	4a2c      	ldr	r2, [pc, #176]	; (8002b28 <prvAddNewTaskToReadyList+0x15c>)
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a7e:	492b      	ldr	r1, [pc, #172]	; (8002b2c <prvAddNewTaskToReadyList+0x160>)
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	3204      	adds	r2, #4
 8002aa6:	605a      	str	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	1d1a      	adds	r2, r3, #4
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4a1b      	ldr	r2, [pc, #108]	; (8002b2c <prvAddNewTaskToReadyList+0x160>)
 8002abe:	441a      	add	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	615a      	str	r2, [r3, #20]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac8:	4918      	ldr	r1, [pc, #96]	; (8002b2c <prvAddNewTaskToReadyList+0x160>)
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	1c59      	adds	r1, r3, #1
 8002ad8:	4814      	ldr	r0, [pc, #80]	; (8002b2c <prvAddNewTaskToReadyList+0x160>)
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4403      	add	r3, r0
 8002ae4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002ae6:	f001 fed5 	bl	8004894 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <prvAddNewTaskToReadyList+0x154>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00e      	beq.n	8002b10 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <prvAddNewTaskToReadyList+0x150>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d207      	bcs.n	8002b10 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <prvAddNewTaskToReadyList+0x164>)
 8002b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bdb0      	pop	{r4, r5, r7, pc}
 8002b18:	20000108 	.word	0x20000108
 8002b1c:	20000030 	.word	0x20000030
 8002b20:	20000114 	.word	0x20000114
 8002b24:	20000124 	.word	0x20000124
 8002b28:	20000110 	.word	0x20000110
 8002b2c:	20000034 	.word	0x20000034
 8002b30:	e000ed04 	.word	0xe000ed04

08002b34 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002b3c:	f001 fe7a 	bl	8004834 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d102      	bne.n	8002b4c <vTaskDelete+0x18>
 8002b46:	4b48      	ldr	r3, [pc, #288]	; (8002c68 <vTaskDelete+0x134>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	e000      	b.n	8002b4e <vTaskDelete+0x1a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3304      	adds	r3, #4
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff faf9 	bl	800214c <uxListRemove>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d115      	bne.n	8002b8c <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b64:	4941      	ldr	r1, [pc, #260]	; (8002c6c <vTaskDelete+0x138>)
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10a      	bne.n	8002b8c <vTaskDelete+0x58>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43da      	mvns	r2, r3
 8002b82:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <vTaskDelete+0x13c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4013      	ands	r3, r2
 8002b88:	4a39      	ldr	r2, [pc, #228]	; (8002c70 <vTaskDelete+0x13c>)
 8002b8a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d004      	beq.n	8002b9e <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3318      	adds	r3, #24
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fad7 	bl	800214c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002b9e:	4b35      	ldr	r3, [pc, #212]	; (8002c74 <vTaskDelete+0x140>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	4a33      	ldr	r2, [pc, #204]	; (8002c74 <vTaskDelete+0x140>)
 8002ba6:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002ba8:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <vTaskDelete+0x134>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d118      	bne.n	8002be4 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	482f      	ldr	r0, [pc, #188]	; (8002c78 <vTaskDelete+0x144>)
 8002bba:	f7ff fa6a 	bl	8002092 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002bbe:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <vTaskDelete+0x148>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	4a2d      	ldr	r2, [pc, #180]	; (8002c7c <vTaskDelete+0x148>)
 8002bc6:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f004 fa82 	bl	80070d4 <SEGGER_SYSVIEW_ShrinkId>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	2022      	movs	r0, #34	; 0x22
 8002bd6:	f003 fbad 	bl	8006334 <SEGGER_SYSVIEW_RecordU32>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f002 fa63 	bl	80050a8 <SYSVIEW_DeleteTask>
 8002be2:	e013      	b.n	8002c0c <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002be4:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <vTaskDelete+0x14c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	4a25      	ldr	r2, [pc, #148]	; (8002c80 <vTaskDelete+0x14c>)
 8002bec:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f004 fa6f 	bl	80070d4 <SEGGER_SYSVIEW_ShrinkId>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	2022      	movs	r0, #34	; 0x22
 8002bfc:	f003 fb9a 	bl	8006334 <SEGGER_SYSVIEW_RecordU32>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f002 fa50 	bl	80050a8 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002c08:	f000 fdf2 	bl	80037f0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002c0c:	f001 fe42 	bl	8004894 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002c10:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <vTaskDelete+0x134>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d002      	beq.n	8002c20 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fdd8 	bl	80037d0 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002c20:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <vTaskDelete+0x150>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01b      	beq.n	8002c60 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <vTaskDelete+0x134>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d116      	bne.n	8002c60 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <vTaskDelete+0x154>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <vTaskDelete+0x11c>
        __asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	60bb      	str	r3, [r7, #8]
    }
 8002c4c:	bf00      	nop
 8002c4e:	e7fe      	b.n	8002c4e <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002c50:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <vTaskDelete+0x158>)
 8002c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000030 	.word	0x20000030
 8002c6c:	20000034 	.word	0x20000034
 8002c70:	20000110 	.word	0x20000110
 8002c74:	20000124 	.word	0x20000124
 8002c78:	200000dc 	.word	0x200000dc
 8002c7c:	200000f0 	.word	0x200000f0
 8002c80:	20000108 	.word	0x20000108
 8002c84:	20000114 	.word	0x20000114
 8002c88:	20000130 	.word	0x20000130
 8002c8c:	e000ed04 	.word	0xe000ed04

08002c90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d01b      	beq.n	8002cda <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <vTaskDelay+0x68>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <vTaskDelay+0x30>
        __asm volatile
 8002caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	60bb      	str	r3, [r7, #8]
    }
 8002cbc:	bf00      	nop
 8002cbe:	e7fe      	b.n	8002cbe <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002cc0:	f000 f880 	bl	8002dc4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	2023      	movs	r0, #35	; 0x23
 8002cc8:	f003 fb34 	bl	8006334 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ccc:	2100      	movs	r1, #0
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f001 f8f2 	bl	8003eb8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002cd4:	f000 f884 	bl	8002de0 <xTaskResumeAll>
 8002cd8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d107      	bne.n	8002cf0 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <vTaskDelay+0x6c>)
 8002ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000130 	.word	0x20000130
 8002cfc:	e000ed04 	.word	0xe000ed04

08002d00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002d06:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <vTaskStartScheduler+0xa4>)
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2282      	movs	r2, #130	; 0x82
 8002d12:	4925      	ldr	r1, [pc, #148]	; (8002da8 <vTaskStartScheduler+0xa8>)
 8002d14:	4825      	ldr	r0, [pc, #148]	; (8002dac <vTaskStartScheduler+0xac>)
 8002d16:	f7ff fd73 	bl	8002800 <xTaskCreate>
 8002d1a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d102      	bne.n	8002d28 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002d22:	f001 f955 	bl	8003fd0 <xTimerCreateTimerTask>
 8002d26:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d124      	bne.n	8002d78 <vTaskStartScheduler+0x78>
        __asm volatile
 8002d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	60bb      	str	r3, [r7, #8]
    }
 8002d40:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d42:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <vTaskStartScheduler+0xb0>)
 8002d44:	f04f 32ff 	mov.w	r2, #4294967295
 8002d48:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d4a:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <vTaskStartScheduler+0xb4>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d50:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <vTaskStartScheduler+0xb8>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002d56:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <vTaskStartScheduler+0xbc>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <vTaskStartScheduler+0xa4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d102      	bne.n	8002d68 <vTaskStartScheduler+0x68>
 8002d62:	f004 f875 	bl	8006e50 <SEGGER_SYSVIEW_OnIdle>
 8002d66:	e004      	b.n	8002d72 <vTaskStartScheduler+0x72>
 8002d68:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <vTaskStartScheduler+0xbc>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f004 f8cd 	bl	8006f0c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002d72:	f001 fc3f 	bl	80045f4 <xPortStartScheduler>
 8002d76:	e00e      	b.n	8002d96 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7e:	d10a      	bne.n	8002d96 <vTaskStartScheduler+0x96>
        __asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	607b      	str	r3, [r7, #4]
    }
 8002d92:	bf00      	nop
 8002d94:	e7fe      	b.n	8002d94 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <vTaskStartScheduler+0xc0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	2000012c 	.word	0x2000012c
 8002da8:	080074a8 	.word	0x080074a8
 8002dac:	080036c5 	.word	0x080036c5
 8002db0:	20000128 	.word	0x20000128
 8002db4:	20000114 	.word	0x20000114
 8002db8:	2000010c 	.word	0x2000010c
 8002dbc:	20000030 	.word	0x20000030
 8002dc0:	2000000c 	.word	0x2000000c

08002dc4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002dc8:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <vTaskSuspendAll+0x18>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	4a03      	ldr	r2, [pc, #12]	; (8002ddc <vTaskSuspendAll+0x18>)
 8002dd0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002dd2:	bf00      	nop
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	20000130 	.word	0x20000130

08002de0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002dee:	4b73      	ldr	r3, [pc, #460]	; (8002fbc <xTaskResumeAll+0x1dc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <xTaskResumeAll+0x2c>
        __asm volatile
 8002df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	607b      	str	r3, [r7, #4]
    }
 8002e08:	bf00      	nop
 8002e0a:	e7fe      	b.n	8002e0a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e0c:	f001 fd12 	bl	8004834 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e10:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <xTaskResumeAll+0x1dc>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	4a69      	ldr	r2, [pc, #420]	; (8002fbc <xTaskResumeAll+0x1dc>)
 8002e18:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e1a:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <xTaskResumeAll+0x1dc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f040 80c4 	bne.w	8002fac <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e24:	4b66      	ldr	r3, [pc, #408]	; (8002fc0 <xTaskResumeAll+0x1e0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80bf 	beq.w	8002fac <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e2e:	e08e      	b.n	8002f4e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e30:	4b64      	ldr	r3, [pc, #400]	; (8002fc4 <xTaskResumeAll+0x1e4>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	6a12      	ldr	r2, [r2, #32]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	69d2      	ldr	r2, [r2, #28]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3318      	adds	r3, #24
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d103      	bne.n	8002e66 <xTaskResumeAll+0x86>
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	6a1a      	ldr	r2, [r3, #32]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	1e5a      	subs	r2, r3, #1
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	68d2      	ldr	r2, [r2, #12]
 8002e84:	609a      	str	r2, [r3, #8]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	6892      	ldr	r2, [r2, #8]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	3304      	adds	r3, #4
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d103      	bne.n	8002ea4 <xTaskResumeAll+0xc4>
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	615a      	str	r2, [r3, #20]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	1e5a      	subs	r2, r3, #1
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f004 f86a 	bl	8006f90 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	4b40      	ldr	r3, [pc, #256]	; (8002fc8 <xTaskResumeAll+0x1e8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	4a3f      	ldr	r2, [pc, #252]	; (8002fc8 <xTaskResumeAll+0x1e8>)
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed2:	493e      	ldr	r1, [pc, #248]	; (8002fcc <xTaskResumeAll+0x1ec>)
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3304      	adds	r3, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	3204      	adds	r2, #4
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	1d1a      	adds	r2, r3, #4
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4a2e      	ldr	r2, [pc, #184]	; (8002fcc <xTaskResumeAll+0x1ec>)
 8002f12:	441a      	add	r2, r3
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	615a      	str	r2, [r3, #20]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1c:	492b      	ldr	r1, [pc, #172]	; (8002fcc <xTaskResumeAll+0x1ec>)
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	1c59      	adds	r1, r3, #1
 8002f2c:	4827      	ldr	r0, [pc, #156]	; (8002fcc <xTaskResumeAll+0x1ec>)
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4403      	add	r3, r0
 8002f38:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <xTaskResumeAll+0x1f0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d302      	bcc.n	8002f4e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002f48:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <xTaskResumeAll+0x1f4>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f4e:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <xTaskResumeAll+0x1e4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f47f af6c 	bne.w	8002e30 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002f5e:	f000 fc47 	bl	80037f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f62:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <xTaskResumeAll+0x1f8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d010      	beq.n	8002f90 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002f6e:	f000 f859 	bl	8003024 <xTaskIncrementTick>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002f78:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <xTaskResumeAll+0x1f4>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f1      	bne.n	8002f6e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002f8a:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <xTaskResumeAll+0x1f8>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002f90:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <xTaskResumeAll+0x1f4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <xTaskResumeAll+0x1fc>)
 8002f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002fac:	f001 fc72 	bl	8004894 <vPortExitCritical>

    return xAlreadyYielded;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000130 	.word	0x20000130
 8002fc0:	20000108 	.word	0x20000108
 8002fc4:	200000c8 	.word	0x200000c8
 8002fc8:	20000110 	.word	0x20000110
 8002fcc:	20000034 	.word	0x20000034
 8002fd0:	20000030 	.word	0x20000030
 8002fd4:	2000011c 	.word	0x2000011c
 8002fd8:	20000118 	.word	0x20000118
 8002fdc:	e000ed04 	.word	0xe000ed04

08002fe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <xTaskGetTickCount+0x1c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002fec:	687b      	ldr	r3, [r7, #4]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	2000010c 	.word	0x2000010c

08003000 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003006:	f001 fd01 	bl	8004a0c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800300a:	2300      	movs	r3, #0
 800300c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800300e:	4b04      	ldr	r3, [pc, #16]	; (8003020 <xTaskGetTickCountFromISR+0x20>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003014:	683b      	ldr	r3, [r7, #0]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	2000010c 	.word	0x2000010c

08003024 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	; 0x28
 8003028:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800302a:	2300      	movs	r3, #0
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800302e:	4b7f      	ldr	r3, [pc, #508]	; (800322c <xTaskIncrementTick+0x208>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	f040 80f0 	bne.w	8003218 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003038:	4b7d      	ldr	r3, [pc, #500]	; (8003230 <xTaskIncrementTick+0x20c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003040:	4a7b      	ldr	r2, [pc, #492]	; (8003230 <xTaskIncrementTick+0x20c>)
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d120      	bne.n	800308e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800304c:	4b79      	ldr	r3, [pc, #484]	; (8003234 <xTaskIncrementTick+0x210>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <xTaskIncrementTick+0x48>
        __asm volatile
 8003056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305a:	f383 8811 	msr	BASEPRI, r3
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	607b      	str	r3, [r7, #4]
    }
 8003068:	bf00      	nop
 800306a:	e7fe      	b.n	800306a <xTaskIncrementTick+0x46>
 800306c:	4b71      	ldr	r3, [pc, #452]	; (8003234 <xTaskIncrementTick+0x210>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	4b71      	ldr	r3, [pc, #452]	; (8003238 <xTaskIncrementTick+0x214>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6f      	ldr	r2, [pc, #444]	; (8003234 <xTaskIncrementTick+0x210>)
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4a6f      	ldr	r2, [pc, #444]	; (8003238 <xTaskIncrementTick+0x214>)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b6e      	ldr	r3, [pc, #440]	; (800323c <xTaskIncrementTick+0x218>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3301      	adds	r3, #1
 8003086:	4a6d      	ldr	r2, [pc, #436]	; (800323c <xTaskIncrementTick+0x218>)
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	f000 fbb1 	bl	80037f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800308e:	4b6c      	ldr	r3, [pc, #432]	; (8003240 <xTaskIncrementTick+0x21c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6a3a      	ldr	r2, [r7, #32]
 8003094:	429a      	cmp	r2, r3
 8003096:	f0c0 80aa 	bcc.w	80031ee <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800309a:	4b66      	ldr	r3, [pc, #408]	; (8003234 <xTaskIncrementTick+0x210>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d104      	bne.n	80030ae <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030a4:	4b66      	ldr	r3, [pc, #408]	; (8003240 <xTaskIncrementTick+0x21c>)
 80030a6:	f04f 32ff 	mov.w	r2, #4294967295
 80030aa:	601a      	str	r2, [r3, #0]
                    break;
 80030ac:	e09f      	b.n	80031ee <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ae:	4b61      	ldr	r3, [pc, #388]	; (8003234 <xTaskIncrementTick+0x210>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80030be:	6a3a      	ldr	r2, [r7, #32]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d203      	bcs.n	80030ce <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80030c6:	4a5e      	ldr	r2, [pc, #376]	; (8003240 <xTaskIncrementTick+0x21c>)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80030cc:	e08f      	b.n	80031ee <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	68d2      	ldr	r2, [r2, #12]
 80030dc:	609a      	str	r2, [r3, #8]
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	6892      	ldr	r2, [r2, #8]
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	3304      	adds	r3, #4
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d103      	bne.n	80030fc <xTaskIncrementTick+0xd8>
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	605a      	str	r2, [r3, #4]
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	2200      	movs	r2, #0
 8003100:	615a      	str	r2, [r3, #20]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	1e5a      	subs	r2, r3, #1
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01e      	beq.n	8003152 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	6a12      	ldr	r2, [r2, #32]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	69d2      	ldr	r2, [r2, #28]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	3318      	adds	r3, #24
 8003136:	429a      	cmp	r2, r3
 8003138:	d103      	bne.n	8003142 <xTaskIncrementTick+0x11e>
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	6a1a      	ldr	r2, [r3, #32]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2200      	movs	r2, #0
 8003146:	629a      	str	r2, [r3, #40]	; 0x28
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	1e5a      	subs	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	4618      	mov	r0, r3
 8003156:	f003 ff1b 	bl	8006f90 <SEGGER_SYSVIEW_OnTaskStartReady>
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	2201      	movs	r2, #1
 8003160:	409a      	lsls	r2, r3
 8003162:	4b38      	ldr	r3, [pc, #224]	; (8003244 <xTaskIncrementTick+0x220>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4313      	orrs	r3, r2
 8003168:	4a36      	ldr	r2, [pc, #216]	; (8003244 <xTaskIncrementTick+0x220>)
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003170:	4935      	ldr	r1, [pc, #212]	; (8003248 <xTaskIncrementTick+0x224>)
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	3304      	adds	r3, #4
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	60da      	str	r2, [r3, #12]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	3204      	adds	r2, #4
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	1d1a      	adds	r2, r3, #4
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	609a      	str	r2, [r3, #8]
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4a26      	ldr	r2, [pc, #152]	; (8003248 <xTaskIncrementTick+0x224>)
 80031b0:	441a      	add	r2, r3
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	615a      	str	r2, [r3, #20]
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ba:	4923      	ldr	r1, [pc, #140]	; (8003248 <xTaskIncrementTick+0x224>)
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	1c59      	adds	r1, r3, #1
 80031ca:	481f      	ldr	r0, [pc, #124]	; (8003248 <xTaskIncrementTick+0x224>)
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4403      	add	r3, r0
 80031d6:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <xTaskIncrementTick+0x228>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	429a      	cmp	r2, r3
 80031e4:	f4ff af59 	bcc.w	800309a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80031e8:	2301      	movs	r3, #1
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031ec:	e755      	b.n	800309a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031ee:	4b17      	ldr	r3, [pc, #92]	; (800324c <xTaskIncrementTick+0x228>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f4:	4914      	ldr	r1, [pc, #80]	; (8003248 <xTaskIncrementTick+0x224>)
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d901      	bls.n	800320a <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8003206:	2301      	movs	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800320a:	4b11      	ldr	r3, [pc, #68]	; (8003250 <xTaskIncrementTick+0x22c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8003212:	2301      	movs	r3, #1
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
 8003216:	e004      	b.n	8003222 <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003218:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <xTaskIncrementTick+0x230>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3301      	adds	r3, #1
 800321e:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <xTaskIncrementTick+0x230>)
 8003220:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003224:	4618      	mov	r0, r3
 8003226:	3728      	adds	r7, #40	; 0x28
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000130 	.word	0x20000130
 8003230:	2000010c 	.word	0x2000010c
 8003234:	200000c0 	.word	0x200000c0
 8003238:	200000c4 	.word	0x200000c4
 800323c:	20000120 	.word	0x20000120
 8003240:	20000128 	.word	0x20000128
 8003244:	20000110 	.word	0x20000110
 8003248:	20000034 	.word	0x20000034
 800324c:	20000030 	.word	0x20000030
 8003250:	2000011c 	.word	0x2000011c
 8003254:	20000118 	.word	0x20000118

08003258 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800325e:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <vTaskSwitchContext+0xbc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003266:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <vTaskSwitchContext+0xc0>)
 8003268:	2201      	movs	r2, #1
 800326a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800326c:	e04d      	b.n	800330a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800326e:	4b2a      	ldr	r3, [pc, #168]	; (8003318 <vTaskSwitchContext+0xc0>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003274:	4b29      	ldr	r3, [pc, #164]	; (800331c <vTaskSwitchContext+0xc4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003282:	7afb      	ldrb	r3, [r7, #11]
 8003284:	f1c3 031f 	rsb	r3, r3, #31
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	4925      	ldr	r1, [pc, #148]	; (8003320 <vTaskSwitchContext+0xc8>)
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10a      	bne.n	80032b4 <vTaskSwitchContext+0x5c>
        __asm volatile
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	607b      	str	r3, [r7, #4]
    }
 80032b0:	bf00      	nop
 80032b2:	e7fe      	b.n	80032b2 <vTaskSwitchContext+0x5a>
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4a18      	ldr	r2, [pc, #96]	; (8003320 <vTaskSwitchContext+0xc8>)
 80032c0:	4413      	add	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	3308      	adds	r3, #8
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d104      	bne.n	80032e4 <vTaskSwitchContext+0x8c>
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	605a      	str	r2, [r3, #4]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	4a0e      	ldr	r2, [pc, #56]	; (8003324 <vTaskSwitchContext+0xcc>)
 80032ec:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <vTaskSwitchContext+0xcc>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <vTaskSwitchContext+0xd0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d102      	bne.n	8003300 <vTaskSwitchContext+0xa8>
 80032fa:	f003 fda9 	bl	8006e50 <SEGGER_SYSVIEW_OnIdle>
}
 80032fe:	e004      	b.n	800330a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003300:	4b08      	ldr	r3, [pc, #32]	; (8003324 <vTaskSwitchContext+0xcc>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f003 fe01 	bl	8006f0c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800330a:	bf00      	nop
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000130 	.word	0x20000130
 8003318:	2000011c 	.word	0x2000011c
 800331c:	20000110 	.word	0x20000110
 8003320:	20000034 	.word	0x20000034
 8003324:	20000030 	.word	0x20000030
 8003328:	2000012c 	.word	0x2000012c

0800332c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800333c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003340:	f383 8811 	msr	BASEPRI, r3
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	60fb      	str	r3, [r7, #12]
    }
 800334e:	bf00      	nop
 8003350:	e7fe      	b.n	8003350 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003352:	4b07      	ldr	r3, [pc, #28]	; (8003370 <vTaskPlaceOnEventList+0x44>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3318      	adds	r3, #24
 8003358:	4619      	mov	r1, r3
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fe febd 	bl	80020da <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003360:	2101      	movs	r1, #1
 8003362:	6838      	ldr	r0, [r7, #0]
 8003364:	f000 fda8 	bl	8003eb8 <prvAddCurrentTaskToDelayedList>
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20000030 	.word	0x20000030

08003374 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	613b      	str	r3, [r7, #16]
    }
 8003398:	bf00      	nop
 800339a:	e7fe      	b.n	800339a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	4b17      	ldr	r3, [pc, #92]	; (8003400 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	61da      	str	r2, [r3, #28]
 80033aa:	4b15      	ldr	r3, [pc, #84]	; (8003400 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	6892      	ldr	r2, [r2, #8]
 80033b2:	621a      	str	r2, [r3, #32]
 80033b4:	4b12      	ldr	r3, [pc, #72]	; (8003400 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	3218      	adds	r2, #24
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f103 0218 	add.w	r2, r3, #24
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	629a      	str	r2, [r3, #40]	; 0x28
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295
 80033e8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80033ea:	2024      	movs	r0, #36	; 0x24
 80033ec:	f002 ff84 	bl	80062f8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	68b8      	ldr	r0, [r7, #8]
 80033f4:	f000 fd60 	bl	8003eb8 <prvAddCurrentTaskToDelayedList>
    }
 80033f8:	bf00      	nop
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000030 	.word	0x20000030

08003404 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08a      	sub	sp, #40	; 0x28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10a      	bne.n	8003430 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	60fb      	str	r3, [r7, #12]
    }
 800342c:	bf00      	nop
 800342e:	e7fe      	b.n	800342e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	6a3a      	ldr	r2, [r7, #32]
 800343c:	6a12      	ldr	r2, [r2, #32]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	6a3a      	ldr	r2, [r7, #32]
 8003446:	69d2      	ldr	r2, [r2, #28]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	3318      	adds	r3, #24
 8003452:	429a      	cmp	r2, r3
 8003454:	d103      	bne.n	800345e <xTaskRemoveFromEventList+0x5a>
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	6a1a      	ldr	r2, [r3, #32]
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	2200      	movs	r2, #0
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	1e5a      	subs	r2, r3, #1
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800346e:	4b4b      	ldr	r3, [pc, #300]	; (800359c <xTaskRemoveFromEventList+0x198>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d162      	bne.n	800353c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	6a3a      	ldr	r2, [r7, #32]
 8003482:	68d2      	ldr	r2, [r2, #12]
 8003484:	609a      	str	r2, [r3, #8]
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	6a3a      	ldr	r2, [r7, #32]
 800348c:	6892      	ldr	r2, [r2, #8]
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	3304      	adds	r3, #4
 8003498:	429a      	cmp	r2, r3
 800349a:	d103      	bne.n	80034a4 <xTaskRemoveFromEventList+0xa0>
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	2200      	movs	r2, #0
 80034a8:	615a      	str	r2, [r3, #20]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	1e5a      	subs	r2, r3, #1
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f003 fd6a 	bl	8006f90 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	2201      	movs	r2, #1
 80034c2:	409a      	lsls	r2, r3
 80034c4:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <xTaskRemoveFromEventList+0x19c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	4a35      	ldr	r2, [pc, #212]	; (80035a0 <xTaskRemoveFromEventList+0x19c>)
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d2:	4934      	ldr	r1, [pc, #208]	; (80035a4 <xTaskRemoveFromEventList+0x1a0>)
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3304      	adds	r3, #4
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	6a3a      	ldr	r2, [r7, #32]
 80034f8:	3204      	adds	r2, #4
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	1d1a      	adds	r2, r3, #4
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4a24      	ldr	r2, [pc, #144]	; (80035a4 <xTaskRemoveFromEventList+0x1a0>)
 8003512:	441a      	add	r2, r3
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	615a      	str	r2, [r3, #20]
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351c:	4921      	ldr	r1, [pc, #132]	; (80035a4 <xTaskRemoveFromEventList+0x1a0>)
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	1c59      	adds	r1, r3, #1
 800352c:	481d      	ldr	r0, [pc, #116]	; (80035a4 <xTaskRemoveFromEventList+0x1a0>)
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4403      	add	r3, r0
 8003538:	6019      	str	r1, [r3, #0]
 800353a:	e01b      	b.n	8003574 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800353c:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <xTaskRemoveFromEventList+0x1a4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	61da      	str	r2, [r3, #28]
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	621a      	str	r2, [r3, #32]
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	6a3a      	ldr	r2, [r7, #32]
 8003556:	3218      	adds	r2, #24
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	f103 0218 	add.w	r2, r3, #24
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	4a10      	ldr	r2, [pc, #64]	; (80035a8 <xTaskRemoveFromEventList+0x1a4>)
 8003568:	629a      	str	r2, [r3, #40]	; 0x28
 800356a:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <xTaskRemoveFromEventList+0x1a4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3301      	adds	r3, #1
 8003570:	4a0d      	ldr	r2, [pc, #52]	; (80035a8 <xTaskRemoveFromEventList+0x1a4>)
 8003572:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <xTaskRemoveFromEventList+0x1a8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	429a      	cmp	r2, r3
 8003580:	d905      	bls.n	800358e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003582:	2301      	movs	r3, #1
 8003584:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003586:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <xTaskRemoveFromEventList+0x1ac>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	e001      	b.n	8003592 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800358e:	2300      	movs	r3, #0
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003594:	4618      	mov	r0, r3
 8003596:	3728      	adds	r7, #40	; 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20000130 	.word	0x20000130
 80035a0:	20000110 	.word	0x20000110
 80035a4:	20000034 	.word	0x20000034
 80035a8:	200000c8 	.word	0x200000c8
 80035ac:	20000030 	.word	0x20000030
 80035b0:	2000011c 	.word	0x2000011c

080035b4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <vTaskInternalSetTimeOutState+0x24>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <vTaskInternalSetTimeOutState+0x28>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	605a      	str	r2, [r3, #4]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	20000120 	.word	0x20000120
 80035dc:	2000010c 	.word	0x2000010c

080035e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10a      	bne.n	8003606 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	613b      	str	r3, [r7, #16]
    }
 8003602:	bf00      	nop
 8003604:	e7fe      	b.n	8003604 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	60fb      	str	r3, [r7, #12]
    }
 800361e:	bf00      	nop
 8003620:	e7fe      	b.n	8003620 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003622:	f001 f907 	bl	8004834 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003626:	4b1f      	ldr	r3, [pc, #124]	; (80036a4 <xTaskCheckForTimeOut+0xc4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363e:	d102      	bne.n	8003646 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003640:	2300      	movs	r3, #0
 8003642:	61fb      	str	r3, [r7, #28]
 8003644:	e026      	b.n	8003694 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b17      	ldr	r3, [pc, #92]	; (80036a8 <xTaskCheckForTimeOut+0xc8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d00a      	beq.n	8003668 <xTaskCheckForTimeOut+0x88>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	429a      	cmp	r2, r3
 800365a:	d305      	bcc.n	8003668 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800365c:	2301      	movs	r3, #1
 800365e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e015      	b.n	8003694 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	429a      	cmp	r2, r3
 8003670:	d20b      	bcs.n	800368a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	1ad2      	subs	r2, r2, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff ff98 	bl	80035b4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	e004      	b.n	8003694 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003690:	2301      	movs	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003694:	f001 f8fe 	bl	8004894 <vPortExitCritical>

    return xReturn;
 8003698:	69fb      	ldr	r3, [r7, #28]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3720      	adds	r7, #32
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	2000010c 	.word	0x2000010c
 80036a8:	20000120 	.word	0x20000120

080036ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80036b0:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <vTaskMissedYield+0x14>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
}
 80036b6:	bf00      	nop
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	2000011c 	.word	0x2000011c

080036c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80036cc:	f000 f852 	bl	8003774 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036d0:	4b06      	ldr	r3, [pc, #24]	; (80036ec <prvIdleTask+0x28>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d9f9      	bls.n	80036cc <prvIdleTask+0x8>
                {
                    taskYIELD();
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <prvIdleTask+0x2c>)
 80036da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80036e8:	e7f0      	b.n	80036cc <prvIdleTask+0x8>
 80036ea:	bf00      	nop
 80036ec:	20000034 	.word	0x20000034
 80036f0:	e000ed04 	.word	0xe000ed04

080036f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036fa:	2300      	movs	r3, #0
 80036fc:	607b      	str	r3, [r7, #4]
 80036fe:	e00c      	b.n	800371a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4a12      	ldr	r2, [pc, #72]	; (8003754 <prvInitialiseTaskLists+0x60>)
 800370c:	4413      	add	r3, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fc92 	bl	8002038 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3301      	adds	r3, #1
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d9ef      	bls.n	8003700 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003720:	480d      	ldr	r0, [pc, #52]	; (8003758 <prvInitialiseTaskLists+0x64>)
 8003722:	f7fe fc89 	bl	8002038 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003726:	480d      	ldr	r0, [pc, #52]	; (800375c <prvInitialiseTaskLists+0x68>)
 8003728:	f7fe fc86 	bl	8002038 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800372c:	480c      	ldr	r0, [pc, #48]	; (8003760 <prvInitialiseTaskLists+0x6c>)
 800372e:	f7fe fc83 	bl	8002038 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003732:	480c      	ldr	r0, [pc, #48]	; (8003764 <prvInitialiseTaskLists+0x70>)
 8003734:	f7fe fc80 	bl	8002038 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003738:	480b      	ldr	r0, [pc, #44]	; (8003768 <prvInitialiseTaskLists+0x74>)
 800373a:	f7fe fc7d 	bl	8002038 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <prvInitialiseTaskLists+0x78>)
 8003740:	4a05      	ldr	r2, [pc, #20]	; (8003758 <prvInitialiseTaskLists+0x64>)
 8003742:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003744:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <prvInitialiseTaskLists+0x7c>)
 8003746:	4a05      	ldr	r2, [pc, #20]	; (800375c <prvInitialiseTaskLists+0x68>)
 8003748:	601a      	str	r2, [r3, #0]
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000034 	.word	0x20000034
 8003758:	20000098 	.word	0x20000098
 800375c:	200000ac 	.word	0x200000ac
 8003760:	200000c8 	.word	0x200000c8
 8003764:	200000dc 	.word	0x200000dc
 8003768:	200000f4 	.word	0x200000f4
 800376c:	200000c0 	.word	0x200000c0
 8003770:	200000c4 	.word	0x200000c4

08003774 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800377a:	e019      	b.n	80037b0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800377c:	f001 f85a 	bl	8004834 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003780:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <prvCheckTasksWaitingTermination+0x50>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3304      	adds	r3, #4
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe fcdd 	bl	800214c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003792:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <prvCheckTasksWaitingTermination+0x54>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3b01      	subs	r3, #1
 8003798:	4a0b      	ldr	r2, [pc, #44]	; (80037c8 <prvCheckTasksWaitingTermination+0x54>)
 800379a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <prvCheckTasksWaitingTermination+0x58>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <prvCheckTasksWaitingTermination+0x58>)
 80037a4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80037a6:	f001 f875 	bl	8004894 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f810 	bl	80037d0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <prvCheckTasksWaitingTermination+0x58>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e1      	bne.n	800377c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	200000dc 	.word	0x200000dc
 80037c8:	20000108 	.word	0x20000108
 80037cc:	200000f0 	.word	0x200000f0

080037d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	4618      	mov	r0, r3
 80037de:	f001 fa35 	bl	8004c4c <vPortFree>
                vPortFree( pxTCB );
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f001 fa32 	bl	8004c4c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80037e8:	bf00      	nop
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037f4:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <prvResetNextTaskUnblockTime+0x30>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <prvResetNextTaskUnblockTime+0x34>)
 8003800:	f04f 32ff 	mov.w	r2, #4294967295
 8003804:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003806:	e005      	b.n	8003814 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <prvResetNextTaskUnblockTime+0x30>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a04      	ldr	r2, [pc, #16]	; (8003824 <prvResetNextTaskUnblockTime+0x34>)
 8003812:	6013      	str	r3, [r2, #0]
}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	200000c0 	.word	0x200000c0
 8003824:	20000128 	.word	0x20000128

08003828 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800382e:	4b0b      	ldr	r3, [pc, #44]	; (800385c <xTaskGetSchedulerState+0x34>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d102      	bne.n	800383c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003836:	2301      	movs	r3, #1
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	e008      	b.n	800384e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800383c:	4b08      	ldr	r3, [pc, #32]	; (8003860 <xTaskGetSchedulerState+0x38>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003844:	2302      	movs	r3, #2
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	e001      	b.n	800384e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800384a:	2300      	movs	r3, #0
 800384c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800384e:	687b      	ldr	r3, [r7, #4]
    }
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	20000114 	.word	0x20000114
 8003860:	20000130 	.word	0x20000130

08003864 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	613b      	str	r3, [r7, #16]
    }
 800388a:	bf00      	nop
 800388c:	e7fe      	b.n	800388c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800388e:	f000 ffd1 	bl	8004834 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003892:	4b36      	ldr	r3, [pc, #216]	; (800396c <xTaskGenericNotifyWait+0x108>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4413      	add	r3, r2
 800389a:	3354      	adds	r3, #84	; 0x54
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d022      	beq.n	80038ea <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80038a4:	4b31      	ldr	r3, [pc, #196]	; (800396c <xTaskGenericNotifyWait+0x108>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	3214      	adds	r2, #20
 80038ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	43d2      	mvns	r2, r2
 80038b4:	4011      	ands	r1, r2
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	3214      	adds	r2, #20
 80038ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80038be:	4b2b      	ldr	r3, [pc, #172]	; (800396c <xTaskGenericNotifyWait+0x108>)
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4413      	add	r3, r2
 80038c6:	3354      	adds	r3, #84	; 0x54
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038d2:	2101      	movs	r1, #1
 80038d4:	6a38      	ldr	r0, [r7, #32]
 80038d6:	f000 faef 	bl	8003eb8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80038da:	4b25      	ldr	r3, [pc, #148]	; (8003970 <xTaskGenericNotifyWait+0x10c>)
 80038dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	f3bf 8f4f 	dsb	sy
 80038e6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80038ea:	f000 ffd3 	bl	8004894 <vPortExitCritical>

        taskENTER_CRITICAL();
 80038ee:	f000 ffa1 	bl	8004834 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	4613      	mov	r3, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	2040      	movs	r0, #64	; 0x40
 8003900:	f002 fe24 	bl	800654c <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800390a:	4b18      	ldr	r3, [pc, #96]	; (800396c <xTaskGenericNotifyWait+0x108>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	3214      	adds	r2, #20
 8003912:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <xTaskGenericNotifyWait+0x108>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4413      	add	r3, r2
 8003922:	3354      	adds	r3, #84	; 0x54
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d002      	beq.n	8003932 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	e00e      	b.n	8003950 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003932:	4b0e      	ldr	r3, [pc, #56]	; (800396c <xTaskGenericNotifyWait+0x108>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	3214      	adds	r2, #20
 800393a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	43d2      	mvns	r2, r2
 8003942:	4011      	ands	r1, r2
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	3214      	adds	r2, #20
 8003948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800394c:	2301      	movs	r3, #1
 800394e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <xTaskGenericNotifyWait+0x108>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	3354      	adds	r3, #84	; 0x54
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800395e:	f000 ff99 	bl	8004894 <vPortExitCritical>

        return xReturn;
 8003962:	697b      	ldr	r3, [r7, #20]
    }
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	20000030 	.word	0x20000030
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003974:	b580      	push	{r7, lr}
 8003976:	b090      	sub	sp, #64	; 0x40
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003982:	2301      	movs	r3, #1
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <xTaskGenericNotify+0x2e>
        __asm volatile
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	623b      	str	r3, [r7, #32]
    }
 800399e:	bf00      	nop
 80039a0:	e7fe      	b.n	80039a0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <xTaskGenericNotify+0x4a>
        __asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	61fb      	str	r3, [r7, #28]
    }
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 80039c2:	f000 ff37 	bl	8004834 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80039c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	3214      	adds	r2, #20
 80039d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80039d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039d8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80039da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4413      	add	r3, r2
 80039e0:	3354      	adds	r3, #84	; 0x54
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80039e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	4413      	add	r3, r2
 80039ee:	3354      	adds	r3, #84	; 0x54
 80039f0:	2202      	movs	r2, #2
 80039f2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d83b      	bhi.n	8003a72 <xTaskGenericNotify+0xfe>
 80039fa:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <xTaskGenericNotify+0x8c>)
 80039fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a00:	08003a91 	.word	0x08003a91
 8003a04:	08003a15 	.word	0x08003a15
 8003a08:	08003a31 	.word	0x08003a31
 8003a0c:	08003a49 	.word	0x08003a49
 8003a10:	08003a57 	.word	0x08003a57
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	3214      	adds	r2, #20
 8003a1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	ea42 0103 	orr.w	r1, r2, r3
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	3214      	adds	r2, #20
 8003a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003a2e:	e032      	b.n	8003a96 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	3214      	adds	r2, #20
 8003a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a3a:	1c59      	adds	r1, r3, #1
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	3214      	adds	r2, #20
 8003a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003a46:	e026      	b.n	8003a96 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	3214      	adds	r2, #20
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003a54:	e01f      	b.n	8003a96 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003a56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d006      	beq.n	8003a6c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	3214      	adds	r2, #20
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003a6a:	e014      	b.n	8003a96 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8003a70:	e011      	b.n	8003a96 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003a72:	4b55      	ldr	r3, [pc, #340]	; (8003bc8 <xTaskGenericNotify+0x254>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00c      	beq.n	8003a94 <xTaskGenericNotify+0x120>
        __asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	61bb      	str	r3, [r7, #24]
    }
 8003a8c:	bf00      	nop
 8003a8e:	e7fe      	b.n	8003a8e <xTaskGenericNotify+0x11a>
                    break;
 8003a90:	bf00      	nop
 8003a92:	e000      	b.n	8003a96 <xTaskGenericNotify+0x122>

                    break;
 8003a94:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f003 fb1b 	bl	80070d4 <SEGGER_SYSVIEW_ShrinkId>
 8003a9e:	4601      	mov	r1, r0
 8003aa0:	78fa      	ldrb	r2, [r7, #3]
 8003aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	203e      	movs	r0, #62	; 0x3e
 8003aac:	f002 fd4e 	bl	800654c <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003ab0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d17f      	bne.n	8003bb8 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac4:	68d2      	ldr	r2, [r2, #12]
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ace:	6892      	ldr	r2, [r2, #8]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	3304      	adds	r3, #4
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d103      	bne.n	8003ae6 <xTaskGenericNotify+0x172>
 8003ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	2200      	movs	r2, #0
 8003aea:	615a      	str	r2, [r3, #20]
 8003aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	1e5a      	subs	r2, r3, #1
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	4618      	mov	r0, r3
 8003afa:	f003 fa49 	bl	8006f90 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	2201      	movs	r2, #1
 8003b04:	409a      	lsls	r2, r3
 8003b06:	4b31      	ldr	r3, [pc, #196]	; (8003bcc <xTaskGenericNotify+0x258>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	4a2f      	ldr	r2, [pc, #188]	; (8003bcc <xTaskGenericNotify+0x258>)
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	492e      	ldr	r1, [pc, #184]	; (8003bd0 <xTaskGenericNotify+0x25c>)
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	3304      	adds	r3, #4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	60da      	str	r2, [r3, #12]
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b3a:	3204      	adds	r2, #4
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	1d1a      	adds	r2, r3, #4
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	609a      	str	r2, [r3, #8]
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4a1f      	ldr	r2, [pc, #124]	; (8003bd0 <xTaskGenericNotify+0x25c>)
 8003b54:	441a      	add	r2, r3
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	615a      	str	r2, [r3, #20]
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5e:	491c      	ldr	r1, [pc, #112]	; (8003bd0 <xTaskGenericNotify+0x25c>)
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	1c59      	adds	r1, r3, #1
 8003b6e:	4818      	ldr	r0, [pc, #96]	; (8003bd0 <xTaskGenericNotify+0x25c>)
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4403      	add	r3, r0
 8003b7a:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <xTaskGenericNotify+0x226>
        __asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	617b      	str	r3, [r7, #20]
    }
 8003b96:	bf00      	nop
 8003b98:	e7fe      	b.n	8003b98 <xTaskGenericNotify+0x224>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <xTaskGenericNotify+0x260>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d907      	bls.n	8003bb8 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <xTaskGenericNotify+0x264>)
 8003baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003bb8:	f000 fe6c 	bl	8004894 <vPortExitCritical>

        return xReturn;
 8003bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3738      	adds	r7, #56	; 0x38
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	2000010c 	.word	0x2000010c
 8003bcc:	20000110 	.word	0x20000110
 8003bd0:	20000034 	.word	0x20000034
 8003bd4:	20000030 	.word	0x20000030
 8003bd8:	e000ed04 	.word	0xe000ed04

08003bdc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b094      	sub	sp, #80	; 0x50
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003bea:	2301      	movs	r3, #1
 8003bec:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10a      	bne.n	8003c0a <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003c06:	bf00      	nop
 8003c08:	e7fe      	b.n	8003c08 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003c22:	bf00      	nop
 8003c24:	e7fe      	b.n	8003c24 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c26:	f000 fef1 	bl	8004a0c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003c2e:	f3ef 8211 	mrs	r2, BASEPRI
 8003c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	623a      	str	r2, [r7, #32]
 8003c44:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003c46:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c48:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8003c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d006      	beq.n	8003c5e <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	3214      	adds	r2, #20
 8003c56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003c5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4413      	add	r3, r2
 8003c64:	3354      	adds	r3, #84	; 0x54
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003c6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	4413      	add	r3, r2
 8003c72:	3354      	adds	r3, #84	; 0x54
 8003c74:	2202      	movs	r2, #2
 8003c76:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d83b      	bhi.n	8003cf6 <xTaskGenericNotifyFromISR+0x11a>
 8003c7e:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <xTaskGenericNotifyFromISR+0xa8>)
 8003c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c84:	08003d15 	.word	0x08003d15
 8003c88:	08003c99 	.word	0x08003c99
 8003c8c:	08003cb5 	.word	0x08003cb5
 8003c90:	08003ccd 	.word	0x08003ccd
 8003c94:	08003cdb 	.word	0x08003cdb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	3214      	adds	r2, #20
 8003c9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	ea42 0103 	orr.w	r1, r2, r3
 8003ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	3214      	adds	r2, #20
 8003cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003cb2:	e032      	b.n	8003d1a <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	3214      	adds	r2, #20
 8003cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cbe:	1c59      	adds	r1, r3, #1
 8003cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	3214      	adds	r2, #20
 8003cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003cca:	e026      	b.n	8003d1a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	3214      	adds	r2, #20
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003cd8:	e01f      	b.n	8003d1a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003cda:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d006      	beq.n	8003cf0 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	3214      	adds	r2, #20
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003cee:	e014      	b.n	8003d1a <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8003cf4:	e011      	b.n	8003d1a <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003cf6:	4b69      	ldr	r3, [pc, #420]	; (8003e9c <xTaskGenericNotifyFromISR+0x2c0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00c      	beq.n	8003d18 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	61bb      	str	r3, [r7, #24]
    }
 8003d10:	bf00      	nop
 8003d12:	e7fe      	b.n	8003d12 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003d14:	bf00      	nop
 8003d16:	e000      	b.n	8003d1a <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8003d18:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8003d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f003 f9d9 	bl	80070d4 <SEGGER_SYSVIEW_ShrinkId>
 8003d22:	78f9      	ldrb	r1, [r7, #3]
 8003d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d28:	9201      	str	r2, [sp, #4]
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	4601      	mov	r1, r0
 8003d32:	203f      	movs	r0, #63	; 0x3f
 8003d34:	f002 fc9c 	bl	8006670 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003d38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	f040 80a2 	bne.w	8003e86 <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	617b      	str	r3, [r7, #20]
    }
 8003d5c:	bf00      	nop
 8003d5e:	e7fe      	b.n	8003d5e <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d60:	4b4f      	ldr	r3, [pc, #316]	; (8003ea0 <xTaskGenericNotifyFromISR+0x2c4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d162      	bne.n	8003e2e <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d74:	68d2      	ldr	r2, [r2, #12]
 8003d76:	609a      	str	r2, [r3, #8]
 8003d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d7e:	6892      	ldr	r2, [r2, #8]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d88:	3304      	adds	r3, #4
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d103      	bne.n	8003d96 <xTaskGenericNotifyFromISR+0x1ba>
 8003d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d98:	2200      	movs	r2, #0
 8003d9a:	615a      	str	r2, [r3, #20]
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	1e5a      	subs	r2, r3, #1
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da8:	4618      	mov	r0, r3
 8003daa:	f003 f8f1 	bl	8006f90 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	2201      	movs	r2, #1
 8003db4:	409a      	lsls	r2, r3
 8003db6:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <xTaskGenericNotifyFromISR+0x2c8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	4a39      	ldr	r2, [pc, #228]	; (8003ea4 <xTaskGenericNotifyFromISR+0x2c8>)
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc4:	4938      	ldr	r1, [pc, #224]	; (8003ea8 <xTaskGenericNotifyFromISR+0x2cc>)
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de2:	60da      	str	r2, [r3, #12]
 8003de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dea:	3204      	adds	r2, #4
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df0:	1d1a      	adds	r2, r3, #4
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	609a      	str	r2, [r3, #8]
 8003df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4a29      	ldr	r2, [pc, #164]	; (8003ea8 <xTaskGenericNotifyFromISR+0x2cc>)
 8003e04:	441a      	add	r2, r3
 8003e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e08:	615a      	str	r2, [r3, #20]
 8003e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0e:	4926      	ldr	r1, [pc, #152]	; (8003ea8 <xTaskGenericNotifyFromISR+0x2cc>)
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	1c59      	adds	r1, r3, #1
 8003e1e:	4822      	ldr	r0, [pc, #136]	; (8003ea8 <xTaskGenericNotifyFromISR+0x2cc>)
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4403      	add	r3, r0
 8003e2a:	6019      	str	r1, [r3, #0]
 8003e2c:	e01b      	b.n	8003e66 <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003e2e:	4b1f      	ldr	r3, [pc, #124]	; (8003eac <xTaskGenericNotifyFromISR+0x2d0>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	637b      	str	r3, [r7, #52]	; 0x34
 8003e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e38:	61da      	str	r2, [r3, #28]
 8003e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e40:	621a      	str	r2, [r3, #32]
 8003e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e48:	3218      	adds	r2, #24
 8003e4a:	605a      	str	r2, [r3, #4]
 8003e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e4e:	f103 0218 	add.w	r2, r3, #24
 8003e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e54:	609a      	str	r2, [r3, #8]
 8003e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e58:	4a14      	ldr	r2, [pc, #80]	; (8003eac <xTaskGenericNotifyFromISR+0x2d0>)
 8003e5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e5c:	4b13      	ldr	r3, [pc, #76]	; (8003eac <xTaskGenericNotifyFromISR+0x2d0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	4a12      	ldr	r2, [pc, #72]	; (8003eac <xTaskGenericNotifyFromISR+0x2d0>)
 8003e64:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6a:	4b11      	ldr	r3, [pc, #68]	; (8003eb0 <xTaskGenericNotifyFromISR+0x2d4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d908      	bls.n	8003e86 <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <xTaskGenericNotifyFromISR+0x2d8>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e88:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003e90:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8003e94:	4618      	mov	r0, r3
 8003e96:	3748      	adds	r7, #72	; 0x48
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	2000010c 	.word	0x2000010c
 8003ea0:	20000130 	.word	0x20000130
 8003ea4:	20000110 	.word	0x20000110
 8003ea8:	20000034 	.word	0x20000034
 8003eac:	200000c8 	.word	0x200000c8
 8003eb0:	20000030 	.word	0x20000030
 8003eb4:	2000011c 	.word	0x2000011c

08003eb8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003ec2:	4b3c      	ldr	r3, [pc, #240]	; (8003fb4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ec8:	4b3b      	ldr	r3, [pc, #236]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe f93c 	bl	800214c <uxListRemove>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003eda:	4b37      	ldr	r3, [pc, #220]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43da      	mvns	r2, r3
 8003ee8:	4b34      	ldr	r3, [pc, #208]	; (8003fbc <prvAddCurrentTaskToDelayedList+0x104>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4013      	ands	r3, r2
 8003eee:	4a33      	ldr	r2, [pc, #204]	; (8003fbc <prvAddCurrentTaskToDelayedList+0x104>)
 8003ef0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d124      	bne.n	8003f44 <prvAddCurrentTaskToDelayedList+0x8c>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d021      	beq.n	8003f44 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f00:	4b2f      	ldr	r3, [pc, #188]	; (8003fc0 <prvAddCurrentTaskToDelayedList+0x108>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	609a      	str	r2, [r3, #8]
 8003f0e:	4b2a      	ldr	r3, [pc, #168]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	6892      	ldr	r2, [r2, #8]
 8003f16:	60da      	str	r2, [r3, #12]
 8003f18:	4b27      	ldr	r3, [pc, #156]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	3204      	adds	r2, #4
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	1d1a      	adds	r2, r3, #4
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	609a      	str	r2, [r3, #8]
 8003f2e:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a23      	ldr	r2, [pc, #140]	; (8003fc0 <prvAddCurrentTaskToDelayedList+0x108>)
 8003f34:	615a      	str	r2, [r3, #20]
 8003f36:	4b22      	ldr	r3, [pc, #136]	; (8003fc0 <prvAddCurrentTaskToDelayedList+0x108>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	4a20      	ldr	r2, [pc, #128]	; (8003fc0 <prvAddCurrentTaskToDelayedList+0x108>)
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003f42:	e032      	b.n	8003faa <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4413      	add	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f4c:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d20f      	bcs.n	8003f7c <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003f5c:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2104      	movs	r1, #4
 8003f62:	4618      	mov	r0, r3
 8003f64:	f003 f856 	bl	8007014 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f68:	4b16      	ldr	r3, [pc, #88]	; (8003fc4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3304      	adds	r3, #4
 8003f72:	4619      	mov	r1, r3
 8003f74:	4610      	mov	r0, r2
 8003f76:	f7fe f8b0 	bl	80020da <vListInsert>
}
 8003f7a:	e016      	b.n	8003faa <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003f7c:	4b0e      	ldr	r3, [pc, #56]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2104      	movs	r1, #4
 8003f82:	4618      	mov	r0, r3
 8003f84:	f003 f846 	bl	8007014 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0x110>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3304      	adds	r3, #4
 8003f92:	4619      	mov	r1, r3
 8003f94:	4610      	mov	r0, r2
 8003f96:	f7fe f8a0 	bl	80020da <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <prvAddCurrentTaskToDelayedList+0x114>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d202      	bcs.n	8003faa <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8003fa4:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <prvAddCurrentTaskToDelayedList+0x114>)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6013      	str	r3, [r2, #0]
}
 8003faa:	bf00      	nop
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	2000010c 	.word	0x2000010c
 8003fb8:	20000030 	.word	0x20000030
 8003fbc:	20000110 	.word	0x20000110
 8003fc0:	200000f4 	.word	0x200000f4
 8003fc4:	200000c4 	.word	0x200000c4
 8003fc8:	200000c0 	.word	0x200000c0
 8003fcc:	20000128 	.word	0x20000128

08003fd0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003fda:	f000 fa47 	bl	800446c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003fde:	4b11      	ldr	r3, [pc, #68]	; (8004024 <xTimerCreateTimerTask+0x54>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <xTimerCreateTimerTask+0x58>)
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	2302      	movs	r3, #2
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ff4:	490d      	ldr	r1, [pc, #52]	; (800402c <xTimerCreateTimerTask+0x5c>)
 8003ff6:	480e      	ldr	r0, [pc, #56]	; (8004030 <xTimerCreateTimerTask+0x60>)
 8003ff8:	f7fe fc02 	bl	8002800 <xTaskCreate>
 8003ffc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10a      	bne.n	800401a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	603b      	str	r3, [r7, #0]
    }
 8004016:	bf00      	nop
 8004018:	e7fe      	b.n	8004018 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800401a:	687b      	ldr	r3, [r7, #4]
    }
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	20000164 	.word	0x20000164
 8004028:	20000168 	.word	0x20000168
 800402c:	080074b0 	.word	0x080074b0
 8004030:	080040d9 	.word	0x080040d9

08004034 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004040:	e008      	b.n	8004054 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	4413      	add	r3, r2
 800404a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	699a      	ldr	r2, [r3, #24]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	18d1      	adds	r1, r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f8dd 	bl	8004220 <prvInsertTimerInActiveList>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1ea      	bne.n	8004042 <prvReloadTimer+0xe>
        }
    }
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004082:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <prvProcessExpiredTimer+0x5c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3304      	adds	r3, #4
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe f85b 	bl	800214c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff ffc3 	bl	8004034 <prvReloadTimer>
 80040ae:	e008      	b.n	80040c2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040b6:	f023 0301 	bic.w	r3, r3, #1
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	4798      	blx	r3
    }
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	2000015c 	.word	0x2000015c

080040d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040e0:	f107 0308 	add.w	r3, r7, #8
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 f857 	bl	8004198 <prvGetNextExpireTime>
 80040ea:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4619      	mov	r1, r3
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f803 	bl	80040fc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80040f6:	f000 f8d5 	bl	80042a4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040fa:	e7f1      	b.n	80040e0 <prvTimerTask+0x8>

080040fc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004106:	f7fe fe5d 	bl	8002dc4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800410a:	f107 0308 	add.w	r3, r7, #8
 800410e:	4618      	mov	r0, r3
 8004110:	f000 f866 	bl	80041e0 <prvSampleTimeNow>
 8004114:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d130      	bne.n	800417e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <prvProcessTimerOrBlockTask+0x3c>
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	429a      	cmp	r2, r3
 8004128:	d806      	bhi.n	8004138 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800412a:	f7fe fe59 	bl	8002de0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800412e:	68f9      	ldr	r1, [r7, #12]
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff ffa1 	bl	8004078 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004136:	e024      	b.n	8004182 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d008      	beq.n	8004150 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800413e:	4b13      	ldr	r3, [pc, #76]	; (800418c <prvProcessTimerOrBlockTask+0x90>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <prvProcessTimerOrBlockTask+0x50>
 8004148:	2301      	movs	r3, #1
 800414a:	e000      	b.n	800414e <prvProcessTimerOrBlockTask+0x52>
 800414c:	2300      	movs	r3, #0
 800414e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004150:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <prvProcessTimerOrBlockTask+0x94>)
 8004152:	6818      	ldr	r0, [r3, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	4619      	mov	r1, r3
 800415e:	f7fe fb1b 	bl	8002798 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004162:	f7fe fe3d 	bl	8002de0 <xTaskResumeAll>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800416c:	4b09      	ldr	r3, [pc, #36]	; (8004194 <prvProcessTimerOrBlockTask+0x98>)
 800416e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	f3bf 8f6f 	isb	sy
    }
 800417c:	e001      	b.n	8004182 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800417e:	f7fe fe2f 	bl	8002de0 <xTaskResumeAll>
    }
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000160 	.word	0x20000160
 8004190:	20000164 	.word	0x20000164
 8004194:	e000ed04 	.word	0xe000ed04

08004198 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041a0:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <prvGetNextExpireTime+0x44>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <prvGetNextExpireTime+0x16>
 80041aa:	2201      	movs	r2, #1
 80041ac:	e000      	b.n	80041b0 <prvGetNextExpireTime+0x18>
 80041ae:	2200      	movs	r2, #0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d105      	bne.n	80041c8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041bc:	4b07      	ldr	r3, [pc, #28]	; (80041dc <prvGetNextExpireTime+0x44>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	e001      	b.n	80041cc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80041cc:	68fb      	ldr	r3, [r7, #12]
    }
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	2000015c 	.word	0x2000015c

080041e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80041e8:	f7fe fefa 	bl	8002fe0 <xTaskGetTickCount>
 80041ec:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80041ee:	4b0b      	ldr	r3, [pc, #44]	; (800421c <prvSampleTimeNow+0x3c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d205      	bcs.n	8004204 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80041f8:	f000 f912 	bl	8004420 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	e002      	b.n	800420a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800420a:	4a04      	ldr	r2, [pc, #16]	; (800421c <prvSampleTimeNow+0x3c>)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004210:	68fb      	ldr	r3, [r7, #12]
    }
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	2000016c 	.word	0x2000016c

08004220 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800422e:	2300      	movs	r3, #0
 8004230:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	429a      	cmp	r2, r3
 8004244:	d812      	bhi.n	800426c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	1ad2      	subs	r2, r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	429a      	cmp	r2, r3
 8004252:	d302      	bcc.n	800425a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004254:	2301      	movs	r3, #1
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	e01b      	b.n	8004292 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <prvInsertTimerInActiveList+0x7c>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3304      	adds	r3, #4
 8004262:	4619      	mov	r1, r3
 8004264:	4610      	mov	r0, r2
 8004266:	f7fd ff38 	bl	80020da <vListInsert>
 800426a:	e012      	b.n	8004292 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d206      	bcs.n	8004282 <prvInsertTimerInActiveList+0x62>
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d302      	bcc.n	8004282 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800427c:	2301      	movs	r3, #1
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e007      	b.n	8004292 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004282:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <prvInsertTimerInActiveList+0x80>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3304      	adds	r3, #4
 800428a:	4619      	mov	r1, r3
 800428c:	4610      	mov	r0, r2
 800428e:	f7fd ff24 	bl	80020da <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004292:	697b      	ldr	r3, [r7, #20]
    }
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20000160 	.word	0x20000160
 80042a0:	2000015c 	.word	0x2000015c

080042a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042aa:	e0a6      	b.n	80043fa <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f2c0 80a2 	blt.w	80043f8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fd ff41 	bl	800214c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042ca:	1d3b      	adds	r3, r7, #4
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff ff87 	bl	80041e0 <prvSampleTimeNow>
 80042d2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	2b08      	cmp	r3, #8
 80042da:	f200 808e 	bhi.w	80043fa <prvProcessReceivedCommands+0x156>
 80042de:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <prvProcessReceivedCommands+0x40>)
 80042e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e4:	08004309 	.word	0x08004309
 80042e8:	08004309 	.word	0x08004309
 80042ec:	08004371 	.word	0x08004371
 80042f0:	08004385 	.word	0x08004385
 80042f4:	080043cf 	.word	0x080043cf
 80042f8:	08004309 	.word	0x08004309
 80042fc:	08004309 	.word	0x08004309
 8004300:	08004371 	.word	0x08004371
 8004304:	08004385 	.word	0x08004385
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	b2da      	uxtb	r2, r3
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	18d1      	adds	r1, r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	69f8      	ldr	r0, [r7, #28]
 8004328:	f7ff ff7a 	bl	8004220 <prvInsertTimerInActiveList>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d063      	beq.n	80043fa <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d009      	beq.n	8004354 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	4413      	add	r3, r2
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4619      	mov	r1, r3
 800434c:	69f8      	ldr	r0, [r7, #28]
 800434e:	f7ff fe71 	bl	8004034 <prvReloadTimer>
 8004352:	e008      	b.n	8004366 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	b2da      	uxtb	r2, r3
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	69f8      	ldr	r0, [r7, #28]
 800436c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800436e:	e044      	b.n	80043fa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	b2da      	uxtb	r2, r3
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004382:	e03a      	b.n	80043fa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	b2da      	uxtb	r2, r3
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <prvProcessReceivedCommands+0x116>
        __asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	617b      	str	r3, [r7, #20]
    }
 80043b6:	bf00      	nop
 80043b8:	e7fe      	b.n	80043b8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	18d1      	adds	r1, r2, r3
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	69f8      	ldr	r0, [r7, #28]
 80043c8:	f7ff ff2a 	bl	8004220 <prvInsertTimerInActiveList>
                        break;
 80043cc:	e015      	b.n	80043fa <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d103      	bne.n	80043e4 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 80043dc:	69f8      	ldr	r0, [r7, #28]
 80043de:	f000 fc35 	bl	8004c4c <vPortFree>
 80043e2:	e00a      	b.n	80043fa <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ea:	f023 0301 	bic.w	r3, r3, #1
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80043f6:	e000      	b.n	80043fa <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80043f8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043fa:	4b08      	ldr	r3, [pc, #32]	; (800441c <prvProcessReceivedCommands+0x178>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f107 0108 	add.w	r1, r7, #8
 8004402:	2200      	movs	r2, #0
 8004404:	4618      	mov	r0, r3
 8004406:	f7fd ffd3 	bl	80023b0 <xQueueReceive>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	f47f af4d 	bne.w	80042ac <prvProcessReceivedCommands+0x8>
        }
    }
 8004412:	bf00      	nop
 8004414:	bf00      	nop
 8004416:	3720      	adds	r7, #32
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000164 	.word	0x20000164

08004420 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004426:	e009      	b.n	800443c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004428:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <prvSwitchTimerLists+0x44>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004432:	f04f 31ff 	mov.w	r1, #4294967295
 8004436:	6838      	ldr	r0, [r7, #0]
 8004438:	f7ff fe1e 	bl	8004078 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800443c:	4b09      	ldr	r3, [pc, #36]	; (8004464 <prvSwitchTimerLists+0x44>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <prvSwitchTimerLists+0x44>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <prvSwitchTimerLists+0x48>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a04      	ldr	r2, [pc, #16]	; (8004464 <prvSwitchTimerLists+0x44>)
 8004452:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004454:	4a04      	ldr	r2, [pc, #16]	; (8004468 <prvSwitchTimerLists+0x48>)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6013      	str	r3, [r2, #0]
    }
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	2000015c 	.word	0x2000015c
 8004468:	20000160 	.word	0x20000160

0800446c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004470:	f000 f9e0 	bl	8004834 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004474:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <prvCheckForValidListAndQueue+0x54>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d11d      	bne.n	80044b8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800447c:	4811      	ldr	r0, [pc, #68]	; (80044c4 <prvCheckForValidListAndQueue+0x58>)
 800447e:	f7fd fddb 	bl	8002038 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004482:	4811      	ldr	r0, [pc, #68]	; (80044c8 <prvCheckForValidListAndQueue+0x5c>)
 8004484:	f7fd fdd8 	bl	8002038 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004488:	4b10      	ldr	r3, [pc, #64]	; (80044cc <prvCheckForValidListAndQueue+0x60>)
 800448a:	4a0e      	ldr	r2, [pc, #56]	; (80044c4 <prvCheckForValidListAndQueue+0x58>)
 800448c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <prvCheckForValidListAndQueue+0x64>)
 8004490:	4a0d      	ldr	r2, [pc, #52]	; (80044c8 <prvCheckForValidListAndQueue+0x5c>)
 8004492:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004494:	2200      	movs	r2, #0
 8004496:	210c      	movs	r1, #12
 8004498:	200a      	movs	r0, #10
 800449a:	f7fd ff11 	bl	80022c0 <xQueueGenericCreate>
 800449e:	4603      	mov	r3, r0
 80044a0:	4a07      	ldr	r2, [pc, #28]	; (80044c0 <prvCheckForValidListAndQueue+0x54>)
 80044a2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <prvCheckForValidListAndQueue+0x54>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <prvCheckForValidListAndQueue+0x54>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4908      	ldr	r1, [pc, #32]	; (80044d4 <prvCheckForValidListAndQueue+0x68>)
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe f91a 	bl	80026ec <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80044b8:	f000 f9ec 	bl	8004894 <vPortExitCritical>
    }
 80044bc:	bf00      	nop
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20000164 	.word	0x20000164
 80044c4:	20000134 	.word	0x20000134
 80044c8:	20000148 	.word	0x20000148
 80044cc:	2000015c 	.word	0x2000015c
 80044d0:	20000160 	.word	0x20000160
 80044d4:	080074b8 	.word	0x080074b8

080044d8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3b04      	subs	r3, #4
 80044e8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044f0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3b04      	subs	r3, #4
 80044f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f023 0201 	bic.w	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3b04      	subs	r3, #4
 8004506:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004508:	4a0c      	ldr	r2, [pc, #48]	; (800453c <pxPortInitialiseStack+0x64>)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3b14      	subs	r3, #20
 8004512:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3b04      	subs	r3, #4
 800451e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f06f 0202 	mvn.w	r2, #2
 8004526:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	3b20      	subs	r3, #32
 800452c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800452e:	68fb      	ldr	r3, [r7, #12]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	08004541 	.word	0x08004541

08004540 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800454a:	4b12      	ldr	r3, [pc, #72]	; (8004594 <prvTaskExitError+0x54>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004552:	d00a      	beq.n	800456a <prvTaskExitError+0x2a>
        __asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	60fb      	str	r3, [r7, #12]
    }
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <prvTaskExitError+0x28>
        __asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	60bb      	str	r3, [r7, #8]
    }
 800457c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800457e:	bf00      	nop
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0fc      	beq.n	8004580 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004586:	bf00      	nop
 8004588:	bf00      	nop
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	20000010 	.word	0x20000010
	...

080045a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80045a0:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <pxCurrentTCBConst2>)
 80045a2:	6819      	ldr	r1, [r3, #0]
 80045a4:	6808      	ldr	r0, [r1, #0]
 80045a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045aa:	f380 8809 	msr	PSP, r0
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f04f 0000 	mov.w	r0, #0
 80045b6:	f380 8811 	msr	BASEPRI, r0
 80045ba:	4770      	bx	lr
 80045bc:	f3af 8000 	nop.w

080045c0 <pxCurrentTCBConst2>:
 80045c0:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop

080045c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80045c8:	4808      	ldr	r0, [pc, #32]	; (80045ec <prvPortStartFirstTask+0x24>)
 80045ca:	6800      	ldr	r0, [r0, #0]
 80045cc:	6800      	ldr	r0, [r0, #0]
 80045ce:	f380 8808 	msr	MSP, r0
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	f380 8814 	msr	CONTROL, r0
 80045da:	b662      	cpsie	i
 80045dc:	b661      	cpsie	f
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	df00      	svc	0
 80045e8:	bf00      	nop
 80045ea:	0000      	.short	0x0000
 80045ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop

080045f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045fa:	4b46      	ldr	r3, [pc, #280]	; (8004714 <xPortStartScheduler+0x120>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a46      	ldr	r2, [pc, #280]	; (8004718 <xPortStartScheduler+0x124>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d10a      	bne.n	800461a <xPortStartScheduler+0x26>
        __asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	613b      	str	r3, [r7, #16]
    }
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800461a:	4b3e      	ldr	r3, [pc, #248]	; (8004714 <xPortStartScheduler+0x120>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a3f      	ldr	r2, [pc, #252]	; (800471c <xPortStartScheduler+0x128>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d10a      	bne.n	800463a <xPortStartScheduler+0x46>
        __asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	60fb      	str	r3, [r7, #12]
    }
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800463a:	4b39      	ldr	r3, [pc, #228]	; (8004720 <xPortStartScheduler+0x12c>)
 800463c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	22ff      	movs	r2, #255	; 0xff
 800464a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800465c:	b2da      	uxtb	r2, r3
 800465e:	4b31      	ldr	r3, [pc, #196]	; (8004724 <xPortStartScheduler+0x130>)
 8004660:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004662:	4b31      	ldr	r3, [pc, #196]	; (8004728 <xPortStartScheduler+0x134>)
 8004664:	2207      	movs	r2, #7
 8004666:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004668:	e009      	b.n	800467e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800466a:	4b2f      	ldr	r3, [pc, #188]	; (8004728 <xPortStartScheduler+0x134>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3b01      	subs	r3, #1
 8004670:	4a2d      	ldr	r2, [pc, #180]	; (8004728 <xPortStartScheduler+0x134>)
 8004672:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	b2db      	uxtb	r3, r3
 800467c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004686:	2b80      	cmp	r3, #128	; 0x80
 8004688:	d0ef      	beq.n	800466a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800468a:	4b27      	ldr	r3, [pc, #156]	; (8004728 <xPortStartScheduler+0x134>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f1c3 0307 	rsb	r3, r3, #7
 8004692:	2b04      	cmp	r3, #4
 8004694:	d00a      	beq.n	80046ac <xPortStartScheduler+0xb8>
        __asm volatile
 8004696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	60bb      	str	r3, [r7, #8]
    }
 80046a8:	bf00      	nop
 80046aa:	e7fe      	b.n	80046aa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046ac:	4b1e      	ldr	r3, [pc, #120]	; (8004728 <xPortStartScheduler+0x134>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	021b      	lsls	r3, r3, #8
 80046b2:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <xPortStartScheduler+0x134>)
 80046b4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046b6:	4b1c      	ldr	r3, [pc, #112]	; (8004728 <xPortStartScheduler+0x134>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046be:	4a1a      	ldr	r2, [pc, #104]	; (8004728 <xPortStartScheduler+0x134>)
 80046c0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80046ca:	4b18      	ldr	r3, [pc, #96]	; (800472c <xPortStartScheduler+0x138>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a17      	ldr	r2, [pc, #92]	; (800472c <xPortStartScheduler+0x138>)
 80046d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80046d6:	4b15      	ldr	r3, [pc, #84]	; (800472c <xPortStartScheduler+0x138>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a14      	ldr	r2, [pc, #80]	; (800472c <xPortStartScheduler+0x138>)
 80046dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80046e2:	f000 f963 	bl	80049ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <xPortStartScheduler+0x13c>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80046ec:	f000 f982 	bl	80049f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046f0:	4b10      	ldr	r3, [pc, #64]	; (8004734 <xPortStartScheduler+0x140>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a0f      	ldr	r2, [pc, #60]	; (8004734 <xPortStartScheduler+0x140>)
 80046f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80046fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80046fc:	f7ff ff64 	bl	80045c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004700:	f7fe fdaa 	bl	8003258 <vTaskSwitchContext>
    prvTaskExitError();
 8004704:	f7ff ff1c 	bl	8004540 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	e000ed00 	.word	0xe000ed00
 8004718:	410fc271 	.word	0x410fc271
 800471c:	410fc270 	.word	0x410fc270
 8004720:	e000e400 	.word	0xe000e400
 8004724:	20000170 	.word	0x20000170
 8004728:	20000174 	.word	0x20000174
 800472c:	e000ed20 	.word	0xe000ed20
 8004730:	20000010 	.word	0x20000010
 8004734:	e000ef34 	.word	0xe000ef34

08004738 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800473e:	4b37      	ldr	r3, [pc, #220]	; (800481c <vInitPrioGroupValue+0xe4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a37      	ldr	r2, [pc, #220]	; (8004820 <vInitPrioGroupValue+0xe8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d10a      	bne.n	800475e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	613b      	str	r3, [r7, #16]
    }
 800475a:	bf00      	nop
 800475c:	e7fe      	b.n	800475c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800475e:	4b2f      	ldr	r3, [pc, #188]	; (800481c <vInitPrioGroupValue+0xe4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a30      	ldr	r2, [pc, #192]	; (8004824 <vInitPrioGroupValue+0xec>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d10a      	bne.n	800477e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	60fb      	str	r3, [r7, #12]
    }
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800477e:	4b2a      	ldr	r3, [pc, #168]	; (8004828 <vInitPrioGroupValue+0xf0>)
 8004780:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	22ff      	movs	r2, #255	; 0xff
 800478e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004798:	78fb      	ldrb	r3, [r7, #3]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	4b22      	ldr	r3, [pc, #136]	; (800482c <vInitPrioGroupValue+0xf4>)
 80047a4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047a6:	4b22      	ldr	r3, [pc, #136]	; (8004830 <vInitPrioGroupValue+0xf8>)
 80047a8:	2207      	movs	r2, #7
 80047aa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047ac:	e009      	b.n	80047c2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80047ae:	4b20      	ldr	r3, [pc, #128]	; (8004830 <vInitPrioGroupValue+0xf8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	4a1e      	ldr	r2, [pc, #120]	; (8004830 <vInitPrioGroupValue+0xf8>)
 80047b6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047c2:	78fb      	ldrb	r3, [r7, #3]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ca:	2b80      	cmp	r3, #128	; 0x80
 80047cc:	d0ef      	beq.n	80047ae <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047ce:	4b18      	ldr	r3, [pc, #96]	; (8004830 <vInitPrioGroupValue+0xf8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f1c3 0307 	rsb	r3, r3, #7
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d00a      	beq.n	80047f0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	60bb      	str	r3, [r7, #8]
    }
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <vInitPrioGroupValue+0xf8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	4a0e      	ldr	r2, [pc, #56]	; (8004830 <vInitPrioGroupValue+0xf8>)
 80047f8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047fa:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <vInitPrioGroupValue+0xf8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004802:	4a0b      	ldr	r2, [pc, #44]	; (8004830 <vInitPrioGroupValue+0xf8>)
 8004804:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800480e:	bf00      	nop
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	e000ed00 	.word	0xe000ed00
 8004820:	410fc271 	.word	0x410fc271
 8004824:	410fc270 	.word	0x410fc270
 8004828:	e000e400 	.word	0xe000e400
 800482c:	20000170 	.word	0x20000170
 8004830:	20000174 	.word	0x20000174

08004834 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
        __asm volatile
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	607b      	str	r3, [r7, #4]
    }
 800484c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800484e:	4b0f      	ldr	r3, [pc, #60]	; (800488c <vPortEnterCritical+0x58>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3301      	adds	r3, #1
 8004854:	4a0d      	ldr	r2, [pc, #52]	; (800488c <vPortEnterCritical+0x58>)
 8004856:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004858:	4b0c      	ldr	r3, [pc, #48]	; (800488c <vPortEnterCritical+0x58>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d10f      	bne.n	8004880 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <vPortEnterCritical+0x5c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <vPortEnterCritical+0x4c>
        __asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	603b      	str	r3, [r7, #0]
    }
 800487c:	bf00      	nop
 800487e:	e7fe      	b.n	800487e <vPortEnterCritical+0x4a>
    }
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	20000010 	.word	0x20000010
 8004890:	e000ed04 	.word	0xe000ed04

08004894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800489a:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <vPortExitCritical+0x50>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <vPortExitCritical+0x24>
        __asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	607b      	str	r3, [r7, #4]
    }
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80048b8:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <vPortExitCritical+0x50>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3b01      	subs	r3, #1
 80048be:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <vPortExitCritical+0x50>)
 80048c0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80048c2:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <vPortExitCritical+0x50>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d105      	bne.n	80048d6 <vPortExitCritical+0x42>
 80048ca:	2300      	movs	r3, #0
 80048cc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f383 8811 	msr	BASEPRI, r3
    }
 80048d4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20000010 	.word	0x20000010
	...

080048f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80048f0:	f3ef 8009 	mrs	r0, PSP
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	4b15      	ldr	r3, [pc, #84]	; (8004950 <pxCurrentTCBConst>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	f01e 0f10 	tst.w	lr, #16
 8004900:	bf08      	it	eq
 8004902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490a:	6010      	str	r0, [r2, #0]
 800490c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004914:	f380 8811 	msr	BASEPRI, r0
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f7fe fc9a 	bl	8003258 <vTaskSwitchContext>
 8004924:	f04f 0000 	mov.w	r0, #0
 8004928:	f380 8811 	msr	BASEPRI, r0
 800492c:	bc09      	pop	{r0, r3}
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	6808      	ldr	r0, [r1, #0]
 8004932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004936:	f01e 0f10 	tst.w	lr, #16
 800493a:	bf08      	it	eq
 800493c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004940:	f380 8809 	msr	PSP, r0
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	f3af 8000 	nop.w

08004950 <pxCurrentTCBConst>:
 8004950:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop

08004958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
        __asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	607b      	str	r3, [r7, #4]
    }
 8004970:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004972:	f002 f9f3 	bl	8006d5c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004976:	f7fe fb55 	bl	8003024 <xTaskIncrementTick>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d006      	beq.n	800498e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004980:	f002 fa4a 	bl	8006e18 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004984:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <SysTick_Handler+0x50>)
 8004986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e001      	b.n	8004992 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800498e:	f002 fa27 	bl	8006de0 <SEGGER_SYSVIEW_RecordExitISR>
 8004992:	2300      	movs	r3, #0
 8004994:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	f383 8811 	msr	BASEPRI, r3
    }
 800499c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	e000ed04 	.word	0xe000ed04

080049ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <vPortSetupTimerInterrupt+0x34>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049b6:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <vPortSetupTimerInterrupt+0x38>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049bc:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <vPortSetupTimerInterrupt+0x3c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a0a      	ldr	r2, [pc, #40]	; (80049ec <vPortSetupTimerInterrupt+0x40>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	4a09      	ldr	r2, [pc, #36]	; (80049f0 <vPortSetupTimerInterrupt+0x44>)
 80049ca:	3b01      	subs	r3, #1
 80049cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049ce:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <vPortSetupTimerInterrupt+0x34>)
 80049d0:	2207      	movs	r2, #7
 80049d2:	601a      	str	r2, [r3, #0]
}
 80049d4:	bf00      	nop
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	e000e010 	.word	0xe000e010
 80049e4:	e000e018 	.word	0xe000e018
 80049e8:	20000000 	.word	0x20000000
 80049ec:	10624dd3 	.word	0x10624dd3
 80049f0:	e000e014 	.word	0xe000e014

080049f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80049f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a04 <vPortEnableVFP+0x10>
 80049f8:	6801      	ldr	r1, [r0, #0]
 80049fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049fe:	6001      	str	r1, [r0, #0]
 8004a00:	4770      	bx	lr
 8004a02:	0000      	.short	0x0000
 8004a04:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop

08004a0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004a12:	f3ef 8305 	mrs	r3, IPSR
 8004a16:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b0f      	cmp	r3, #15
 8004a1c:	d914      	bls.n	8004a48 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a1e:	4a17      	ldr	r2, [pc, #92]	; (8004a7c <vPortValidateInterruptPriority+0x70>)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a28:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <vPortValidateInterruptPriority+0x74>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	7afa      	ldrb	r2, [r7, #11]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d20a      	bcs.n	8004a48 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	607b      	str	r3, [r7, #4]
    }
 8004a44:	bf00      	nop
 8004a46:	e7fe      	b.n	8004a46 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a48:	4b0e      	ldr	r3, [pc, #56]	; (8004a84 <vPortValidateInterruptPriority+0x78>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a50:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <vPortValidateInterruptPriority+0x7c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d90a      	bls.n	8004a6e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	603b      	str	r3, [r7, #0]
    }
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <vPortValidateInterruptPriority+0x60>
    }
 8004a6e:	bf00      	nop
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	e000e3f0 	.word	0xe000e3f0
 8004a80:	20000170 	.word	0x20000170
 8004a84:	e000ed0c 	.word	0xe000ed0c
 8004a88:	20000174 	.word	0x20000174

08004a8c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08a      	sub	sp, #40	; 0x28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004a98:	f7fe f994 	bl	8002dc4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004a9c:	4b65      	ldr	r3, [pc, #404]	; (8004c34 <pvPortMalloc+0x1a8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004aa4:	f000 f934 	bl	8004d10 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004aa8:	4b63      	ldr	r3, [pc, #396]	; (8004c38 <pvPortMalloc+0x1ac>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f040 80a7 	bne.w	8004c04 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d02d      	beq.n	8004b18 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004abc:	2208      	movs	r2, #8
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d227      	bcs.n	8004b18 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004ac8:	2208      	movs	r2, #8
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4413      	add	r3, r2
 8004ace:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d021      	beq.n	8004b1e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f023 0307 	bic.w	r3, r3, #7
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d214      	bcs.n	8004b12 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f023 0307 	bic.w	r3, r3, #7
 8004aee:	3308      	adds	r3, #8
 8004af0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d010      	beq.n	8004b1e <pvPortMalloc+0x92>
        __asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	617b      	str	r3, [r7, #20]
    }
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b16:	e002      	b.n	8004b1e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	607b      	str	r3, [r7, #4]
 8004b1c:	e000      	b.n	8004b20 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b1e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d06e      	beq.n	8004c04 <pvPortMalloc+0x178>
 8004b26:	4b45      	ldr	r3, [pc, #276]	; (8004c3c <pvPortMalloc+0x1b0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d869      	bhi.n	8004c04 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004b30:	4b43      	ldr	r3, [pc, #268]	; (8004c40 <pvPortMalloc+0x1b4>)
 8004b32:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004b34:	4b42      	ldr	r3, [pc, #264]	; (8004c40 <pvPortMalloc+0x1b4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b3a:	e004      	b.n	8004b46 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d903      	bls.n	8004b58 <pvPortMalloc+0xcc>
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f1      	bne.n	8004b3c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004b58:	4b36      	ldr	r3, [pc, #216]	; (8004c34 <pvPortMalloc+0x1a8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d050      	beq.n	8004c04 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2208      	movs	r2, #8
 8004b68:	4413      	add	r3, r2
 8004b6a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	1ad2      	subs	r2, r2, r3
 8004b7c:	2308      	movs	r3, #8
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d91f      	bls.n	8004bc4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4413      	add	r3, r2
 8004b8a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <pvPortMalloc+0x120>
        __asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	613b      	str	r3, [r7, #16]
    }
 8004ba8:	bf00      	nop
 8004baa:	e7fe      	b.n	8004baa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	1ad2      	subs	r2, r2, r3
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bbe:	69b8      	ldr	r0, [r7, #24]
 8004bc0:	f000 f908 	bl	8004dd4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bc4:	4b1d      	ldr	r3, [pc, #116]	; (8004c3c <pvPortMalloc+0x1b0>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	4a1b      	ldr	r2, [pc, #108]	; (8004c3c <pvPortMalloc+0x1b0>)
 8004bd0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bd2:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <pvPortMalloc+0x1b0>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <pvPortMalloc+0x1b8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d203      	bcs.n	8004be6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bde:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <pvPortMalloc+0x1b0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a18      	ldr	r2, [pc, #96]	; (8004c44 <pvPortMalloc+0x1b8>)
 8004be4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	4b13      	ldr	r3, [pc, #76]	; (8004c38 <pvPortMalloc+0x1ac>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004bfa:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <pvPortMalloc+0x1bc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <pvPortMalloc+0x1bc>)
 8004c02:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004c04:	f7fe f8ec 	bl	8002de0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <pvPortMalloc+0x19c>
        __asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	60fb      	str	r3, [r7, #12]
    }
 8004c24:	bf00      	nop
 8004c26:	e7fe      	b.n	8004c26 <pvPortMalloc+0x19a>
    return pvReturn;
 8004c28:	69fb      	ldr	r3, [r7, #28]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3728      	adds	r7, #40	; 0x28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20012d80 	.word	0x20012d80
 8004c38:	20012d94 	.word	0x20012d94
 8004c3c:	20012d84 	.word	0x20012d84
 8004c40:	20012d78 	.word	0x20012d78
 8004c44:	20012d88 	.word	0x20012d88
 8004c48:	20012d8c 	.word	0x20012d8c

08004c4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d04d      	beq.n	8004cfa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004c5e:	2308      	movs	r3, #8
 8004c60:	425b      	negs	r3, r3
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4413      	add	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <vPortFree+0xb8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10a      	bne.n	8004c90 <vPortFree+0x44>
        __asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	60fb      	str	r3, [r7, #12]
    }
 8004c8c:	bf00      	nop
 8004c8e:	e7fe      	b.n	8004c8e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <vPortFree+0x62>
        __asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	60bb      	str	r3, [r7, #8]
    }
 8004caa:	bf00      	nop
 8004cac:	e7fe      	b.n	8004cac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <vPortFree+0xb8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01e      	beq.n	8004cfa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11a      	bne.n	8004cfa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <vPortFree+0xb8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	401a      	ands	r2, r3
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004cd4:	f7fe f876 	bl	8002dc4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	4b0a      	ldr	r3, [pc, #40]	; (8004d08 <vPortFree+0xbc>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	4a09      	ldr	r2, [pc, #36]	; (8004d08 <vPortFree+0xbc>)
 8004ce4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ce6:	6938      	ldr	r0, [r7, #16]
 8004ce8:	f000 f874 	bl	8004dd4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004cec:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <vPortFree+0xc0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	4a06      	ldr	r2, [pc, #24]	; (8004d0c <vPortFree+0xc0>)
 8004cf4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004cf6:	f7fe f873 	bl	8002de0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004cfa:	bf00      	nop
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20012d94 	.word	0x20012d94
 8004d08:	20012d84 	.word	0x20012d84
 8004d0c:	20012d90 	.word	0x20012d90

08004d10 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004d1a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004d1c:	4b27      	ldr	r3, [pc, #156]	; (8004dbc <prvHeapInit+0xac>)
 8004d1e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00c      	beq.n	8004d44 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3307      	adds	r3, #7
 8004d2e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0307 	bic.w	r3, r3, #7
 8004d36:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	4a1f      	ldr	r2, [pc, #124]	; (8004dbc <prvHeapInit+0xac>)
 8004d40:	4413      	add	r3, r2
 8004d42:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d48:	4a1d      	ldr	r2, [pc, #116]	; (8004dc0 <prvHeapInit+0xb0>)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004d4e:	4b1c      	ldr	r3, [pc, #112]	; (8004dc0 <prvHeapInit+0xb0>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	4413      	add	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0307 	bic.w	r3, r3, #7
 8004d6a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4a15      	ldr	r2, [pc, #84]	; (8004dc4 <prvHeapInit+0xb4>)
 8004d70:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004d72:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <prvHeapInit+0xb4>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2200      	movs	r2, #0
 8004d78:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <prvHeapInit+0xb4>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	1ad2      	subs	r2, r2, r3
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d90:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <prvHeapInit+0xb4>)
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <prvHeapInit+0xb8>)
 8004d9e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	4a09      	ldr	r2, [pc, #36]	; (8004dcc <prvHeapInit+0xbc>)
 8004da6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004da8:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <prvHeapInit+0xc0>)
 8004daa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004dae:	601a      	str	r2, [r3, #0]
}
 8004db0:	bf00      	nop
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	20000178 	.word	0x20000178
 8004dc0:	20012d78 	.word	0x20012d78
 8004dc4:	20012d80 	.word	0x20012d80
 8004dc8:	20012d88 	.word	0x20012d88
 8004dcc:	20012d84 	.word	0x20012d84
 8004dd0:	20012d94 	.word	0x20012d94

08004dd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ddc:	4b28      	ldr	r3, [pc, #160]	; (8004e80 <prvInsertBlockIntoFreeList+0xac>)
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	e002      	b.n	8004de8 <prvInsertBlockIntoFreeList+0x14>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d8f7      	bhi.n	8004de2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d108      	bne.n	8004e16 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	441a      	add	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	441a      	add	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d118      	bne.n	8004e5c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	4b15      	ldr	r3, [pc, #84]	; (8004e84 <prvInsertBlockIntoFreeList+0xb0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d00d      	beq.n	8004e52 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	441a      	add	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	e008      	b.n	8004e64 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e52:	4b0c      	ldr	r3, [pc, #48]	; (8004e84 <prvInsertBlockIntoFreeList+0xb0>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	e003      	b.n	8004e64 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d002      	beq.n	8004e72 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e72:	bf00      	nop
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	20012d78 	.word	0x20012d78
 8004e84:	20012d80 	.word	0x20012d80

08004e88 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004e8c:	4803      	ldr	r0, [pc, #12]	; (8004e9c <_cbSendSystemDesc+0x14>)
 8004e8e:	f001 ff0f 	bl	8006cb0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004e92:	4803      	ldr	r0, [pc, #12]	; (8004ea0 <_cbSendSystemDesc+0x18>)
 8004e94:	f001 ff0c 	bl	8006cb0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004e98:	bf00      	nop
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	080074c0 	.word	0x080074c0
 8004ea0:	08007500 	.word	0x08007500

08004ea4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004eae:	6819      	ldr	r1, [r3, #0]
 8004eb0:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <SEGGER_SYSVIEW_Conf+0x24>)
 8004eb2:	4a06      	ldr	r2, [pc, #24]	; (8004ecc <SEGGER_SYSVIEW_Conf+0x28>)
 8004eb4:	f001 f9cc 	bl	8006250 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004eb8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004ebc:	f001 fa0c 	bl	80062d8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004ec0:	bf00      	nop
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20000000 	.word	0x20000000
 8004ec8:	08004e89 	.word	0x08004e89
 8004ecc:	08007594 	.word	0x08007594

08004ed0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	607b      	str	r3, [r7, #4]
 8004eda:	e033      	b.n	8004f44 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004edc:	491e      	ldr	r1, [pc, #120]	; (8004f58 <_cbSendTaskList+0x88>)
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	491a      	ldr	r1, [pc, #104]	; (8004f58 <_cbSendTaskList+0x88>)
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	3304      	adds	r3, #4
 8004efc:	6819      	ldr	r1, [r3, #0]
 8004efe:	4c16      	ldr	r4, [pc, #88]	; (8004f58 <_cbSendTaskList+0x88>)
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4423      	add	r3, r4
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	681c      	ldr	r4, [r3, #0]
 8004f10:	4d11      	ldr	r5, [pc, #68]	; (8004f58 <_cbSendTaskList+0x88>)
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	442b      	add	r3, r5
 8004f1e:	330c      	adds	r3, #12
 8004f20:	681d      	ldr	r5, [r3, #0]
 8004f22:	4e0d      	ldr	r6, [pc, #52]	; (8004f58 <_cbSendTaskList+0x88>)
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4433      	add	r3, r6
 8004f30:	3310      	adds	r3, #16
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	462b      	mov	r3, r5
 8004f38:	4622      	mov	r2, r4
 8004f3a:	f000 f971 	bl	8005220 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3301      	adds	r3, #1
 8004f42:	607b      	str	r3, [r7, #4]
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <_cbSendTaskList+0x8c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d3c6      	bcc.n	8004edc <_cbSendTaskList+0xc>
  }
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f58:	20012d98 	.word	0x20012d98
 8004f5c:	20012e38 	.word	0x20012e38

08004f60 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004f60:	b5b0      	push	{r4, r5, r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004f66:	f7fe f84b 	bl	8003000 <xTaskGetTickCountFromISR>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004f76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	f04f 0400 	mov.w	r4, #0
 8004f82:	f04f 0500 	mov.w	r5, #0
 8004f86:	015d      	lsls	r5, r3, #5
 8004f88:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004f8c:	0154      	lsls	r4, r2, #5
 8004f8e:	4622      	mov	r2, r4
 8004f90:	462b      	mov	r3, r5
 8004f92:	1a12      	subs	r2, r2, r0
 8004f94:	eb63 0301 	sbc.w	r3, r3, r1
 8004f98:	f04f 0400 	mov.w	r4, #0
 8004f9c:	f04f 0500 	mov.w	r5, #0
 8004fa0:	009d      	lsls	r5, r3, #2
 8004fa2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004fa6:	0094      	lsls	r4, r2, #2
 8004fa8:	4622      	mov	r2, r4
 8004faa:	462b      	mov	r3, r5
 8004fac:	1812      	adds	r2, r2, r0
 8004fae:	eb41 0303 	adc.w	r3, r1, r3
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f04f 0100 	mov.w	r1, #0
 8004fba:	00d9      	lsls	r1, r3, #3
 8004fbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fc0:	00d0      	lsls	r0, r2, #3
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004fca:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004fce:	4610      	mov	r0, r2
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bdb0      	pop	{r4, r5, r7, pc}

08004fd8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004fe6:	2205      	movs	r2, #5
 8004fe8:	492b      	ldr	r1, [pc, #172]	; (8005098 <SYSVIEW_AddTask+0xc0>)
 8004fea:	68b8      	ldr	r0, [r7, #8]
 8004fec:	f002 f9f2 	bl	80073d4 <memcmp>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d04b      	beq.n	800508e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004ff6:	4b29      	ldr	r3, [pc, #164]	; (800509c <SYSVIEW_AddTask+0xc4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b07      	cmp	r3, #7
 8004ffc:	d903      	bls.n	8005006 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004ffe:	4828      	ldr	r0, [pc, #160]	; (80050a0 <SYSVIEW_AddTask+0xc8>)
 8005000:	f002 f968 	bl	80072d4 <SEGGER_SYSVIEW_Warn>
    return;
 8005004:	e044      	b.n	8005090 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005006:	4b25      	ldr	r3, [pc, #148]	; (800509c <SYSVIEW_AddTask+0xc4>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4926      	ldr	r1, [pc, #152]	; (80050a4 <SYSVIEW_AddTask+0xcc>)
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800501a:	4b20      	ldr	r3, [pc, #128]	; (800509c <SYSVIEW_AddTask+0xc4>)
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4921      	ldr	r1, [pc, #132]	; (80050a4 <SYSVIEW_AddTask+0xcc>)
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	3304      	adds	r3, #4
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005030:	4b1a      	ldr	r3, [pc, #104]	; (800509c <SYSVIEW_AddTask+0xc4>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	491b      	ldr	r1, [pc, #108]	; (80050a4 <SYSVIEW_AddTask+0xcc>)
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	3308      	adds	r3, #8
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005046:	4b15      	ldr	r3, [pc, #84]	; (800509c <SYSVIEW_AddTask+0xc4>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	4916      	ldr	r1, [pc, #88]	; (80050a4 <SYSVIEW_AddTask+0xcc>)
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	330c      	adds	r3, #12
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800505c:	4b0f      	ldr	r3, [pc, #60]	; (800509c <SYSVIEW_AddTask+0xc4>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	4910      	ldr	r1, [pc, #64]	; (80050a4 <SYSVIEW_AddTask+0xcc>)
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	3310      	adds	r3, #16
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005072:	4b0a      	ldr	r3, [pc, #40]	; (800509c <SYSVIEW_AddTask+0xc4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3301      	adds	r3, #1
 8005078:	4a08      	ldr	r2, [pc, #32]	; (800509c <SYSVIEW_AddTask+0xc4>)
 800507a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f8ca 	bl	8005220 <SYSVIEW_SendTaskInfo>
 800508c:	e000      	b.n	8005090 <SYSVIEW_AddTask+0xb8>
    return;
 800508e:	bf00      	nop

}
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	08007510 	.word	0x08007510
 800509c:	20012e38 	.word	0x20012e38
 80050a0:	08007518 	.word	0x08007518
 80050a4:	20012d98 	.word	0x20012d98

080050a8 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80050b0:	4b59      	ldr	r3, [pc, #356]	; (8005218 <SYSVIEW_DeleteTask+0x170>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80ab 	beq.w	8005210 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	e00d      	b.n	80050dc <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80050c0:	4956      	ldr	r1, [pc, #344]	; (800521c <SYSVIEW_DeleteTask+0x174>)
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d008      	beq.n	80050e8 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	3301      	adds	r3, #1
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	4b4e      	ldr	r3, [pc, #312]	; (8005218 <SYSVIEW_DeleteTask+0x170>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d3ec      	bcc.n	80050c0 <SYSVIEW_DeleteTask+0x18>
 80050e6:	e000      	b.n	80050ea <SYSVIEW_DeleteTask+0x42>
      break;
 80050e8:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80050ea:	4b4b      	ldr	r3, [pc, #300]	; (8005218 <SYSVIEW_DeleteTask+0x170>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d111      	bne.n	800511a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4a46      	ldr	r2, [pc, #280]	; (800521c <SYSVIEW_DeleteTask+0x174>)
 8005102:	4413      	add	r3, r2
 8005104:	2214      	movs	r2, #20
 8005106:	2100      	movs	r1, #0
 8005108:	4618      	mov	r0, r3
 800510a:	f002 f97f 	bl	800740c <memset>
    _NumTasks--;
 800510e:	4b42      	ldr	r3, [pc, #264]	; (8005218 <SYSVIEW_DeleteTask+0x170>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3b01      	subs	r3, #1
 8005114:	4a40      	ldr	r2, [pc, #256]	; (8005218 <SYSVIEW_DeleteTask+0x170>)
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	e07b      	b.n	8005212 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800511a:	4b3f      	ldr	r3, [pc, #252]	; (8005218 <SYSVIEW_DeleteTask+0x170>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	429a      	cmp	r2, r3
 8005122:	d276      	bcs.n	8005212 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005124:	4b3c      	ldr	r3, [pc, #240]	; (8005218 <SYSVIEW_DeleteTask+0x170>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	1e5a      	subs	r2, r3, #1
 800512a:	493c      	ldr	r1, [pc, #240]	; (800521c <SYSVIEW_DeleteTask+0x174>)
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	6819      	ldr	r1, [r3, #0]
 8005138:	4838      	ldr	r0, [pc, #224]	; (800521c <SYSVIEW_DeleteTask+0x174>)
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4403      	add	r3, r0
 8005146:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005148:	4b33      	ldr	r3, [pc, #204]	; (8005218 <SYSVIEW_DeleteTask+0x170>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	1e5a      	subs	r2, r3, #1
 800514e:	4933      	ldr	r1, [pc, #204]	; (800521c <SYSVIEW_DeleteTask+0x174>)
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	3304      	adds	r3, #4
 800515c:	6819      	ldr	r1, [r3, #0]
 800515e:	482f      	ldr	r0, [pc, #188]	; (800521c <SYSVIEW_DeleteTask+0x174>)
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4613      	mov	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4403      	add	r3, r0
 800516c:	3304      	adds	r3, #4
 800516e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8005170:	4b29      	ldr	r3, [pc, #164]	; (8005218 <SYSVIEW_DeleteTask+0x170>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	1e5a      	subs	r2, r3, #1
 8005176:	4929      	ldr	r1, [pc, #164]	; (800521c <SYSVIEW_DeleteTask+0x174>)
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	3308      	adds	r3, #8
 8005184:	6819      	ldr	r1, [r3, #0]
 8005186:	4825      	ldr	r0, [pc, #148]	; (800521c <SYSVIEW_DeleteTask+0x174>)
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4403      	add	r3, r0
 8005194:	3308      	adds	r3, #8
 8005196:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8005198:	4b1f      	ldr	r3, [pc, #124]	; (8005218 <SYSVIEW_DeleteTask+0x170>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	1e5a      	subs	r2, r3, #1
 800519e:	491f      	ldr	r1, [pc, #124]	; (800521c <SYSVIEW_DeleteTask+0x174>)
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	330c      	adds	r3, #12
 80051ac:	6819      	ldr	r1, [r3, #0]
 80051ae:	481b      	ldr	r0, [pc, #108]	; (800521c <SYSVIEW_DeleteTask+0x174>)
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4403      	add	r3, r0
 80051bc:	330c      	adds	r3, #12
 80051be:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80051c0:	4b15      	ldr	r3, [pc, #84]	; (8005218 <SYSVIEW_DeleteTask+0x170>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	1e5a      	subs	r2, r3, #1
 80051c6:	4915      	ldr	r1, [pc, #84]	; (800521c <SYSVIEW_DeleteTask+0x174>)
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	3310      	adds	r3, #16
 80051d4:	6819      	ldr	r1, [r3, #0]
 80051d6:	4811      	ldr	r0, [pc, #68]	; (800521c <SYSVIEW_DeleteTask+0x174>)
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4403      	add	r3, r0
 80051e4:	3310      	adds	r3, #16
 80051e6:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80051e8:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <SYSVIEW_DeleteTask+0x170>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	1e5a      	subs	r2, r3, #1
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4a09      	ldr	r2, [pc, #36]	; (800521c <SYSVIEW_DeleteTask+0x174>)
 80051f8:	4413      	add	r3, r2
 80051fa:	2214      	movs	r2, #20
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f002 f904 	bl	800740c <memset>
    _NumTasks--;
 8005204:	4b04      	ldr	r3, [pc, #16]	; (8005218 <SYSVIEW_DeleteTask+0x170>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3b01      	subs	r3, #1
 800520a:	4a03      	ldr	r2, [pc, #12]	; (8005218 <SYSVIEW_DeleteTask+0x170>)
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	e000      	b.n	8005212 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8005210:	bf00      	nop
  }
}
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20012e38 	.word	0x20012e38
 800521c:	20012d98 	.word	0x20012d98

08005220 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005220:	b580      	push	{r7, lr}
 8005222:	b08a      	sub	sp, #40	; 0x28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800522e:	f107 0314 	add.w	r3, r7, #20
 8005232:	2214      	movs	r2, #20
 8005234:	2100      	movs	r1, #0
 8005236:	4618      	mov	r0, r3
 8005238:	f002 f8e8 	bl	800740c <memset>
  TaskInfo.TaskID     = TaskID;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005250:	f107 0314 	add.w	r3, r7, #20
 8005254:	4618      	mov	r0, r3
 8005256:	f001 fc33 	bl	8006ac0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800525a:	bf00      	nop
 800525c:	3728      	adds	r7, #40	; 0x28
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800526a:	4b26      	ldr	r3, [pc, #152]	; (8005304 <_DoInit+0xa0>)
 800526c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800526e:	22a8      	movs	r2, #168	; 0xa8
 8005270:	2100      	movs	r1, #0
 8005272:	6838      	ldr	r0, [r7, #0]
 8005274:	f002 f8ca 	bl	800740c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2203      	movs	r2, #3
 800527c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2203      	movs	r2, #3
 8005282:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	4a20      	ldr	r2, [pc, #128]	; (8005308 <_DoInit+0xa4>)
 8005288:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	4a1f      	ldr	r2, [pc, #124]	; (800530c <_DoInit+0xa8>)
 800528e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005296:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2200      	movs	r2, #0
 800529c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2200      	movs	r2, #0
 80052a2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	4a16      	ldr	r2, [pc, #88]	; (8005308 <_DoInit+0xa4>)
 80052ae:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	4a17      	ldr	r2, [pc, #92]	; (8005310 <_DoInit+0xac>)
 80052b4:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2210      	movs	r2, #16
 80052ba:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2200      	movs	r2, #0
 80052c0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2200      	movs	r2, #0
 80052c6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2200      	movs	r2, #0
 80052cc:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80052ce:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80052d2:	2300      	movs	r3, #0
 80052d4:	607b      	str	r3, [r7, #4]
 80052d6:	e00c      	b.n	80052f2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f1c3 030f 	rsb	r3, r3, #15
 80052de:	4a0d      	ldr	r2, [pc, #52]	; (8005314 <_DoInit+0xb0>)
 80052e0:	5cd1      	ldrb	r1, [r2, r3]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4413      	add	r3, r2
 80052e8:	460a      	mov	r2, r1
 80052ea:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3301      	adds	r3, #1
 80052f0:	607b      	str	r3, [r7, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b0f      	cmp	r3, #15
 80052f6:	d9ef      	bls.n	80052d8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80052f8:	f3bf 8f5f 	dmb	sy
}
 80052fc:	bf00      	nop
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	2001440c 	.word	0x2001440c
 8005308:	08007568 	.word	0x08007568
 800530c:	20012e3c 	.word	0x20012e3c
 8005310:	2001323c 	.word	0x2001323c
 8005314:	0800759c 	.word	0x0800759c

08005318 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005318:	b580      	push	{r7, lr}
 800531a:	b08c      	sub	sp, #48	; 0x30
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005324:	4b3e      	ldr	r3, [pc, #248]	; (8005420 <SEGGER_RTT_ReadNoLock+0x108>)
 8005326:	623b      	str	r3, [r7, #32]
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <SEGGER_RTT_ReadNoLock+0x1e>
 8005332:	f7ff ff97 	bl	8005264 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4613      	mov	r3, r2
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	4413      	add	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	3360      	adds	r3, #96	; 0x60
 8005342:	4a37      	ldr	r2, [pc, #220]	; (8005420 <SEGGER_RTT_ReadNoLock+0x108>)
 8005344:	4413      	add	r3, r2
 8005346:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005358:	2300      	movs	r3, #0
 800535a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800535c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	429a      	cmp	r2, r3
 8005362:	d92b      	bls.n	80053bc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4293      	cmp	r3, r2
 8005374:	bf28      	it	cs
 8005376:	4613      	movcs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	4413      	add	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	6939      	ldr	r1, [r7, #16]
 8005388:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800538a:	f002 f831 	bl	80073f0 <memcpy>
    NumBytesRead += NumBytesRem;
 800538e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	4413      	add	r3, r2
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	4413      	add	r3, r2
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	4413      	add	r3, r2
 80053ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d101      	bne.n	80053bc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80053b8:	2300      	movs	r3, #0
 80053ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4293      	cmp	r3, r2
 80053ca:	bf28      	it	cs
 80053cc:	4613      	movcs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d019      	beq.n	800540a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053dc:	4413      	add	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	6939      	ldr	r1, [r7, #16]
 80053e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053e6:	f002 f803 	bl	80073f0 <memcpy>
    NumBytesRead += NumBytesRem;
 80053ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80053f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4413      	add	r3, r2
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	4413      	add	r3, r2
 8005408:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005414:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005418:	4618      	mov	r0, r3
 800541a:	3730      	adds	r7, #48	; 0x30
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	2001440c 	.word	0x2001440c

08005424 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005432:	4b3d      	ldr	r3, [pc, #244]	; (8005528 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005440:	f7ff ff10 	bl	8005264 <_DoInit>
  SEGGER_RTT_LOCK();
 8005444:	f3ef 8311 	mrs	r3, BASEPRI
 8005448:	f04f 0120 	mov.w	r1, #32
 800544c:	f381 8811 	msr	BASEPRI, r1
 8005450:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005452:	4b35      	ldr	r3, [pc, #212]	; (8005528 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005454:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800545a:	6939      	ldr	r1, [r7, #16]
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	4613      	mov	r3, r2
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	4413      	add	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	440b      	add	r3, r1
 800546a:	3304      	adds	r3, #4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d008      	beq.n	8005484 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	3301      	adds	r3, #1
 8005476:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	429a      	cmp	r2, r3
 8005480:	dbeb      	blt.n	800545a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005482:	e000      	b.n	8005486 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005484:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	69fa      	ldr	r2, [r7, #28]
 800548c:	429a      	cmp	r2, r3
 800548e:	da3f      	bge.n	8005510 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005490:	6939      	ldr	r1, [r7, #16]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	4613      	mov	r3, r2
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	4413      	add	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	440b      	add	r3, r1
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80054a4:	6939      	ldr	r1, [r7, #16]
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	4613      	mov	r3, r2
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	4413      	add	r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	440b      	add	r3, r1
 80054b4:	3304      	adds	r3, #4
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80054ba:	6939      	ldr	r1, [r7, #16]
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	4613      	mov	r3, r2
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	4413      	add	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	440b      	add	r3, r1
 80054c8:	3320      	adds	r3, #32
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80054ce:	6939      	ldr	r1, [r7, #16]
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	4613      	mov	r3, r2
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	4413      	add	r3, r2
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	440b      	add	r3, r1
 80054dc:	3328      	adds	r3, #40	; 0x28
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80054e2:	6939      	ldr	r1, [r7, #16]
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	4613      	mov	r3, r2
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	4413      	add	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	440b      	add	r3, r1
 80054f0:	3324      	adds	r3, #36	; 0x24
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80054f6:	6939      	ldr	r1, [r7, #16]
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	4613      	mov	r3, r2
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	4413      	add	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	440b      	add	r3, r1
 8005504:	332c      	adds	r3, #44	; 0x2c
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800550a:	f3bf 8f5f 	dmb	sy
 800550e:	e002      	b.n	8005516 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005510:	f04f 33ff 	mov.w	r3, #4294967295
 8005514:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800551c:	69fb      	ldr	r3, [r7, #28]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	2001440c 	.word	0x2001440c

0800552c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800552c:	b580      	push	{r7, lr}
 800552e:	b08a      	sub	sp, #40	; 0x28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800553a:	4b21      	ldr	r3, [pc, #132]	; (80055c0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800553c:	623b      	str	r3, [r7, #32]
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005548:	f7ff fe8c 	bl	8005264 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800554c:	4b1c      	ldr	r3, [pc, #112]	; (80055c0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800554e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d82c      	bhi.n	80055b0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005556:	f3ef 8311 	mrs	r3, BASEPRI
 800555a:	f04f 0120 	mov.w	r1, #32
 800555e:	f381 8811 	msr	BASEPRI, r1
 8005562:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4613      	mov	r3, r2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	4413      	add	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	3360      	adds	r3, #96	; 0x60
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	4413      	add	r3, r2
 8005574:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00e      	beq.n	800559a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2200      	movs	r2, #0
 8005592:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2200      	movs	r2, #0
 8005598:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055a0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
 80055ae:	e002      	b.n	80055b6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80055b0:	f04f 33ff 	mov.w	r3, #4294967295
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3728      	adds	r7, #40	; 0x28
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	2001440c 	.word	0x2001440c

080055c4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00f      	beq.n	80055fa <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80055da:	e002      	b.n	80055e2 <_EncodeStr+0x1e>
      Len++;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	3301      	adds	r3, #1
 80055e0:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	4413      	add	r3, r2
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f6      	bne.n	80055dc <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d901      	bls.n	80055fa <_EncodeStr+0x36>
      Len = Limit;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2bfe      	cmp	r3, #254	; 0xfe
 80055fe:	d806      	bhi.n	800560e <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	60fa      	str	r2, [r7, #12]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	701a      	strb	r2, [r3, #0]
 800560c:	e011      	b.n	8005632 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	60fa      	str	r2, [r7, #12]
 8005614:	22ff      	movs	r2, #255	; 0xff
 8005616:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	60fa      	str	r2, [r7, #12]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	0a19      	lsrs	r1, r3, #8
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	60fa      	str	r2, [r7, #12]
 800562e:	b2ca      	uxtb	r2, r1
 8005630:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005636:	e00a      	b.n	800564e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	1c53      	adds	r3, r2, #1
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	1c59      	adds	r1, r3, #1
 8005642:	60f9      	str	r1, [r7, #12]
 8005644:	7812      	ldrb	r2, [r2, #0]
 8005646:	701a      	strb	r2, [r3, #0]
    n++;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	3301      	adds	r3, #1
 800564c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	429a      	cmp	r2, r3
 8005654:	d3f0      	bcc.n	8005638 <_EncodeStr+0x74>
  }
  return pPayload;
 8005656:	68fb      	ldr	r3, [r7, #12]
}
 8005658:	4618      	mov	r0, r3
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3307      	adds	r3, #7
}
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005682:	4b35      	ldr	r3, [pc, #212]	; (8005758 <_HandleIncomingPacket+0xdc>)
 8005684:	7e1b      	ldrb	r3, [r3, #24]
 8005686:	4618      	mov	r0, r3
 8005688:	1cfb      	adds	r3, r7, #3
 800568a:	2201      	movs	r2, #1
 800568c:	4619      	mov	r1, r3
 800568e:	f7ff fe43 	bl	8005318 <SEGGER_RTT_ReadNoLock>
 8005692:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d052      	beq.n	8005740 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800569a:	78fb      	ldrb	r3, [r7, #3]
 800569c:	2b80      	cmp	r3, #128	; 0x80
 800569e:	d031      	beq.n	8005704 <_HandleIncomingPacket+0x88>
 80056a0:	2b80      	cmp	r3, #128	; 0x80
 80056a2:	dc40      	bgt.n	8005726 <_HandleIncomingPacket+0xaa>
 80056a4:	2b07      	cmp	r3, #7
 80056a6:	dc15      	bgt.n	80056d4 <_HandleIncomingPacket+0x58>
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	dd3c      	ble.n	8005726 <_HandleIncomingPacket+0xaa>
 80056ac:	3b01      	subs	r3, #1
 80056ae:	2b06      	cmp	r3, #6
 80056b0:	d839      	bhi.n	8005726 <_HandleIncomingPacket+0xaa>
 80056b2:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <_HandleIncomingPacket+0x3c>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	080056db 	.word	0x080056db
 80056bc:	080056e1 	.word	0x080056e1
 80056c0:	080056e7 	.word	0x080056e7
 80056c4:	080056ed 	.word	0x080056ed
 80056c8:	080056f3 	.word	0x080056f3
 80056cc:	080056f9 	.word	0x080056f9
 80056d0:	080056ff 	.word	0x080056ff
 80056d4:	2b7f      	cmp	r3, #127	; 0x7f
 80056d6:	d035      	beq.n	8005744 <_HandleIncomingPacket+0xc8>
 80056d8:	e025      	b.n	8005726 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80056da:	f001 f877 	bl	80067cc <SEGGER_SYSVIEW_Start>
      break;
 80056de:	e036      	b.n	800574e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80056e0:	f001 f92e 	bl	8006940 <SEGGER_SYSVIEW_Stop>
      break;
 80056e4:	e033      	b.n	800574e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80056e6:	f001 fb07 	bl	8006cf8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80056ea:	e030      	b.n	800574e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80056ec:	f001 facc 	bl	8006c88 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80056f0:	e02d      	b.n	800574e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80056f2:	f001 f94b 	bl	800698c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80056f6:	e02a      	b.n	800574e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80056f8:	f001 fd9a 	bl	8007230 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80056fc:	e027      	b.n	800574e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80056fe:	f001 fd79 	bl	80071f4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005702:	e024      	b.n	800574e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005704:	4b14      	ldr	r3, [pc, #80]	; (8005758 <_HandleIncomingPacket+0xdc>)
 8005706:	7e1b      	ldrb	r3, [r3, #24]
 8005708:	4618      	mov	r0, r3
 800570a:	1cfb      	adds	r3, r7, #3
 800570c:	2201      	movs	r2, #1
 800570e:	4619      	mov	r1, r3
 8005710:	f7ff fe02 	bl	8005318 <SEGGER_RTT_ReadNoLock>
 8005714:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d015      	beq.n	8005748 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	4618      	mov	r0, r3
 8005720:	f001 fce8 	bl	80070f4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005724:	e010      	b.n	8005748 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	b25b      	sxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	da0e      	bge.n	800574c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800572e:	4b0a      	ldr	r3, [pc, #40]	; (8005758 <_HandleIncomingPacket+0xdc>)
 8005730:	7e1b      	ldrb	r3, [r3, #24]
 8005732:	4618      	mov	r0, r3
 8005734:	1cfb      	adds	r3, r7, #3
 8005736:	2201      	movs	r2, #1
 8005738:	4619      	mov	r1, r3
 800573a:	f7ff fded 	bl	8005318 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800573e:	e005      	b.n	800574c <_HandleIncomingPacket+0xd0>
    }
  }
 8005740:	bf00      	nop
 8005742:	e004      	b.n	800574e <_HandleIncomingPacket+0xd2>
      break;
 8005744:	bf00      	nop
 8005746:	e002      	b.n	800574e <_HandleIncomingPacket+0xd2>
      break;
 8005748:	bf00      	nop
 800574a:	e000      	b.n	800574e <_HandleIncomingPacket+0xd2>
      break;
 800574c:	bf00      	nop
}
 800574e:	bf00      	nop
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20014254 	.word	0x20014254

0800575c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800575c:	b580      	push	{r7, lr}
 800575e:	b08c      	sub	sp, #48	; 0x30
 8005760:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005762:	2301      	movs	r3, #1
 8005764:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005766:	1d3b      	adds	r3, r7, #4
 8005768:	3301      	adds	r3, #1
 800576a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005770:	4b31      	ldr	r3, [pc, #196]	; (8005838 <_TrySendOverflowPacket+0xdc>)
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	62bb      	str	r3, [r7, #40]	; 0x28
 8005776:	e00b      	b.n	8005790 <_TrySendOverflowPacket+0x34>
 8005778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577a:	b2da      	uxtb	r2, r3
 800577c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577e:	1c59      	adds	r1, r3, #1
 8005780:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005782:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	09db      	lsrs	r3, r3, #7
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	2b7f      	cmp	r3, #127	; 0x7f
 8005794:	d8f0      	bhi.n	8005778 <_TrySendOverflowPacket+0x1c>
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800579c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80057a6:	4b25      	ldr	r3, [pc, #148]	; (800583c <_TrySendOverflowPacket+0xe0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80057ac:	4b22      	ldr	r3, [pc, #136]	; (8005838 <_TrySendOverflowPacket+0xdc>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	623b      	str	r3, [r7, #32]
 80057be:	e00b      	b.n	80057d8 <_TrySendOverflowPacket+0x7c>
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	1c59      	adds	r1, r3, #1
 80057c8:	6279      	str	r1, [r7, #36]	; 0x24
 80057ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	701a      	strb	r2, [r3, #0]
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	09db      	lsrs	r3, r3, #7
 80057d6:	623b      	str	r3, [r7, #32]
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	2b7f      	cmp	r3, #127	; 0x7f
 80057dc:	d8f0      	bhi.n	80057c0 <_TrySendOverflowPacket+0x64>
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	627a      	str	r2, [r7, #36]	; 0x24
 80057e4:	6a3a      	ldr	r2, [r7, #32]
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	701a      	strb	r2, [r3, #0]
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80057ee:	4b12      	ldr	r3, [pc, #72]	; (8005838 <_TrySendOverflowPacket+0xdc>)
 80057f0:	785b      	ldrb	r3, [r3, #1]
 80057f2:	4618      	mov	r0, r3
 80057f4:	1d3b      	adds	r3, r7, #4
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	461a      	mov	r2, r3
 80057fc:	1d3b      	adds	r3, r7, #4
 80057fe:	4619      	mov	r1, r3
 8005800:	f7fa fce6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005804:	4603      	mov	r3, r0
 8005806:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d009      	beq.n	8005822 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800580e:	4a0a      	ldr	r2, [pc, #40]	; (8005838 <_TrySendOverflowPacket+0xdc>)
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005814:	4b08      	ldr	r3, [pc, #32]	; (8005838 <_TrySendOverflowPacket+0xdc>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	3b01      	subs	r3, #1
 800581a:	b2da      	uxtb	r2, r3
 800581c:	4b06      	ldr	r3, [pc, #24]	; (8005838 <_TrySendOverflowPacket+0xdc>)
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e004      	b.n	800582c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005822:	4b05      	ldr	r3, [pc, #20]	; (8005838 <_TrySendOverflowPacket+0xdc>)
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	3301      	adds	r3, #1
 8005828:	4a03      	ldr	r2, [pc, #12]	; (8005838 <_TrySendOverflowPacket+0xdc>)
 800582a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800582c:	693b      	ldr	r3, [r7, #16]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3730      	adds	r7, #48	; 0x30
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20014254 	.word	0x20014254
 800583c:	e0001004 	.word	0xe0001004

08005840 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005840:	b580      	push	{r7, lr}
 8005842:	b08a      	sub	sp, #40	; 0x28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800584c:	4b9a      	ldr	r3, [pc, #616]	; (8005ab8 <_SendPacket+0x278>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d010      	beq.n	8005876 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005854:	4b98      	ldr	r3, [pc, #608]	; (8005ab8 <_SendPacket+0x278>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8129 	beq.w	8005ab0 <_SendPacket+0x270>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800585e:	4b96      	ldr	r3, [pc, #600]	; (8005ab8 <_SendPacket+0x278>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d109      	bne.n	800587a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005866:	f7ff ff79 	bl	800575c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800586a:	4b93      	ldr	r3, [pc, #588]	; (8005ab8 <_SendPacket+0x278>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b01      	cmp	r3, #1
 8005870:	f040 8120 	bne.w	8005ab4 <_SendPacket+0x274>
      goto SendDone;
    }
  }
Send:
 8005874:	e001      	b.n	800587a <_SendPacket+0x3a>
    goto Send;
 8005876:	bf00      	nop
 8005878:	e000      	b.n	800587c <_SendPacket+0x3c>
Send:
 800587a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b1f      	cmp	r3, #31
 8005880:	d809      	bhi.n	8005896 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005882:	4b8d      	ldr	r3, [pc, #564]	; (8005ab8 <_SendPacket+0x278>)
 8005884:	69da      	ldr	r2, [r3, #28]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	fa22 f303 	lsr.w	r3, r2, r3
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	f040 8115 	bne.w	8005ac0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b17      	cmp	r3, #23
 800589a:	d807      	bhi.n	80058ac <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3b01      	subs	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	e0c4      	b.n	8005a36 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	2b7f      	cmp	r3, #127	; 0x7f
 80058b8:	d912      	bls.n	80058e0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	09da      	lsrs	r2, r3, #7
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	b2d2      	uxtb	r2, r2
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	3a01      	subs	r2, #1
 80058d2:	60fa      	str	r2, [r7, #12]
 80058d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	e006      	b.n	80058ee <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b7e      	cmp	r3, #126	; 0x7e
 80058f2:	d807      	bhi.n	8005904 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	701a      	strb	r2, [r3, #0]
 8005902:	e098      	b.n	8005a36 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800590a:	d212      	bcs.n	8005932 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	09da      	lsrs	r2, r3, #7
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	3b01      	subs	r3, #1
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	b2db      	uxtb	r3, r3
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	3a01      	subs	r2, #1
 8005924:	60fa      	str	r2, [r7, #12]
 8005926:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800592a:	b2da      	uxtb	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	e081      	b.n	8005a36 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005938:	d21d      	bcs.n	8005976 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	0b9a      	lsrs	r2, r3, #14
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3b01      	subs	r3, #1
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	b2d2      	uxtb	r2, r2
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	09db      	lsrs	r3, r3, #7
 800594e:	b2db      	uxtb	r3, r3
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	3a01      	subs	r2, #1
 8005954:	60fa      	str	r2, [r7, #12]
 8005956:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800595a:	b2da      	uxtb	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	3a01      	subs	r2, #1
 8005968:	60fa      	str	r2, [r7, #12]
 800596a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800596e:	b2da      	uxtb	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	701a      	strb	r2, [r3, #0]
 8005974:	e05f      	b.n	8005a36 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800597c:	d228      	bcs.n	80059d0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	0d5a      	lsrs	r2, r3, #21
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3b01      	subs	r3, #1
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	0b9b      	lsrs	r3, r3, #14
 8005992:	b2db      	uxtb	r3, r3
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	3a01      	subs	r2, #1
 8005998:	60fa      	str	r2, [r7, #12]
 800599a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	09db      	lsrs	r3, r3, #7
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	3a01      	subs	r2, #1
 80059ae:	60fa      	str	r2, [r7, #12]
 80059b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	3a01      	subs	r2, #1
 80059c2:	60fa      	str	r2, [r7, #12]
 80059c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	e032      	b.n	8005a36 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	0f1a      	lsrs	r2, r3, #28
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	0d5b      	lsrs	r3, r3, #21
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	3a01      	subs	r2, #1
 80059ea:	60fa      	str	r2, [r7, #12]
 80059ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	0b9b      	lsrs	r3, r3, #14
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	3a01      	subs	r2, #1
 8005a00:	60fa      	str	r2, [r7, #12]
 8005a02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	09db      	lsrs	r3, r3, #7
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	3a01      	subs	r2, #1
 8005a16:	60fa      	str	r2, [r7, #12]
 8005a18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	3a01      	subs	r2, #1
 8005a2a:	60fa      	str	r2, [r7, #12]
 8005a2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a36:	4b21      	ldr	r3, [pc, #132]	; (8005abc <_SendPacket+0x27c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005a3c:	4b1e      	ldr	r3, [pc, #120]	; (8005ab8 <_SendPacket+0x278>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	623b      	str	r3, [r7, #32]
 8005a4e:	e00b      	b.n	8005a68 <_SendPacket+0x228>
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	1c59      	adds	r1, r3, #1
 8005a58:	6279      	str	r1, [r7, #36]	; 0x24
 8005a5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	09db      	lsrs	r3, r3, #7
 8005a66:	623b      	str	r3, [r7, #32]
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a6c:	d8f0      	bhi.n	8005a50 <_SendPacket+0x210>
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	627a      	str	r2, [r7, #36]	; 0x24
 8005a74:	6a3a      	ldr	r2, [r7, #32]
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005a7e:	4b0e      	ldr	r3, [pc, #56]	; (8005ab8 <_SendPacket+0x278>)
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	4618      	mov	r0, r3
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	68f9      	ldr	r1, [r7, #12]
 8005a8e:	f7fa fb9f 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a92:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a9a:	4a07      	ldr	r2, [pc, #28]	; (8005ab8 <_SendPacket+0x278>)
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	60d3      	str	r3, [r2, #12]
 8005aa0:	e00f      	b.n	8005ac2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005aa2:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <_SendPacket+0x278>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	4b03      	ldr	r3, [pc, #12]	; (8005ab8 <_SendPacket+0x278>)
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	e008      	b.n	8005ac2 <_SendPacket+0x282>
    goto SendDone;
 8005ab0:	bf00      	nop
 8005ab2:	e006      	b.n	8005ac2 <_SendPacket+0x282>
      goto SendDone;
 8005ab4:	bf00      	nop
 8005ab6:	e004      	b.n	8005ac2 <_SendPacket+0x282>
 8005ab8:	20014254 	.word	0x20014254
 8005abc:	e0001004 	.word	0xe0001004
      goto SendDone;
 8005ac0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005ac2:	4b14      	ldr	r3, [pc, #80]	; (8005b14 <_SendPacket+0x2d4>)
 8005ac4:	7e1b      	ldrb	r3, [r3, #24]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4a13      	ldr	r2, [pc, #76]	; (8005b18 <_SendPacket+0x2d8>)
 8005aca:	460b      	mov	r3, r1
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	440b      	add	r3, r1
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	4413      	add	r3, r2
 8005ad4:	336c      	adds	r3, #108	; 0x6c
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	4b0e      	ldr	r3, [pc, #56]	; (8005b14 <_SendPacket+0x2d4>)
 8005ada:	7e1b      	ldrb	r3, [r3, #24]
 8005adc:	4618      	mov	r0, r3
 8005ade:	490e      	ldr	r1, [pc, #56]	; (8005b18 <_SendPacket+0x2d8>)
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	4403      	add	r3, r0
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	440b      	add	r3, r1
 8005aea:	3370      	adds	r3, #112	; 0x70
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d00b      	beq.n	8005b0a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005af2:	4b08      	ldr	r3, [pc, #32]	; (8005b14 <_SendPacket+0x2d4>)
 8005af4:	789b      	ldrb	r3, [r3, #2]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d107      	bne.n	8005b0a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005afa:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <_SendPacket+0x2d4>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b00:	f7ff fdbc 	bl	800567c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <_SendPacket+0x2d4>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005b0a:	bf00      	nop
 8005b0c:	3728      	adds	r7, #40	; 0x28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20014254 	.word	0x20014254
 8005b18:	2001440c 	.word	0x2001440c

08005b1c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08a      	sub	sp, #40	; 0x28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	3301      	adds	r3, #1
 8005b32:	2b80      	cmp	r3, #128	; 0x80
 8005b34:	d80a      	bhi.n	8005b4c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	1c59      	adds	r1, r3, #1
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6051      	str	r1, [r2, #4]
 8005b40:	78fa      	ldrb	r2, [r7, #3]
 8005b42:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	2b80      	cmp	r3, #128	; 0x80
 8005b52:	d15a      	bne.n	8005c0a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	623b      	str	r3, [r7, #32]
 8005b74:	e00b      	b.n	8005b8e <_StoreChar+0x72>
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	1c59      	adds	r1, r3, #1
 8005b7e:	6279      	str	r1, [r7, #36]	; 0x24
 8005b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b84:	b2d2      	uxtb	r2, r2
 8005b86:	701a      	strb	r2, [r3, #0]
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	09db      	lsrs	r3, r3, #7
 8005b8c:	623b      	str	r3, [r7, #32]
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	2b7f      	cmp	r3, #127	; 0x7f
 8005b92:	d8f0      	bhi.n	8005b76 <_StoreChar+0x5a>
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	627a      	str	r2, [r7, #36]	; 0x24
 8005b9a:	6a3a      	ldr	r2, [r7, #32]
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	61fb      	str	r3, [r7, #28]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	61bb      	str	r3, [r7, #24]
 8005bac:	e00b      	b.n	8005bc6 <_StoreChar+0xaa>
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	1c59      	adds	r1, r3, #1
 8005bb6:	61f9      	str	r1, [r7, #28]
 8005bb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	09db      	lsrs	r3, r3, #7
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8005bca:	d8f0      	bhi.n	8005bae <_StoreChar+0x92>
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	61fa      	str	r2, [r7, #28]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	221a      	movs	r2, #26
 8005be2:	6939      	ldr	r1, [r7, #16]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff fe2b 	bl	8005840 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff fd38 	bl	8005664 <_PreparePacket>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	611a      	str	r2, [r3, #16]
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	3728      	adds	r7, #40	; 0x28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	; 0x28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005c26:	2301      	movs	r3, #1
 8005c28:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005c2e:	e007      	b.n	8005c40 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005c30:	6a3a      	ldr	r2, [r7, #32]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c38:	623b      	str	r3, [r7, #32]
    Width++;
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005c40:	6a3a      	ldr	r2, [r7, #32]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d2f3      	bcs.n	8005c30 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d901      	bls.n	8005c54 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d11f      	bne.n	8005c9e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01c      	beq.n	8005c9e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d005      	beq.n	8005c7a <_PrintUnsigned+0x66>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d102      	bne.n	8005c7a <_PrintUnsigned+0x66>
        c = '0';
 8005c74:	2330      	movs	r3, #48	; 0x30
 8005c76:	76fb      	strb	r3, [r7, #27]
 8005c78:	e001      	b.n	8005c7e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005c7a:	2320      	movs	r3, #32
 8005c7c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c7e:	e007      	b.n	8005c90 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	3b01      	subs	r3, #1
 8005c84:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005c86:	7efb      	ldrb	r3, [r7, #27]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7ff ff46 	bl	8005b1c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <_PrintUnsigned+0x8a>
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d3f0      	bcc.n	8005c80 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d903      	bls.n	8005cac <_PrintUnsigned+0x98>
      NumDigits--;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	603b      	str	r3, [r7, #0]
 8005caa:	e009      	b.n	8005cc0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb4:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d200      	bcs.n	8005cc0 <_PrintUnsigned+0xac>
        break;
 8005cbe:	e005      	b.n	8005ccc <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	fb02 f303 	mul.w	r3, r2, r3
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005cca:	e7e8      	b.n	8005c9e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cda:	fb02 f303 	mul.w	r3, r2, r3
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005ce4:	4a15      	ldr	r2, [pc, #84]	; (8005d3c <_PrintUnsigned+0x128>)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	4413      	add	r3, r2
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	4619      	mov	r1, r3
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff ff14 	bl	8005b1c <_StoreChar>
    Digit /= Base;
 8005cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e3      	bne.n	8005ccc <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d011      	beq.n	8005d32 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00e      	beq.n	8005d32 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d14:	e006      	b.n	8005d24 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005d1c:	2120      	movs	r1, #32
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff fefc 	bl	8005b1c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <_PrintUnsigned+0x11e>
 8005d2a:	69fa      	ldr	r2, [r7, #28]
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d3f1      	bcc.n	8005d16 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005d32:	bf00      	nop
 8005d34:	3728      	adds	r7, #40	; 0x28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	080075bc 	.word	0x080075bc

08005d40 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b088      	sub	sp, #32
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	bfb8      	it	lt
 8005d54:	425b      	neglt	r3, r3
 8005d56:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005d5c:	e007      	b.n	8005d6e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	fb92 f3f3 	sdiv	r3, r2, r3
 8005d66:	613b      	str	r3, [r7, #16]
    Width++;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	daf3      	bge.n	8005d5e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d901      	bls.n	8005d82 <_PrintInt+0x42>
    Width = NumDigits;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <_PrintInt+0x5e>
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	db04      	blt.n	8005d98 <_PrintInt+0x58>
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <_PrintInt+0x5e>
    FieldWidth--;
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <_PrintInt+0x6e>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d016      	beq.n	8005ddc <_PrintInt+0x9c>
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d111      	bne.n	8005ddc <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00e      	beq.n	8005ddc <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005dbe:	e006      	b.n	8005dce <_PrintInt+0x8e>
        FieldWidth--;
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005dc6:	2120      	movs	r1, #32
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f7ff fea7 	bl	8005b1c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <_PrintInt+0x9c>
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d3f1      	bcc.n	8005dc0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	da07      	bge.n	8005df2 <_PrintInt+0xb2>
    v = -v;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	425b      	negs	r3, r3
 8005de6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005de8:	212d      	movs	r1, #45	; 0x2d
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f7ff fe96 	bl	8005b1c <_StoreChar>
 8005df0:	e008      	b.n	8005e04 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005dfc:	212b      	movs	r1, #43	; 0x2b
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f7ff fe8c 	bl	8005b1c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d019      	beq.n	8005e42 <_PrintInt+0x102>
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d114      	bne.n	8005e42 <_PrintInt+0x102>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d111      	bne.n	8005e42 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00e      	beq.n	8005e42 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e24:	e006      	b.n	8005e34 <_PrintInt+0xf4>
        FieldWidth--;
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005e2c:	2130      	movs	r1, #48	; 0x30
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7ff fe74 	bl	8005b1c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <_PrintInt+0x102>
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d3f1      	bcc.n	8005e26 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005e42:	68b9      	ldr	r1, [r7, #8]
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f7ff fedf 	bl	8005c14 <_PrintUnsigned>
}
 8005e56:	bf00      	nop
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b098      	sub	sp, #96	; 0x60
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e6c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e70:	f04f 0120 	mov.w	r1, #32
 8005e74:	f381 8811 	msr	BASEPRI, r1
 8005e78:	633b      	str	r3, [r7, #48]	; 0x30
 8005e7a:	48b7      	ldr	r0, [pc, #732]	; (8006158 <_VPrintTarget+0x2f8>)
 8005e7c:	f7ff fbf2 	bl	8005664 <_PreparePacket>
 8005e80:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005e82:	4bb5      	ldr	r3, [pc, #724]	; (8006158 <_VPrintTarget+0x2f8>)
 8005e84:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005e86:	2300      	movs	r3, #0
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	3301      	adds	r3, #1
 8005e92:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005ea6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 8183 	beq.w	80061b6 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005eb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005eb4:	2b25      	cmp	r3, #37	; 0x25
 8005eb6:	f040 8170 	bne.w	800619a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005eca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ece:	3b23      	subs	r3, #35	; 0x23
 8005ed0:	2b0d      	cmp	r3, #13
 8005ed2:	d83f      	bhi.n	8005f54 <_VPrintTarget+0xf4>
 8005ed4:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <_VPrintTarget+0x7c>)
 8005ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eda:	bf00      	nop
 8005edc:	08005f45 	.word	0x08005f45
 8005ee0:	08005f55 	.word	0x08005f55
 8005ee4:	08005f55 	.word	0x08005f55
 8005ee8:	08005f55 	.word	0x08005f55
 8005eec:	08005f55 	.word	0x08005f55
 8005ef0:	08005f55 	.word	0x08005f55
 8005ef4:	08005f55 	.word	0x08005f55
 8005ef8:	08005f55 	.word	0x08005f55
 8005efc:	08005f35 	.word	0x08005f35
 8005f00:	08005f55 	.word	0x08005f55
 8005f04:	08005f15 	.word	0x08005f15
 8005f08:	08005f55 	.word	0x08005f55
 8005f0c:	08005f55 	.word	0x08005f55
 8005f10:	08005f25 	.word	0x08005f25
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f16:	f043 0301 	orr.w	r3, r3, #1
 8005f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	e01a      	b.n	8005f5a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f26:	f043 0302 	orr.w	r3, r3, #2
 8005f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	e012      	b.n	8005f5a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f36:	f043 0304 	orr.w	r3, r3, #4
 8005f3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	e00a      	b.n	8005f5a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f46:	f043 0308 	orr.w	r3, r3, #8
 8005f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	e002      	b.n	8005f5a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005f54:	2300      	movs	r3, #0
 8005f56:	653b      	str	r3, [r7, #80]	; 0x50
 8005f58:	bf00      	nop
        }
      } while (v);
 8005f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1b0      	bne.n	8005ec2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005f60:	2300      	movs	r3, #0
 8005f62:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005f6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f70:	2b2f      	cmp	r3, #47	; 0x2f
 8005f72:	d912      	bls.n	8005f9a <_VPrintTarget+0x13a>
 8005f74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f78:	2b39      	cmp	r3, #57	; 0x39
 8005f7a:	d80e      	bhi.n	8005f9a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f92:	4413      	add	r3, r2
 8005f94:	3b30      	subs	r3, #48	; 0x30
 8005f96:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005f98:	e7e4      	b.n	8005f64 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005fa6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005faa:	2b2e      	cmp	r3, #46	; 0x2e
 8005fac:	d11d      	bne.n	8005fea <_VPrintTarget+0x18a>
        sFormat++;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fc0:	2b2f      	cmp	r3, #47	; 0x2f
 8005fc2:	d912      	bls.n	8005fea <_VPrintTarget+0x18a>
 8005fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fc8:	2b39      	cmp	r3, #57	; 0x39
 8005fca:	d80e      	bhi.n	8005fea <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005fd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fe2:	4413      	add	r3, r2
 8005fe4:	3b30      	subs	r3, #48	; 0x30
 8005fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005fe8:	e7e4      	b.n	8005fb4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005ff2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ff6:	2b6c      	cmp	r3, #108	; 0x6c
 8005ff8:	d003      	beq.n	8006002 <_VPrintTarget+0x1a2>
 8005ffa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ffe:	2b68      	cmp	r3, #104	; 0x68
 8006000:	d107      	bne.n	8006012 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3301      	adds	r3, #1
 800600e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006010:	e7ef      	b.n	8005ff2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006012:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006016:	2b25      	cmp	r3, #37	; 0x25
 8006018:	f000 80b3 	beq.w	8006182 <_VPrintTarget+0x322>
 800601c:	2b25      	cmp	r3, #37	; 0x25
 800601e:	f2c0 80b7 	blt.w	8006190 <_VPrintTarget+0x330>
 8006022:	2b78      	cmp	r3, #120	; 0x78
 8006024:	f300 80b4 	bgt.w	8006190 <_VPrintTarget+0x330>
 8006028:	2b58      	cmp	r3, #88	; 0x58
 800602a:	f2c0 80b1 	blt.w	8006190 <_VPrintTarget+0x330>
 800602e:	3b58      	subs	r3, #88	; 0x58
 8006030:	2b20      	cmp	r3, #32
 8006032:	f200 80ad 	bhi.w	8006190 <_VPrintTarget+0x330>
 8006036:	a201      	add	r2, pc, #4	; (adr r2, 800603c <_VPrintTarget+0x1dc>)
 8006038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603c:	08006133 	.word	0x08006133
 8006040:	08006191 	.word	0x08006191
 8006044:	08006191 	.word	0x08006191
 8006048:	08006191 	.word	0x08006191
 800604c:	08006191 	.word	0x08006191
 8006050:	08006191 	.word	0x08006191
 8006054:	08006191 	.word	0x08006191
 8006058:	08006191 	.word	0x08006191
 800605c:	08006191 	.word	0x08006191
 8006060:	08006191 	.word	0x08006191
 8006064:	08006191 	.word	0x08006191
 8006068:	080060c1 	.word	0x080060c1
 800606c:	080060e7 	.word	0x080060e7
 8006070:	08006191 	.word	0x08006191
 8006074:	08006191 	.word	0x08006191
 8006078:	08006191 	.word	0x08006191
 800607c:	08006191 	.word	0x08006191
 8006080:	08006191 	.word	0x08006191
 8006084:	08006191 	.word	0x08006191
 8006088:	08006191 	.word	0x08006191
 800608c:	08006191 	.word	0x08006191
 8006090:	08006191 	.word	0x08006191
 8006094:	08006191 	.word	0x08006191
 8006098:	08006191 	.word	0x08006191
 800609c:	0800615d 	.word	0x0800615d
 80060a0:	08006191 	.word	0x08006191
 80060a4:	08006191 	.word	0x08006191
 80060a8:	08006191 	.word	0x08006191
 80060ac:	08006191 	.word	0x08006191
 80060b0:	0800610d 	.word	0x0800610d
 80060b4:	08006191 	.word	0x08006191
 80060b8:	08006191 	.word	0x08006191
 80060bc:	08006133 	.word	0x08006133
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	1d19      	adds	r1, r3, #4
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6011      	str	r1, [r2, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80060ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80060d4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80060d8:	f107 0314 	add.w	r3, r7, #20
 80060dc:	4611      	mov	r1, r2
 80060de:	4618      	mov	r0, r3
 80060e0:	f7ff fd1c 	bl	8005b1c <_StoreChar>
        break;
 80060e4:	e055      	b.n	8006192 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	1d19      	adds	r1, r3, #4
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6011      	str	r1, [r2, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80060f4:	f107 0014 	add.w	r0, r7, #20
 80060f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060fa:	9301      	str	r3, [sp, #4]
 80060fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006102:	220a      	movs	r2, #10
 8006104:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006106:	f7ff fe1b 	bl	8005d40 <_PrintInt>
        break;
 800610a:	e042      	b.n	8006192 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	1d19      	adds	r1, r3, #4
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6011      	str	r1, [r2, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800611a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800611c:	f107 0014 	add.w	r0, r7, #20
 8006120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800612a:	220a      	movs	r2, #10
 800612c:	f7ff fd72 	bl	8005c14 <_PrintUnsigned>
        break;
 8006130:	e02f      	b.n	8006192 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	1d19      	adds	r1, r3, #4
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6011      	str	r1, [r2, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006140:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006142:	f107 0014 	add.w	r0, r7, #20
 8006146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006148:	9301      	str	r3, [sp, #4]
 800614a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006150:	2210      	movs	r2, #16
 8006152:	f7ff fd5f 	bl	8005c14 <_PrintUnsigned>
        break;
 8006156:	e01c      	b.n	8006192 <_VPrintTarget+0x332>
 8006158:	20014284 	.word	0x20014284
      case 'p':
        v = va_arg(*pParamList, int);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	1d19      	adds	r1, r3, #4
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6011      	str	r1, [r2, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800616a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800616c:	f107 0014 	add.w	r0, r7, #20
 8006170:	2300      	movs	r3, #0
 8006172:	9301      	str	r3, [sp, #4]
 8006174:	2308      	movs	r3, #8
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	2308      	movs	r3, #8
 800617a:	2210      	movs	r2, #16
 800617c:	f7ff fd4a 	bl	8005c14 <_PrintUnsigned>
        break;
 8006180:	e007      	b.n	8006192 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006182:	f107 0314 	add.w	r3, r7, #20
 8006186:	2125      	movs	r1, #37	; 0x25
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff fcc7 	bl	8005b1c <_StoreChar>
        break;
 800618e:	e000      	b.n	8006192 <_VPrintTarget+0x332>
      default:
        break;
 8006190:	bf00      	nop
      }
      sFormat++;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3301      	adds	r3, #1
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	e007      	b.n	80061aa <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800619a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800619e:	f107 0314 	add.w	r3, r7, #20
 80061a2:	4611      	mov	r1, r2
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff fcb9 	bl	8005b1c <_StoreChar>
    }
  } while (*sFormat);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f47f ae72 	bne.w	8005e98 <_VPrintTarget+0x38>
 80061b4:	e000      	b.n	80061b8 <_VPrintTarget+0x358>
      break;
 80061b6:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d041      	beq.n	8006242 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80061be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	643b      	str	r3, [r7, #64]	; 0x40
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ce:	e00b      	b.n	80061e8 <_VPrintTarget+0x388>
 80061d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d6:	1c59      	adds	r1, r3, #1
 80061d8:	6439      	str	r1, [r7, #64]	; 0x40
 80061da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e4:	09db      	lsrs	r3, r3, #7
 80061e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ea:	2b7f      	cmp	r3, #127	; 0x7f
 80061ec:	d8f0      	bhi.n	80061d0 <_VPrintTarget+0x370>
 80061ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	643a      	str	r2, [r7, #64]	; 0x40
 80061f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061fc:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	63bb      	str	r3, [r7, #56]	; 0x38
 8006202:	2300      	movs	r3, #0
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
 8006206:	e00b      	b.n	8006220 <_VPrintTarget+0x3c0>
 8006208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620a:	b2da      	uxtb	r2, r3
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	1c59      	adds	r1, r3, #1
 8006210:	63b9      	str	r1, [r7, #56]	; 0x38
 8006212:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621c:	09db      	lsrs	r3, r3, #7
 800621e:	637b      	str	r3, [r7, #52]	; 0x34
 8006220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006222:	2b7f      	cmp	r3, #127	; 0x7f
 8006224:	d8f0      	bhi.n	8006208 <_VPrintTarget+0x3a8>
 8006226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	63ba      	str	r2, [r7, #56]	; 0x38
 800622c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006234:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	69b9      	ldr	r1, [r7, #24]
 800623a:	221a      	movs	r2, #26
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff faff 	bl	8005840 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006248:	bf00      	nop
 800624a:	3758      	adds	r7, #88	; 0x58
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af02      	add	r7, sp, #8
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800625e:	2300      	movs	r3, #0
 8006260:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006264:	4917      	ldr	r1, [pc, #92]	; (80062c4 <SEGGER_SYSVIEW_Init+0x74>)
 8006266:	4818      	ldr	r0, [pc, #96]	; (80062c8 <SEGGER_SYSVIEW_Init+0x78>)
 8006268:	f7ff f8dc 	bl	8005424 <SEGGER_RTT_AllocUpBuffer>
 800626c:	4603      	mov	r3, r0
 800626e:	b2da      	uxtb	r2, r3
 8006270:	4b16      	ldr	r3, [pc, #88]	; (80062cc <SEGGER_SYSVIEW_Init+0x7c>)
 8006272:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006274:	4b15      	ldr	r3, [pc, #84]	; (80062cc <SEGGER_SYSVIEW_Init+0x7c>)
 8006276:	785a      	ldrb	r2, [r3, #1]
 8006278:	4b14      	ldr	r3, [pc, #80]	; (80062cc <SEGGER_SYSVIEW_Init+0x7c>)
 800627a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800627c:	4b13      	ldr	r3, [pc, #76]	; (80062cc <SEGGER_SYSVIEW_Init+0x7c>)
 800627e:	7e1b      	ldrb	r3, [r3, #24]
 8006280:	4618      	mov	r0, r3
 8006282:	2300      	movs	r3, #0
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	2308      	movs	r3, #8
 8006288:	4a11      	ldr	r2, [pc, #68]	; (80062d0 <SEGGER_SYSVIEW_Init+0x80>)
 800628a:	490f      	ldr	r1, [pc, #60]	; (80062c8 <SEGGER_SYSVIEW_Init+0x78>)
 800628c:	f7ff f94e 	bl	800552c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006290:	4b0e      	ldr	r3, [pc, #56]	; (80062cc <SEGGER_SYSVIEW_Init+0x7c>)
 8006292:	2200      	movs	r2, #0
 8006294:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006296:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <SEGGER_SYSVIEW_Init+0x84>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a0c      	ldr	r2, [pc, #48]	; (80062cc <SEGGER_SYSVIEW_Init+0x7c>)
 800629c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800629e:	4a0b      	ldr	r2, [pc, #44]	; (80062cc <SEGGER_SYSVIEW_Init+0x7c>)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80062a4:	4a09      	ldr	r2, [pc, #36]	; (80062cc <SEGGER_SYSVIEW_Init+0x7c>)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80062aa:	4a08      	ldr	r2, [pc, #32]	; (80062cc <SEGGER_SYSVIEW_Init+0x7c>)
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80062b0:	4a06      	ldr	r2, [pc, #24]	; (80062cc <SEGGER_SYSVIEW_Init+0x7c>)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80062b6:	4b05      	ldr	r3, [pc, #20]	; (80062cc <SEGGER_SYSVIEW_Init+0x7c>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80062bc:	bf00      	nop
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	2001324c 	.word	0x2001324c
 80062c8:	08007574 	.word	0x08007574
 80062cc:	20014254 	.word	0x20014254
 80062d0:	2001424c 	.word	0x2001424c
 80062d4:	e0001004 	.word	0xe0001004

080062d8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80062e0:	4a04      	ldr	r2, [pc, #16]	; (80062f4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6113      	str	r3, [r2, #16]
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20014254 	.word	0x20014254

080062f8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006300:	f3ef 8311 	mrs	r3, BASEPRI
 8006304:	f04f 0120 	mov.w	r1, #32
 8006308:	f381 8811 	msr	BASEPRI, r1
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	4808      	ldr	r0, [pc, #32]	; (8006330 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006310:	f7ff f9a8 	bl	8005664 <_PreparePacket>
 8006314:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	68b9      	ldr	r1, [r7, #8]
 800631a:	68b8      	ldr	r0, [r7, #8]
 800631c:	f7ff fa90 	bl	8005840 <_SendPacket>
  RECORD_END();
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f383 8811 	msr	BASEPRI, r3
}
 8006326:	bf00      	nop
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	20014284 	.word	0x20014284

08006334 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800633e:	f3ef 8311 	mrs	r3, BASEPRI
 8006342:	f04f 0120 	mov.w	r1, #32
 8006346:	f381 8811 	msr	BASEPRI, r1
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	4816      	ldr	r0, [pc, #88]	; (80063a8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800634e:	f7ff f989 	bl	8005664 <_PreparePacket>
 8006352:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	61fb      	str	r3, [r7, #28]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	61bb      	str	r3, [r7, #24]
 8006360:	e00b      	b.n	800637a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	b2da      	uxtb	r2, r3
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	1c59      	adds	r1, r3, #1
 800636a:	61f9      	str	r1, [r7, #28]
 800636c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	09db      	lsrs	r3, r3, #7
 8006378:	61bb      	str	r3, [r7, #24]
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2b7f      	cmp	r3, #127	; 0x7f
 800637e:	d8f0      	bhi.n	8006362 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	61fa      	str	r2, [r7, #28]
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	68f9      	ldr	r1, [r7, #12]
 8006394:	6938      	ldr	r0, [r7, #16]
 8006396:	f7ff fa53 	bl	8005840 <_SendPacket>
  RECORD_END();
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f383 8811 	msr	BASEPRI, r3
}
 80063a0:	bf00      	nop
 80063a2:	3720      	adds	r7, #32
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20014284 	.word	0x20014284

080063ac <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08c      	sub	sp, #48	; 0x30
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80063b8:	f3ef 8311 	mrs	r3, BASEPRI
 80063bc:	f04f 0120 	mov.w	r1, #32
 80063c0:	f381 8811 	msr	BASEPRI, r1
 80063c4:	61fb      	str	r3, [r7, #28]
 80063c6:	4825      	ldr	r0, [pc, #148]	; (800645c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80063c8:	f7ff f94c 	bl	8005664 <_PreparePacket>
 80063cc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80063da:	e00b      	b.n	80063f4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	1c59      	adds	r1, r3, #1
 80063e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	09db      	lsrs	r3, r3, #7
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	2b7f      	cmp	r3, #127	; 0x7f
 80063f8:	d8f0      	bhi.n	80063dc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80063fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	623b      	str	r3, [r7, #32]
 8006412:	e00b      	b.n	800642c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	b2da      	uxtb	r2, r3
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	1c59      	adds	r1, r3, #1
 800641c:	6279      	str	r1, [r7, #36]	; 0x24
 800641e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	09db      	lsrs	r3, r3, #7
 800642a:	623b      	str	r3, [r7, #32]
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	2b7f      	cmp	r3, #127	; 0x7f
 8006430:	d8f0      	bhi.n	8006414 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	627a      	str	r2, [r7, #36]	; 0x24
 8006438:	6a3a      	ldr	r2, [r7, #32]
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	6979      	ldr	r1, [r7, #20]
 8006446:	69b8      	ldr	r0, [r7, #24]
 8006448:	f7ff f9fa 	bl	8005840 <_SendPacket>
  RECORD_END();
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f383 8811 	msr	BASEPRI, r3
}
 8006452:	bf00      	nop
 8006454:	3730      	adds	r7, #48	; 0x30
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20014284 	.word	0x20014284

08006460 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006460:	b580      	push	{r7, lr}
 8006462:	b08e      	sub	sp, #56	; 0x38
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800646e:	f3ef 8311 	mrs	r3, BASEPRI
 8006472:	f04f 0120 	mov.w	r1, #32
 8006476:	f381 8811 	msr	BASEPRI, r1
 800647a:	61fb      	str	r3, [r7, #28]
 800647c:	4832      	ldr	r0, [pc, #200]	; (8006548 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800647e:	f7ff f8f1 	bl	8005664 <_PreparePacket>
 8006482:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	637b      	str	r3, [r7, #52]	; 0x34
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	633b      	str	r3, [r7, #48]	; 0x30
 8006490:	e00b      	b.n	80064aa <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	b2da      	uxtb	r2, r3
 8006496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006498:	1c59      	adds	r1, r3, #1
 800649a:	6379      	str	r1, [r7, #52]	; 0x34
 800649c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	09db      	lsrs	r3, r3, #7
 80064a8:	633b      	str	r3, [r7, #48]	; 0x30
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	2b7f      	cmp	r3, #127	; 0x7f
 80064ae:	d8f0      	bhi.n	8006492 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80064b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	637a      	str	r2, [r7, #52]	; 0x34
 80064b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064c8:	e00b      	b.n	80064e2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80064ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d0:	1c59      	adds	r1, r3, #1
 80064d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	09db      	lsrs	r3, r3, #7
 80064e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e4:	2b7f      	cmp	r3, #127	; 0x7f
 80064e6:	d8f0      	bhi.n	80064ca <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	623b      	str	r3, [r7, #32]
 8006500:	e00b      	b.n	800651a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	b2da      	uxtb	r2, r3
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	1c59      	adds	r1, r3, #1
 800650a:	6279      	str	r1, [r7, #36]	; 0x24
 800650c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	09db      	lsrs	r3, r3, #7
 8006518:	623b      	str	r3, [r7, #32]
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	2b7f      	cmp	r3, #127	; 0x7f
 800651e:	d8f0      	bhi.n	8006502 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	627a      	str	r2, [r7, #36]	; 0x24
 8006526:	6a3a      	ldr	r2, [r7, #32]
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	6979      	ldr	r1, [r7, #20]
 8006534:	69b8      	ldr	r0, [r7, #24]
 8006536:	f7ff f983 	bl	8005840 <_SendPacket>
  RECORD_END();
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	f383 8811 	msr	BASEPRI, r3
}
 8006540:	bf00      	nop
 8006542:	3738      	adds	r7, #56	; 0x38
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20014284 	.word	0x20014284

0800654c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800654c:	b580      	push	{r7, lr}
 800654e:	b090      	sub	sp, #64	; 0x40
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800655a:	f3ef 8311 	mrs	r3, BASEPRI
 800655e:	f04f 0120 	mov.w	r1, #32
 8006562:	f381 8811 	msr	BASEPRI, r1
 8006566:	61fb      	str	r3, [r7, #28]
 8006568:	4840      	ldr	r0, [pc, #256]	; (800666c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800656a:	f7ff f87b 	bl	8005664 <_PreparePacket>
 800656e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	63bb      	str	r3, [r7, #56]	; 0x38
 800657c:	e00b      	b.n	8006596 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800657e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006580:	b2da      	uxtb	r2, r3
 8006582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006584:	1c59      	adds	r1, r3, #1
 8006586:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006588:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006592:	09db      	lsrs	r3, r3, #7
 8006594:	63bb      	str	r3, [r7, #56]	; 0x38
 8006596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006598:	2b7f      	cmp	r3, #127	; 0x7f
 800659a:	d8f0      	bhi.n	800657e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800659c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065a4:	b2d2      	uxtb	r2, r2
 80065a6:	701a      	strb	r2, [r3, #0]
 80065a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	637b      	str	r3, [r7, #52]	; 0x34
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	633b      	str	r3, [r7, #48]	; 0x30
 80065b4:	e00b      	b.n	80065ce <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065bc:	1c59      	adds	r1, r3, #1
 80065be:	6379      	str	r1, [r7, #52]	; 0x34
 80065c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	701a      	strb	r2, [r3, #0]
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	09db      	lsrs	r3, r3, #7
 80065cc:	633b      	str	r3, [r7, #48]	; 0x30
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	2b7f      	cmp	r3, #127	; 0x7f
 80065d2:	d8f0      	bhi.n	80065b6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80065d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	637a      	str	r2, [r7, #52]	; 0x34
 80065da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065dc:	b2d2      	uxtb	r2, r2
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ec:	e00b      	b.n	8006606 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f4:	1c59      	adds	r1, r3, #1
 80065f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80065f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065fc:	b2d2      	uxtb	r2, r2
 80065fe:	701a      	strb	r2, [r3, #0]
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	09db      	lsrs	r3, r3, #7
 8006604:	62bb      	str	r3, [r7, #40]	; 0x28
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	2b7f      	cmp	r3, #127	; 0x7f
 800660a:	d8f0      	bhi.n	80065ee <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800660c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	701a      	strb	r2, [r3, #0]
 8006618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
 8006620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006622:	623b      	str	r3, [r7, #32]
 8006624:	e00b      	b.n	800663e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	b2da      	uxtb	r2, r3
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	1c59      	adds	r1, r3, #1
 800662e:	6279      	str	r1, [r7, #36]	; 0x24
 8006630:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	09db      	lsrs	r3, r3, #7
 800663c:	623b      	str	r3, [r7, #32]
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	2b7f      	cmp	r3, #127	; 0x7f
 8006642:	d8f0      	bhi.n	8006626 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	627a      	str	r2, [r7, #36]	; 0x24
 800664a:	6a3a      	ldr	r2, [r7, #32]
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	6979      	ldr	r1, [r7, #20]
 8006658:	69b8      	ldr	r0, [r7, #24]
 800665a:	f7ff f8f1 	bl	8005840 <_SendPacket>
  RECORD_END();
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	f383 8811 	msr	BASEPRI, r3
}
 8006664:	bf00      	nop
 8006666:	3740      	adds	r7, #64	; 0x40
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	20014284 	.word	0x20014284

08006670 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8006670:	b580      	push	{r7, lr}
 8006672:	b092      	sub	sp, #72	; 0x48
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
 800667c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800667e:	f3ef 8311 	mrs	r3, BASEPRI
 8006682:	f04f 0120 	mov.w	r1, #32
 8006686:	f381 8811 	msr	BASEPRI, r1
 800668a:	61fb      	str	r3, [r7, #28]
 800668c:	484e      	ldr	r0, [pc, #312]	; (80067c8 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800668e:	f7fe ffe9 	bl	8005664 <_PreparePacket>
 8006692:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	647b      	str	r3, [r7, #68]	; 0x44
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	643b      	str	r3, [r7, #64]	; 0x40
 80066a0:	e00b      	b.n	80066ba <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 80066a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a8:	1c59      	adds	r1, r3, #1
 80066aa:	6479      	str	r1, [r7, #68]	; 0x44
 80066ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	701a      	strb	r2, [r3, #0]
 80066b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b6:	09db      	lsrs	r3, r3, #7
 80066b8:	643b      	str	r3, [r7, #64]	; 0x40
 80066ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066bc:	2b7f      	cmp	r3, #127	; 0x7f
 80066be:	d8f0      	bhi.n	80066a2 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 80066c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	647a      	str	r2, [r7, #68]	; 0x44
 80066c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066c8:	b2d2      	uxtb	r2, r2
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80066d8:	e00b      	b.n	80066f2 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e0:	1c59      	adds	r1, r3, #1
 80066e2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80066e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	701a      	strb	r2, [r3, #0]
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	09db      	lsrs	r3, r3, #7
 80066f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	2b7f      	cmp	r3, #127	; 0x7f
 80066f6:	d8f0      	bhi.n	80066da <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 80066f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80066fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006700:	b2d2      	uxtb	r2, r2
 8006702:	701a      	strb	r2, [r3, #0]
 8006704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006706:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	637b      	str	r3, [r7, #52]	; 0x34
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	633b      	str	r3, [r7, #48]	; 0x30
 8006710:	e00b      	b.n	800672a <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	b2da      	uxtb	r2, r3
 8006716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006718:	1c59      	adds	r1, r3, #1
 800671a:	6379      	str	r1, [r7, #52]	; 0x34
 800671c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006720:	b2d2      	uxtb	r2, r2
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	09db      	lsrs	r3, r3, #7
 8006728:	633b      	str	r3, [r7, #48]	; 0x30
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	2b7f      	cmp	r3, #127	; 0x7f
 800672e:	d8f0      	bhi.n	8006712 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8006730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	637a      	str	r2, [r7, #52]	; 0x34
 8006736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]
 800673c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006746:	62bb      	str	r3, [r7, #40]	; 0x28
 8006748:	e00b      	b.n	8006762 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	b2da      	uxtb	r2, r3
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	1c59      	adds	r1, r3, #1
 8006752:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006754:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	701a      	strb	r2, [r3, #0]
 800675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675e:	09db      	lsrs	r3, r3, #7
 8006760:	62bb      	str	r3, [r7, #40]	; 0x28
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	2b7f      	cmp	r3, #127	; 0x7f
 8006766:	d8f0      	bhi.n	800674a <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800676e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
 800677c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800677e:	623b      	str	r3, [r7, #32]
 8006780:	e00b      	b.n	800679a <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	b2da      	uxtb	r2, r3
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	1c59      	adds	r1, r3, #1
 800678a:	6279      	str	r1, [r7, #36]	; 0x24
 800678c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	09db      	lsrs	r3, r3, #7
 8006798:	623b      	str	r3, [r7, #32]
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	2b7f      	cmp	r3, #127	; 0x7f
 800679e:	d8f0      	bhi.n	8006782 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	627a      	str	r2, [r7, #36]	; 0x24
 80067a6:	6a3a      	ldr	r2, [r7, #32]
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	6979      	ldr	r1, [r7, #20]
 80067b4:	69b8      	ldr	r0, [r7, #24]
 80067b6:	f7ff f843 	bl	8005840 <_SendPacket>
  RECORD_END();
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	f383 8811 	msr	BASEPRI, r3
}
 80067c0:	bf00      	nop
 80067c2:	3748      	adds	r7, #72	; 0x48
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20014284 	.word	0x20014284

080067cc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08c      	sub	sp, #48	; 0x30
 80067d0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80067d2:	4b58      	ldr	r3, [pc, #352]	; (8006934 <SEGGER_SYSVIEW_Start+0x168>)
 80067d4:	2201      	movs	r2, #1
 80067d6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80067d8:	f3ef 8311 	mrs	r3, BASEPRI
 80067dc:	f04f 0120 	mov.w	r1, #32
 80067e0:	f381 8811 	msr	BASEPRI, r1
 80067e4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80067e6:	4b53      	ldr	r3, [pc, #332]	; (8006934 <SEGGER_SYSVIEW_Start+0x168>)
 80067e8:	785b      	ldrb	r3, [r3, #1]
 80067ea:	220a      	movs	r2, #10
 80067ec:	4952      	ldr	r1, [pc, #328]	; (8006938 <SEGGER_SYSVIEW_Start+0x16c>)
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7f9 fcee 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80067fa:	200a      	movs	r0, #10
 80067fc:	f7ff fd7c 	bl	80062f8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006800:	f3ef 8311 	mrs	r3, BASEPRI
 8006804:	f04f 0120 	mov.w	r1, #32
 8006808:	f381 8811 	msr	BASEPRI, r1
 800680c:	60bb      	str	r3, [r7, #8]
 800680e:	484b      	ldr	r0, [pc, #300]	; (800693c <SEGGER_SYSVIEW_Start+0x170>)
 8006810:	f7fe ff28 	bl	8005664 <_PreparePacket>
 8006814:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800681e:	4b45      	ldr	r3, [pc, #276]	; (8006934 <SEGGER_SYSVIEW_Start+0x168>)
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	62bb      	str	r3, [r7, #40]	; 0x28
 8006824:	e00b      	b.n	800683e <SEGGER_SYSVIEW_Start+0x72>
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	b2da      	uxtb	r2, r3
 800682a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682c:	1c59      	adds	r1, r3, #1
 800682e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006830:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006834:	b2d2      	uxtb	r2, r2
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	09db      	lsrs	r3, r3, #7
 800683c:	62bb      	str	r3, [r7, #40]	; 0x28
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	2b7f      	cmp	r3, #127	; 0x7f
 8006842:	d8f0      	bhi.n	8006826 <SEGGER_SYSVIEW_Start+0x5a>
 8006844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	62fa      	str	r2, [r7, #44]	; 0x2c
 800684a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800684c:	b2d2      	uxtb	r2, r2
 800684e:	701a      	strb	r2, [r3, #0]
 8006850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006852:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	627b      	str	r3, [r7, #36]	; 0x24
 8006858:	4b36      	ldr	r3, [pc, #216]	; (8006934 <SEGGER_SYSVIEW_Start+0x168>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	623b      	str	r3, [r7, #32]
 800685e:	e00b      	b.n	8006878 <SEGGER_SYSVIEW_Start+0xac>
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	b2da      	uxtb	r2, r3
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	1c59      	adds	r1, r3, #1
 8006868:	6279      	str	r1, [r7, #36]	; 0x24
 800686a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	09db      	lsrs	r3, r3, #7
 8006876:	623b      	str	r3, [r7, #32]
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	2b7f      	cmp	r3, #127	; 0x7f
 800687c:	d8f0      	bhi.n	8006860 <SEGGER_SYSVIEW_Start+0x94>
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	627a      	str	r2, [r7, #36]	; 0x24
 8006884:	6a3a      	ldr	r2, [r7, #32]
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	701a      	strb	r2, [r3, #0]
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	61fb      	str	r3, [r7, #28]
 8006892:	4b28      	ldr	r3, [pc, #160]	; (8006934 <SEGGER_SYSVIEW_Start+0x168>)
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	61bb      	str	r3, [r7, #24]
 8006898:	e00b      	b.n	80068b2 <SEGGER_SYSVIEW_Start+0xe6>
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	b2da      	uxtb	r2, r3
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	1c59      	adds	r1, r3, #1
 80068a2:	61f9      	str	r1, [r7, #28]
 80068a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068a8:	b2d2      	uxtb	r2, r2
 80068aa:	701a      	strb	r2, [r3, #0]
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	09db      	lsrs	r3, r3, #7
 80068b0:	61bb      	str	r3, [r7, #24]
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	2b7f      	cmp	r3, #127	; 0x7f
 80068b6:	d8f0      	bhi.n	800689a <SEGGER_SYSVIEW_Start+0xce>
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	61fa      	str	r2, [r7, #28]
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	2300      	movs	r3, #0
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	e00b      	b.n	80068ea <SEGGER_SYSVIEW_Start+0x11e>
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	1c59      	adds	r1, r3, #1
 80068da:	6179      	str	r1, [r7, #20]
 80068dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	701a      	strb	r2, [r3, #0]
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	09db      	lsrs	r3, r3, #7
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2b7f      	cmp	r3, #127	; 0x7f
 80068ee:	d8f0      	bhi.n	80068d2 <SEGGER_SYSVIEW_Start+0x106>
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	617a      	str	r2, [r7, #20]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006900:	2218      	movs	r2, #24
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7fe ff9b 	bl	8005840 <_SendPacket>
      RECORD_END();
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006910:	4b08      	ldr	r3, [pc, #32]	; (8006934 <SEGGER_SYSVIEW_Start+0x168>)
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006918:	4b06      	ldr	r3, [pc, #24]	; (8006934 <SEGGER_SYSVIEW_Start+0x168>)
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800691e:	f000 f9eb 	bl	8006cf8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006922:	f000 f9b1 	bl	8006c88 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006926:	f000 fc83 	bl	8007230 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800692a:	bf00      	nop
 800692c:	3730      	adds	r7, #48	; 0x30
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20014254 	.word	0x20014254
 8006938:	080075b0 	.word	0x080075b0
 800693c:	20014284 	.word	0x20014284

08006940 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006946:	f3ef 8311 	mrs	r3, BASEPRI
 800694a:	f04f 0120 	mov.w	r1, #32
 800694e:	f381 8811 	msr	BASEPRI, r1
 8006952:	607b      	str	r3, [r7, #4]
 8006954:	480b      	ldr	r0, [pc, #44]	; (8006984 <SEGGER_SYSVIEW_Stop+0x44>)
 8006956:	f7fe fe85 	bl	8005664 <_PreparePacket>
 800695a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800695c:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <SEGGER_SYSVIEW_Stop+0x48>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d007      	beq.n	8006974 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006964:	220b      	movs	r2, #11
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	6838      	ldr	r0, [r7, #0]
 800696a:	f7fe ff69 	bl	8005840 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800696e:	4b06      	ldr	r3, [pc, #24]	; (8006988 <SEGGER_SYSVIEW_Stop+0x48>)
 8006970:	2200      	movs	r2, #0
 8006972:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f383 8811 	msr	BASEPRI, r3
}
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20014284 	.word	0x20014284
 8006988:	20014254 	.word	0x20014254

0800698c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b08c      	sub	sp, #48	; 0x30
 8006990:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006992:	f3ef 8311 	mrs	r3, BASEPRI
 8006996:	f04f 0120 	mov.w	r1, #32
 800699a:	f381 8811 	msr	BASEPRI, r1
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	4845      	ldr	r0, [pc, #276]	; (8006ab8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80069a2:	f7fe fe5f 	bl	8005664 <_PreparePacket>
 80069a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069b0:	4b42      	ldr	r3, [pc, #264]	; (8006abc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b6:	e00b      	b.n	80069d0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069be:	1c59      	adds	r1, r3, #1
 80069c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	09db      	lsrs	r3, r3, #7
 80069ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	2b7f      	cmp	r3, #127	; 0x7f
 80069d4:	d8f0      	bhi.n	80069b8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
 80069ea:	4b34      	ldr	r3, [pc, #208]	; (8006abc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	623b      	str	r3, [r7, #32]
 80069f0:	e00b      	b.n	8006a0a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	1c59      	adds	r1, r3, #1
 80069fa:	6279      	str	r1, [r7, #36]	; 0x24
 80069fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	701a      	strb	r2, [r3, #0]
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	09db      	lsrs	r3, r3, #7
 8006a08:	623b      	str	r3, [r7, #32]
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a0e:	d8f0      	bhi.n	80069f2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	627a      	str	r2, [r7, #36]	; 0x24
 8006a16:	6a3a      	ldr	r2, [r7, #32]
 8006a18:	b2d2      	uxtb	r2, r2
 8006a1a:	701a      	strb	r2, [r3, #0]
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	61fb      	str	r3, [r7, #28]
 8006a24:	4b25      	ldr	r3, [pc, #148]	; (8006abc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	61bb      	str	r3, [r7, #24]
 8006a2a:	e00b      	b.n	8006a44 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	1c59      	adds	r1, r3, #1
 8006a34:	61f9      	str	r1, [r7, #28]
 8006a36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	701a      	strb	r2, [r3, #0]
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	09db      	lsrs	r3, r3, #7
 8006a42:	61bb      	str	r3, [r7, #24]
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	2b7f      	cmp	r3, #127	; 0x7f
 8006a48:	d8f0      	bhi.n	8006a2c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	61fa      	str	r2, [r7, #28]
 8006a50:	69ba      	ldr	r2, [r7, #24]
 8006a52:	b2d2      	uxtb	r2, r2
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	617b      	str	r3, [r7, #20]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	613b      	str	r3, [r7, #16]
 8006a62:	e00b      	b.n	8006a7c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	1c59      	adds	r1, r3, #1
 8006a6c:	6179      	str	r1, [r7, #20]
 8006a6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	701a      	strb	r2, [r3, #0]
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	09db      	lsrs	r3, r3, #7
 8006a7a:	613b      	str	r3, [r7, #16]
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a80:	d8f0      	bhi.n	8006a64 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	617a      	str	r2, [r7, #20]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	701a      	strb	r2, [r3, #0]
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006a92:	2218      	movs	r2, #24
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	68b8      	ldr	r0, [r7, #8]
 8006a98:	f7fe fed2 	bl	8005840 <_SendPacket>
  RECORD_END();
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006aa2:	4b06      	ldr	r3, [pc, #24]	; (8006abc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006aaa:	4b04      	ldr	r3, [pc, #16]	; (8006abc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	4798      	blx	r3
  }
}
 8006ab0:	bf00      	nop
 8006ab2:	3730      	adds	r7, #48	; 0x30
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	20014284 	.word	0x20014284
 8006abc:	20014254 	.word	0x20014254

08006ac0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b092      	sub	sp, #72	; 0x48
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8006acc:	f04f 0120 	mov.w	r1, #32
 8006ad0:	f381 8811 	msr	BASEPRI, r1
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	486a      	ldr	r0, [pc, #424]	; (8006c80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006ad8:	f7fe fdc4 	bl	8005664 <_PreparePacket>
 8006adc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	4b66      	ldr	r3, [pc, #408]	; (8006c84 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	643b      	str	r3, [r7, #64]	; 0x40
 8006af2:	e00b      	b.n	8006b0c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006afa:	1c59      	adds	r1, r3, #1
 8006afc:	6479      	str	r1, [r7, #68]	; 0x44
 8006afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b08:	09db      	lsrs	r3, r3, #7
 8006b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b10:	d8f0      	bhi.n	8006af4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	647a      	str	r2, [r7, #68]	; 0x44
 8006b18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b2c:	e00b      	b.n	8006b46 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b34:	1c59      	adds	r1, r3, #1
 8006b36:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006b38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b3c:	b2d2      	uxtb	r2, r2
 8006b3e:	701a      	strb	r2, [r3, #0]
 8006b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b42:	09db      	lsrs	r3, r3, #7
 8006b44:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b48:	2b7f      	cmp	r3, #127	; 0x7f
 8006b4a:	d8f0      	bhi.n	8006b2e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b5a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	2220      	movs	r2, #32
 8006b62:	4619      	mov	r1, r3
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7fe fd2d 	bl	80055c4 <_EncodeStr>
 8006b6a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006b6c:	2209      	movs	r2, #9
 8006b6e:	68f9      	ldr	r1, [r7, #12]
 8006b70:	6938      	ldr	r0, [r7, #16]
 8006b72:	f7fe fe65 	bl	8005840 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	4b40      	ldr	r3, [pc, #256]	; (8006c84 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	633b      	str	r3, [r7, #48]	; 0x30
 8006b8a:	e00b      	b.n	8006ba4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b92:	1c59      	adds	r1, r3, #1
 8006b94:	6379      	str	r1, [r7, #52]	; 0x34
 8006b96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b9a:	b2d2      	uxtb	r2, r2
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	09db      	lsrs	r3, r3, #7
 8006ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ba8:	d8f0      	bhi.n	8006b8c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	637a      	str	r2, [r7, #52]	; 0x34
 8006bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bc4:	e00b      	b.n	8006bde <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	1c59      	adds	r1, r3, #1
 8006bce:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bd4:	b2d2      	uxtb	r2, r2
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	09db      	lsrs	r3, r3, #7
 8006bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	2b7f      	cmp	r3, #127	; 0x7f
 8006be2:	d8f0      	bhi.n	8006bc6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	701a      	strb	r2, [r3, #0]
 8006bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	623b      	str	r3, [r7, #32]
 8006bfe:	e00b      	b.n	8006c18 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	1c59      	adds	r1, r3, #1
 8006c08:	6279      	str	r1, [r7, #36]	; 0x24
 8006c0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c0e:	b2d2      	uxtb	r2, r2
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	09db      	lsrs	r3, r3, #7
 8006c16:	623b      	str	r3, [r7, #32]
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c1c:	d8f0      	bhi.n	8006c00 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	627a      	str	r2, [r7, #36]	; 0x24
 8006c24:	6a3a      	ldr	r2, [r7, #32]
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	61fb      	str	r3, [r7, #28]
 8006c32:	2300      	movs	r3, #0
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	e00b      	b.n	8006c50 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	1c59      	adds	r1, r3, #1
 8006c40:	61f9      	str	r1, [r7, #28]
 8006c42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c46:	b2d2      	uxtb	r2, r2
 8006c48:	701a      	strb	r2, [r3, #0]
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	09db      	lsrs	r3, r3, #7
 8006c4e:	61bb      	str	r3, [r7, #24]
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	2b7f      	cmp	r3, #127	; 0x7f
 8006c54:	d8f0      	bhi.n	8006c38 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	61fa      	str	r2, [r7, #28]
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	b2d2      	uxtb	r2, r2
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006c66:	2215      	movs	r2, #21
 8006c68:	68f9      	ldr	r1, [r7, #12]
 8006c6a:	6938      	ldr	r0, [r7, #16]
 8006c6c:	f7fe fde8 	bl	8005840 <_SendPacket>
  RECORD_END();
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f383 8811 	msr	BASEPRI, r3
}
 8006c76:	bf00      	nop
 8006c78:	3748      	adds	r7, #72	; 0x48
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20014284 	.word	0x20014284
 8006c84:	20014254 	.word	0x20014254

08006c88 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006c8c:	4b07      	ldr	r3, [pc, #28]	; (8006cac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d008      	beq.n	8006ca6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006c94:	4b05      	ldr	r3, [pc, #20]	; (8006cac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006c9e:	4b03      	ldr	r3, [pc, #12]	; (8006cac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	4798      	blx	r3
  }
}
 8006ca6:	bf00      	nop
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	20014254 	.word	0x20014254

08006cb0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cb8:	f3ef 8311 	mrs	r3, BASEPRI
 8006cbc:	f04f 0120 	mov.w	r1, #32
 8006cc0:	f381 8811 	msr	BASEPRI, r1
 8006cc4:	617b      	str	r3, [r7, #20]
 8006cc6:	480b      	ldr	r0, [pc, #44]	; (8006cf4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006cc8:	f7fe fccc 	bl	8005664 <_PreparePacket>
 8006ccc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cce:	2280      	movs	r2, #128	; 0x80
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	6938      	ldr	r0, [r7, #16]
 8006cd4:	f7fe fc76 	bl	80055c4 <_EncodeStr>
 8006cd8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006cda:	220e      	movs	r2, #14
 8006cdc:	68f9      	ldr	r1, [r7, #12]
 8006cde:	6938      	ldr	r0, [r7, #16]
 8006ce0:	f7fe fdae 	bl	8005840 <_SendPacket>
  RECORD_END();
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f383 8811 	msr	BASEPRI, r3
}
 8006cea:	bf00      	nop
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20014284 	.word	0x20014284

08006cf8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006cfe:	4b15      	ldr	r3, [pc, #84]	; (8006d54 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d01a      	beq.n	8006d3c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006d06:	4b13      	ldr	r3, [pc, #76]	; (8006d54 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d015      	beq.n	8006d3c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006d10:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4798      	blx	r3
 8006d18:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d1c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006d1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d22:	f04f 0200 	mov.w	r2, #0
 8006d26:	f04f 0300 	mov.w	r3, #0
 8006d2a:	000a      	movs	r2, r1
 8006d2c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d2e:	4613      	mov	r3, r2
 8006d30:	461a      	mov	r2, r3
 8006d32:	4621      	mov	r1, r4
 8006d34:	200d      	movs	r0, #13
 8006d36:	f7ff fb39 	bl	80063ac <SEGGER_SYSVIEW_RecordU32x2>
 8006d3a:	e006      	b.n	8006d4a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4619      	mov	r1, r3
 8006d42:	200c      	movs	r0, #12
 8006d44:	f7ff faf6 	bl	8006334 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006d48:	bf00      	nop
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd90      	pop	{r4, r7, pc}
 8006d52:	bf00      	nop
 8006d54:	20014254 	.word	0x20014254
 8006d58:	e0001004 	.word	0xe0001004

08006d5c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d62:	f3ef 8311 	mrs	r3, BASEPRI
 8006d66:	f04f 0120 	mov.w	r1, #32
 8006d6a:	f381 8811 	msr	BASEPRI, r1
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	4819      	ldr	r0, [pc, #100]	; (8006dd8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006d72:	f7fe fc77 	bl	8005664 <_PreparePacket>
 8006d76:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006d7c:	4b17      	ldr	r3, [pc, #92]	; (8006ddc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d84:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	613b      	str	r3, [r7, #16]
 8006d8e:	e00b      	b.n	8006da8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	1c59      	adds	r1, r3, #1
 8006d98:	6179      	str	r1, [r7, #20]
 8006d9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d9e:	b2d2      	uxtb	r2, r2
 8006da0:	701a      	strb	r2, [r3, #0]
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	09db      	lsrs	r3, r3, #7
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	2b7f      	cmp	r3, #127	; 0x7f
 8006dac:	d8f0      	bhi.n	8006d90 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	617a      	str	r2, [r7, #20]
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	701a      	strb	r2, [r3, #0]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	6879      	ldr	r1, [r7, #4]
 8006dc2:	68b8      	ldr	r0, [r7, #8]
 8006dc4:	f7fe fd3c 	bl	8005840 <_SendPacket>
  RECORD_END();
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f383 8811 	msr	BASEPRI, r3
}
 8006dce:	bf00      	nop
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20014284 	.word	0x20014284
 8006ddc:	e000ed04 	.word	0xe000ed04

08006de0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006de6:	f3ef 8311 	mrs	r3, BASEPRI
 8006dea:	f04f 0120 	mov.w	r1, #32
 8006dee:	f381 8811 	msr	BASEPRI, r1
 8006df2:	607b      	str	r3, [r7, #4]
 8006df4:	4807      	ldr	r0, [pc, #28]	; (8006e14 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006df6:	f7fe fc35 	bl	8005664 <_PreparePacket>
 8006dfa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6838      	ldr	r0, [r7, #0]
 8006e02:	f7fe fd1d 	bl	8005840 <_SendPacket>
  RECORD_END();
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f383 8811 	msr	BASEPRI, r3
}
 8006e0c:	bf00      	nop
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20014284 	.word	0x20014284

08006e18 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e1e:	f3ef 8311 	mrs	r3, BASEPRI
 8006e22:	f04f 0120 	mov.w	r1, #32
 8006e26:	f381 8811 	msr	BASEPRI, r1
 8006e2a:	607b      	str	r3, [r7, #4]
 8006e2c:	4807      	ldr	r0, [pc, #28]	; (8006e4c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006e2e:	f7fe fc19 	bl	8005664 <_PreparePacket>
 8006e32:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006e34:	2212      	movs	r2, #18
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6838      	ldr	r0, [r7, #0]
 8006e3a:	f7fe fd01 	bl	8005840 <_SendPacket>
  RECORD_END();
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f383 8811 	msr	BASEPRI, r3
}
 8006e44:	bf00      	nop
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20014284 	.word	0x20014284

08006e50 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e56:	f3ef 8311 	mrs	r3, BASEPRI
 8006e5a:	f04f 0120 	mov.w	r1, #32
 8006e5e:	f381 8811 	msr	BASEPRI, r1
 8006e62:	607b      	str	r3, [r7, #4]
 8006e64:	4807      	ldr	r0, [pc, #28]	; (8006e84 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006e66:	f7fe fbfd 	bl	8005664 <_PreparePacket>
 8006e6a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006e6c:	2211      	movs	r2, #17
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6838      	ldr	r0, [r7, #0]
 8006e72:	f7fe fce5 	bl	8005840 <_SendPacket>
  RECORD_END();
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f383 8811 	msr	BASEPRI, r3
}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20014284 	.word	0x20014284

08006e88 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e90:	f3ef 8311 	mrs	r3, BASEPRI
 8006e94:	f04f 0120 	mov.w	r1, #32
 8006e98:	f381 8811 	msr	BASEPRI, r1
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	4819      	ldr	r0, [pc, #100]	; (8006f04 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006ea0:	f7fe fbe0 	bl	8005664 <_PreparePacket>
 8006ea4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006eaa:	4b17      	ldr	r3, [pc, #92]	; (8006f08 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	61fb      	str	r3, [r7, #28]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	61bb      	str	r3, [r7, #24]
 8006ebc:	e00b      	b.n	8006ed6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	1c59      	adds	r1, r3, #1
 8006ec6:	61f9      	str	r1, [r7, #28]
 8006ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	09db      	lsrs	r3, r3, #7
 8006ed4:	61bb      	str	r3, [r7, #24]
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8006eda:	d8f0      	bhi.n	8006ebe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	61fa      	str	r2, [r7, #28]
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	b2d2      	uxtb	r2, r2
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006eec:	2208      	movs	r2, #8
 8006eee:	68f9      	ldr	r1, [r7, #12]
 8006ef0:	6938      	ldr	r0, [r7, #16]
 8006ef2:	f7fe fca5 	bl	8005840 <_SendPacket>
  RECORD_END();
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f383 8811 	msr	BASEPRI, r3
}
 8006efc:	bf00      	nop
 8006efe:	3720      	adds	r7, #32
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	20014284 	.word	0x20014284
 8006f08:	20014254 	.word	0x20014254

08006f0c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f14:	f3ef 8311 	mrs	r3, BASEPRI
 8006f18:	f04f 0120 	mov.w	r1, #32
 8006f1c:	f381 8811 	msr	BASEPRI, r1
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	4819      	ldr	r0, [pc, #100]	; (8006f88 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006f24:	f7fe fb9e 	bl	8005664 <_PreparePacket>
 8006f28:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f2e:	4b17      	ldr	r3, [pc, #92]	; (8006f8c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	61fb      	str	r3, [r7, #28]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	61bb      	str	r3, [r7, #24]
 8006f40:	e00b      	b.n	8006f5a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	1c59      	adds	r1, r3, #1
 8006f4a:	61f9      	str	r1, [r7, #28]
 8006f4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	701a      	strb	r2, [r3, #0]
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	09db      	lsrs	r3, r3, #7
 8006f58:	61bb      	str	r3, [r7, #24]
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f5e:	d8f0      	bhi.n	8006f42 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	61fa      	str	r2, [r7, #28]
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	b2d2      	uxtb	r2, r2
 8006f6a:	701a      	strb	r2, [r3, #0]
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006f70:	2204      	movs	r2, #4
 8006f72:	68f9      	ldr	r1, [r7, #12]
 8006f74:	6938      	ldr	r0, [r7, #16]
 8006f76:	f7fe fc63 	bl	8005840 <_SendPacket>
  RECORD_END();
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f383 8811 	msr	BASEPRI, r3
}
 8006f80:	bf00      	nop
 8006f82:	3720      	adds	r7, #32
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	20014284 	.word	0x20014284
 8006f8c:	20014254 	.word	0x20014254

08006f90 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b088      	sub	sp, #32
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f98:	f3ef 8311 	mrs	r3, BASEPRI
 8006f9c:	f04f 0120 	mov.w	r1, #32
 8006fa0:	f381 8811 	msr	BASEPRI, r1
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	4819      	ldr	r0, [pc, #100]	; (800700c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006fa8:	f7fe fb5c 	bl	8005664 <_PreparePacket>
 8006fac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006fb2:	4b17      	ldr	r3, [pc, #92]	; (8007010 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	61fb      	str	r3, [r7, #28]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	61bb      	str	r3, [r7, #24]
 8006fc4:	e00b      	b.n	8006fde <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	1c59      	adds	r1, r3, #1
 8006fce:	61f9      	str	r1, [r7, #28]
 8006fd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fd4:	b2d2      	uxtb	r2, r2
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	09db      	lsrs	r3, r3, #7
 8006fdc:	61bb      	str	r3, [r7, #24]
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8006fe2:	d8f0      	bhi.n	8006fc6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	61fa      	str	r2, [r7, #28]
 8006fea:	69ba      	ldr	r2, [r7, #24]
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	701a      	strb	r2, [r3, #0]
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006ff4:	2206      	movs	r2, #6
 8006ff6:	68f9      	ldr	r1, [r7, #12]
 8006ff8:	6938      	ldr	r0, [r7, #16]
 8006ffa:	f7fe fc21 	bl	8005840 <_SendPacket>
  RECORD_END();
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f383 8811 	msr	BASEPRI, r3
}
 8007004:	bf00      	nop
 8007006:	3720      	adds	r7, #32
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20014284 	.word	0x20014284
 8007010:	20014254 	.word	0x20014254

08007014 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007014:	b580      	push	{r7, lr}
 8007016:	b08a      	sub	sp, #40	; 0x28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800701e:	f3ef 8311 	mrs	r3, BASEPRI
 8007022:	f04f 0120 	mov.w	r1, #32
 8007026:	f381 8811 	msr	BASEPRI, r1
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	4827      	ldr	r0, [pc, #156]	; (80070cc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800702e:	f7fe fb19 	bl	8005664 <_PreparePacket>
 8007032:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007038:	4b25      	ldr	r3, [pc, #148]	; (80070d0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	623b      	str	r3, [r7, #32]
 800704a:	e00b      	b.n	8007064 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	b2da      	uxtb	r2, r3
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	1c59      	adds	r1, r3, #1
 8007054:	6279      	str	r1, [r7, #36]	; 0x24
 8007056:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	09db      	lsrs	r3, r3, #7
 8007062:	623b      	str	r3, [r7, #32]
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	2b7f      	cmp	r3, #127	; 0x7f
 8007068:	d8f0      	bhi.n	800704c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	627a      	str	r2, [r7, #36]	; 0x24
 8007070:	6a3a      	ldr	r2, [r7, #32]
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	61fb      	str	r3, [r7, #28]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	61bb      	str	r3, [r7, #24]
 8007082:	e00b      	b.n	800709c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	b2da      	uxtb	r2, r3
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	1c59      	adds	r1, r3, #1
 800708c:	61f9      	str	r1, [r7, #28]
 800708e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	09db      	lsrs	r3, r3, #7
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	2b7f      	cmp	r3, #127	; 0x7f
 80070a0:	d8f0      	bhi.n	8007084 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	61fa      	str	r2, [r7, #28]
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80070b2:	2207      	movs	r2, #7
 80070b4:	68f9      	ldr	r1, [r7, #12]
 80070b6:	6938      	ldr	r0, [r7, #16]
 80070b8:	f7fe fbc2 	bl	8005840 <_SendPacket>
  RECORD_END();
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f383 8811 	msr	BASEPRI, r3
}
 80070c2:	bf00      	nop
 80070c4:	3728      	adds	r7, #40	; 0x28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	20014284 	.word	0x20014284
 80070d0:	20014254 	.word	0x20014254

080070d4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80070dc:	4b04      	ldr	r3, [pc, #16]	; (80070f0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	1ad3      	subs	r3, r2, r3
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	20014254 	.word	0x20014254

080070f4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08c      	sub	sp, #48	; 0x30
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80070fe:	4b3b      	ldr	r3, [pc, #236]	; (80071ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d06d      	beq.n	80071e2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007106:	4b39      	ldr	r3, [pc, #228]	; (80071ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800710c:	2300      	movs	r3, #0
 800710e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007110:	e008      	b.n	8007124 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d007      	beq.n	800712e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007120:	3301      	adds	r3, #1
 8007122:	62bb      	str	r3, [r7, #40]	; 0x28
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007128:	429a      	cmp	r2, r3
 800712a:	d3f2      	bcc.n	8007112 <SEGGER_SYSVIEW_SendModule+0x1e>
 800712c:	e000      	b.n	8007130 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800712e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d055      	beq.n	80071e2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007136:	f3ef 8311 	mrs	r3, BASEPRI
 800713a:	f04f 0120 	mov.w	r1, #32
 800713e:	f381 8811 	msr	BASEPRI, r1
 8007142:	617b      	str	r3, [r7, #20]
 8007144:	482a      	ldr	r0, [pc, #168]	; (80071f0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007146:	f7fe fa8d 	bl	8005664 <_PreparePacket>
 800714a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	623b      	str	r3, [r7, #32]
 8007158:	e00b      	b.n	8007172 <SEGGER_SYSVIEW_SendModule+0x7e>
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	b2da      	uxtb	r2, r3
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	1c59      	adds	r1, r3, #1
 8007162:	6279      	str	r1, [r7, #36]	; 0x24
 8007164:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	09db      	lsrs	r3, r3, #7
 8007170:	623b      	str	r3, [r7, #32]
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	2b7f      	cmp	r3, #127	; 0x7f
 8007176:	d8f0      	bhi.n	800715a <SEGGER_SYSVIEW_SendModule+0x66>
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	627a      	str	r2, [r7, #36]	; 0x24
 800717e:	6a3a      	ldr	r2, [r7, #32]
 8007180:	b2d2      	uxtb	r2, r2
 8007182:	701a      	strb	r2, [r3, #0]
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	61fb      	str	r3, [r7, #28]
 800718c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	61bb      	str	r3, [r7, #24]
 8007192:	e00b      	b.n	80071ac <SEGGER_SYSVIEW_SendModule+0xb8>
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	b2da      	uxtb	r2, r3
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	1c59      	adds	r1, r3, #1
 800719c:	61f9      	str	r1, [r7, #28]
 800719e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071a2:	b2d2      	uxtb	r2, r2
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	09db      	lsrs	r3, r3, #7
 80071aa:	61bb      	str	r3, [r7, #24]
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	2b7f      	cmp	r3, #127	; 0x7f
 80071b0:	d8f0      	bhi.n	8007194 <SEGGER_SYSVIEW_SendModule+0xa0>
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	1c5a      	adds	r2, r3, #1
 80071b6:	61fa      	str	r2, [r7, #28]
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2280      	movs	r2, #128	; 0x80
 80071c8:	4619      	mov	r1, r3
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f7fe f9fa 	bl	80055c4 <_EncodeStr>
 80071d0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80071d2:	2216      	movs	r2, #22
 80071d4:	68f9      	ldr	r1, [r7, #12]
 80071d6:	6938      	ldr	r0, [r7, #16]
 80071d8:	f7fe fb32 	bl	8005840 <_SendPacket>
      RECORD_END();
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80071e2:	bf00      	nop
 80071e4:	3730      	adds	r7, #48	; 0x30
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	2001427c 	.word	0x2001427c
 80071f0:	20014284 	.word	0x20014284

080071f4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80071fa:	4b0c      	ldr	r3, [pc, #48]	; (800722c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00f      	beq.n	8007222 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007202:	4b0a      	ldr	r3, [pc, #40]	; (800722c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1f2      	bne.n	8007208 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007222:	bf00      	nop
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	2001427c 	.word	0x2001427c

08007230 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007236:	f3ef 8311 	mrs	r3, BASEPRI
 800723a:	f04f 0120 	mov.w	r1, #32
 800723e:	f381 8811 	msr	BASEPRI, r1
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	4817      	ldr	r0, [pc, #92]	; (80072a4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007246:	f7fe fa0d 	bl	8005664 <_PreparePacket>
 800724a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	4b14      	ldr	r3, [pc, #80]	; (80072a8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	613b      	str	r3, [r7, #16]
 800725a:	e00b      	b.n	8007274 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	b2da      	uxtb	r2, r3
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	1c59      	adds	r1, r3, #1
 8007264:	6179      	str	r1, [r7, #20]
 8007266:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800726a:	b2d2      	uxtb	r2, r2
 800726c:	701a      	strb	r2, [r3, #0]
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	09db      	lsrs	r3, r3, #7
 8007272:	613b      	str	r3, [r7, #16]
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	2b7f      	cmp	r3, #127	; 0x7f
 8007278:	d8f0      	bhi.n	800725c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	617a      	str	r2, [r7, #20]
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	701a      	strb	r2, [r3, #0]
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800728a:	221b      	movs	r2, #27
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	68b8      	ldr	r0, [r7, #8]
 8007290:	f7fe fad6 	bl	8005840 <_SendPacket>
  RECORD_END();
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f383 8811 	msr	BASEPRI, r3
}
 800729a:	bf00      	nop
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20014284 	.word	0x20014284
 80072a8:	20014280 	.word	0x20014280

080072ac <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80072ac:	b40f      	push	{r0, r1, r2, r3}
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80072b4:	f107 0314 	add.w	r3, r7, #20
 80072b8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80072ba:	1d3b      	adds	r3, r7, #4
 80072bc:	461a      	mov	r2, r3
 80072be:	2100      	movs	r1, #0
 80072c0:	6938      	ldr	r0, [r7, #16]
 80072c2:	f7fe fdcd 	bl	8005e60 <_VPrintTarget>
  va_end(ParamList);
}
 80072c6:	bf00      	nop
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072d0:	b004      	add	sp, #16
 80072d2:	4770      	bx	lr

080072d4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08a      	sub	sp, #40	; 0x28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072dc:	f3ef 8311 	mrs	r3, BASEPRI
 80072e0:	f04f 0120 	mov.w	r1, #32
 80072e4:	f381 8811 	msr	BASEPRI, r1
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	4827      	ldr	r0, [pc, #156]	; (8007388 <SEGGER_SYSVIEW_Warn+0xb4>)
 80072ec:	f7fe f9ba 	bl	8005664 <_PreparePacket>
 80072f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072f2:	2280      	movs	r2, #128	; 0x80
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	6938      	ldr	r0, [r7, #16]
 80072f8:	f7fe f964 	bl	80055c4 <_EncodeStr>
 80072fc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	627b      	str	r3, [r7, #36]	; 0x24
 8007302:	2301      	movs	r3, #1
 8007304:	623b      	str	r3, [r7, #32]
 8007306:	e00b      	b.n	8007320 <SEGGER_SYSVIEW_Warn+0x4c>
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	b2da      	uxtb	r2, r3
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	1c59      	adds	r1, r3, #1
 8007310:	6279      	str	r1, [r7, #36]	; 0x24
 8007312:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007316:	b2d2      	uxtb	r2, r2
 8007318:	701a      	strb	r2, [r3, #0]
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	09db      	lsrs	r3, r3, #7
 800731e:	623b      	str	r3, [r7, #32]
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	2b7f      	cmp	r3, #127	; 0x7f
 8007324:	d8f0      	bhi.n	8007308 <SEGGER_SYSVIEW_Warn+0x34>
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	627a      	str	r2, [r7, #36]	; 0x24
 800732c:	6a3a      	ldr	r2, [r7, #32]
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	61fb      	str	r3, [r7, #28]
 800733a:	2300      	movs	r3, #0
 800733c:	61bb      	str	r3, [r7, #24]
 800733e:	e00b      	b.n	8007358 <SEGGER_SYSVIEW_Warn+0x84>
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	b2da      	uxtb	r2, r3
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	1c59      	adds	r1, r3, #1
 8007348:	61f9      	str	r1, [r7, #28]
 800734a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	09db      	lsrs	r3, r3, #7
 8007356:	61bb      	str	r3, [r7, #24]
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	2b7f      	cmp	r3, #127	; 0x7f
 800735c:	d8f0      	bhi.n	8007340 <SEGGER_SYSVIEW_Warn+0x6c>
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	61fa      	str	r2, [r7, #28]
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	701a      	strb	r2, [r3, #0]
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800736e:	221a      	movs	r2, #26
 8007370:	68f9      	ldr	r1, [r7, #12]
 8007372:	6938      	ldr	r0, [r7, #16]
 8007374:	f7fe fa64 	bl	8005840 <_SendPacket>
  RECORD_END();
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f383 8811 	msr	BASEPRI, r3
}
 800737e:	bf00      	nop
 8007380:	3728      	adds	r7, #40	; 0x28
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20014284 	.word	0x20014284

0800738c <__libc_init_array>:
 800738c:	b570      	push	{r4, r5, r6, lr}
 800738e:	4d0d      	ldr	r5, [pc, #52]	; (80073c4 <__libc_init_array+0x38>)
 8007390:	4c0d      	ldr	r4, [pc, #52]	; (80073c8 <__libc_init_array+0x3c>)
 8007392:	1b64      	subs	r4, r4, r5
 8007394:	10a4      	asrs	r4, r4, #2
 8007396:	2600      	movs	r6, #0
 8007398:	42a6      	cmp	r6, r4
 800739a:	d109      	bne.n	80073b0 <__libc_init_array+0x24>
 800739c:	4d0b      	ldr	r5, [pc, #44]	; (80073cc <__libc_init_array+0x40>)
 800739e:	4c0c      	ldr	r4, [pc, #48]	; (80073d0 <__libc_init_array+0x44>)
 80073a0:	f000 f83c 	bl	800741c <_init>
 80073a4:	1b64      	subs	r4, r4, r5
 80073a6:	10a4      	asrs	r4, r4, #2
 80073a8:	2600      	movs	r6, #0
 80073aa:	42a6      	cmp	r6, r4
 80073ac:	d105      	bne.n	80073ba <__libc_init_array+0x2e>
 80073ae:	bd70      	pop	{r4, r5, r6, pc}
 80073b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b4:	4798      	blx	r3
 80073b6:	3601      	adds	r6, #1
 80073b8:	e7ee      	b.n	8007398 <__libc_init_array+0xc>
 80073ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80073be:	4798      	blx	r3
 80073c0:	3601      	adds	r6, #1
 80073c2:	e7f2      	b.n	80073aa <__libc_init_array+0x1e>
 80073c4:	080075d4 	.word	0x080075d4
 80073c8:	080075d4 	.word	0x080075d4
 80073cc:	080075d4 	.word	0x080075d4
 80073d0:	080075d8 	.word	0x080075d8

080073d4 <memcmp>:
 80073d4:	b530      	push	{r4, r5, lr}
 80073d6:	3901      	subs	r1, #1
 80073d8:	2400      	movs	r4, #0
 80073da:	42a2      	cmp	r2, r4
 80073dc:	d101      	bne.n	80073e2 <memcmp+0xe>
 80073de:	2000      	movs	r0, #0
 80073e0:	e005      	b.n	80073ee <memcmp+0x1a>
 80073e2:	5d03      	ldrb	r3, [r0, r4]
 80073e4:	3401      	adds	r4, #1
 80073e6:	5d0d      	ldrb	r5, [r1, r4]
 80073e8:	42ab      	cmp	r3, r5
 80073ea:	d0f6      	beq.n	80073da <memcmp+0x6>
 80073ec:	1b58      	subs	r0, r3, r5
 80073ee:	bd30      	pop	{r4, r5, pc}

080073f0 <memcpy>:
 80073f0:	440a      	add	r2, r1
 80073f2:	4291      	cmp	r1, r2
 80073f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80073f8:	d100      	bne.n	80073fc <memcpy+0xc>
 80073fa:	4770      	bx	lr
 80073fc:	b510      	push	{r4, lr}
 80073fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007406:	4291      	cmp	r1, r2
 8007408:	d1f9      	bne.n	80073fe <memcpy+0xe>
 800740a:	bd10      	pop	{r4, pc}

0800740c <memset>:
 800740c:	4402      	add	r2, r0
 800740e:	4603      	mov	r3, r0
 8007410:	4293      	cmp	r3, r2
 8007412:	d100      	bne.n	8007416 <memset+0xa>
 8007414:	4770      	bx	lr
 8007416:	f803 1b01 	strb.w	r1, [r3], #1
 800741a:	e7f9      	b.n	8007410 <memset+0x4>

0800741c <_init>:
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	bf00      	nop
 8007420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007422:	bc08      	pop	{r3}
 8007424:	469e      	mov	lr, r3
 8007426:	4770      	bx	lr

08007428 <_fini>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	bf00      	nop
 800742c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742e:	bc08      	pop	{r3}
 8007430:	469e      	mov	lr, r3
 8007432:	4770      	bx	lr
