
RTOS.04 - LED2-TASK_DELETION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c88  08005c88  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005c88  08005c88  00015c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c90  08005c90  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c90  08005c90  00015c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00013480  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013494  20013494  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018da4  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003012  00000000  00000000  00038de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  0003be00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001158  00000000  00000000  0003d0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235eb  00000000  00000000  0003e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014d0b  00000000  00000000  00061803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7559  00000000  00000000  0007650e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014da67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ec4  00000000  00000000  0014dabc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b9c 	.word	0x08005b9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005b9c 	.word	0x08005b9c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200133ec 	.word	0x200133ec

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fa31 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f867 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8c3 	bl	80006f4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //cyclic counter
  DWT_CTRL |= (1<<0);
 800056e:	4b2b      	ldr	r3, [pc, #172]	; (800061c <main+0xc0>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a2a      	ldr	r2, [pc, #168]	; (800061c <main+0xc0>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(task_green_handler, "LED_Green", 200, NULL, 2, &task1_handle);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2302      	movs	r3, #2
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	22c8      	movs	r2, #200	; 0xc8
 8000588:	4925      	ldr	r1, [pc, #148]	; (8000620 <main+0xc4>)
 800058a:	4826      	ldr	r0, [pc, #152]	; (8000624 <main+0xc8>)
 800058c:	f001 ffe4 	bl	8002558 <xTaskCreate>
 8000590:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d00a      	beq.n	80005ae <main+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800059c:	f383 8811 	msr	BASEPRI, r3
 80005a0:	f3bf 8f6f 	isb	sy
 80005a4:	f3bf 8f4f 	dsb	sy
 80005a8:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005aa:	bf00      	nop
 80005ac:	e7fe      	b.n	80005ac <main+0x50>

  status = xTaskCreate(task_red_handler, "LED_Red", 200, NULL, 2, &task2_handle);
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	2302      	movs	r3, #2
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2300      	movs	r3, #0
 80005ba:	22c8      	movs	r2, #200	; 0xc8
 80005bc:	491a      	ldr	r1, [pc, #104]	; (8000628 <main+0xcc>)
 80005be:	481b      	ldr	r0, [pc, #108]	; (800062c <main+0xd0>)
 80005c0:	f001 ffca 	bl	8002558 <xTaskCreate>
 80005c4:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d00a      	beq.n	80005e2 <main+0x86>
        __asm volatile
 80005cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d0:	f383 8811 	msr	BASEPRI, r3
 80005d4:	f3bf 8f6f 	isb	sy
 80005d8:	f3bf 8f4f 	dsb	sy
 80005dc:	617b      	str	r3, [r7, #20]
    }
 80005de:	bf00      	nop
 80005e0:	e7fe      	b.n	80005e0 <main+0x84>

  status = xTaskCreate(task_blue_handler, "LED_Blue", 200, NULL, 2, &task3_handle);
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2302      	movs	r3, #2
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	22c8      	movs	r2, #200	; 0xc8
 80005ee:	4910      	ldr	r1, [pc, #64]	; (8000630 <main+0xd4>)
 80005f0:	4810      	ldr	r0, [pc, #64]	; (8000634 <main+0xd8>)
 80005f2:	f001 ffb1 	bl	8002558 <xTaskCreate>
 80005f6:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d00a      	beq.n	8000614 <main+0xb8>
        __asm volatile
 80005fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000602:	f383 8811 	msr	BASEPRI, r3
 8000606:	f3bf 8f6f 	isb	sy
 800060a:	f3bf 8f4f 	dsb	sy
 800060e:	613b      	str	r3, [r7, #16]
    }
 8000610:	bf00      	nop
 8000612:	e7fe      	b.n	8000612 <main+0xb6>

  //start freertos scheduler
  vTaskStartScheduler();
 8000614:	f002 f9bc 	bl	8002990 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0xbc>
 800061a:	bf00      	nop
 800061c:	e0001000 	.word	0xe0001000
 8000620:	08005bb4 	.word	0x08005bb4
 8000624:	0800075d 	.word	0x0800075d
 8000628:	08005bc0 	.word	0x08005bc0
 800062c:	08000789 	.word	0x08000789
 8000630:	08005bc8 	.word	0x08005bc8
 8000634:	080007b5 	.word	0x080007b5

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 faa0 	bl	8005b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xb4>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xb4>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xb4>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <SystemClock_Config+0xb8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <SystemClock_Config+0xb8>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <SystemClock_Config+0xb8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fc81 	bl	8000fb0 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006b4:	f000 f8a6 	bl	8000804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fee4 	bl	80014a0 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006de:	f000 f891 	bl	8000804 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_GPIO_Init+0x60>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000710:	4a10      	ldr	r2, [pc, #64]	; (8000754 <MX_GPIO_Init+0x60>)
 8000712:	f043 0308 	orr.w	r3, r3, #8
 8000716:	6313      	str	r3, [r2, #48]	; 0x30
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_GPIO_Init+0x60>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	f003 0308 	and.w	r3, r3, #8
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800072a:	480b      	ldr	r0, [pc, #44]	; (8000758 <MX_GPIO_Init+0x64>)
 800072c:	f000 fc0c 	bl	8000f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000730:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000734:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4619      	mov	r1, r3
 8000746:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_GPIO_Init+0x64>)
 8000748:	f000 fa62 	bl	8000c10 <HAL_GPIO_Init>

}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40020c00 	.word	0x40020c00

0800075c <task_green_handler>:

/* USER CODE BEGIN 4 */
static void task_green_handler(void* parameters)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time = xTaskGetTickCount();
 8000764:	f002 fa84 	bl	8002c70 <xTaskGetTickCount>
 8000768:	4603      	mov	r3, r0
 800076a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, 12);
 800076c:	210c      	movs	r1, #12
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <task_green_handler+0x28>)
 8000770:	f000 fc03 	bl	8000f7a <HAL_GPIO_TogglePin>
//		HAL_Delay(1000);
//		vTaskDelay(pdMS_TO_TICKS(1000));
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(1000));
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800077c:	4618      	mov	r0, r3
 800077e:	f002 f885 	bl	800288c <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOD, 12);
 8000782:	e7f3      	b.n	800076c <task_green_handler+0x10>
 8000784:	40020c00 	.word	0x40020c00

08000788 <task_red_handler>:
	}
}
static void task_red_handler(void* parameters)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time = xTaskGetTickCount();
 8000790:	f002 fa6e 	bl	8002c70 <xTaskGetTickCount>
 8000794:	4603      	mov	r3, r0
 8000796:	60fb      	str	r3, [r7, #12]
	while(1)
		{
		HAL_GPIO_TogglePin(GPIOD, 14);
 8000798:	210e      	movs	r1, #14
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <task_red_handler+0x28>)
 800079c:	f000 fbed 	bl	8000f7a <HAL_GPIO_TogglePin>
//		HAL_Delay(800);
//		vTaskDelay(pdMS_TO_TICKS(1000));
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(1000));
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 f86f 	bl	800288c <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOD, 14);
 80007ae:	e7f3      	b.n	8000798 <task_red_handler+0x10>
 80007b0:	40020c00 	.word	0x40020c00

080007b4 <task_blue_handler>:
		}
}
static void task_blue_handler(void* parameters)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time = xTaskGetTickCount();
 80007bc:	f002 fa58 	bl	8002c70 <xTaskGetTickCount>
 80007c0:	4603      	mov	r3, r0
 80007c2:	60fb      	str	r3, [r7, #12]
	while(1)
		{
		HAL_GPIO_TogglePin(GPIOD, 13);
 80007c4:	210d      	movs	r1, #13
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <task_blue_handler+0x28>)
 80007c8:	f000 fbd7 	bl	8000f7a <HAL_GPIO_TogglePin>
//		HAL_Delay(400);
//		vTaskDelay(pdMS_TO_TICKS(1000));
		vTaskDelayUntil(&last_wakeup_time,pdMS_TO_TICKS(1000));
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 f859 	bl	800288c <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOD, 13);
 80007da:	e7f3      	b.n	80007c4 <task_blue_handler+0x10>
 80007dc:	40020c00 	.word	0x40020c00

080007e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d101      	bne.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007f2:	f000 f90b 	bl	8000a0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40001000 	.word	0x40001000

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	4a0f      	ldr	r2, [pc, #60]	; (800085c <HAL_MspInit+0x4c>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000824:	6453      	str	r3, [r2, #68]	; 0x44
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <HAL_MspInit+0x4c>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 800084e:	f003 fa7b 	bl	8003d48 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000870:	2200      	movs	r2, #0
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	2036      	movs	r0, #54	; 0x36
 8000876:	f000 f9a1 	bl	8000bbc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800087a:	2036      	movs	r0, #54	; 0x36
 800087c:	f000 f9ba 	bl	8000bf4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <HAL_InitTick+0xa0>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <HAL_InitTick+0xa0>)
 800088a:	f043 0310 	orr.w	r3, r3, #16
 800088e:	6413      	str	r3, [r2, #64]	; 0x40
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <HAL_InitTick+0xa0>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	f003 0310 	and.w	r3, r3, #16
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800089c:	f107 0210 	add.w	r2, r7, #16
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 ffb6 	bl	8001818 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008ac:	f000 ffa0 	bl	80017f0 <HAL_RCC_GetPCLK1Freq>
 80008b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b4:	4a13      	ldr	r2, [pc, #76]	; (8000904 <HAL_InitTick+0xa4>)
 80008b6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ba:	0c9b      	lsrs	r3, r3, #18
 80008bc:	3b01      	subs	r3, #1
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_InitTick+0xa8>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <HAL_InitTick+0xac>)
 80008c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_InitTick+0xa8>)
 80008c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008ce:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <HAL_InitTick+0xa8>)
 80008d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <HAL_InitTick+0xa8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <HAL_InitTick+0xa8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008e0:	4809      	ldr	r0, [pc, #36]	; (8000908 <HAL_InitTick+0xa8>)
 80008e2:	f000 ffcb 	bl	800187c <HAL_TIM_Base_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d104      	bne.n	80008f6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008ec:	4806      	ldr	r0, [pc, #24]	; (8000908 <HAL_InitTick+0xa8>)
 80008ee:	f001 f81f 	bl	8001930 <HAL_TIM_Base_Start_IT>
 80008f2:	4603      	mov	r3, r0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3730      	adds	r7, #48	; 0x30
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40023800 	.word	0x40023800
 8000904:	431bde83 	.word	0x431bde83
 8000908:	20013360 	.word	0x20013360
 800090c:	40001000 	.word	0x40001000

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler+0x4>

08000922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <UsageFault_Handler+0x4>

0800092e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <TIM6_DAC_IRQHandler+0x10>)
 8000942:	f001 f865 	bl	8001a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20013360 	.word	0x20013360

08000950 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <SystemInit+0x20>)
 8000956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <SystemInit+0x20>)
 800095c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000978:	480d      	ldr	r0, [pc, #52]	; (80009b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800097a:	490e      	ldr	r1, [pc, #56]	; (80009b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800097c:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000990:	4c0b      	ldr	r4, [pc, #44]	; (80009c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800099e:	f7ff ffd7 	bl	8000950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009a2:	f005 f8b3 	bl	8005b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009a6:	f7ff fdd9 	bl	800055c <main>
  bx  lr    
 80009aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009b8:	08005c98 	.word	0x08005c98
  ldr r2, =_sbss
 80009bc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009c0:	20013494 	.word	0x20013494

080009c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC_IRQHandler>
	...

080009c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_Init+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <HAL_Init+0x40>)
 80009d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_Init+0x40>)
 80009de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_Init+0x40>)
 80009ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 f8d8 	bl	8000ba6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f6:	200f      	movs	r0, #15
 80009f8:	f7ff ff32 	bl	8000860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fc:	f7ff ff08 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023c00 	.word	0x40023c00

08000a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_IncTick+0x20>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x24>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <HAL_IncTick+0x24>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	200133a8 	.word	0x200133a8

08000a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <HAL_GetTick+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	200133a8 	.word	0x200133a8

08000a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7e:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	60d3      	str	r3, [r2, #12]
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <__NVIC_GetPriorityGrouping+0x18>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	db0b      	blt.n	8000ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f003 021f 	and.w	r2, r3, #31
 8000ac8:	4907      	ldr	r1, [pc, #28]	; (8000ae8 <__NVIC_EnableIRQ+0x38>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	095b      	lsrs	r3, r3, #5
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000e100 	.word	0xe000e100

08000aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db0a      	blt.n	8000b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	490c      	ldr	r1, [pc, #48]	; (8000b38 <__NVIC_SetPriority+0x4c>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b14:	e00a      	b.n	8000b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4908      	ldr	r1, [pc, #32]	; (8000b3c <__NVIC_SetPriority+0x50>)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3b04      	subs	r3, #4
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	440b      	add	r3, r1
 8000b2a:	761a      	strb	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f1c3 0307 	rsb	r3, r3, #7
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2304      	movcs	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3304      	adds	r3, #4
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d902      	bls.n	8000b70 <NVIC_EncodePriority+0x30>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <NVIC_EncodePriority+0x32>
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	4313      	orrs	r3, r2
         );
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3724      	adds	r7, #36	; 0x24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ff4c 	bl	8000a4c <__NVIC_SetPriorityGrouping>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bce:	f7ff ff61 	bl	8000a94 <__NVIC_GetPriorityGrouping>
 8000bd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	68b9      	ldr	r1, [r7, #8]
 8000bd8:	6978      	ldr	r0, [r7, #20]
 8000bda:	f7ff ffb1 	bl	8000b40 <NVIC_EncodePriority>
 8000bde:	4602      	mov	r2, r0
 8000be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff80 	bl	8000aec <__NVIC_SetPriority>
}
 8000bec:	bf00      	nop
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff54 	bl	8000ab0 <__NVIC_EnableIRQ>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
 8000c2a:	e16b      	b.n	8000f04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	f040 815a 	bne.w	8000efe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 0303 	and.w	r3, r3, #3
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d005      	beq.n	8000c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d130      	bne.n	8000cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4013      	ands	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	68da      	ldr	r2, [r3, #12]
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c98:	2201      	movs	r2, #1
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	091b      	lsrs	r3, r3, #4
 8000cae:	f003 0201 	and.w	r2, r3, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d017      	beq.n	8000d00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0303 	and.w	r3, r3, #3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d123      	bne.n	8000d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	08da      	lsrs	r2, r3, #3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3208      	adds	r2, #8
 8000d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	220f      	movs	r2, #15
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	691a      	ldr	r2, [r3, #16]
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	08da      	lsrs	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3208      	adds	r2, #8
 8000d4e:	69b9      	ldr	r1, [r7, #24]
 8000d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0203 	and.w	r2, r3, #3
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f000 80b4 	beq.w	8000efe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b60      	ldr	r3, [pc, #384]	; (8000f1c <HAL_GPIO_Init+0x30c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a5f      	ldr	r2, [pc, #380]	; (8000f1c <HAL_GPIO_Init+0x30c>)
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b5d      	ldr	r3, [pc, #372]	; (8000f1c <HAL_GPIO_Init+0x30c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000db2:	4a5b      	ldr	r2, [pc, #364]	; (8000f20 <HAL_GPIO_Init+0x310>)
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	3302      	adds	r3, #2
 8000dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	220f      	movs	r2, #15
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a52      	ldr	r2, [pc, #328]	; (8000f24 <HAL_GPIO_Init+0x314>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d02b      	beq.n	8000e36 <HAL_GPIO_Init+0x226>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a51      	ldr	r2, [pc, #324]	; (8000f28 <HAL_GPIO_Init+0x318>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d025      	beq.n	8000e32 <HAL_GPIO_Init+0x222>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a50      	ldr	r2, [pc, #320]	; (8000f2c <HAL_GPIO_Init+0x31c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d01f      	beq.n	8000e2e <HAL_GPIO_Init+0x21e>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4f      	ldr	r2, [pc, #316]	; (8000f30 <HAL_GPIO_Init+0x320>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d019      	beq.n	8000e2a <HAL_GPIO_Init+0x21a>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4e      	ldr	r2, [pc, #312]	; (8000f34 <HAL_GPIO_Init+0x324>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0x216>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a4d      	ldr	r2, [pc, #308]	; (8000f38 <HAL_GPIO_Init+0x328>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <HAL_GPIO_Init+0x212>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4c      	ldr	r2, [pc, #304]	; (8000f3c <HAL_GPIO_Init+0x32c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x20e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4b      	ldr	r2, [pc, #300]	; (8000f40 <HAL_GPIO_Init+0x330>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_GPIO_Init+0x20a>
 8000e16:	2307      	movs	r3, #7
 8000e18:	e00e      	b.n	8000e38 <HAL_GPIO_Init+0x228>
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	e00c      	b.n	8000e38 <HAL_GPIO_Init+0x228>
 8000e1e:	2306      	movs	r3, #6
 8000e20:	e00a      	b.n	8000e38 <HAL_GPIO_Init+0x228>
 8000e22:	2305      	movs	r3, #5
 8000e24:	e008      	b.n	8000e38 <HAL_GPIO_Init+0x228>
 8000e26:	2304      	movs	r3, #4
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x228>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e004      	b.n	8000e38 <HAL_GPIO_Init+0x228>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e002      	b.n	8000e38 <HAL_GPIO_Init+0x228>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_GPIO_Init+0x228>
 8000e36:	2300      	movs	r3, #0
 8000e38:	69fa      	ldr	r2, [r7, #28]
 8000e3a:	f002 0203 	and.w	r2, r2, #3
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	4093      	lsls	r3, r2
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e48:	4935      	ldr	r1, [pc, #212]	; (8000f20 <HAL_GPIO_Init+0x310>)
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e56:	4b3b      	ldr	r3, [pc, #236]	; (8000f44 <HAL_GPIO_Init+0x334>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e7a:	4a32      	ldr	r2, [pc, #200]	; (8000f44 <HAL_GPIO_Init+0x334>)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e80:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <HAL_GPIO_Init+0x334>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ea4:	4a27      	ldr	r2, [pc, #156]	; (8000f44 <HAL_GPIO_Init+0x334>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <HAL_GPIO_Init+0x334>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ece:	4a1d      	ldr	r2, [pc, #116]	; (8000f44 <HAL_GPIO_Init+0x334>)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <HAL_GPIO_Init+0x334>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ef8:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <HAL_GPIO_Init+0x334>)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3301      	adds	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	2b0f      	cmp	r3, #15
 8000f08:	f67f ae90 	bls.w	8000c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	3724      	adds	r7, #36	; 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40013800 	.word	0x40013800
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	40020c00 	.word	0x40020c00
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40021400 	.word	0x40021400
 8000f3c:	40021800 	.word	0x40021800
 8000f40:	40021c00 	.word	0x40021c00
 8000f44:	40013c00 	.word	0x40013c00

08000f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]
 8000f54:	4613      	mov	r3, r2
 8000f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f58:	787b      	ldrb	r3, [r7, #1]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f5e:	887a      	ldrh	r2, [r7, #2]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f64:	e003      	b.n	8000f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	041a      	lsls	r2, r3, #16
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	619a      	str	r2, [r3, #24]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	460b      	mov	r3, r1
 8000f84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f8c:	887a      	ldrh	r2, [r7, #2]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4013      	ands	r3, r2
 8000f92:	041a      	lsls	r2, r3, #16
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	400b      	ands	r3, r1
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	619a      	str	r2, [r3, #24]
}
 8000fa2:	bf00      	nop
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e264      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d075      	beq.n	80010ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fce:	4ba3      	ldr	r3, [pc, #652]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d00c      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fda:	4ba0      	ldr	r3, [pc, #640]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fe2:	2b08      	cmp	r3, #8
 8000fe4:	d112      	bne.n	800100c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fe6:	4b9d      	ldr	r3, [pc, #628]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ff2:	d10b      	bne.n	800100c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff4:	4b99      	ldr	r3, [pc, #612]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d05b      	beq.n	80010b8 <HAL_RCC_OscConfig+0x108>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d157      	bne.n	80010b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e23f      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001014:	d106      	bne.n	8001024 <HAL_RCC_OscConfig+0x74>
 8001016:	4b91      	ldr	r3, [pc, #580]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a90      	ldr	r2, [pc, #576]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 800101c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e01d      	b.n	8001060 <HAL_RCC_OscConfig+0xb0>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0x98>
 800102e:	4b8b      	ldr	r3, [pc, #556]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a8a      	ldr	r2, [pc, #552]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8001034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	4b88      	ldr	r3, [pc, #544]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a87      	ldr	r2, [pc, #540]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8001040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e00b      	b.n	8001060 <HAL_RCC_OscConfig+0xb0>
 8001048:	4b84      	ldr	r3, [pc, #528]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a83      	ldr	r2, [pc, #524]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 800104e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b81      	ldr	r3, [pc, #516]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a80      	ldr	r2, [pc, #512]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 800105a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d013      	beq.n	8001090 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fce4 	bl	8000a34 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001070:	f7ff fce0 	bl	8000a34 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b64      	cmp	r3, #100	; 0x64
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e204      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001082:	4b76      	ldr	r3, [pc, #472]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0f0      	beq.n	8001070 <HAL_RCC_OscConfig+0xc0>
 800108e:	e014      	b.n	80010ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff fcd0 	bl	8000a34 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001098:	f7ff fccc 	bl	8000a34 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e1f0      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010aa:	4b6c      	ldr	r3, [pc, #432]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f0      	bne.n	8001098 <HAL_RCC_OscConfig+0xe8>
 80010b6:	e000      	b.n	80010ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d063      	beq.n	800118e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010c6:	4b65      	ldr	r3, [pc, #404]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 030c 	and.w	r3, r3, #12
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010d2:	4b62      	ldr	r3, [pc, #392]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010da:	2b08      	cmp	r3, #8
 80010dc:	d11c      	bne.n	8001118 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010de:	4b5f      	ldr	r3, [pc, #380]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d116      	bne.n	8001118 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ea:	4b5c      	ldr	r3, [pc, #368]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <HAL_RCC_OscConfig+0x152>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d001      	beq.n	8001102 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e1c4      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001102:	4b56      	ldr	r3, [pc, #344]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4952      	ldr	r1, [pc, #328]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8001112:	4313      	orrs	r3, r2
 8001114:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001116:	e03a      	b.n	800118e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d020      	beq.n	8001162 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001120:	4b4f      	ldr	r3, [pc, #316]	; (8001260 <HAL_RCC_OscConfig+0x2b0>)
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001126:	f7ff fc85 	bl	8000a34 <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800112e:	f7ff fc81 	bl	8000a34 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e1a5      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001140:	4b46      	ldr	r3, [pc, #280]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114c:	4b43      	ldr	r3, [pc, #268]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4940      	ldr	r1, [pc, #256]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 800115c:	4313      	orrs	r3, r2
 800115e:	600b      	str	r3, [r1, #0]
 8001160:	e015      	b.n	800118e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001162:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <HAL_RCC_OscConfig+0x2b0>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001168:	f7ff fc64 	bl	8000a34 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001170:	f7ff fc60 	bl	8000a34 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e184      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001182:	4b36      	ldr	r3, [pc, #216]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	2b00      	cmp	r3, #0
 8001198:	d030      	beq.n	80011fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d016      	beq.n	80011d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a2:	4b30      	ldr	r3, [pc, #192]	; (8001264 <HAL_RCC_OscConfig+0x2b4>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a8:	f7ff fc44 	bl	8000a34 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b0:	f7ff fc40 	bl	8000a34 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e164      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0x200>
 80011ce:	e015      	b.n	80011fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <HAL_RCC_OscConfig+0x2b4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fc2d 	bl	8000a34 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011de:	f7ff fc29 	bl	8000a34 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e14d      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 80011f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f0      	bne.n	80011de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80a0 	beq.w	800134a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10f      	bne.n	800123a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_RCC_OscConfig+0x2ac>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001236:	2301      	movs	r3, #1
 8001238:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_RCC_OscConfig+0x2b8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001242:	2b00      	cmp	r3, #0
 8001244:	d121      	bne.n	800128a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_RCC_OscConfig+0x2b8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_RCC_OscConfig+0x2b8>)
 800124c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001252:	f7ff fbef 	bl	8000a34 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001258:	e011      	b.n	800127e <HAL_RCC_OscConfig+0x2ce>
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	42470000 	.word	0x42470000
 8001264:	42470e80 	.word	0x42470e80
 8001268:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800126c:	f7ff fbe2 	bl	8000a34 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e106      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127e:	4b85      	ldr	r3, [pc, #532]	; (8001494 <HAL_RCC_OscConfig+0x4e4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d106      	bne.n	80012a0 <HAL_RCC_OscConfig+0x2f0>
 8001292:	4b81      	ldr	r3, [pc, #516]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 8001294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001296:	4a80      	ldr	r2, [pc, #512]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6713      	str	r3, [r2, #112]	; 0x70
 800129e:	e01c      	b.n	80012da <HAL_RCC_OscConfig+0x32a>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d10c      	bne.n	80012c2 <HAL_RCC_OscConfig+0x312>
 80012a8:	4b7b      	ldr	r3, [pc, #492]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 80012aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ac:	4a7a      	ldr	r2, [pc, #488]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6713      	str	r3, [r2, #112]	; 0x70
 80012b4:	4b78      	ldr	r3, [pc, #480]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 80012b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b8:	4a77      	ldr	r2, [pc, #476]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6713      	str	r3, [r2, #112]	; 0x70
 80012c0:	e00b      	b.n	80012da <HAL_RCC_OscConfig+0x32a>
 80012c2:	4b75      	ldr	r3, [pc, #468]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 80012c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c6:	4a74      	ldr	r2, [pc, #464]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 80012c8:	f023 0301 	bic.w	r3, r3, #1
 80012cc:	6713      	str	r3, [r2, #112]	; 0x70
 80012ce:	4b72      	ldr	r3, [pc, #456]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 80012d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d2:	4a71      	ldr	r2, [pc, #452]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 80012d4:	f023 0304 	bic.w	r3, r3, #4
 80012d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d015      	beq.n	800130e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e2:	f7ff fba7 	bl	8000a34 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e8:	e00a      	b.n	8001300 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ea:	f7ff fba3 	bl	8000a34 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e0c5      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001300:	4b65      	ldr	r3, [pc, #404]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 8001302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0ee      	beq.n	80012ea <HAL_RCC_OscConfig+0x33a>
 800130c:	e014      	b.n	8001338 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130e:	f7ff fb91 	bl	8000a34 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001316:	f7ff fb8d 	bl	8000a34 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f241 3288 	movw	r2, #5000	; 0x1388
 8001324:	4293      	cmp	r3, r2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e0af      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132c:	4b5a      	ldr	r3, [pc, #360]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 800132e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1ee      	bne.n	8001316 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d105      	bne.n	800134a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800133e:	4b56      	ldr	r3, [pc, #344]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a55      	ldr	r2, [pc, #340]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 8001344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 809b 	beq.w	800148a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001354:	4b50      	ldr	r3, [pc, #320]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	2b08      	cmp	r3, #8
 800135e:	d05c      	beq.n	800141a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d141      	bne.n	80013ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001368:	4b4c      	ldr	r3, [pc, #304]	; (800149c <HAL_RCC_OscConfig+0x4ec>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136e:	f7ff fb61 	bl	8000a34 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001376:	f7ff fb5d 	bl	8000a34 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e081      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001388:	4b43      	ldr	r3, [pc, #268]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f0      	bne.n	8001376 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69da      	ldr	r2, [r3, #28]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	019b      	lsls	r3, r3, #6
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013aa:	085b      	lsrs	r3, r3, #1
 80013ac:	3b01      	subs	r3, #1
 80013ae:	041b      	lsls	r3, r3, #16
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	061b      	lsls	r3, r3, #24
 80013b8:	4937      	ldr	r1, [pc, #220]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013be:	4b37      	ldr	r3, [pc, #220]	; (800149c <HAL_RCC_OscConfig+0x4ec>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fb36 	bl	8000a34 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013cc:	f7ff fb32 	bl	8000a34 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e056      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013de:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x41c>
 80013ea:	e04e      	b.n	800148a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ec:	4b2b      	ldr	r3, [pc, #172]	; (800149c <HAL_RCC_OscConfig+0x4ec>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f2:	f7ff fb1f 	bl	8000a34 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff fb1b 	bl	8000a34 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e03f      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800140c:	4b22      	ldr	r3, [pc, #136]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f0      	bne.n	80013fa <HAL_RCC_OscConfig+0x44a>
 8001418:	e037      	b.n	800148a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d101      	bne.n	8001426 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e032      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <HAL_RCC_OscConfig+0x4e8>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d028      	beq.n	8001486 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800143e:	429a      	cmp	r2, r3
 8001440:	d121      	bne.n	8001486 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144c:	429a      	cmp	r2, r3
 800144e:	d11a      	bne.n	8001486 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001456:	4013      	ands	r3, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800145c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800145e:	4293      	cmp	r3, r2
 8001460:	d111      	bne.n	8001486 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	085b      	lsrs	r3, r3, #1
 800146e:	3b01      	subs	r3, #1
 8001470:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001472:	429a      	cmp	r2, r3
 8001474:	d107      	bne.n	8001486 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001480:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001482:	429a      	cmp	r2, r3
 8001484:	d001      	beq.n	800148a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40007000 	.word	0x40007000
 8001498:	40023800 	.word	0x40023800
 800149c:	42470060 	.word	0x42470060

080014a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0cc      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014b4:	4b68      	ldr	r3, [pc, #416]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d90c      	bls.n	80014dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c2:	4b65      	ldr	r3, [pc, #404]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ca:	4b63      	ldr	r3, [pc, #396]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0b8      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d020      	beq.n	800152a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f4:	4b59      	ldr	r3, [pc, #356]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	4a58      	ldr	r2, [pc, #352]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	4a52      	ldr	r2, [pc, #328]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001516:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001518:	4b50      	ldr	r3, [pc, #320]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	494d      	ldr	r1, [pc, #308]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	4313      	orrs	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d044      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d107      	bne.n	800154e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d119      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e07f      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d003      	beq.n	800155e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800155a:	2b03      	cmp	r3, #3
 800155c:	d107      	bne.n	800156e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155e:	4b3f      	ldr	r3, [pc, #252]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e06f      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e067      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157e:	4b37      	ldr	r3, [pc, #220]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f023 0203 	bic.w	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4934      	ldr	r1, [pc, #208]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	4313      	orrs	r3, r2
 800158e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001590:	f7ff fa50 	bl	8000a34 <HAL_GetTick>
 8001594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001596:	e00a      	b.n	80015ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001598:	f7ff fa4c 	bl	8000a34 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e04f      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ae:	4b2b      	ldr	r3, [pc, #172]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 020c 	and.w	r2, r3, #12
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	429a      	cmp	r2, r3
 80015be:	d1eb      	bne.n	8001598 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d20c      	bcs.n	80015e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_RCC_ClockConfig+0x1b8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e032      	b.n	800164e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d008      	beq.n	8001606 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4916      	ldr	r1, [pc, #88]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	4313      	orrs	r3, r2
 8001604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	490e      	ldr	r1, [pc, #56]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	4313      	orrs	r3, r2
 8001624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001626:	f000 f821 	bl	800166c <HAL_RCC_GetSysClockFreq>
 800162a:	4602      	mov	r2, r0
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	490a      	ldr	r1, [pc, #40]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 8001638:	5ccb      	ldrb	r3, [r1, r3]
 800163a:	fa22 f303 	lsr.w	r3, r2, r3
 800163e:	4a09      	ldr	r2, [pc, #36]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff f90a 	bl	8000860 <HAL_InitTick>

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023c00 	.word	0x40023c00
 800165c:	40023800 	.word	0x40023800
 8001660:	08005c50 	.word	0x08005c50
 8001664:	20000000 	.word	0x20000000
 8001668:	20000004 	.word	0x20000004

0800166c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800166c:	b5b0      	push	{r4, r5, r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001672:	2100      	movs	r1, #0
 8001674:	6079      	str	r1, [r7, #4]
 8001676:	2100      	movs	r1, #0
 8001678:	60f9      	str	r1, [r7, #12]
 800167a:	2100      	movs	r1, #0
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800167e:	2100      	movs	r1, #0
 8001680:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001682:	4952      	ldr	r1, [pc, #328]	; (80017cc <HAL_RCC_GetSysClockFreq+0x160>)
 8001684:	6889      	ldr	r1, [r1, #8]
 8001686:	f001 010c 	and.w	r1, r1, #12
 800168a:	2908      	cmp	r1, #8
 800168c:	d00d      	beq.n	80016aa <HAL_RCC_GetSysClockFreq+0x3e>
 800168e:	2908      	cmp	r1, #8
 8001690:	f200 8094 	bhi.w	80017bc <HAL_RCC_GetSysClockFreq+0x150>
 8001694:	2900      	cmp	r1, #0
 8001696:	d002      	beq.n	800169e <HAL_RCC_GetSysClockFreq+0x32>
 8001698:	2904      	cmp	r1, #4
 800169a:	d003      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0x38>
 800169c:	e08e      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800169e:	4b4c      	ldr	r3, [pc, #304]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80016a0:	60bb      	str	r3, [r7, #8]
       break;
 80016a2:	e08e      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016a4:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80016a6:	60bb      	str	r3, [r7, #8]
      break;
 80016a8:	e08b      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016aa:	4948      	ldr	r1, [pc, #288]	; (80017cc <HAL_RCC_GetSysClockFreq+0x160>)
 80016ac:	6849      	ldr	r1, [r1, #4]
 80016ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80016b2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016b4:	4945      	ldr	r1, [pc, #276]	; (80017cc <HAL_RCC_GetSysClockFreq+0x160>)
 80016b6:	6849      	ldr	r1, [r1, #4]
 80016b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80016bc:	2900      	cmp	r1, #0
 80016be:	d024      	beq.n	800170a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c0:	4942      	ldr	r1, [pc, #264]	; (80017cc <HAL_RCC_GetSysClockFreq+0x160>)
 80016c2:	6849      	ldr	r1, [r1, #4]
 80016c4:	0989      	lsrs	r1, r1, #6
 80016c6:	4608      	mov	r0, r1
 80016c8:	f04f 0100 	mov.w	r1, #0
 80016cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80016d0:	f04f 0500 	mov.w	r5, #0
 80016d4:	ea00 0204 	and.w	r2, r0, r4
 80016d8:	ea01 0305 	and.w	r3, r1, r5
 80016dc:	493d      	ldr	r1, [pc, #244]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80016de:	fb01 f003 	mul.w	r0, r1, r3
 80016e2:	2100      	movs	r1, #0
 80016e4:	fb01 f102 	mul.w	r1, r1, r2
 80016e8:	1844      	adds	r4, r0, r1
 80016ea:	493a      	ldr	r1, [pc, #232]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80016ec:	fba2 0101 	umull	r0, r1, r2, r1
 80016f0:	1863      	adds	r3, r4, r1
 80016f2:	4619      	mov	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	461a      	mov	r2, r3
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	f7fe fdb2 	bl	8000264 <__aeabi_uldivmod>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4613      	mov	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	e04a      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800170a:	4b30      	ldr	r3, [pc, #192]	; (80017cc <HAL_RCC_GetSysClockFreq+0x160>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	099b      	lsrs	r3, r3, #6
 8001710:	461a      	mov	r2, r3
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	f240 10ff 	movw	r0, #511	; 0x1ff
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	ea02 0400 	and.w	r4, r2, r0
 8001722:	ea03 0501 	and.w	r5, r3, r1
 8001726:	4620      	mov	r0, r4
 8001728:	4629      	mov	r1, r5
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	014b      	lsls	r3, r1, #5
 8001734:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001738:	0142      	lsls	r2, r0, #5
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	1b00      	subs	r0, r0, r4
 8001740:	eb61 0105 	sbc.w	r1, r1, r5
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	018b      	lsls	r3, r1, #6
 800174e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001752:	0182      	lsls	r2, r0, #6
 8001754:	1a12      	subs	r2, r2, r0
 8001756:	eb63 0301 	sbc.w	r3, r3, r1
 800175a:	f04f 0000 	mov.w	r0, #0
 800175e:	f04f 0100 	mov.w	r1, #0
 8001762:	00d9      	lsls	r1, r3, #3
 8001764:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001768:	00d0      	lsls	r0, r2, #3
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	1912      	adds	r2, r2, r4
 8001770:	eb45 0303 	adc.w	r3, r5, r3
 8001774:	f04f 0000 	mov.w	r0, #0
 8001778:	f04f 0100 	mov.w	r1, #0
 800177c:	0299      	lsls	r1, r3, #10
 800177e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001782:	0290      	lsls	r0, r2, #10
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	461a      	mov	r2, r3
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	f7fe fd66 	bl	8000264 <__aeabi_uldivmod>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4613      	mov	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_RCC_GetSysClockFreq+0x160>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	3301      	adds	r3, #1
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	60bb      	str	r3, [r7, #8]
      break;
 80017ba:	e002      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80017be:	60bb      	str	r3, [r7, #8]
      break;
 80017c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c2:	68bb      	ldr	r3, [r7, #8]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bdb0      	pop	{r4, r5, r7, pc}
 80017cc:	40023800 	.word	0x40023800
 80017d0:	00f42400 	.word	0x00f42400
 80017d4:	017d7840 	.word	0x017d7840

080017d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_RCC_GetHCLKFreq+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000000 	.word	0x20000000

080017f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017f4:	f7ff fff0 	bl	80017d8 <HAL_RCC_GetHCLKFreq>
 80017f8:	4602      	mov	r2, r0
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	0a9b      	lsrs	r3, r3, #10
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	4903      	ldr	r1, [pc, #12]	; (8001814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001806:	5ccb      	ldrb	r3, [r1, r3]
 8001808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800180c:	4618      	mov	r0, r3
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40023800 	.word	0x40023800
 8001814:	08005c60 	.word	0x08005c60

08001818 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	220f      	movs	r2, #15
 8001826:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_RCC_GetClockConfig+0x5c>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0203 	and.w	r2, r3, #3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_RCC_GetClockConfig+0x5c>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <HAL_RCC_GetClockConfig+0x5c>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_RCC_GetClockConfig+0x5c>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	08db      	lsrs	r3, r3, #3
 8001852:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <HAL_RCC_GetClockConfig+0x60>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0207 	and.w	r2, r3, #7
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	601a      	str	r2, [r3, #0]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40023c00 	.word	0x40023c00

0800187c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e041      	b.n	8001912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d106      	bne.n	80018a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f839 	bl	800191a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2202      	movs	r2, #2
 80018ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3304      	adds	r3, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4610      	mov	r0, r2
 80018bc:	f000 f9d8 	bl	8001c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d001      	beq.n	8001948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e04e      	b.n	80019e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a23      	ldr	r2, [pc, #140]	; (80019f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d022      	beq.n	80019b0 <HAL_TIM_Base_Start_IT+0x80>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001972:	d01d      	beq.n	80019b0 <HAL_TIM_Base_Start_IT+0x80>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a1f      	ldr	r2, [pc, #124]	; (80019f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d018      	beq.n	80019b0 <HAL_TIM_Base_Start_IT+0x80>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <HAL_TIM_Base_Start_IT+0xcc>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d013      	beq.n	80019b0 <HAL_TIM_Base_Start_IT+0x80>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a1c      	ldr	r2, [pc, #112]	; (8001a00 <HAL_TIM_Base_Start_IT+0xd0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d00e      	beq.n	80019b0 <HAL_TIM_Base_Start_IT+0x80>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a1b      	ldr	r2, [pc, #108]	; (8001a04 <HAL_TIM_Base_Start_IT+0xd4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d009      	beq.n	80019b0 <HAL_TIM_Base_Start_IT+0x80>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <HAL_TIM_Base_Start_IT+0xd8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d004      	beq.n	80019b0 <HAL_TIM_Base_Start_IT+0x80>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a18      	ldr	r2, [pc, #96]	; (8001a0c <HAL_TIM_Base_Start_IT+0xdc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d111      	bne.n	80019d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d010      	beq.n	80019e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f042 0201 	orr.w	r2, r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019d2:	e007      	b.n	80019e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40010000 	.word	0x40010000
 80019f8:	40000400 	.word	0x40000400
 80019fc:	40000800 	.word	0x40000800
 8001a00:	40000c00 	.word	0x40000c00
 8001a04:	40010400 	.word	0x40010400
 8001a08:	40014000 	.word	0x40014000
 8001a0c:	40001800 	.word	0x40001800

08001a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d122      	bne.n	8001a6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d11b      	bne.n	8001a6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f06f 0202 	mvn.w	r2, #2
 8001a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f8ee 	bl	8001c34 <HAL_TIM_IC_CaptureCallback>
 8001a58:	e005      	b.n	8001a66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f8e0 	bl	8001c20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f8f1 	bl	8001c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d122      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11b      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f06f 0204 	mvn.w	r2, #4
 8001a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2202      	movs	r2, #2
 8001a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f8c4 	bl	8001c34 <HAL_TIM_IC_CaptureCallback>
 8001aac:	e005      	b.n	8001aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f8b6 	bl	8001c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f8c7 	bl	8001c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d122      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d11b      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f06f 0208 	mvn.w	r2, #8
 8001ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2204      	movs	r2, #4
 8001aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f89a 	bl	8001c34 <HAL_TIM_IC_CaptureCallback>
 8001b00:	e005      	b.n	8001b0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f88c 	bl	8001c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f89d 	bl	8001c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b10      	cmp	r3, #16
 8001b20:	d122      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b10      	cmp	r3, #16
 8001b2e:	d11b      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0210 	mvn.w	r2, #16
 8001b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f870 	bl	8001c34 <HAL_TIM_IC_CaptureCallback>
 8001b54:	e005      	b.n	8001b62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f862 	bl	8001c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f873 	bl	8001c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d10e      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d107      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0201 	mvn.w	r2, #1
 8001b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7fe fe26 	bl	80007e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9e:	2b80      	cmp	r3, #128	; 0x80
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bac:	2b80      	cmp	r3, #128	; 0x80
 8001bae:	d107      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f902 	bl	8001dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bca:	2b40      	cmp	r3, #64	; 0x40
 8001bcc:	d10e      	bne.n	8001bec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd8:	2b40      	cmp	r3, #64	; 0x40
 8001bda:	d107      	bne.n	8001bec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f838 	bl	8001c5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0320 	and.w	r3, r3, #32
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	d10e      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0320 	and.w	r3, r3, #32
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d107      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0220 	mvn.w	r2, #32
 8001c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f8cc 	bl	8001db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a40      	ldr	r2, [pc, #256]	; (8001d84 <TIM_Base_SetConfig+0x114>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d013      	beq.n	8001cb0 <TIM_Base_SetConfig+0x40>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8e:	d00f      	beq.n	8001cb0 <TIM_Base_SetConfig+0x40>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a3d      	ldr	r2, [pc, #244]	; (8001d88 <TIM_Base_SetConfig+0x118>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d00b      	beq.n	8001cb0 <TIM_Base_SetConfig+0x40>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a3c      	ldr	r2, [pc, #240]	; (8001d8c <TIM_Base_SetConfig+0x11c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d007      	beq.n	8001cb0 <TIM_Base_SetConfig+0x40>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a3b      	ldr	r2, [pc, #236]	; (8001d90 <TIM_Base_SetConfig+0x120>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d003      	beq.n	8001cb0 <TIM_Base_SetConfig+0x40>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a3a      	ldr	r2, [pc, #232]	; (8001d94 <TIM_Base_SetConfig+0x124>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d108      	bne.n	8001cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a2f      	ldr	r2, [pc, #188]	; (8001d84 <TIM_Base_SetConfig+0x114>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d02b      	beq.n	8001d22 <TIM_Base_SetConfig+0xb2>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd0:	d027      	beq.n	8001d22 <TIM_Base_SetConfig+0xb2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a2c      	ldr	r2, [pc, #176]	; (8001d88 <TIM_Base_SetConfig+0x118>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d023      	beq.n	8001d22 <TIM_Base_SetConfig+0xb2>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a2b      	ldr	r2, [pc, #172]	; (8001d8c <TIM_Base_SetConfig+0x11c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d01f      	beq.n	8001d22 <TIM_Base_SetConfig+0xb2>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a2a      	ldr	r2, [pc, #168]	; (8001d90 <TIM_Base_SetConfig+0x120>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d01b      	beq.n	8001d22 <TIM_Base_SetConfig+0xb2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a29      	ldr	r2, [pc, #164]	; (8001d94 <TIM_Base_SetConfig+0x124>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d017      	beq.n	8001d22 <TIM_Base_SetConfig+0xb2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a28      	ldr	r2, [pc, #160]	; (8001d98 <TIM_Base_SetConfig+0x128>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <TIM_Base_SetConfig+0xb2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a27      	ldr	r2, [pc, #156]	; (8001d9c <TIM_Base_SetConfig+0x12c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00f      	beq.n	8001d22 <TIM_Base_SetConfig+0xb2>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a26      	ldr	r2, [pc, #152]	; (8001da0 <TIM_Base_SetConfig+0x130>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00b      	beq.n	8001d22 <TIM_Base_SetConfig+0xb2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a25      	ldr	r2, [pc, #148]	; (8001da4 <TIM_Base_SetConfig+0x134>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d007      	beq.n	8001d22 <TIM_Base_SetConfig+0xb2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a24      	ldr	r2, [pc, #144]	; (8001da8 <TIM_Base_SetConfig+0x138>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d003      	beq.n	8001d22 <TIM_Base_SetConfig+0xb2>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a23      	ldr	r2, [pc, #140]	; (8001dac <TIM_Base_SetConfig+0x13c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d108      	bne.n	8001d34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <TIM_Base_SetConfig+0x114>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d003      	beq.n	8001d68 <TIM_Base_SetConfig+0xf8>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <TIM_Base_SetConfig+0x124>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d103      	bne.n	8001d70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	615a      	str	r2, [r3, #20]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40010000 	.word	0x40010000
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	40000800 	.word	0x40000800
 8001d90:	40000c00 	.word	0x40000c00
 8001d94:	40010400 	.word	0x40010400
 8001d98:	40014000 	.word	0x40014000
 8001d9c:	40014400 	.word	0x40014400
 8001da0:	40014800 	.word	0x40014800
 8001da4:	40001800 	.word	0x40001800
 8001da8:	40001c00 	.word	0x40001c00
 8001dac:	40002000 	.word	0x40002000

08001db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f103 0208 	add.w	r2, r3, #8
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f103 0208 	add.w	r2, r3, #8
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f103 0208 	add.w	r2, r3, #8
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001e32:	b480      	push	{r7}
 8001e34:	b085      	sub	sp, #20
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d103      	bne.n	8001e52 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	e00c      	b.n	8001e6c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3308      	adds	r3, #8
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	e002      	b.n	8001e60 <vListInsert+0x2e>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d2f6      	bcs.n	8001e5a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	601a      	str	r2, [r3, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6892      	ldr	r2, [r2, #8]
 8001eba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6852      	ldr	r2, [r2, #4]
 8001ec4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d103      	bne.n	8001ed8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	1e5a      	subs	r2, r3, #1
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001f02:	2301      	movs	r3, #1
 8001f04:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10a      	bne.n	8001f26 <xQueueGenericReset+0x2e>
        __asm volatile
 8001f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f14:	f383 8811 	msr	BASEPRI, r3
 8001f18:	f3bf 8f6f 	isb	sy
 8001f1c:	f3bf 8f4f 	dsb	sy
 8001f20:	60fb      	str	r3, [r7, #12]
    }
 8001f22:	bf00      	nop
 8001f24:	e7fe      	b.n	8001f24 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d05d      	beq.n	8001fe8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d059      	beq.n	8001fe8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d000      	beq.n	8001f48 <xQueueGenericReset+0x50>
 8001f46:	2101      	movs	r1, #1
 8001f48:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d14c      	bne.n	8001fe8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001f4e:	f001 ff79 	bl	8003e44 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	6939      	ldr	r1, [r7, #16]
 8001f5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f5e:	fb01 f303 	mul.w	r3, r1, r3
 8001f62:	441a      	add	r2, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	6939      	ldr	r1, [r7, #16]
 8001f82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	441a      	add	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	22ff      	movs	r2, #255	; 0xff
 8001f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	22ff      	movs	r2, #255	; 0xff
 8001f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d114      	bne.n	8001fce <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01a      	beq.n	8001fe2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	3310      	adds	r3, #16
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 f85d 	bl	8003070 <xTaskRemoveFromEventList>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d012      	beq.n	8001fe2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <xQueueGenericReset+0x11c>)
 8001fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f3bf 8f4f 	dsb	sy
 8001fc8:	f3bf 8f6f 	isb	sy
 8001fcc:	e009      	b.n	8001fe2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	3310      	adds	r3, #16
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff00 	bl	8001dd8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	3324      	adds	r3, #36	; 0x24
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fefb 	bl	8001dd8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001fe2:	f001 ff5f 	bl	8003ea4 <vPortExitCritical>
 8001fe6:	e001      	b.n	8001fec <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10a      	bne.n	8002008 <xQueueGenericReset+0x110>
        __asm volatile
 8001ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff6:	f383 8811 	msr	BASEPRI, r3
 8001ffa:	f3bf 8f6f 	isb	sy
 8001ffe:	f3bf 8f4f 	dsb	sy
 8002002:	60bb      	str	r3, [r7, #8]
    }
 8002004:	bf00      	nop
 8002006:	e7fe      	b.n	8002006 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002008:	697b      	ldr	r3, [r7, #20]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	e000ed04 	.word	0xe000ed04

08002018 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af02      	add	r7, sp, #8
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	4613      	mov	r3, r2
 8002024:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d02e      	beq.n	800208e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002030:	2100      	movs	r1, #0
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	fba3 2302 	umull	r2, r3, r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d000      	beq.n	8002040 <xQueueGenericCreate+0x28>
 800203e:	2101      	movs	r1, #1
 8002040:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002042:	2b00      	cmp	r3, #0
 8002044:	d123      	bne.n	800208e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800204e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002052:	d81c      	bhi.n	800208e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	fb02 f303 	mul.w	r3, r2, r3
 800205c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	3350      	adds	r3, #80	; 0x50
 8002062:	4618      	mov	r0, r3
 8002064:	f001 ffda 	bl	800401c <pvPortMalloc>
 8002068:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01c      	beq.n	80020aa <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	3350      	adds	r3, #80	; 0x50
 8002078:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800207a:	79fa      	ldrb	r2, [r7, #7]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f814 	bl	80020b4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800208c:	e00d      	b.n	80020aa <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10a      	bne.n	80020aa <xQueueGenericCreate+0x92>
        __asm volatile
 8002094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002098:	f383 8811 	msr	BASEPRI, r3
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	f3bf 8f4f 	dsb	sy
 80020a4:	613b      	str	r3, [r7, #16]
    }
 80020a6:	bf00      	nop
 80020a8:	e7fe      	b.n	80020a8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80020aa:	69fb      	ldr	r3, [r7, #28]
    }
 80020ac:	4618      	mov	r0, r3
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d103      	bne.n	80020d0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e002      	b.n	80020d6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020e2:	2101      	movs	r1, #1
 80020e4:	69b8      	ldr	r0, [r7, #24]
 80020e6:	f7ff ff07 	bl	8001ef8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	68f9      	ldr	r1, [r7, #12]
 80020f8:	2073      	movs	r0, #115	; 0x73
 80020fa:	f002 fe57 	bl	8004dac <SEGGER_SYSVIEW_RecordU32x3>
}
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b08f      	sub	sp, #60	; 0x3c
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10a      	bne.n	8002138 <xQueueReceive+0x30>
        __asm volatile
 8002122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002126:	f383 8811 	msr	BASEPRI, r3
 800212a:	f3bf 8f6f 	isb	sy
 800212e:	f3bf 8f4f 	dsb	sy
 8002132:	623b      	str	r3, [r7, #32]
    }
 8002134:	bf00      	nop
 8002136:	e7fe      	b.n	8002136 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d103      	bne.n	8002146 <xQueueReceive+0x3e>
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <xQueueReceive+0x42>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <xQueueReceive+0x44>
 800214a:	2300      	movs	r3, #0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <xQueueReceive+0x5e>
        __asm volatile
 8002150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002154:	f383 8811 	msr	BASEPRI, r3
 8002158:	f3bf 8f6f 	isb	sy
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	61fb      	str	r3, [r7, #28]
    }
 8002162:	bf00      	nop
 8002164:	e7fe      	b.n	8002164 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002166:	f001 f995 	bl	8003494 <xTaskGetSchedulerState>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <xQueueReceive+0x6e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <xQueueReceive+0x72>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <xQueueReceive+0x74>
 800217a:	2300      	movs	r3, #0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10a      	bne.n	8002196 <xQueueReceive+0x8e>
        __asm volatile
 8002180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002184:	f383 8811 	msr	BASEPRI, r3
 8002188:	f3bf 8f6f 	isb	sy
 800218c:	f3bf 8f4f 	dsb	sy
 8002190:	61bb      	str	r3, [r7, #24]
    }
 8002192:	bf00      	nop
 8002194:	e7fe      	b.n	8002194 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002196:	f001 fe55 	bl	8003e44 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d02f      	beq.n	8002206 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80021a6:	68b9      	ldr	r1, [r7, #8]
 80021a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021aa:	f000 f8bd 	bl	8002328 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80021ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 fb63 	bl	800587c <SEGGER_SYSVIEW_ShrinkId>
 80021b6:	4604      	mov	r4, r0
 80021b8:	2000      	movs	r0, #0
 80021ba:	f003 fb5f 	bl	800587c <SEGGER_SYSVIEW_ShrinkId>
 80021be:	4602      	mov	r2, r0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2101      	movs	r1, #1
 80021c4:	9100      	str	r1, [sp, #0]
 80021c6:	4621      	mov	r1, r4
 80021c8:	205c      	movs	r0, #92	; 0x5c
 80021ca:	f002 fe65 	bl	8004e98 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	1e5a      	subs	r2, r3, #1
 80021d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00f      	beq.n	80021fe <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e0:	3310      	adds	r3, #16
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 ff44 	bl	8003070 <xTaskRemoveFromEventList>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80021ee:	4b4d      	ldr	r3, [pc, #308]	; (8002324 <xQueueReceive+0x21c>)
 80021f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	f3bf 8f4f 	dsb	sy
 80021fa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80021fe:	f001 fe51 	bl	8003ea4 <vPortExitCritical>
                return pdPASS;
 8002202:	2301      	movs	r3, #1
 8002204:	e08a      	b.n	800231c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d113      	bne.n	8002234 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800220c:	f001 fe4a 	bl	8003ea4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002212:	4618      	mov	r0, r3
 8002214:	f003 fb32 	bl	800587c <SEGGER_SYSVIEW_ShrinkId>
 8002218:	4604      	mov	r4, r0
 800221a:	2000      	movs	r0, #0
 800221c:	f003 fb2e 	bl	800587c <SEGGER_SYSVIEW_ShrinkId>
 8002220:	4602      	mov	r2, r0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2101      	movs	r1, #1
 8002226:	9100      	str	r1, [sp, #0]
 8002228:	4621      	mov	r1, r4
 800222a:	205c      	movs	r0, #92	; 0x5c
 800222c:	f002 fe34 	bl	8004e98 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002230:	2300      	movs	r3, #0
 8002232:	e073      	b.n	800231c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800223a:	f107 0310 	add.w	r3, r7, #16
 800223e:	4618      	mov	r0, r3
 8002240:	f000 ffee 	bl	8003220 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002244:	2301      	movs	r3, #1
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002248:	f001 fe2c 	bl	8003ea4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800224c:	f000 fc02 	bl	8002a54 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002250:	f001 fdf8 	bl	8003e44 <vPortEnterCritical>
 8002254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002256:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800225a:	b25b      	sxtb	r3, r3
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d103      	bne.n	800226a <xQueueReceive+0x162>
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002270:	b25b      	sxtb	r3, r3
 8002272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002276:	d103      	bne.n	8002280 <xQueueReceive+0x178>
 8002278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002280:	f001 fe10 	bl	8003ea4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002284:	1d3a      	adds	r2, r7, #4
 8002286:	f107 0310 	add.w	r3, r7, #16
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f000 ffdd 	bl	800324c <xTaskCheckForTimeOut>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d124      	bne.n	80022e2 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800229a:	f000 f8bd 	bl	8002418 <prvIsQueueEmpty>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d018      	beq.n	80022d6 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	3324      	adds	r3, #36	; 0x24
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fe73 	bl	8002f98 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80022b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022b4:	f000 f85e 	bl	8002374 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80022b8:	f000 fbda 	bl	8002a70 <xTaskResumeAll>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f47f af69 	bne.w	8002196 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <xQueueReceive+0x21c>)
 80022c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	f3bf 8f6f 	isb	sy
 80022d4:	e75f      	b.n	8002196 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80022d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022d8:	f000 f84c 	bl	8002374 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80022dc:	f000 fbc8 	bl	8002a70 <xTaskResumeAll>
 80022e0:	e759      	b.n	8002196 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80022e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022e4:	f000 f846 	bl	8002374 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80022e8:	f000 fbc2 	bl	8002a70 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022ee:	f000 f893 	bl	8002418 <prvIsQueueEmpty>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f43f af4e 	beq.w	8002196 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80022fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fc:	4618      	mov	r0, r3
 80022fe:	f003 fabd 	bl	800587c <SEGGER_SYSVIEW_ShrinkId>
 8002302:	4604      	mov	r4, r0
 8002304:	2000      	movs	r0, #0
 8002306:	f003 fab9 	bl	800587c <SEGGER_SYSVIEW_ShrinkId>
 800230a:	4602      	mov	r2, r0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2101      	movs	r1, #1
 8002310:	9100      	str	r1, [sp, #0]
 8002312:	4621      	mov	r1, r4
 8002314:	205c      	movs	r0, #92	; 0x5c
 8002316:	f002 fdbf 	bl	8004e98 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800231a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800231c:	4618      	mov	r0, r3
 800231e:	3734      	adds	r7, #52	; 0x34
 8002320:	46bd      	mov	sp, r7
 8002322:	bd90      	pop	{r4, r7, pc}
 8002324:	e000ed04 	.word	0xe000ed04

08002328 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d018      	beq.n	800236c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	441a      	add	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	429a      	cmp	r2, r3
 8002352:	d303      	bcc.n	800235c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68d9      	ldr	r1, [r3, #12]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	461a      	mov	r2, r3
 8002366:	6838      	ldr	r0, [r7, #0]
 8002368:	f003 fc02 	bl	8005b70 <memcpy>
    }
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800237c:	f001 fd62 	bl	8003e44 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002386:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002388:	e011      	b.n	80023ae <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	2b00      	cmp	r3, #0
 8002390:	d012      	beq.n	80023b8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3324      	adds	r3, #36	; 0x24
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fe6a 	bl	8003070 <xTaskRemoveFromEventList>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80023a2:	f000 ffb9 	bl	8003318 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80023ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	dce9      	bgt.n	800238a <prvUnlockQueue+0x16>
 80023b6:	e000      	b.n	80023ba <prvUnlockQueue+0x46>
                        break;
 80023b8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	22ff      	movs	r2, #255	; 0xff
 80023be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80023c2:	f001 fd6f 	bl	8003ea4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80023c6:	f001 fd3d 	bl	8003e44 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023d0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80023d2:	e011      	b.n	80023f8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d012      	beq.n	8002402 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3310      	adds	r3, #16
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fe45 	bl	8003070 <xTaskRemoveFromEventList>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80023ec:	f000 ff94 	bl	8003318 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80023f0:	7bbb      	ldrb	r3, [r7, #14]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80023f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	dce9      	bgt.n	80023d4 <prvUnlockQueue+0x60>
 8002400:	e000      	b.n	8002404 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002402:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	22ff      	movs	r2, #255	; 0xff
 8002408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800240c:	f001 fd4a 	bl	8003ea4 <vPortExitCritical>
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002420:	f001 fd10 	bl	8003e44 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800242c:	2301      	movs	r3, #1
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e001      	b.n	8002436 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002436:	f001 fd35 	bl	8003ea4 <vPortExitCritical>

    return xReturn;
 800243a:	68fb      	ldr	r3, [r7, #12]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10a      	bne.n	800246a <vQueueAddToRegistry+0x26>
        __asm volatile
 8002454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002458:	f383 8811 	msr	BASEPRI, r3
 800245c:	f3bf 8f6f 	isb	sy
 8002460:	f3bf 8f4f 	dsb	sy
 8002464:	60fb      	str	r3, [r7, #12]
    }
 8002466:	bf00      	nop
 8002468:	e7fe      	b.n	8002468 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d024      	beq.n	80024be <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	e01e      	b.n	80024b8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800247a:	4a1c      	ldr	r2, [pc, #112]	; (80024ec <vQueueAddToRegistry+0xa8>)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	429a      	cmp	r2, r3
 8002488:	d105      	bne.n	8002496 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4a17      	ldr	r2, [pc, #92]	; (80024ec <vQueueAddToRegistry+0xa8>)
 8002490:	4413      	add	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
                    break;
 8002494:	e013      	b.n	80024be <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <vQueueAddToRegistry+0x6e>
 800249c:	4a13      	ldr	r2, [pc, #76]	; (80024ec <vQueueAddToRegistry+0xa8>)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d104      	bne.n	80024b2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4a0f      	ldr	r2, [pc, #60]	; (80024ec <vQueueAddToRegistry+0xa8>)
 80024ae:	4413      	add	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3301      	adds	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b07      	cmp	r3, #7
 80024bc:	d9dd      	bls.n	800247a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00f      	beq.n	80024e4 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f003 f9d2 	bl	800587c <SEGGER_SYSVIEW_ShrinkId>
 80024d8:	4601      	mov	r1, r0
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	2071      	movs	r0, #113	; 0x71
 80024e0:	f002 fc0a 	bl	8004cf8 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80024e4:	bf00      	nop
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200133ac 	.word	0x200133ac

080024f0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002500:	f001 fca0 	bl	8003e44 <vPortEnterCritical>
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800250a:	b25b      	sxtb	r3, r3
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d103      	bne.n	800251a <vQueueWaitForMessageRestricted+0x2a>
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002520:	b25b      	sxtb	r3, r3
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002526:	d103      	bne.n	8002530 <vQueueWaitForMessageRestricted+0x40>
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002530:	f001 fcb8 	bl	8003ea4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002538:	2b00      	cmp	r3, #0
 800253a:	d106      	bne.n	800254a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	3324      	adds	r3, #36	; 0x24
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fd4b 	bl	8002fe0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800254a:	6978      	ldr	r0, [r7, #20]
 800254c:	f7ff ff12 	bl	8002374 <prvUnlockQueue>
    }
 8002550:	bf00      	nop
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002558:	b580      	push	{r7, lr}
 800255a:	b08c      	sub	sp, #48	; 0x30
 800255c:	af04      	add	r7, sp, #16
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4618      	mov	r0, r3
 800256e:	f001 fd55 	bl	800401c <pvPortMalloc>
 8002572:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00e      	beq.n	8002598 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800257a:	2058      	movs	r0, #88	; 0x58
 800257c:	f001 fd4e 	bl	800401c <pvPortMalloc>
 8002580:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
 800258e:	e005      	b.n	800259c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002590:	6978      	ldr	r0, [r7, #20]
 8002592:	f001 fe23 	bl	80041dc <vPortFree>
 8002596:	e001      	b.n	800259c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d013      	beq.n	80025ca <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025a2:	88fa      	ldrh	r2, [r7, #6]
 80025a4:	2300      	movs	r3, #0
 80025a6:	9303      	str	r3, [sp, #12]
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	9302      	str	r3, [sp, #8]
 80025ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 f80e 	bl	80025da <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80025be:	69f8      	ldr	r0, [r7, #28]
 80025c0:	f000 f8b0 	bl	8002724 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80025c4:	2301      	movs	r3, #1
 80025c6:	61bb      	str	r3, [r7, #24]
 80025c8:	e002      	b.n	80025d0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
 80025ce:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80025d0:	69bb      	ldr	r3, [r7, #24]
    }
 80025d2:	4618      	mov	r0, r3
 80025d4:	3720      	adds	r7, #32
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b088      	sub	sp, #32
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80025e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	461a      	mov	r2, r3
 80025f2:	21a5      	movs	r1, #165	; 0xa5
 80025f4:	f003 faca 	bl	8005b8c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002602:	3b01      	subs	r3, #1
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	f023 0307 	bic.w	r3, r3, #7
 8002610:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00a      	beq.n	8002632 <prvInitialiseNewTask+0x58>
        __asm volatile
 800261c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002620:	f383 8811 	msr	BASEPRI, r3
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	617b      	str	r3, [r7, #20]
    }
 800262e:	bf00      	nop
 8002630:	e7fe      	b.n	8002630 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01f      	beq.n	8002678 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	e012      	b.n	8002664 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	4413      	add	r3, r2
 8002644:	7819      	ldrb	r1, [r3, #0]
 8002646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	4413      	add	r3, r2
 800264c:	3334      	adds	r3, #52	; 0x34
 800264e:	460a      	mov	r2, r1
 8002650:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	4413      	add	r3, r2
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3301      	adds	r3, #1
 8002662:	61fb      	str	r3, [r7, #28]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	2b09      	cmp	r3, #9
 8002668:	d9e9      	bls.n	800263e <prvInitialiseNewTask+0x64>
 800266a:	e000      	b.n	800266e <prvInitialiseNewTask+0x94>
            {
                break;
 800266c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002676:	e003      	b.n	8002680 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	2b04      	cmp	r3, #4
 8002684:	d90a      	bls.n	800269c <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268a:	f383 8811 	msr	BASEPRI, r3
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	613b      	str	r3, [r7, #16]
    }
 8002698:	bf00      	nop
 800269a:	e7fe      	b.n	800269a <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800269c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d901      	bls.n	80026a6 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026a2:	2304      	movs	r3, #4
 80026a4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026b0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	2200      	movs	r2, #0
 80026b6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	3304      	adds	r3, #4
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fbab 	bl	8001e18 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c4:	3318      	adds	r3, #24
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fba6 	bl	8001e18 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	f1c3 0205 	rsb	r2, r3, #5
 80026d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026da:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	3350      	adds	r3, #80	; 0x50
 80026e6:	2204      	movs	r2, #4
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 fa4e 	bl	8005b8c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80026f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f2:	3354      	adds	r3, #84	; 0x54
 80026f4:	2201      	movs	r2, #1
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f003 fa47 	bl	8005b8c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	68f9      	ldr	r1, [r7, #12]
 8002702:	69b8      	ldr	r0, [r7, #24]
 8002704:	f001 f9f4 	bl	8003af0 <pxPortInitialiseStack>
 8002708:	4602      	mov	r2, r0
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002718:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800271a:	bf00      	nop
 800271c:	3720      	adds	r7, #32
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002724:	b5b0      	push	{r4, r5, r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af02      	add	r7, sp, #8
 800272a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800272c:	f001 fb8a 	bl	8003e44 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002730:	4b4f      	ldr	r3, [pc, #316]	; (8002870 <prvAddNewTaskToReadyList+0x14c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3301      	adds	r3, #1
 8002736:	4a4e      	ldr	r2, [pc, #312]	; (8002870 <prvAddNewTaskToReadyList+0x14c>)
 8002738:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800273a:	4b4e      	ldr	r3, [pc, #312]	; (8002874 <prvAddNewTaskToReadyList+0x150>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002742:	4a4c      	ldr	r2, [pc, #304]	; (8002874 <prvAddNewTaskToReadyList+0x150>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002748:	4b49      	ldr	r3, [pc, #292]	; (8002870 <prvAddNewTaskToReadyList+0x14c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d110      	bne.n	8002772 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002750:	f000 fe06 	bl	8003360 <prvInitialiseTaskLists>
 8002754:	e00d      	b.n	8002772 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002756:	4b48      	ldr	r3, [pc, #288]	; (8002878 <prvAddNewTaskToReadyList+0x154>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800275e:	4b45      	ldr	r3, [pc, #276]	; (8002874 <prvAddNewTaskToReadyList+0x150>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	429a      	cmp	r2, r3
 800276a:	d802      	bhi.n	8002772 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800276c:	4a41      	ldr	r2, [pc, #260]	; (8002874 <prvAddNewTaskToReadyList+0x150>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002772:	4b42      	ldr	r3, [pc, #264]	; (800287c <prvAddNewTaskToReadyList+0x158>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3301      	adds	r3, #1
 8002778:	4a40      	ldr	r2, [pc, #256]	; (800287c <prvAddNewTaskToReadyList+0x158>)
 800277a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800277c:	4b3f      	ldr	r3, [pc, #252]	; (800287c <prvAddNewTaskToReadyList+0x158>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d016      	beq.n	80027b8 <prvAddNewTaskToReadyList+0x94>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4618      	mov	r0, r3
 800278e:	f002 ff4f 	bl	8005630 <SEGGER_SYSVIEW_OnTaskCreate>
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	461d      	mov	r5, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461c      	mov	r4, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	1ae3      	subs	r3, r4, r3
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	462b      	mov	r3, r5
 80027b4:	f001 fe30 	bl	8004418 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f002 ffbc 	bl	8005738 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	2201      	movs	r2, #1
 80027c6:	409a      	lsls	r2, r3
 80027c8:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <prvAddNewTaskToReadyList+0x15c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	4a2c      	ldr	r2, [pc, #176]	; (8002880 <prvAddNewTaskToReadyList+0x15c>)
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d6:	492b      	ldr	r1, [pc, #172]	; (8002884 <prvAddNewTaskToReadyList+0x160>)
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	3304      	adds	r3, #4
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	3204      	adds	r2, #4
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	1d1a      	adds	r2, r3, #4
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4a1b      	ldr	r2, [pc, #108]	; (8002884 <prvAddNewTaskToReadyList+0x160>)
 8002816:	441a      	add	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	615a      	str	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002820:	4918      	ldr	r1, [pc, #96]	; (8002884 <prvAddNewTaskToReadyList+0x160>)
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	1c59      	adds	r1, r3, #1
 8002830:	4814      	ldr	r0, [pc, #80]	; (8002884 <prvAddNewTaskToReadyList+0x160>)
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4403      	add	r3, r0
 800283c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800283e:	f001 fb31 	bl	8003ea4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002842:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <prvAddNewTaskToReadyList+0x154>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00e      	beq.n	8002868 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <prvAddNewTaskToReadyList+0x150>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	429a      	cmp	r2, r3
 8002856:	d207      	bcs.n	8002868 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <prvAddNewTaskToReadyList+0x164>)
 800285a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bdb0      	pop	{r4, r5, r7, pc}
 8002870:	20000108 	.word	0x20000108
 8002874:	20000030 	.word	0x20000030
 8002878:	20000114 	.word	0x20000114
 800287c:	20000124 	.word	0x20000124
 8002880:	20000110 	.word	0x20000110
 8002884:	20000034 	.word	0x20000034
 8002888:	e000ed04 	.word	0xe000ed04

0800288c <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <xTaskDelayUntil+0x2a>
        __asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	617b      	str	r3, [r7, #20]
    }
 80028b2:	bf00      	nop
 80028b4:	e7fe      	b.n	80028b4 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <xTaskDelayUntil+0x46>
        __asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	613b      	str	r3, [r7, #16]
    }
 80028ce:	bf00      	nop
 80028d0:	e7fe      	b.n	80028d0 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80028d2:	4b2c      	ldr	r3, [pc, #176]	; (8002984 <xTaskDelayUntil+0xf8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <xTaskDelayUntil+0x64>
        __asm volatile
 80028da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028de:	f383 8811 	msr	BASEPRI, r3
 80028e2:	f3bf 8f6f 	isb	sy
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	60fb      	str	r3, [r7, #12]
    }
 80028ec:	bf00      	nop
 80028ee:	e7fe      	b.n	80028ee <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80028f0:	f000 f8b0 	bl	8002a54 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80028f4:	4b24      	ldr	r3, [pc, #144]	; (8002988 <xTaskDelayUntil+0xfc>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	4413      	add	r3, r2
 8002902:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6a3a      	ldr	r2, [r7, #32]
 800290a:	429a      	cmp	r2, r3
 800290c:	d20b      	bcs.n	8002926 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	429a      	cmp	r2, r3
 8002916:	d211      	bcs.n	800293c <xTaskDelayUntil+0xb0>
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	429a      	cmp	r2, r3
 800291e:	d90d      	bls.n	800293c <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002920:	2301      	movs	r3, #1
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
 8002924:	e00a      	b.n	800293c <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69fa      	ldr	r2, [r7, #28]
 800292c:	429a      	cmp	r2, r3
 800292e:	d303      	bcc.n	8002938 <xTaskDelayUntil+0xac>
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	429a      	cmp	r2, r3
 8002936:	d901      	bls.n	800293c <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002938:	2301      	movs	r3, #1
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	2b00      	cmp	r3, #0
 8002946:	d009      	beq.n	800295c <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002948:	2024      	movs	r0, #36	; 0x24
 800294a:	f002 f97b 	bl	8004c44 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800294e:	69fa      	ldr	r2, [r7, #28]
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fdba 	bl	80034d0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800295c:	f000 f888 	bl	8002a70 <xTaskResumeAll>
 8002960:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d107      	bne.n	8002978 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <xTaskDelayUntil+0x100>)
 800296a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800297a:	4618      	mov	r0, r3
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000130 	.word	0x20000130
 8002988:	2000010c 	.word	0x2000010c
 800298c:	e000ed04 	.word	0xe000ed04

08002990 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002996:	4b27      	ldr	r3, [pc, #156]	; (8002a34 <vTaskStartScheduler+0xa4>)
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	2300      	movs	r3, #0
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2300      	movs	r3, #0
 80029a0:	2282      	movs	r2, #130	; 0x82
 80029a2:	4925      	ldr	r1, [pc, #148]	; (8002a38 <vTaskStartScheduler+0xa8>)
 80029a4:	4825      	ldr	r0, [pc, #148]	; (8002a3c <vTaskStartScheduler+0xac>)
 80029a6:	f7ff fdd7 	bl	8002558 <xTaskCreate>
 80029aa:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d102      	bne.n	80029b8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80029b2:	f000 fe19 	bl	80035e8 <xTimerCreateTimerTask>
 80029b6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d124      	bne.n	8002a08 <vTaskStartScheduler+0x78>
        __asm volatile
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	60bb      	str	r3, [r7, #8]
    }
 80029d0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <vTaskStartScheduler+0xb0>)
 80029d4:	f04f 32ff 	mov.w	r2, #4294967295
 80029d8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80029da:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <vTaskStartScheduler+0xb4>)
 80029dc:	2201      	movs	r2, #1
 80029de:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <vTaskStartScheduler+0xb8>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80029e6:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <vTaskStartScheduler+0xbc>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <vTaskStartScheduler+0xa4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d102      	bne.n	80029f8 <vTaskStartScheduler+0x68>
 80029f2:	f002 fe01 	bl	80055f8 <SEGGER_SYSVIEW_OnIdle>
 80029f6:	e004      	b.n	8002a02 <vTaskStartScheduler+0x72>
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <vTaskStartScheduler+0xbc>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f002 fe59 	bl	80056b4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002a02:	f001 f8ff 	bl	8003c04 <xPortStartScheduler>
 8002a06:	e00e      	b.n	8002a26 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d10a      	bne.n	8002a26 <vTaskStartScheduler+0x96>
        __asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	607b      	str	r3, [r7, #4]
    }
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002a26:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <vTaskStartScheduler+0xc0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	2000012c 	.word	0x2000012c
 8002a38:	08005bd4 	.word	0x08005bd4
 8002a3c:	08003331 	.word	0x08003331
 8002a40:	20000128 	.word	0x20000128
 8002a44:	20000114 	.word	0x20000114
 8002a48:	2000010c 	.word	0x2000010c
 8002a4c:	20000030 	.word	0x20000030
 8002a50:	2000000c 	.word	0x2000000c

08002a54 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <vTaskSuspendAll+0x18>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	4a03      	ldr	r2, [pc, #12]	; (8002a6c <vTaskSuspendAll+0x18>)
 8002a60:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	20000130 	.word	0x20000130

08002a70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002a7e:	4b73      	ldr	r3, [pc, #460]	; (8002c4c <xTaskResumeAll+0x1dc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10a      	bne.n	8002a9c <xTaskResumeAll+0x2c>
        __asm volatile
 8002a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8a:	f383 8811 	msr	BASEPRI, r3
 8002a8e:	f3bf 8f6f 	isb	sy
 8002a92:	f3bf 8f4f 	dsb	sy
 8002a96:	607b      	str	r3, [r7, #4]
    }
 8002a98:	bf00      	nop
 8002a9a:	e7fe      	b.n	8002a9a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002a9c:	f001 f9d2 	bl	8003e44 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002aa0:	4b6a      	ldr	r3, [pc, #424]	; (8002c4c <xTaskResumeAll+0x1dc>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	4a69      	ldr	r2, [pc, #420]	; (8002c4c <xTaskResumeAll+0x1dc>)
 8002aa8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aaa:	4b68      	ldr	r3, [pc, #416]	; (8002c4c <xTaskResumeAll+0x1dc>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 80c4 	bne.w	8002c3c <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ab4:	4b66      	ldr	r3, [pc, #408]	; (8002c50 <xTaskResumeAll+0x1e0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80bf 	beq.w	8002c3c <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002abe:	e08e      	b.n	8002bde <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ac0:	4b64      	ldr	r3, [pc, #400]	; (8002c54 <xTaskResumeAll+0x1e4>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	6a12      	ldr	r2, [r2, #32]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	69d2      	ldr	r2, [r2, #28]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3318      	adds	r3, #24
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d103      	bne.n	8002af6 <xTaskResumeAll+0x86>
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	6a1a      	ldr	r2, [r3, #32]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	2200      	movs	r2, #0
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	1e5a      	subs	r2, r3, #1
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	68d2      	ldr	r2, [r2, #12]
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	6892      	ldr	r2, [r2, #8]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	3304      	adds	r3, #4
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d103      	bne.n	8002b34 <xTaskResumeAll+0xc4>
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2200      	movs	r2, #0
 8002b38:	615a      	str	r2, [r3, #20]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	1e5a      	subs	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f002 fdf6 	bl	8005738 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	2201      	movs	r2, #1
 8002b52:	409a      	lsls	r2, r3
 8002b54:	4b40      	ldr	r3, [pc, #256]	; (8002c58 <xTaskResumeAll+0x1e8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	4a3f      	ldr	r2, [pc, #252]	; (8002c58 <xTaskResumeAll+0x1e8>)
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b62:	493e      	ldr	r1, [pc, #248]	; (8002c5c <xTaskResumeAll+0x1ec>)
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3304      	adds	r3, #4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	3204      	adds	r2, #4
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	1d1a      	adds	r2, r3, #4
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4a2e      	ldr	r2, [pc, #184]	; (8002c5c <xTaskResumeAll+0x1ec>)
 8002ba2:	441a      	add	r2, r3
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	615a      	str	r2, [r3, #20]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bac:	492b      	ldr	r1, [pc, #172]	; (8002c5c <xTaskResumeAll+0x1ec>)
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	1c59      	adds	r1, r3, #1
 8002bbc:	4827      	ldr	r0, [pc, #156]	; (8002c5c <xTaskResumeAll+0x1ec>)
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4403      	add	r3, r0
 8002bc8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bce:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <xTaskResumeAll+0x1f0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d302      	bcc.n	8002bde <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002bd8:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <xTaskResumeAll+0x1f4>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bde:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <xTaskResumeAll+0x1e4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f47f af6c 	bne.w	8002ac0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002bee:	f000 fc35 	bl	800345c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002bf2:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <xTaskResumeAll+0x1f8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d010      	beq.n	8002c20 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002bfe:	f000 f847 	bl	8002c90 <xTaskIncrementTick>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <xTaskResumeAll+0x1f4>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f1      	bne.n	8002bfe <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <xTaskResumeAll+0x1f8>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c20:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <xTaskResumeAll+0x1f4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d009      	beq.n	8002c3c <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <xTaskResumeAll+0x1fc>)
 8002c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c3c:	f001 f932 	bl	8003ea4 <vPortExitCritical>

    return xAlreadyYielded;
 8002c40:	69bb      	ldr	r3, [r7, #24]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000130 	.word	0x20000130
 8002c50:	20000108 	.word	0x20000108
 8002c54:	200000c8 	.word	0x200000c8
 8002c58:	20000110 	.word	0x20000110
 8002c5c:	20000034 	.word	0x20000034
 8002c60:	20000030 	.word	0x20000030
 8002c64:	2000011c 	.word	0x2000011c
 8002c68:	20000118 	.word	0x20000118
 8002c6c:	e000ed04 	.word	0xe000ed04

08002c70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <xTaskGetTickCount+0x1c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002c7c:	687b      	ldr	r3, [r7, #4]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	2000010c 	.word	0x2000010c

08002c90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c9a:	4b7f      	ldr	r3, [pc, #508]	; (8002e98 <xTaskIncrementTick+0x208>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f040 80f0 	bne.w	8002e84 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ca4:	4b7d      	ldr	r3, [pc, #500]	; (8002e9c <xTaskIncrementTick+0x20c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002cac:	4a7b      	ldr	r2, [pc, #492]	; (8002e9c <xTaskIncrementTick+0x20c>)
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d120      	bne.n	8002cfa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002cb8:	4b79      	ldr	r3, [pc, #484]	; (8002ea0 <xTaskIncrementTick+0x210>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <xTaskIncrementTick+0x48>
        __asm volatile
 8002cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	607b      	str	r3, [r7, #4]
    }
 8002cd4:	bf00      	nop
 8002cd6:	e7fe      	b.n	8002cd6 <xTaskIncrementTick+0x46>
 8002cd8:	4b71      	ldr	r3, [pc, #452]	; (8002ea0 <xTaskIncrementTick+0x210>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	4b71      	ldr	r3, [pc, #452]	; (8002ea4 <xTaskIncrementTick+0x214>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a6f      	ldr	r2, [pc, #444]	; (8002ea0 <xTaskIncrementTick+0x210>)
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	4a6f      	ldr	r2, [pc, #444]	; (8002ea4 <xTaskIncrementTick+0x214>)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b6e      	ldr	r3, [pc, #440]	; (8002ea8 <xTaskIncrementTick+0x218>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	4a6d      	ldr	r2, [pc, #436]	; (8002ea8 <xTaskIncrementTick+0x218>)
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	f000 fbb1 	bl	800345c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002cfa:	4b6c      	ldr	r3, [pc, #432]	; (8002eac <xTaskIncrementTick+0x21c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6a3a      	ldr	r2, [r7, #32]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	f0c0 80aa 	bcc.w	8002e5a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d06:	4b66      	ldr	r3, [pc, #408]	; (8002ea0 <xTaskIncrementTick+0x210>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d104      	bne.n	8002d1a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d10:	4b66      	ldr	r3, [pc, #408]	; (8002eac <xTaskIncrementTick+0x21c>)
 8002d12:	f04f 32ff 	mov.w	r2, #4294967295
 8002d16:	601a      	str	r2, [r3, #0]
                    break;
 8002d18:	e09f      	b.n	8002e5a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d1a:	4b61      	ldr	r3, [pc, #388]	; (8002ea0 <xTaskIncrementTick+0x210>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002d2a:	6a3a      	ldr	r2, [r7, #32]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d203      	bcs.n	8002d3a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d32:	4a5e      	ldr	r2, [pc, #376]	; (8002eac <xTaskIncrementTick+0x21c>)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002d38:	e08f      	b.n	8002e5a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	68d2      	ldr	r2, [r2, #12]
 8002d48:	609a      	str	r2, [r3, #8]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	6892      	ldr	r2, [r2, #8]
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d103      	bne.n	8002d68 <xTaskIncrementTick+0xd8>
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	615a      	str	r2, [r3, #20]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	1e5a      	subs	r2, r3, #1
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01e      	beq.n	8002dbe <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	6a12      	ldr	r2, [r2, #32]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	69d2      	ldr	r2, [r2, #28]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	3318      	adds	r3, #24
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d103      	bne.n	8002dae <xTaskIncrementTick+0x11e>
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	6a1a      	ldr	r2, [r3, #32]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2200      	movs	r2, #0
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	1e5a      	subs	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f002 fcb9 	bl	8005738 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	2201      	movs	r2, #1
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	4b38      	ldr	r3, [pc, #224]	; (8002eb0 <xTaskIncrementTick+0x220>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	4a36      	ldr	r2, [pc, #216]	; (8002eb0 <xTaskIncrementTick+0x220>)
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ddc:	4935      	ldr	r1, [pc, #212]	; (8002eb4 <xTaskIncrementTick+0x224>)
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	3304      	adds	r3, #4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	60da      	str	r2, [r3, #12]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	3204      	adds	r2, #4
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	1d1a      	adds	r2, r3, #4
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4a26      	ldr	r2, [pc, #152]	; (8002eb4 <xTaskIncrementTick+0x224>)
 8002e1c:	441a      	add	r2, r3
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	615a      	str	r2, [r3, #20]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e26:	4923      	ldr	r1, [pc, #140]	; (8002eb4 <xTaskIncrementTick+0x224>)
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	1c59      	adds	r1, r3, #1
 8002e36:	481f      	ldr	r0, [pc, #124]	; (8002eb4 <xTaskIncrementTick+0x224>)
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4403      	add	r3, r0
 8002e42:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <xTaskIncrementTick+0x228>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	f4ff af59 	bcc.w	8002d06 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002e54:	2301      	movs	r3, #1
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e58:	e755      	b.n	8002d06 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e5a:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <xTaskIncrementTick+0x228>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e60:	4914      	ldr	r1, [pc, #80]	; (8002eb4 <xTaskIncrementTick+0x224>)
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d901      	bls.n	8002e76 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8002e72:	2301      	movs	r3, #1
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <xTaskIncrementTick+0x22c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
 8002e82:	e004      	b.n	8002e8e <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <xTaskIncrementTick+0x230>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	4a0d      	ldr	r2, [pc, #52]	; (8002ec0 <xTaskIncrementTick+0x230>)
 8002e8c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3728      	adds	r7, #40	; 0x28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000130 	.word	0x20000130
 8002e9c:	2000010c 	.word	0x2000010c
 8002ea0:	200000c0 	.word	0x200000c0
 8002ea4:	200000c4 	.word	0x200000c4
 8002ea8:	20000120 	.word	0x20000120
 8002eac:	20000128 	.word	0x20000128
 8002eb0:	20000110 	.word	0x20000110
 8002eb4:	20000034 	.word	0x20000034
 8002eb8:	20000030 	.word	0x20000030
 8002ebc:	2000011c 	.word	0x2000011c
 8002ec0:	20000118 	.word	0x20000118

08002ec4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002eca:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <vTaskSwitchContext+0xbc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002ed2:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <vTaskSwitchContext+0xc0>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002ed8:	e04d      	b.n	8002f76 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002eda:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <vTaskSwitchContext+0xc0>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ee0:	4b29      	ldr	r3, [pc, #164]	; (8002f88 <vTaskSwitchContext+0xc4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002eee:	7afb      	ldrb	r3, [r7, #11]
 8002ef0:	f1c3 031f 	rsb	r3, r3, #31
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	4925      	ldr	r1, [pc, #148]	; (8002f8c <vTaskSwitchContext+0xc8>)
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10a      	bne.n	8002f20 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	607b      	str	r3, [r7, #4]
    }
 8002f1c:	bf00      	nop
 8002f1e:	e7fe      	b.n	8002f1e <vTaskSwitchContext+0x5a>
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4a18      	ldr	r2, [pc, #96]	; (8002f8c <vTaskSwitchContext+0xc8>)
 8002f2c:	4413      	add	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	3308      	adds	r3, #8
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d104      	bne.n	8002f50 <vTaskSwitchContext+0x8c>
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	4a0e      	ldr	r2, [pc, #56]	; (8002f90 <vTaskSwitchContext+0xcc>)
 8002f58:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <vTaskSwitchContext+0xcc>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <vTaskSwitchContext+0xd0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d102      	bne.n	8002f6c <vTaskSwitchContext+0xa8>
 8002f66:	f002 fb47 	bl	80055f8 <SEGGER_SYSVIEW_OnIdle>
}
 8002f6a:	e004      	b.n	8002f76 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <vTaskSwitchContext+0xcc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f002 fb9f 	bl	80056b4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002f76:	bf00      	nop
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000130 	.word	0x20000130
 8002f84:	2000011c 	.word	0x2000011c
 8002f88:	20000110 	.word	0x20000110
 8002f8c:	20000034 	.word	0x20000034
 8002f90:	20000030 	.word	0x20000030
 8002f94:	2000012c 	.word	0x2000012c

08002f98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10a      	bne.n	8002fbe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	60fb      	str	r3, [r7, #12]
    }
 8002fba:	bf00      	nop
 8002fbc:	e7fe      	b.n	8002fbc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <vTaskPlaceOnEventList+0x44>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3318      	adds	r3, #24
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fe ff33 	bl	8001e32 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fcc:	2101      	movs	r1, #1
 8002fce:	6838      	ldr	r0, [r7, #0]
 8002fd0:	f000 fa7e 	bl	80034d0 <prvAddCurrentTaskToDelayedList>
}
 8002fd4:	bf00      	nop
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000030 	.word	0x20000030

08002fe0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	613b      	str	r3, [r7, #16]
    }
 8003004:	bf00      	nop
 8003006:	e7fe      	b.n	8003006 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	61da      	str	r2, [r3, #28]
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	6892      	ldr	r2, [r2, #8]
 800301e:	621a      	str	r2, [r3, #32]
 8003020:	4b12      	ldr	r3, [pc, #72]	; (800306c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	3218      	adds	r2, #24
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	4b0f      	ldr	r3, [pc, #60]	; (800306c <vTaskPlaceOnEventListRestricted+0x8c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f103 0218 	add.w	r2, r3, #24
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <vTaskPlaceOnEventListRestricted+0x8c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	629a      	str	r2, [r3, #40]	; 0x28
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003050:	f04f 33ff 	mov.w	r3, #4294967295
 8003054:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003056:	2024      	movs	r0, #36	; 0x24
 8003058:	f001 fdf4 	bl	8004c44 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	68b8      	ldr	r0, [r7, #8]
 8003060:	f000 fa36 	bl	80034d0 <prvAddCurrentTaskToDelayedList>
    }
 8003064:	bf00      	nop
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000030 	.word	0x20000030

08003070 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08a      	sub	sp, #40	; 0x28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	60fb      	str	r3, [r7, #12]
    }
 8003098:	bf00      	nop
 800309a:	e7fe      	b.n	800309a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	6a3a      	ldr	r2, [r7, #32]
 80030a8:	6a12      	ldr	r2, [r2, #32]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	6a3a      	ldr	r2, [r7, #32]
 80030b2:	69d2      	ldr	r2, [r2, #28]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	3318      	adds	r3, #24
 80030be:	429a      	cmp	r2, r3
 80030c0:	d103      	bne.n	80030ca <xTaskRemoveFromEventList+0x5a>
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	6a1a      	ldr	r2, [r3, #32]
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	2200      	movs	r2, #0
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	1e5a      	subs	r2, r3, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030da:	4b4b      	ldr	r3, [pc, #300]	; (8003208 <xTaskRemoveFromEventList+0x198>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d162      	bne.n	80031a8 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	6a3a      	ldr	r2, [r7, #32]
 80030ee:	68d2      	ldr	r2, [r2, #12]
 80030f0:	609a      	str	r2, [r3, #8]
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	6a3a      	ldr	r2, [r7, #32]
 80030f8:	6892      	ldr	r2, [r2, #8]
 80030fa:	605a      	str	r2, [r3, #4]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	3304      	adds	r3, #4
 8003104:	429a      	cmp	r2, r3
 8003106:	d103      	bne.n	8003110 <xTaskRemoveFromEventList+0xa0>
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	2200      	movs	r2, #0
 8003114:	615a      	str	r2, [r3, #20]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	1e5a      	subs	r2, r3, #1
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	4618      	mov	r0, r3
 8003124:	f002 fb08 	bl	8005738 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	2201      	movs	r2, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	4b36      	ldr	r3, [pc, #216]	; (800320c <xTaskRemoveFromEventList+0x19c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4313      	orrs	r3, r2
 8003136:	4a35      	ldr	r2, [pc, #212]	; (800320c <xTaskRemoveFromEventList+0x19c>)
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313e:	4934      	ldr	r1, [pc, #208]	; (8003210 <xTaskRemoveFromEventList+0x1a0>)
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	3304      	adds	r3, #4
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	609a      	str	r2, [r3, #8]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	6a3a      	ldr	r2, [r7, #32]
 8003164:	3204      	adds	r2, #4
 8003166:	605a      	str	r2, [r3, #4]
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	1d1a      	adds	r2, r3, #4
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4a24      	ldr	r2, [pc, #144]	; (8003210 <xTaskRemoveFromEventList+0x1a0>)
 800317e:	441a      	add	r2, r3
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	615a      	str	r2, [r3, #20]
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003188:	4921      	ldr	r1, [pc, #132]	; (8003210 <xTaskRemoveFromEventList+0x1a0>)
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	1c59      	adds	r1, r3, #1
 8003198:	481d      	ldr	r0, [pc, #116]	; (8003210 <xTaskRemoveFromEventList+0x1a0>)
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4403      	add	r3, r0
 80031a4:	6019      	str	r1, [r3, #0]
 80031a6:	e01b      	b.n	80031e0 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031a8:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <xTaskRemoveFromEventList+0x1a4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	61da      	str	r2, [r3, #28]
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	621a      	str	r2, [r3, #32]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	3218      	adds	r2, #24
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	f103 0218 	add.w	r2, r3, #24
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	4a10      	ldr	r2, [pc, #64]	; (8003214 <xTaskRemoveFromEventList+0x1a4>)
 80031d4:	629a      	str	r2, [r3, #40]	; 0x28
 80031d6:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <xTaskRemoveFromEventList+0x1a4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3301      	adds	r3, #1
 80031dc:	4a0d      	ldr	r2, [pc, #52]	; (8003214 <xTaskRemoveFromEventList+0x1a4>)
 80031de:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <xTaskRemoveFromEventList+0x1a8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d905      	bls.n	80031fa <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80031ee:	2301      	movs	r3, #1
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <xTaskRemoveFromEventList+0x1ac>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e001      	b.n	80031fe <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003200:	4618      	mov	r0, r3
 8003202:	3728      	adds	r7, #40	; 0x28
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20000130 	.word	0x20000130
 800320c:	20000110 	.word	0x20000110
 8003210:	20000034 	.word	0x20000034
 8003214:	200000c8 	.word	0x200000c8
 8003218:	20000030 	.word	0x20000030
 800321c:	2000011c 	.word	0x2000011c

08003220 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <vTaskInternalSetTimeOutState+0x24>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <vTaskInternalSetTimeOutState+0x28>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	605a      	str	r2, [r3, #4]
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	20000120 	.word	0x20000120
 8003248:	2000010c 	.word	0x2000010c

0800324c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10a      	bne.n	8003272 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	613b      	str	r3, [r7, #16]
    }
 800326e:	bf00      	nop
 8003270:	e7fe      	b.n	8003270 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10a      	bne.n	800328e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	60fb      	str	r3, [r7, #12]
    }
 800328a:	bf00      	nop
 800328c:	e7fe      	b.n	800328c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800328e:	f000 fdd9 	bl	8003e44 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003292:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <xTaskCheckForTimeOut+0xc4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032aa:	d102      	bne.n	80032b2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	e026      	b.n	8003300 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4b17      	ldr	r3, [pc, #92]	; (8003314 <xTaskCheckForTimeOut+0xc8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d00a      	beq.n	80032d4 <xTaskCheckForTimeOut+0x88>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d305      	bcc.n	80032d4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80032c8:	2301      	movs	r3, #1
 80032ca:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e015      	b.n	8003300 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d20b      	bcs.n	80032f6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	1ad2      	subs	r2, r2, r3
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ff98 	bl	8003220 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	e004      	b.n	8003300 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80032fc:	2301      	movs	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003300:	f000 fdd0 	bl	8003ea4 <vPortExitCritical>

    return xReturn;
 8003304:	69fb      	ldr	r3, [r7, #28]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	2000010c 	.word	0x2000010c
 8003314:	20000120 	.word	0x20000120

08003318 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <vTaskMissedYield+0x14>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	2000011c 	.word	0x2000011c

08003330 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003338:	f000 f852 	bl	80033e0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <prvIdleTask+0x28>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d9f9      	bls.n	8003338 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <prvIdleTask+0x2c>)
 8003346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003354:	e7f0      	b.n	8003338 <prvIdleTask+0x8>
 8003356:	bf00      	nop
 8003358:	20000034 	.word	0x20000034
 800335c:	e000ed04 	.word	0xe000ed04

08003360 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003366:	2300      	movs	r3, #0
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	e00c      	b.n	8003386 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <prvInitialiseTaskLists+0x60>)
 8003378:	4413      	add	r3, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe fd2c 	bl	8001dd8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3301      	adds	r3, #1
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b04      	cmp	r3, #4
 800338a:	d9ef      	bls.n	800336c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800338c:	480d      	ldr	r0, [pc, #52]	; (80033c4 <prvInitialiseTaskLists+0x64>)
 800338e:	f7fe fd23 	bl	8001dd8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003392:	480d      	ldr	r0, [pc, #52]	; (80033c8 <prvInitialiseTaskLists+0x68>)
 8003394:	f7fe fd20 	bl	8001dd8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003398:	480c      	ldr	r0, [pc, #48]	; (80033cc <prvInitialiseTaskLists+0x6c>)
 800339a:	f7fe fd1d 	bl	8001dd8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800339e:	480c      	ldr	r0, [pc, #48]	; (80033d0 <prvInitialiseTaskLists+0x70>)
 80033a0:	f7fe fd1a 	bl	8001dd8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80033a4:	480b      	ldr	r0, [pc, #44]	; (80033d4 <prvInitialiseTaskLists+0x74>)
 80033a6:	f7fe fd17 	bl	8001dd8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <prvInitialiseTaskLists+0x78>)
 80033ac:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <prvInitialiseTaskLists+0x64>)
 80033ae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <prvInitialiseTaskLists+0x7c>)
 80033b2:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <prvInitialiseTaskLists+0x68>)
 80033b4:	601a      	str	r2, [r3, #0]
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000034 	.word	0x20000034
 80033c4:	20000098 	.word	0x20000098
 80033c8:	200000ac 	.word	0x200000ac
 80033cc:	200000c8 	.word	0x200000c8
 80033d0:	200000dc 	.word	0x200000dc
 80033d4:	200000f4 	.word	0x200000f4
 80033d8:	200000c0 	.word	0x200000c0
 80033dc:	200000c4 	.word	0x200000c4

080033e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033e6:	e019      	b.n	800341c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80033e8:	f000 fd2c 	bl	8003e44 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ec:	4b10      	ldr	r3, [pc, #64]	; (8003430 <prvCheckTasksWaitingTermination+0x50>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3304      	adds	r3, #4
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fe fd53 	bl	8001ea4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <prvCheckTasksWaitingTermination+0x54>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3b01      	subs	r3, #1
 8003404:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <prvCheckTasksWaitingTermination+0x54>)
 8003406:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <prvCheckTasksWaitingTermination+0x58>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3b01      	subs	r3, #1
 800340e:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <prvCheckTasksWaitingTermination+0x58>)
 8003410:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003412:	f000 fd47 	bl	8003ea4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f810 	bl	800343c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <prvCheckTasksWaitingTermination+0x58>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e1      	bne.n	80033e8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003424:	bf00      	nop
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	200000dc 	.word	0x200000dc
 8003434:	20000108 	.word	0x20000108
 8003438:	200000f0 	.word	0x200000f0

0800343c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fec7 	bl	80041dc <vPortFree>
                vPortFree( pxTCB );
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fec4 	bl	80041dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003454:	bf00      	nop
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003460:	4b0a      	ldr	r3, [pc, #40]	; (800348c <prvResetNextTaskUnblockTime+0x30>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d104      	bne.n	8003474 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <prvResetNextTaskUnblockTime+0x34>)
 800346c:	f04f 32ff 	mov.w	r2, #4294967295
 8003470:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003472:	e005      	b.n	8003480 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <prvResetNextTaskUnblockTime+0x30>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <prvResetNextTaskUnblockTime+0x34>)
 800347e:	6013      	str	r3, [r2, #0]
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	200000c0 	.word	0x200000c0
 8003490:	20000128 	.word	0x20000128

08003494 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800349a:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <xTaskGetSchedulerState+0x34>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80034a2:	2301      	movs	r3, #1
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	e008      	b.n	80034ba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034a8:	4b08      	ldr	r3, [pc, #32]	; (80034cc <xTaskGetSchedulerState+0x38>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80034b0:	2302      	movs	r3, #2
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	e001      	b.n	80034ba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80034b6:	2300      	movs	r3, #0
 80034b8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80034ba:	687b      	ldr	r3, [r7, #4]
    }
 80034bc:	4618      	mov	r0, r3
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	20000114 	.word	0x20000114
 80034cc:	20000130 	.word	0x20000130

080034d0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80034da:	4b3c      	ldr	r3, [pc, #240]	; (80035cc <prvAddCurrentTaskToDelayedList+0xfc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034e0:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <prvAddCurrentTaskToDelayedList+0x100>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3304      	adds	r3, #4
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fcdc 	bl	8001ea4 <uxListRemove>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10b      	bne.n	800350a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034f2:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <prvAddCurrentTaskToDelayedList+0x100>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	2201      	movs	r2, #1
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43da      	mvns	r2, r3
 8003500:	4b34      	ldr	r3, [pc, #208]	; (80035d4 <prvAddCurrentTaskToDelayedList+0x104>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4013      	ands	r3, r2
 8003506:	4a33      	ldr	r2, [pc, #204]	; (80035d4 <prvAddCurrentTaskToDelayedList+0x104>)
 8003508:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d124      	bne.n	800355c <prvAddCurrentTaskToDelayedList+0x8c>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d021      	beq.n	800355c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003518:	4b2f      	ldr	r3, [pc, #188]	; (80035d8 <prvAddCurrentTaskToDelayedList+0x108>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	4b2c      	ldr	r3, [pc, #176]	; (80035d0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	609a      	str	r2, [r3, #8]
 8003526:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	6892      	ldr	r2, [r2, #8]
 800352e:	60da      	str	r2, [r3, #12]
 8003530:	4b27      	ldr	r3, [pc, #156]	; (80035d0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	3204      	adds	r2, #4
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <prvAddCurrentTaskToDelayedList+0x100>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	1d1a      	adds	r2, r3, #4
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a23      	ldr	r2, [pc, #140]	; (80035d8 <prvAddCurrentTaskToDelayedList+0x108>)
 800354c:	615a      	str	r2, [r3, #20]
 800354e:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <prvAddCurrentTaskToDelayedList+0x108>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3301      	adds	r3, #1
 8003554:	4a20      	ldr	r2, [pc, #128]	; (80035d8 <prvAddCurrentTaskToDelayedList+0x108>)
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800355a:	e032      	b.n	80035c2 <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003564:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	429a      	cmp	r2, r3
 8003572:	d20f      	bcs.n	8003594 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003574:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2104      	movs	r1, #4
 800357a:	4618      	mov	r0, r3
 800357c:	f002 f91e 	bl	80057bc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003580:	4b16      	ldr	r3, [pc, #88]	; (80035dc <prvAddCurrentTaskToDelayedList+0x10c>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3304      	adds	r3, #4
 800358a:	4619      	mov	r1, r3
 800358c:	4610      	mov	r0, r2
 800358e:	f7fe fc50 	bl	8001e32 <vListInsert>
}
 8003592:	e016      	b.n	80035c2 <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003594:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2104      	movs	r1, #4
 800359a:	4618      	mov	r0, r3
 800359c:	f002 f90e 	bl	80057bc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035a0:	4b0f      	ldr	r3, [pc, #60]	; (80035e0 <prvAddCurrentTaskToDelayedList+0x110>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <prvAddCurrentTaskToDelayedList+0x100>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3304      	adds	r3, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f7fe fc40 	bl	8001e32 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80035b2:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <prvAddCurrentTaskToDelayedList+0x114>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d202      	bcs.n	80035c2 <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 80035bc:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <prvAddCurrentTaskToDelayedList+0x114>)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6013      	str	r3, [r2, #0]
}
 80035c2:	bf00      	nop
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	2000010c 	.word	0x2000010c
 80035d0:	20000030 	.word	0x20000030
 80035d4:	20000110 	.word	0x20000110
 80035d8:	200000f4 	.word	0x200000f4
 80035dc:	200000c4 	.word	0x200000c4
 80035e0:	200000c0 	.word	0x200000c0
 80035e4:	20000128 	.word	0x20000128

080035e8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80035f2:	f000 fa47 	bl	8003a84 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <xTimerCreateTimerTask+0x54>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <xTimerCreateTimerTask+0x58>)
 8003600:	9301      	str	r3, [sp, #4]
 8003602:	2302      	movs	r3, #2
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	2300      	movs	r3, #0
 8003608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800360c:	490d      	ldr	r1, [pc, #52]	; (8003644 <xTimerCreateTimerTask+0x5c>)
 800360e:	480e      	ldr	r0, [pc, #56]	; (8003648 <xTimerCreateTimerTask+0x60>)
 8003610:	f7fe ffa2 	bl	8002558 <xTaskCreate>
 8003614:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	603b      	str	r3, [r7, #0]
    }
 800362e:	bf00      	nop
 8003630:	e7fe      	b.n	8003630 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003632:	687b      	ldr	r3, [r7, #4]
    }
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000164 	.word	0x20000164
 8003640:	20000168 	.word	0x20000168
 8003644:	08005bdc 	.word	0x08005bdc
 8003648:	080036f1 	.word	0x080036f1

0800364c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003658:	e008      	b.n	800366c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	4413      	add	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	699a      	ldr	r2, [r3, #24]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	18d1      	adds	r1, r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 f8dd 	bl	8003838 <prvInsertTimerInActiveList>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1ea      	bne.n	800365a <prvReloadTimer+0xe>
        }
    }
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800369a:	4b14      	ldr	r3, [pc, #80]	; (80036ec <prvProcessExpiredTimer+0x5c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fe fbfb 	bl	8001ea4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7ff ffc3 	bl	800364c <prvReloadTimer>
 80036c6:	e008      	b.n	80036da <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	4798      	blx	r3
    }
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	2000015c 	.word	0x2000015c

080036f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036f8:	f107 0308 	add.w	r3, r7, #8
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f857 	bl	80037b0 <prvGetNextExpireTime>
 8003702:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4619      	mov	r1, r3
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f803 	bl	8003714 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800370e:	f000 f8d5 	bl	80038bc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003712:	e7f1      	b.n	80036f8 <prvTimerTask+0x8>

08003714 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800371e:	f7ff f999 	bl	8002a54 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003722:	f107 0308 	add.w	r3, r7, #8
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f866 	bl	80037f8 <prvSampleTimeNow>
 800372c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d130      	bne.n	8003796 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10a      	bne.n	8003750 <prvProcessTimerOrBlockTask+0x3c>
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	429a      	cmp	r2, r3
 8003740:	d806      	bhi.n	8003750 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003742:	f7ff f995 	bl	8002a70 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003746:	68f9      	ldr	r1, [r7, #12]
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ffa1 	bl	8003690 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800374e:	e024      	b.n	800379a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003756:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <prvProcessTimerOrBlockTask+0x90>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <prvProcessTimerOrBlockTask+0x50>
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <prvProcessTimerOrBlockTask+0x52>
 8003764:	2300      	movs	r3, #0
 8003766:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <prvProcessTimerOrBlockTask+0x94>)
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	f7fe febb 	bl	80024f0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800377a:	f7ff f979 	bl	8002a70 <xTaskResumeAll>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <prvProcessTimerOrBlockTask+0x98>)
 8003786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	f3bf 8f6f 	isb	sy
    }
 8003794:	e001      	b.n	800379a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003796:	f7ff f96b 	bl	8002a70 <xTaskResumeAll>
    }
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000160 	.word	0x20000160
 80037a8:	20000164 	.word	0x20000164
 80037ac:	e000ed04 	.word	0xe000ed04

080037b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80037b8:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <prvGetNextExpireTime+0x44>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <prvGetNextExpireTime+0x16>
 80037c2:	2201      	movs	r2, #1
 80037c4:	e000      	b.n	80037c8 <prvGetNextExpireTime+0x18>
 80037c6:	2200      	movs	r2, #0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d105      	bne.n	80037e0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037d4:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <prvGetNextExpireTime+0x44>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	e001      	b.n	80037e4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80037e4:	68fb      	ldr	r3, [r7, #12]
    }
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	2000015c 	.word	0x2000015c

080037f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003800:	f7ff fa36 	bl	8002c70 <xTaskGetTickCount>
 8003804:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <prvSampleTimeNow+0x3c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	429a      	cmp	r2, r3
 800380e:	d205      	bcs.n	800381c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003810:	f000 f912 	bl	8003a38 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	e002      	b.n	8003822 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003822:	4a04      	ldr	r2, [pc, #16]	; (8003834 <prvSampleTimeNow+0x3c>)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003828:	68fb      	ldr	r3, [r7, #12]
    }
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	2000016c 	.word	0x2000016c

08003838 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	429a      	cmp	r2, r3
 800385c:	d812      	bhi.n	8003884 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	1ad2      	subs	r2, r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	429a      	cmp	r2, r3
 800386a:	d302      	bcc.n	8003872 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800386c:	2301      	movs	r3, #1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	e01b      	b.n	80038aa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003872:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <prvInsertTimerInActiveList+0x7c>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f7fe fad8 	bl	8001e32 <vListInsert>
 8003882:	e012      	b.n	80038aa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d206      	bcs.n	800389a <prvInsertTimerInActiveList+0x62>
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d302      	bcc.n	800389a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003894:	2301      	movs	r3, #1
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	e007      	b.n	80038aa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800389a:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <prvInsertTimerInActiveList+0x80>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3304      	adds	r3, #4
 80038a2:	4619      	mov	r1, r3
 80038a4:	4610      	mov	r0, r2
 80038a6:	f7fe fac4 	bl	8001e32 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80038aa:	697b      	ldr	r3, [r7, #20]
    }
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20000160 	.word	0x20000160
 80038b8:	2000015c 	.word	0x2000015c

080038bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038c2:	e0a6      	b.n	8003a12 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f2c0 80a2 	blt.w	8003a10 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d004      	beq.n	80038e2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	3304      	adds	r3, #4
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe fae1 	bl	8001ea4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ff87 	bl	80037f8 <prvSampleTimeNow>
 80038ea:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	f200 808e 	bhi.w	8003a12 <prvProcessReceivedCommands+0x156>
 80038f6:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <prvProcessReceivedCommands+0x40>)
 80038f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fc:	08003921 	.word	0x08003921
 8003900:	08003921 	.word	0x08003921
 8003904:	08003989 	.word	0x08003989
 8003908:	0800399d 	.word	0x0800399d
 800390c:	080039e7 	.word	0x080039e7
 8003910:	08003921 	.word	0x08003921
 8003914:	08003921 	.word	0x08003921
 8003918:	08003989 	.word	0x08003989
 800391c:	0800399d 	.word	0x0800399d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	b2da      	uxtb	r2, r3
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	18d1      	adds	r1, r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	69f8      	ldr	r0, [r7, #28]
 8003940:	f7ff ff7a 	bl	8003838 <prvInsertTimerInActiveList>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d063      	beq.n	8003a12 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d009      	beq.n	800396c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	4413      	add	r3, r2
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4619      	mov	r1, r3
 8003964:	69f8      	ldr	r0, [r7, #28]
 8003966:	f7ff fe71 	bl	800364c <prvReloadTimer>
 800396a:	e008      	b.n	800397e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003972:	f023 0301 	bic.w	r3, r3, #1
 8003976:	b2da      	uxtb	r2, r3
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	69f8      	ldr	r0, [r7, #28]
 8003984:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003986:	e044      	b.n	8003a12 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800398e:	f023 0301 	bic.w	r3, r3, #1
 8003992:	b2da      	uxtb	r2, r3
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800399a:	e03a      	b.n	8003a12 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	617b      	str	r3, [r7, #20]
    }
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	18d1      	adds	r1, r2, r3
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	69f8      	ldr	r0, [r7, #28]
 80039e0:	f7ff ff2a 	bl	8003838 <prvInsertTimerInActiveList>
                        break;
 80039e4:	e015      	b.n	8003a12 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d103      	bne.n	80039fc <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 80039f4:	69f8      	ldr	r0, [r7, #28]
 80039f6:	f000 fbf1 	bl	80041dc <vPortFree>
 80039fa:	e00a      	b.n	8003a12 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003a0e:	e000      	b.n	8003a12 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003a10:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a12:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <prvProcessReceivedCommands+0x178>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f107 0108 	add.w	r1, r7, #8
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe fb73 	bl	8002108 <xQueueReceive>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f47f af4d 	bne.w	80038c4 <prvProcessReceivedCommands+0x8>
        }
    }
 8003a2a:	bf00      	nop
 8003a2c:	bf00      	nop
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000164 	.word	0x20000164

08003a38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a3e:	e009      	b.n	8003a54 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <prvSwitchTimerLists+0x44>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003a4a:	f04f 31ff 	mov.w	r1, #4294967295
 8003a4e:	6838      	ldr	r0, [r7, #0]
 8003a50:	f7ff fe1e 	bl	8003690 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <prvSwitchTimerLists+0x44>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003a5e:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <prvSwitchTimerLists+0x44>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <prvSwitchTimerLists+0x48>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <prvSwitchTimerLists+0x44>)
 8003a6a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003a6c:	4a04      	ldr	r2, [pc, #16]	; (8003a80 <prvSwitchTimerLists+0x48>)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6013      	str	r3, [r2, #0]
    }
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	2000015c 	.word	0x2000015c
 8003a80:	20000160 	.word	0x20000160

08003a84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003a88:	f000 f9dc 	bl	8003e44 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003a8c:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <prvCheckForValidListAndQueue+0x54>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d11d      	bne.n	8003ad0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003a94:	4811      	ldr	r0, [pc, #68]	; (8003adc <prvCheckForValidListAndQueue+0x58>)
 8003a96:	f7fe f99f 	bl	8001dd8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003a9a:	4811      	ldr	r0, [pc, #68]	; (8003ae0 <prvCheckForValidListAndQueue+0x5c>)
 8003a9c:	f7fe f99c 	bl	8001dd8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003aa0:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <prvCheckForValidListAndQueue+0x60>)
 8003aa2:	4a0e      	ldr	r2, [pc, #56]	; (8003adc <prvCheckForValidListAndQueue+0x58>)
 8003aa4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003aa6:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <prvCheckForValidListAndQueue+0x64>)
 8003aa8:	4a0d      	ldr	r2, [pc, #52]	; (8003ae0 <prvCheckForValidListAndQueue+0x5c>)
 8003aaa:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003aac:	2200      	movs	r2, #0
 8003aae:	210c      	movs	r1, #12
 8003ab0:	200a      	movs	r0, #10
 8003ab2:	f7fe fab1 	bl	8002018 <xQueueGenericCreate>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	4a07      	ldr	r2, [pc, #28]	; (8003ad8 <prvCheckForValidListAndQueue+0x54>)
 8003aba:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003abc:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <prvCheckForValidListAndQueue+0x54>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ac4:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <prvCheckForValidListAndQueue+0x54>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4908      	ldr	r1, [pc, #32]	; (8003aec <prvCheckForValidListAndQueue+0x68>)
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe fcba 	bl	8002444 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ad0:	f000 f9e8 	bl	8003ea4 <vPortExitCritical>
    }
 8003ad4:	bf00      	nop
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000164 	.word	0x20000164
 8003adc:	20000134 	.word	0x20000134
 8003ae0:	20000148 	.word	0x20000148
 8003ae4:	2000015c 	.word	0x2000015c
 8003ae8:	20000160 	.word	0x20000160
 8003aec:	08005be4 	.word	0x08005be4

08003af0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3b04      	subs	r3, #4
 8003b00:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b08:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3b04      	subs	r3, #4
 8003b0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f023 0201 	bic.w	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3b04      	subs	r3, #4
 8003b1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003b20:	4a0c      	ldr	r2, [pc, #48]	; (8003b54 <pxPortInitialiseStack+0x64>)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3b14      	subs	r3, #20
 8003b2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3b04      	subs	r3, #4
 8003b36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f06f 0202 	mvn.w	r2, #2
 8003b3e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3b20      	subs	r3, #32
 8003b44:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003b46:	68fb      	ldr	r3, [r7, #12]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	08003b59 	.word	0x08003b59

08003b58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <prvTaskExitError+0x54>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d00a      	beq.n	8003b82 <prvTaskExitError+0x2a>
        __asm volatile
 8003b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	60fb      	str	r3, [r7, #12]
    }
 8003b7e:	bf00      	nop
 8003b80:	e7fe      	b.n	8003b80 <prvTaskExitError+0x28>
        __asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	60bb      	str	r3, [r7, #8]
    }
 8003b94:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b96:	bf00      	nop
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0fc      	beq.n	8003b98 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	20000010 	.word	0x20000010

08003bb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003bb0:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <pxCurrentTCBConst2>)
 8003bb2:	6819      	ldr	r1, [r3, #0]
 8003bb4:	6808      	ldr	r0, [r1, #0]
 8003bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bba:	f380 8809 	msr	PSP, r0
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f04f 0000 	mov.w	r0, #0
 8003bc6:	f380 8811 	msr	BASEPRI, r0
 8003bca:	4770      	bx	lr
 8003bcc:	f3af 8000 	nop.w

08003bd0 <pxCurrentTCBConst2>:
 8003bd0:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop

08003bd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003bd8:	4808      	ldr	r0, [pc, #32]	; (8003bfc <prvPortStartFirstTask+0x24>)
 8003bda:	6800      	ldr	r0, [r0, #0]
 8003bdc:	6800      	ldr	r0, [r0, #0]
 8003bde:	f380 8808 	msr	MSP, r0
 8003be2:	f04f 0000 	mov.w	r0, #0
 8003be6:	f380 8814 	msr	CONTROL, r0
 8003bea:	b662      	cpsie	i
 8003bec:	b661      	cpsie	f
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	df00      	svc	0
 8003bf8:	bf00      	nop
 8003bfa:	0000      	.short	0x0000
 8003bfc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003c00:	bf00      	nop
 8003c02:	bf00      	nop

08003c04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c0a:	4b46      	ldr	r3, [pc, #280]	; (8003d24 <xPortStartScheduler+0x120>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a46      	ldr	r2, [pc, #280]	; (8003d28 <xPortStartScheduler+0x124>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d10a      	bne.n	8003c2a <xPortStartScheduler+0x26>
        __asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	613b      	str	r3, [r7, #16]
    }
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	; (8003d24 <xPortStartScheduler+0x120>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a3f      	ldr	r2, [pc, #252]	; (8003d2c <xPortStartScheduler+0x128>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d10a      	bne.n	8003c4a <xPortStartScheduler+0x46>
        __asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	60fb      	str	r3, [r7, #12]
    }
 8003c46:	bf00      	nop
 8003c48:	e7fe      	b.n	8003c48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c4a:	4b39      	ldr	r3, [pc, #228]	; (8003d30 <xPortStartScheduler+0x12c>)
 8003c4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	22ff      	movs	r2, #255	; 0xff
 8003c5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <xPortStartScheduler+0x130>)
 8003c70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c72:	4b31      	ldr	r3, [pc, #196]	; (8003d38 <xPortStartScheduler+0x134>)
 8003c74:	2207      	movs	r2, #7
 8003c76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c78:	e009      	b.n	8003c8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003c7a:	4b2f      	ldr	r3, [pc, #188]	; (8003d38 <xPortStartScheduler+0x134>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	4a2d      	ldr	r2, [pc, #180]	; (8003d38 <xPortStartScheduler+0x134>)
 8003c82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	2b80      	cmp	r3, #128	; 0x80
 8003c98:	d0ef      	beq.n	8003c7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c9a:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <xPortStartScheduler+0x134>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d00a      	beq.n	8003cbc <xPortStartScheduler+0xb8>
        __asm volatile
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	60bb      	str	r3, [r7, #8]
    }
 8003cb8:	bf00      	nop
 8003cba:	e7fe      	b.n	8003cba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cbc:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <xPortStartScheduler+0x134>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <xPortStartScheduler+0x134>)
 8003cc4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003cc6:	4b1c      	ldr	r3, [pc, #112]	; (8003d38 <xPortStartScheduler+0x134>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cce:	4a1a      	ldr	r2, [pc, #104]	; (8003d38 <xPortStartScheduler+0x134>)
 8003cd0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003cda:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <xPortStartScheduler+0x138>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a17      	ldr	r2, [pc, #92]	; (8003d3c <xPortStartScheduler+0x138>)
 8003ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ce4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003ce6:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <xPortStartScheduler+0x138>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <xPortStartScheduler+0x138>)
 8003cec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003cf0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003cf2:	f000 f963 	bl	8003fbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <xPortStartScheduler+0x13c>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003cfc:	f000 f982 	bl	8004004 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d00:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <xPortStartScheduler+0x140>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a0f      	ldr	r2, [pc, #60]	; (8003d44 <xPortStartScheduler+0x140>)
 8003d06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003d0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003d0c:	f7ff ff64 	bl	8003bd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003d10:	f7ff f8d8 	bl	8002ec4 <vTaskSwitchContext>
    prvTaskExitError();
 8003d14:	f7ff ff20 	bl	8003b58 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	e000ed00 	.word	0xe000ed00
 8003d28:	410fc271 	.word	0x410fc271
 8003d2c:	410fc270 	.word	0x410fc270
 8003d30:	e000e400 	.word	0xe000e400
 8003d34:	20000170 	.word	0x20000170
 8003d38:	20000174 	.word	0x20000174
 8003d3c:	e000ed20 	.word	0xe000ed20
 8003d40:	20000010 	.word	0x20000010
 8003d44:	e000ef34 	.word	0xe000ef34

08003d48 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d4e:	4b37      	ldr	r3, [pc, #220]	; (8003e2c <vInitPrioGroupValue+0xe4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a37      	ldr	r2, [pc, #220]	; (8003e30 <vInitPrioGroupValue+0xe8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d10a      	bne.n	8003d6e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	613b      	str	r3, [r7, #16]
    }
 8003d6a:	bf00      	nop
 8003d6c:	e7fe      	b.n	8003d6c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d6e:	4b2f      	ldr	r3, [pc, #188]	; (8003e2c <vInitPrioGroupValue+0xe4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a30      	ldr	r2, [pc, #192]	; (8003e34 <vInitPrioGroupValue+0xec>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d10a      	bne.n	8003d8e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	60fb      	str	r3, [r7, #12]
    }
 8003d8a:	bf00      	nop
 8003d8c:	e7fe      	b.n	8003d8c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d8e:	4b2a      	ldr	r3, [pc, #168]	; (8003e38 <vInitPrioGroupValue+0xf0>)
 8003d90:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	22ff      	movs	r2, #255	; 0xff
 8003d9e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4b22      	ldr	r3, [pc, #136]	; (8003e3c <vInitPrioGroupValue+0xf4>)
 8003db4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003db6:	4b22      	ldr	r3, [pc, #136]	; (8003e40 <vInitPrioGroupValue+0xf8>)
 8003db8:	2207      	movs	r2, #7
 8003dba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dbc:	e009      	b.n	8003dd2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003dbe:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <vInitPrioGroupValue+0xf8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <vInitPrioGroupValue+0xf8>)
 8003dc6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b80      	cmp	r3, #128	; 0x80
 8003ddc:	d0ef      	beq.n	8003dbe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003dde:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <vInitPrioGroupValue+0xf8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f1c3 0307 	rsb	r3, r3, #7
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d00a      	beq.n	8003e00 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	60bb      	str	r3, [r7, #8]
    }
 8003dfc:	bf00      	nop
 8003dfe:	e7fe      	b.n	8003dfe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e00:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <vInitPrioGroupValue+0xf8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <vInitPrioGroupValue+0xf8>)
 8003e08:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <vInitPrioGroupValue+0xf8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e12:	4a0b      	ldr	r2, [pc, #44]	; (8003e40 <vInitPrioGroupValue+0xf8>)
 8003e14:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	e000ed00 	.word	0xe000ed00
 8003e30:	410fc271 	.word	0x410fc271
 8003e34:	410fc270 	.word	0x410fc270
 8003e38:	e000e400 	.word	0xe000e400
 8003e3c:	20000170 	.word	0x20000170
 8003e40:	20000174 	.word	0x20000174

08003e44 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
        __asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	607b      	str	r3, [r7, #4]
    }
 8003e5c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003e5e:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <vPortEnterCritical+0x58>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3301      	adds	r3, #1
 8003e64:	4a0d      	ldr	r2, [pc, #52]	; (8003e9c <vPortEnterCritical+0x58>)
 8003e66:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003e68:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <vPortEnterCritical+0x58>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d10f      	bne.n	8003e90 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e70:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <vPortEnterCritical+0x5c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <vPortEnterCritical+0x4c>
        __asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	603b      	str	r3, [r7, #0]
    }
 8003e8c:	bf00      	nop
 8003e8e:	e7fe      	b.n	8003e8e <vPortEnterCritical+0x4a>
    }
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	20000010 	.word	0x20000010
 8003ea0:	e000ed04 	.word	0xe000ed04

08003ea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003eaa:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <vPortExitCritical+0x50>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <vPortExitCritical+0x24>
        __asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	607b      	str	r3, [r7, #4]
    }
 8003ec4:	bf00      	nop
 8003ec6:	e7fe      	b.n	8003ec6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <vPortExitCritical+0x50>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	4a09      	ldr	r2, [pc, #36]	; (8003ef4 <vPortExitCritical+0x50>)
 8003ed0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <vPortExitCritical+0x50>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d105      	bne.n	8003ee6 <vPortExitCritical+0x42>
 8003eda:	2300      	movs	r3, #0
 8003edc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003ee4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20000010 	.word	0x20000010
	...

08003f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003f00:	f3ef 8009 	mrs	r0, PSP
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <pxCurrentTCBConst>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	f01e 0f10 	tst.w	lr, #16
 8003f10:	bf08      	it	eq
 8003f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f1a:	6010      	str	r0, [r2, #0]
 8003f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f24:	f380 8811 	msr	BASEPRI, r0
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f7fe ffc8 	bl	8002ec4 <vTaskSwitchContext>
 8003f34:	f04f 0000 	mov.w	r0, #0
 8003f38:	f380 8811 	msr	BASEPRI, r0
 8003f3c:	bc09      	pop	{r0, r3}
 8003f3e:	6819      	ldr	r1, [r3, #0]
 8003f40:	6808      	ldr	r0, [r1, #0]
 8003f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f46:	f01e 0f10 	tst.w	lr, #16
 8003f4a:	bf08      	it	eq
 8003f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f50:	f380 8809 	msr	PSP, r0
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	f3af 8000 	nop.w

08003f60 <pxCurrentTCBConst>:
 8003f60:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop

08003f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
        __asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	607b      	str	r3, [r7, #4]
    }
 8003f80:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003f82:	f001 fabf 	bl	8005504 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003f86:	f7fe fe83 	bl	8002c90 <xTaskIncrementTick>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d006      	beq.n	8003f9e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003f90:	f001 fb16 	bl	80055c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f94:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <SysTick_Handler+0x50>)
 8003f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	e001      	b.n	8003fa2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003f9e:	f001 faf3 	bl	8005588 <SEGGER_SYSVIEW_RecordExitISR>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	f383 8811 	msr	BASEPRI, r3
    }
 8003fac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	e000ed04 	.word	0xe000ed04

08003fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <vPortSetupTimerInterrupt+0x34>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <vPortSetupTimerInterrupt+0x38>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <vPortSetupTimerInterrupt+0x3c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a0a      	ldr	r2, [pc, #40]	; (8003ffc <vPortSetupTimerInterrupt+0x40>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	099b      	lsrs	r3, r3, #6
 8003fd8:	4a09      	ldr	r2, [pc, #36]	; (8004000 <vPortSetupTimerInterrupt+0x44>)
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fde:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <vPortSetupTimerInterrupt+0x34>)
 8003fe0:	2207      	movs	r2, #7
 8003fe2:	601a      	str	r2, [r3, #0]
}
 8003fe4:	bf00      	nop
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	e000e010 	.word	0xe000e010
 8003ff4:	e000e018 	.word	0xe000e018
 8003ff8:	20000000 	.word	0x20000000
 8003ffc:	10624dd3 	.word	0x10624dd3
 8004000:	e000e014 	.word	0xe000e014

08004004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004014 <vPortEnableVFP+0x10>
 8004008:	6801      	ldr	r1, [r0, #0]
 800400a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800400e:	6001      	str	r1, [r0, #0]
 8004010:	4770      	bx	lr
 8004012:	0000      	.short	0x0000
 8004014:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop

0800401c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	; 0x28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004024:	2300      	movs	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004028:	f7fe fd14 	bl	8002a54 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800402c:	4b65      	ldr	r3, [pc, #404]	; (80041c4 <pvPortMalloc+0x1a8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004034:	f000 f934 	bl	80042a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004038:	4b63      	ldr	r3, [pc, #396]	; (80041c8 <pvPortMalloc+0x1ac>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4013      	ands	r3, r2
 8004040:	2b00      	cmp	r3, #0
 8004042:	f040 80a7 	bne.w	8004194 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d02d      	beq.n	80040a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800404c:	2208      	movs	r2, #8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	429a      	cmp	r2, r3
 8004056:	d227      	bcs.n	80040a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004058:	2208      	movs	r2, #8
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4413      	add	r3, r2
 800405e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	2b00      	cmp	r3, #0
 8004068:	d021      	beq.n	80040ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f023 0307 	bic.w	r3, r3, #7
 8004070:	3308      	adds	r3, #8
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	429a      	cmp	r2, r3
 8004076:	d214      	bcs.n	80040a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f023 0307 	bic.w	r3, r3, #7
 800407e:	3308      	adds	r3, #8
 8004080:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	2b00      	cmp	r3, #0
 800408a:	d010      	beq.n	80040ae <pvPortMalloc+0x92>
        __asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	617b      	str	r3, [r7, #20]
    }
 800409e:	bf00      	nop
 80040a0:	e7fe      	b.n	80040a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040a6:	e002      	b.n	80040ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	607b      	str	r3, [r7, #4]
 80040ac:	e000      	b.n	80040b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d06e      	beq.n	8004194 <pvPortMalloc+0x178>
 80040b6:	4b45      	ldr	r3, [pc, #276]	; (80041cc <pvPortMalloc+0x1b0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d869      	bhi.n	8004194 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80040c0:	4b43      	ldr	r3, [pc, #268]	; (80041d0 <pvPortMalloc+0x1b4>)
 80040c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80040c4:	4b42      	ldr	r3, [pc, #264]	; (80041d0 <pvPortMalloc+0x1b4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040ca:	e004      	b.n	80040d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d903      	bls.n	80040e8 <pvPortMalloc+0xcc>
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f1      	bne.n	80040cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80040e8:	4b36      	ldr	r3, [pc, #216]	; (80041c4 <pvPortMalloc+0x1a8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d050      	beq.n	8004194 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2208      	movs	r2, #8
 80040f8:	4413      	add	r3, r2
 80040fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	1ad2      	subs	r2, r2, r3
 800410c:	2308      	movs	r3, #8
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	429a      	cmp	r2, r3
 8004112:	d91f      	bls.n	8004154 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4413      	add	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <pvPortMalloc+0x120>
        __asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	613b      	str	r3, [r7, #16]
    }
 8004138:	bf00      	nop
 800413a:	e7fe      	b.n	800413a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	1ad2      	subs	r2, r2, r3
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800414e:	69b8      	ldr	r0, [r7, #24]
 8004150:	f000 f908 	bl	8004364 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004154:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <pvPortMalloc+0x1b0>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <pvPortMalloc+0x1b0>)
 8004160:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004162:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <pvPortMalloc+0x1b0>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4b1b      	ldr	r3, [pc, #108]	; (80041d4 <pvPortMalloc+0x1b8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d203      	bcs.n	8004176 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800416e:	4b17      	ldr	r3, [pc, #92]	; (80041cc <pvPortMalloc+0x1b0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a18      	ldr	r2, [pc, #96]	; (80041d4 <pvPortMalloc+0x1b8>)
 8004174:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <pvPortMalloc+0x1ac>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	431a      	orrs	r2, r3
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800418a:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <pvPortMalloc+0x1bc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3301      	adds	r3, #1
 8004190:	4a11      	ldr	r2, [pc, #68]	; (80041d8 <pvPortMalloc+0x1bc>)
 8004192:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004194:	f7fe fc6c 	bl	8002a70 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <pvPortMalloc+0x19c>
        __asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	60fb      	str	r3, [r7, #12]
    }
 80041b4:	bf00      	nop
 80041b6:	e7fe      	b.n	80041b6 <pvPortMalloc+0x19a>
    return pvReturn;
 80041b8:	69fb      	ldr	r3, [r7, #28]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3728      	adds	r7, #40	; 0x28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20012d80 	.word	0x20012d80
 80041c8:	20012d94 	.word	0x20012d94
 80041cc:	20012d84 	.word	0x20012d84
 80041d0:	20012d78 	.word	0x20012d78
 80041d4:	20012d88 	.word	0x20012d88
 80041d8:	20012d8c 	.word	0x20012d8c

080041dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d04d      	beq.n	800428a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80041ee:	2308      	movs	r3, #8
 80041f0:	425b      	negs	r3, r3
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4413      	add	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	4b24      	ldr	r3, [pc, #144]	; (8004294 <vPortFree+0xb8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <vPortFree+0x44>
        __asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	60fb      	str	r3, [r7, #12]
    }
 800421c:	bf00      	nop
 800421e:	e7fe      	b.n	800421e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <vPortFree+0x62>
        __asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	60bb      	str	r3, [r7, #8]
    }
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	4b14      	ldr	r3, [pc, #80]	; (8004294 <vPortFree+0xb8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01e      	beq.n	800428a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d11a      	bne.n	800428a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	4b0e      	ldr	r3, [pc, #56]	; (8004294 <vPortFree+0xb8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	43db      	mvns	r3, r3
 800425e:	401a      	ands	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004264:	f7fe fbf6 	bl	8002a54 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <vPortFree+0xbc>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4413      	add	r3, r2
 8004272:	4a09      	ldr	r2, [pc, #36]	; (8004298 <vPortFree+0xbc>)
 8004274:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004276:	6938      	ldr	r0, [r7, #16]
 8004278:	f000 f874 	bl	8004364 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800427c:	4b07      	ldr	r3, [pc, #28]	; (800429c <vPortFree+0xc0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	4a06      	ldr	r2, [pc, #24]	; (800429c <vPortFree+0xc0>)
 8004284:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004286:	f7fe fbf3 	bl	8002a70 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800428a:	bf00      	nop
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20012d94 	.word	0x20012d94
 8004298:	20012d84 	.word	0x20012d84
 800429c:	20012d90 	.word	0x20012d90

080042a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80042aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80042ac:	4b27      	ldr	r3, [pc, #156]	; (800434c <prvHeapInit+0xac>)
 80042ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00c      	beq.n	80042d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3307      	adds	r3, #7
 80042be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0307 	bic.w	r3, r3, #7
 80042c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	4a1f      	ldr	r2, [pc, #124]	; (800434c <prvHeapInit+0xac>)
 80042d0:	4413      	add	r3, r2
 80042d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042d8:	4a1d      	ldr	r2, [pc, #116]	; (8004350 <prvHeapInit+0xb0>)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80042de:	4b1c      	ldr	r3, [pc, #112]	; (8004350 <prvHeapInit+0xb0>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	4413      	add	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80042ec:	2208      	movs	r2, #8
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0307 	bic.w	r3, r3, #7
 80042fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4a15      	ldr	r2, [pc, #84]	; (8004354 <prvHeapInit+0xb4>)
 8004300:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004302:	4b14      	ldr	r3, [pc, #80]	; (8004354 <prvHeapInit+0xb4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2200      	movs	r2, #0
 8004308:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <prvHeapInit+0xb4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	1ad2      	subs	r2, r2, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004320:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <prvHeapInit+0xb4>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	4a0a      	ldr	r2, [pc, #40]	; (8004358 <prvHeapInit+0xb8>)
 800432e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	4a09      	ldr	r2, [pc, #36]	; (800435c <prvHeapInit+0xbc>)
 8004336:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <prvHeapInit+0xc0>)
 800433a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800433e:	601a      	str	r2, [r3, #0]
}
 8004340:	bf00      	nop
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	20000178 	.word	0x20000178
 8004350:	20012d78 	.word	0x20012d78
 8004354:	20012d80 	.word	0x20012d80
 8004358:	20012d88 	.word	0x20012d88
 800435c:	20012d84 	.word	0x20012d84
 8004360:	20012d94 	.word	0x20012d94

08004364 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800436c:	4b28      	ldr	r3, [pc, #160]	; (8004410 <prvInsertBlockIntoFreeList+0xac>)
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	e002      	b.n	8004378 <prvInsertBlockIntoFreeList+0x14>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	429a      	cmp	r2, r3
 8004380:	d8f7      	bhi.n	8004372 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	4413      	add	r3, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	429a      	cmp	r2, r3
 8004392:	d108      	bne.n	80043a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	441a      	add	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	441a      	add	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d118      	bne.n	80043ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b15      	ldr	r3, [pc, #84]	; (8004414 <prvInsertBlockIntoFreeList+0xb0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d00d      	beq.n	80043e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	441a      	add	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	e008      	b.n	80043f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043e2:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <prvInsertBlockIntoFreeList+0xb0>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e003      	b.n	80043f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d002      	beq.n	8004402 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004402:	bf00      	nop
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	20012d78 	.word	0x20012d78
 8004414:	20012d80 	.word	0x20012d80

08004418 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004426:	2205      	movs	r2, #5
 8004428:	492b      	ldr	r1, [pc, #172]	; (80044d8 <SYSVIEW_AddTask+0xc0>)
 800442a:	68b8      	ldr	r0, [r7, #8]
 800442c:	f001 fb92 	bl	8005b54 <memcmp>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d04b      	beq.n	80044ce <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004436:	4b29      	ldr	r3, [pc, #164]	; (80044dc <SYSVIEW_AddTask+0xc4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b07      	cmp	r3, #7
 800443c:	d903      	bls.n	8004446 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800443e:	4828      	ldr	r0, [pc, #160]	; (80044e0 <SYSVIEW_AddTask+0xc8>)
 8004440:	f001 fb08 	bl	8005a54 <SEGGER_SYSVIEW_Warn>
    return;
 8004444:	e044      	b.n	80044d0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004446:	4b25      	ldr	r3, [pc, #148]	; (80044dc <SYSVIEW_AddTask+0xc4>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4926      	ldr	r1, [pc, #152]	; (80044e4 <SYSVIEW_AddTask+0xcc>)
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800445a:	4b20      	ldr	r3, [pc, #128]	; (80044dc <SYSVIEW_AddTask+0xc4>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4921      	ldr	r1, [pc, #132]	; (80044e4 <SYSVIEW_AddTask+0xcc>)
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	3304      	adds	r3, #4
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004470:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <SYSVIEW_AddTask+0xc4>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	491b      	ldr	r1, [pc, #108]	; (80044e4 <SYSVIEW_AddTask+0xcc>)
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	3308      	adds	r3, #8
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004486:	4b15      	ldr	r3, [pc, #84]	; (80044dc <SYSVIEW_AddTask+0xc4>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4916      	ldr	r1, [pc, #88]	; (80044e4 <SYSVIEW_AddTask+0xcc>)
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	330c      	adds	r3, #12
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <SYSVIEW_AddTask+0xc4>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	4910      	ldr	r1, [pc, #64]	; (80044e4 <SYSVIEW_AddTask+0xcc>)
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	3310      	adds	r3, #16
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <SYSVIEW_AddTask+0xc4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3301      	adds	r3, #1
 80044b8:	4a08      	ldr	r2, [pc, #32]	; (80044dc <SYSVIEW_AddTask+0xc4>)
 80044ba:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f80e 	bl	80044e8 <SYSVIEW_SendTaskInfo>
 80044cc:	e000      	b.n	80044d0 <SYSVIEW_AddTask+0xb8>
    return;
 80044ce:	bf00      	nop

}
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	08005bec 	.word	0x08005bec
 80044dc:	20012e38 	.word	0x20012e38
 80044e0:	08005bf4 	.word	0x08005bf4
 80044e4:	20012d98 	.word	0x20012d98

080044e8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	; 0x28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80044f6:	f107 0314 	add.w	r3, r7, #20
 80044fa:	2214      	movs	r2, #20
 80044fc:	2100      	movs	r1, #0
 80044fe:	4618      	mov	r0, r3
 8004500:	f001 fb44 	bl	8005b8c <memset>
  TaskInfo.TaskID     = TaskID;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004518:	f107 0314 	add.w	r3, r7, #20
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fec7 	bl	80052b0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004522:	bf00      	nop
 8004524:	3728      	adds	r7, #40	; 0x28
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004532:	4b26      	ldr	r3, [pc, #152]	; (80045cc <_DoInit+0xa0>)
 8004534:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004536:	22a8      	movs	r2, #168	; 0xa8
 8004538:	2100      	movs	r1, #0
 800453a:	6838      	ldr	r0, [r7, #0]
 800453c:	f001 fb26 	bl	8005b8c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2203      	movs	r2, #3
 8004544:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2203      	movs	r2, #3
 800454a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	4a20      	ldr	r2, [pc, #128]	; (80045d0 <_DoInit+0xa4>)
 8004550:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	4a1f      	ldr	r2, [pc, #124]	; (80045d4 <_DoInit+0xa8>)
 8004556:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800455e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2200      	movs	r2, #0
 8004564:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2200      	movs	r2, #0
 800456a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2200      	movs	r2, #0
 8004570:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	4a16      	ldr	r2, [pc, #88]	; (80045d0 <_DoInit+0xa4>)
 8004576:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	4a17      	ldr	r2, [pc, #92]	; (80045d8 <_DoInit+0xac>)
 800457c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2210      	movs	r2, #16
 8004582:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2200      	movs	r2, #0
 8004588:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2200      	movs	r2, #0
 800458e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2200      	movs	r2, #0
 8004594:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004596:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800459a:	2300      	movs	r3, #0
 800459c:	607b      	str	r3, [r7, #4]
 800459e:	e00c      	b.n	80045ba <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f1c3 030f 	rsb	r3, r3, #15
 80045a6:	4a0d      	ldr	r2, [pc, #52]	; (80045dc <_DoInit+0xb0>)
 80045a8:	5cd1      	ldrb	r1, [r2, r3]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4413      	add	r3, r2
 80045b0:	460a      	mov	r2, r1
 80045b2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3301      	adds	r3, #1
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b0f      	cmp	r3, #15
 80045be:	d9ef      	bls.n	80045a0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80045c0:	f3bf 8f5f 	dmb	sy
}
 80045c4:	bf00      	nop
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	200133ec 	.word	0x200133ec
 80045d0:	08005c44 	.word	0x08005c44
 80045d4:	20012e3c 	.word	0x20012e3c
 80045d8:	2001323c 	.word	0x2001323c
 80045dc:	08005c68 	.word	0x08005c68

080045e0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08c      	sub	sp, #48	; 0x30
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80045ec:	4b3e      	ldr	r3, [pc, #248]	; (80046e8 <SEGGER_RTT_ReadNoLock+0x108>)
 80045ee:	623b      	str	r3, [r7, #32]
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <SEGGER_RTT_ReadNoLock+0x1e>
 80045fa:	f7ff ff97 	bl	800452c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4613      	mov	r3, r2
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	4413      	add	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	3360      	adds	r3, #96	; 0x60
 800460a:	4a37      	ldr	r2, [pc, #220]	; (80046e8 <SEGGER_RTT_ReadNoLock+0x108>)
 800460c:	4413      	add	r3, r2
 800460e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004620:	2300      	movs	r3, #0
 8004622:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	429a      	cmp	r2, r3
 800462a:	d92b      	bls.n	8004684 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4293      	cmp	r3, r2
 800463c:	bf28      	it	cs
 800463e:	4613      	movcs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	4413      	add	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	6939      	ldr	r1, [r7, #16]
 8004650:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004652:	f001 fa8d 	bl	8005b70 <memcpy>
    NumBytesRead += NumBytesRem;
 8004656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	4413      	add	r3, r2
 800465c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800465e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	4413      	add	r3, r2
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800466e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	4413      	add	r3, r2
 8004674:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800467c:	429a      	cmp	r2, r3
 800467e:	d101      	bne.n	8004684 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004680:	2300      	movs	r3, #0
 8004682:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4293      	cmp	r3, r2
 8004692:	bf28      	it	cs
 8004694:	4613      	movcs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d019      	beq.n	80046d2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	4413      	add	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	6939      	ldr	r1, [r7, #16]
 80046ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046ae:	f001 fa5f 	bl	8005b70 <memcpy>
    NumBytesRead += NumBytesRem;
 80046b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	4413      	add	r3, r2
 80046b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80046ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	4413      	add	r3, r2
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80046ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	4413      	add	r3, r2
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046dc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3730      	adds	r7, #48	; 0x30
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	200133ec 	.word	0x200133ec

080046ec <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00f      	beq.n	8004722 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004702:	e002      	b.n	800470a <_EncodeStr+0x1e>
      Len++;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	3301      	adds	r3, #1
 8004708:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	4413      	add	r3, r2
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f6      	bne.n	8004704 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	429a      	cmp	r2, r3
 800471c:	d901      	bls.n	8004722 <_EncodeStr+0x36>
      Len = Limit;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2bfe      	cmp	r3, #254	; 0xfe
 8004726:	d806      	bhi.n	8004736 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	60fa      	str	r2, [r7, #12]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e011      	b.n	800475a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	60fa      	str	r2, [r7, #12]
 800473c:	22ff      	movs	r2, #255	; 0xff
 800473e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	60fa      	str	r2, [r7, #12]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	0a19      	lsrs	r1, r3, #8
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	60fa      	str	r2, [r7, #12]
 8004756:	b2ca      	uxtb	r2, r1
 8004758:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800475e:	e00a      	b.n	8004776 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	1c53      	adds	r3, r2, #1
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1c59      	adds	r1, r3, #1
 800476a:	60f9      	str	r1, [r7, #12]
 800476c:	7812      	ldrb	r2, [r2, #0]
 800476e:	701a      	strb	r2, [r3, #0]
    n++;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	3301      	adds	r3, #1
 8004774:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	429a      	cmp	r2, r3
 800477c:	d3f0      	bcc.n	8004760 <_EncodeStr+0x74>
  }
  return pPayload;
 800477e:	68fb      	ldr	r3, [r7, #12]
}
 8004780:	4618      	mov	r0, r3
 8004782:	371c      	adds	r7, #28
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3307      	adds	r3, #7
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80047aa:	4b35      	ldr	r3, [pc, #212]	; (8004880 <_HandleIncomingPacket+0xdc>)
 80047ac:	7e1b      	ldrb	r3, [r3, #24]
 80047ae:	4618      	mov	r0, r3
 80047b0:	1cfb      	adds	r3, r7, #3
 80047b2:	2201      	movs	r2, #1
 80047b4:	4619      	mov	r1, r3
 80047b6:	f7ff ff13 	bl	80045e0 <SEGGER_RTT_ReadNoLock>
 80047ba:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d052      	beq.n	8004868 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80047c2:	78fb      	ldrb	r3, [r7, #3]
 80047c4:	2b80      	cmp	r3, #128	; 0x80
 80047c6:	d031      	beq.n	800482c <_HandleIncomingPacket+0x88>
 80047c8:	2b80      	cmp	r3, #128	; 0x80
 80047ca:	dc40      	bgt.n	800484e <_HandleIncomingPacket+0xaa>
 80047cc:	2b07      	cmp	r3, #7
 80047ce:	dc15      	bgt.n	80047fc <_HandleIncomingPacket+0x58>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	dd3c      	ble.n	800484e <_HandleIncomingPacket+0xaa>
 80047d4:	3b01      	subs	r3, #1
 80047d6:	2b06      	cmp	r3, #6
 80047d8:	d839      	bhi.n	800484e <_HandleIncomingPacket+0xaa>
 80047da:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <_HandleIncomingPacket+0x3c>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004803 	.word	0x08004803
 80047e4:	08004809 	.word	0x08004809
 80047e8:	0800480f 	.word	0x0800480f
 80047ec:	08004815 	.word	0x08004815
 80047f0:	0800481b 	.word	0x0800481b
 80047f4:	08004821 	.word	0x08004821
 80047f8:	08004827 	.word	0x08004827
 80047fc:	2b7f      	cmp	r3, #127	; 0x7f
 80047fe:	d035      	beq.n	800486c <_HandleIncomingPacket+0xc8>
 8004800:	e025      	b.n	800484e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004802:	f000 fbdb 	bl	8004fbc <SEGGER_SYSVIEW_Start>
      break;
 8004806:	e036      	b.n	8004876 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004808:	f000 fc92 	bl	8005130 <SEGGER_SYSVIEW_Stop>
      break;
 800480c:	e033      	b.n	8004876 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800480e:	f000 fe47 	bl	80054a0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004812:	e030      	b.n	8004876 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004814:	f000 fe30 	bl	8005478 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004818:	e02d      	b.n	8004876 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800481a:	f000 fcaf 	bl	800517c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800481e:	e02a      	b.n	8004876 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004820:	f001 f8da 	bl	80059d8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004824:	e027      	b.n	8004876 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004826:	f001 f8b9 	bl	800599c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800482a:	e024      	b.n	8004876 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800482c:	4b14      	ldr	r3, [pc, #80]	; (8004880 <_HandleIncomingPacket+0xdc>)
 800482e:	7e1b      	ldrb	r3, [r3, #24]
 8004830:	4618      	mov	r0, r3
 8004832:	1cfb      	adds	r3, r7, #3
 8004834:	2201      	movs	r2, #1
 8004836:	4619      	mov	r1, r3
 8004838:	f7ff fed2 	bl	80045e0 <SEGGER_RTT_ReadNoLock>
 800483c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d015      	beq.n	8004870 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	4618      	mov	r0, r3
 8004848:	f001 f828 	bl	800589c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800484c:	e010      	b.n	8004870 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800484e:	78fb      	ldrb	r3, [r7, #3]
 8004850:	b25b      	sxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	da0e      	bge.n	8004874 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004856:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <_HandleIncomingPacket+0xdc>)
 8004858:	7e1b      	ldrb	r3, [r3, #24]
 800485a:	4618      	mov	r0, r3
 800485c:	1cfb      	adds	r3, r7, #3
 800485e:	2201      	movs	r2, #1
 8004860:	4619      	mov	r1, r3
 8004862:	f7ff febd 	bl	80045e0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004866:	e005      	b.n	8004874 <_HandleIncomingPacket+0xd0>
    }
  }
 8004868:	bf00      	nop
 800486a:	e004      	b.n	8004876 <_HandleIncomingPacket+0xd2>
      break;
 800486c:	bf00      	nop
 800486e:	e002      	b.n	8004876 <_HandleIncomingPacket+0xd2>
      break;
 8004870:	bf00      	nop
 8004872:	e000      	b.n	8004876 <_HandleIncomingPacket+0xd2>
      break;
 8004874:	bf00      	nop
}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	2001324c 	.word	0x2001324c

08004884 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004884:	b580      	push	{r7, lr}
 8004886:	b08c      	sub	sp, #48	; 0x30
 8004888:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800488a:	2301      	movs	r3, #1
 800488c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800488e:	1d3b      	adds	r3, r7, #4
 8004890:	3301      	adds	r3, #1
 8004892:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004898:	4b31      	ldr	r3, [pc, #196]	; (8004960 <_TrySendOverflowPacket+0xdc>)
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
 800489e:	e00b      	b.n	80048b8 <_TrySendOverflowPacket+0x34>
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a6:	1c59      	adds	r1, r3, #1
 80048a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	09db      	lsrs	r3, r3, #7
 80048b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	2b7f      	cmp	r3, #127	; 0x7f
 80048bc:	d8f0      	bhi.n	80048a0 <_TrySendOverflowPacket+0x1c>
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80048ce:	4b25      	ldr	r3, [pc, #148]	; (8004964 <_TrySendOverflowPacket+0xe0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80048d4:	4b22      	ldr	r3, [pc, #136]	; (8004960 <_TrySendOverflowPacket+0xdc>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	623b      	str	r3, [r7, #32]
 80048e6:	e00b      	b.n	8004900 <_TrySendOverflowPacket+0x7c>
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	1c59      	adds	r1, r3, #1
 80048f0:	6279      	str	r1, [r7, #36]	; 0x24
 80048f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	09db      	lsrs	r3, r3, #7
 80048fe:	623b      	str	r3, [r7, #32]
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	2b7f      	cmp	r3, #127	; 0x7f
 8004904:	d8f0      	bhi.n	80048e8 <_TrySendOverflowPacket+0x64>
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	627a      	str	r2, [r7, #36]	; 0x24
 800490c:	6a3a      	ldr	r2, [r7, #32]
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	701a      	strb	r2, [r3, #0]
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <_TrySendOverflowPacket+0xdc>)
 8004918:	785b      	ldrb	r3, [r3, #1]
 800491a:	4618      	mov	r0, r3
 800491c:	1d3b      	adds	r3, r7, #4
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	461a      	mov	r2, r3
 8004924:	1d3b      	adds	r3, r7, #4
 8004926:	4619      	mov	r1, r3
 8004928:	f7fb fc52 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800492c:	4603      	mov	r3, r0
 800492e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d009      	beq.n	800494a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004936:	4a0a      	ldr	r2, [pc, #40]	; (8004960 <_TrySendOverflowPacket+0xdc>)
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800493c:	4b08      	ldr	r3, [pc, #32]	; (8004960 <_TrySendOverflowPacket+0xdc>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	3b01      	subs	r3, #1
 8004942:	b2da      	uxtb	r2, r3
 8004944:	4b06      	ldr	r3, [pc, #24]	; (8004960 <_TrySendOverflowPacket+0xdc>)
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	e004      	b.n	8004954 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <_TrySendOverflowPacket+0xdc>)
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	3301      	adds	r3, #1
 8004950:	4a03      	ldr	r2, [pc, #12]	; (8004960 <_TrySendOverflowPacket+0xdc>)
 8004952:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004954:	693b      	ldr	r3, [r7, #16]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3730      	adds	r7, #48	; 0x30
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	2001324c 	.word	0x2001324c
 8004964:	e0001004 	.word	0xe0001004

08004968 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b08a      	sub	sp, #40	; 0x28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004974:	4b9a      	ldr	r3, [pc, #616]	; (8004be0 <_SendPacket+0x278>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d010      	beq.n	800499e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800497c:	4b98      	ldr	r3, [pc, #608]	; (8004be0 <_SendPacket+0x278>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8129 	beq.w	8004bd8 <_SendPacket+0x270>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004986:	4b96      	ldr	r3, [pc, #600]	; (8004be0 <_SendPacket+0x278>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d109      	bne.n	80049a2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800498e:	f7ff ff79 	bl	8004884 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004992:	4b93      	ldr	r3, [pc, #588]	; (8004be0 <_SendPacket+0x278>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b01      	cmp	r3, #1
 8004998:	f040 8120 	bne.w	8004bdc <_SendPacket+0x274>
      goto SendDone;
    }
  }
Send:
 800499c:	e001      	b.n	80049a2 <_SendPacket+0x3a>
    goto Send;
 800499e:	bf00      	nop
 80049a0:	e000      	b.n	80049a4 <_SendPacket+0x3c>
Send:
 80049a2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b1f      	cmp	r3, #31
 80049a8:	d809      	bhi.n	80049be <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80049aa:	4b8d      	ldr	r3, [pc, #564]	; (8004be0 <_SendPacket+0x278>)
 80049ac:	69da      	ldr	r2, [r3, #28]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f040 8115 	bne.w	8004be8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b17      	cmp	r3, #23
 80049c2:	d807      	bhi.n	80049d4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	e0c4      	b.n	8004b5e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	2b7f      	cmp	r3, #127	; 0x7f
 80049e0:	d912      	bls.n	8004a08 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	09da      	lsrs	r2, r3, #7
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	3a01      	subs	r2, #1
 80049fa:	60fa      	str	r2, [r7, #12]
 80049fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	e006      	b.n	8004a16 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b7e      	cmp	r3, #126	; 0x7e
 8004a1a:	d807      	bhi.n	8004a2c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	e098      	b.n	8004b5e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a32:	d212      	bcs.n	8004a5a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	09da      	lsrs	r2, r3, #7
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	3a01      	subs	r2, #1
 8004a4c:	60fa      	str	r2, [r7, #12]
 8004a4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	701a      	strb	r2, [r3, #0]
 8004a58:	e081      	b.n	8004b5e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a60:	d21d      	bcs.n	8004a9e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	0b9a      	lsrs	r2, r3, #14
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	09db      	lsrs	r3, r3, #7
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	3a01      	subs	r2, #1
 8004a7c:	60fa      	str	r2, [r7, #12]
 8004a7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	3a01      	subs	r2, #1
 8004a90:	60fa      	str	r2, [r7, #12]
 8004a92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	e05f      	b.n	8004b5e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aa4:	d228      	bcs.n	8004af8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	0d5a      	lsrs	r2, r3, #21
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	0b9b      	lsrs	r3, r3, #14
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	3a01      	subs	r2, #1
 8004ac0:	60fa      	str	r2, [r7, #12]
 8004ac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	09db      	lsrs	r3, r3, #7
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	3a01      	subs	r2, #1
 8004ad6:	60fa      	str	r2, [r7, #12]
 8004ad8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	3a01      	subs	r2, #1
 8004aea:	60fa      	str	r2, [r7, #12]
 8004aec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e032      	b.n	8004b5e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	0f1a      	lsrs	r2, r3, #28
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	0d5b      	lsrs	r3, r3, #21
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	3a01      	subs	r2, #1
 8004b12:	60fa      	str	r2, [r7, #12]
 8004b14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	0b9b      	lsrs	r3, r3, #14
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	3a01      	subs	r2, #1
 8004b28:	60fa      	str	r2, [r7, #12]
 8004b2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	09db      	lsrs	r3, r3, #7
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	3a01      	subs	r2, #1
 8004b3e:	60fa      	str	r2, [r7, #12]
 8004b40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	3a01      	subs	r2, #1
 8004b52:	60fa      	str	r2, [r7, #12]
 8004b54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b5e:	4b21      	ldr	r3, [pc, #132]	; (8004be4 <_SendPacket+0x27c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004b64:	4b1e      	ldr	r3, [pc, #120]	; (8004be0 <_SendPacket+0x278>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	623b      	str	r3, [r7, #32]
 8004b76:	e00b      	b.n	8004b90 <_SendPacket+0x228>
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	1c59      	adds	r1, r3, #1
 8004b80:	6279      	str	r1, [r7, #36]	; 0x24
 8004b82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	09db      	lsrs	r3, r3, #7
 8004b8e:	623b      	str	r3, [r7, #32]
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	2b7f      	cmp	r3, #127	; 0x7f
 8004b94:	d8f0      	bhi.n	8004b78 <_SendPacket+0x210>
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	627a      	str	r2, [r7, #36]	; 0x24
 8004b9c:	6a3a      	ldr	r2, [r7, #32]
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004ba6:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <_SendPacket+0x278>)
 8004ba8:	785b      	ldrb	r3, [r3, #1]
 8004baa:	4618      	mov	r0, r3
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68f9      	ldr	r1, [r7, #12]
 8004bb6:	f7fb fb0b 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004bba:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004bc2:	4a07      	ldr	r2, [pc, #28]	; (8004be0 <_SendPacket+0x278>)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	60d3      	str	r3, [r2, #12]
 8004bc8:	e00f      	b.n	8004bea <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004bca:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <_SendPacket+0x278>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4b03      	ldr	r3, [pc, #12]	; (8004be0 <_SendPacket+0x278>)
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	e008      	b.n	8004bea <_SendPacket+0x282>
    goto SendDone;
 8004bd8:	bf00      	nop
 8004bda:	e006      	b.n	8004bea <_SendPacket+0x282>
      goto SendDone;
 8004bdc:	bf00      	nop
 8004bde:	e004      	b.n	8004bea <_SendPacket+0x282>
 8004be0:	2001324c 	.word	0x2001324c
 8004be4:	e0001004 	.word	0xe0001004
      goto SendDone;
 8004be8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004bea:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <_SendPacket+0x2d4>)
 8004bec:	7e1b      	ldrb	r3, [r3, #24]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <_SendPacket+0x2d8>)
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	440b      	add	r3, r1
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	336c      	adds	r3, #108	; 0x6c
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <_SendPacket+0x2d4>)
 8004c02:	7e1b      	ldrb	r3, [r3, #24]
 8004c04:	4618      	mov	r0, r3
 8004c06:	490e      	ldr	r1, [pc, #56]	; (8004c40 <_SendPacket+0x2d8>)
 8004c08:	4603      	mov	r3, r0
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	4403      	add	r3, r0
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	440b      	add	r3, r1
 8004c12:	3370      	adds	r3, #112	; 0x70
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d00b      	beq.n	8004c32 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004c1a:	4b08      	ldr	r3, [pc, #32]	; (8004c3c <_SendPacket+0x2d4>)
 8004c1c:	789b      	ldrb	r3, [r3, #2]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d107      	bne.n	8004c32 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <_SendPacket+0x2d4>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004c28:	f7ff fdbc 	bl	80047a4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004c2c:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <_SendPacket+0x2d4>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004c32:	bf00      	nop
 8004c34:	3728      	adds	r7, #40	; 0x28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	2001324c 	.word	0x2001324c
 8004c40:	200133ec 	.word	0x200133ec

08004c44 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c4c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c50:	f04f 0120 	mov.w	r1, #32
 8004c54:	f381 8811 	msr	BASEPRI, r1
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	4808      	ldr	r0, [pc, #32]	; (8004c7c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004c5c:	f7ff fd96 	bl	800478c <_PreparePacket>
 8004c60:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	68b8      	ldr	r0, [r7, #8]
 8004c68:	f7ff fe7e 	bl	8004968 <_SendPacket>
  RECORD_END();
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f383 8811 	msr	BASEPRI, r3
}
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	2001327c 	.word	0x2001327c

08004c80 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c8e:	f04f 0120 	mov.w	r1, #32
 8004c92:	f381 8811 	msr	BASEPRI, r1
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	4816      	ldr	r0, [pc, #88]	; (8004cf4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004c9a:	f7ff fd77 	bl	800478c <_PreparePacket>
 8004c9e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	e00b      	b.n	8004cc6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	1c59      	adds	r1, r3, #1
 8004cb6:	61f9      	str	r1, [r7, #28]
 8004cb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	09db      	lsrs	r3, r3, #7
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8004cca:	d8f0      	bhi.n	8004cae <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	61fa      	str	r2, [r7, #28]
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	68f9      	ldr	r1, [r7, #12]
 8004ce0:	6938      	ldr	r0, [r7, #16]
 8004ce2:	f7ff fe41 	bl	8004968 <_SendPacket>
  RECORD_END();
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f383 8811 	msr	BASEPRI, r3
}
 8004cec:	bf00      	nop
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	2001327c 	.word	0x2001327c

08004cf8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08c      	sub	sp, #48	; 0x30
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d04:	f3ef 8311 	mrs	r3, BASEPRI
 8004d08:	f04f 0120 	mov.w	r1, #32
 8004d0c:	f381 8811 	msr	BASEPRI, r1
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	4825      	ldr	r0, [pc, #148]	; (8004da8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004d14:	f7ff fd3a 	bl	800478c <_PreparePacket>
 8004d18:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d26:	e00b      	b.n	8004d40 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2e:	1c59      	adds	r1, r3, #1
 8004d30:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	09db      	lsrs	r3, r3, #7
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	2b7f      	cmp	r3, #127	; 0x7f
 8004d44:	d8f0      	bhi.n	8004d28 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	623b      	str	r3, [r7, #32]
 8004d5e:	e00b      	b.n	8004d78 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	1c59      	adds	r1, r3, #1
 8004d68:	6279      	str	r1, [r7, #36]	; 0x24
 8004d6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	09db      	lsrs	r3, r3, #7
 8004d76:	623b      	str	r3, [r7, #32]
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d7c:	d8f0      	bhi.n	8004d60 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	627a      	str	r2, [r7, #36]	; 0x24
 8004d84:	6a3a      	ldr	r2, [r7, #32]
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	6979      	ldr	r1, [r7, #20]
 8004d92:	69b8      	ldr	r0, [r7, #24]
 8004d94:	f7ff fde8 	bl	8004968 <_SendPacket>
  RECORD_END();
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f383 8811 	msr	BASEPRI, r3
}
 8004d9e:	bf00      	nop
 8004da0:	3730      	adds	r7, #48	; 0x30
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	2001327c 	.word	0x2001327c

08004dac <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08e      	sub	sp, #56	; 0x38
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004dba:	f3ef 8311 	mrs	r3, BASEPRI
 8004dbe:	f04f 0120 	mov.w	r1, #32
 8004dc2:	f381 8811 	msr	BASEPRI, r1
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	4832      	ldr	r0, [pc, #200]	; (8004e94 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004dca:	f7ff fcdf 	bl	800478c <_PreparePacket>
 8004dce:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	633b      	str	r3, [r7, #48]	; 0x30
 8004ddc:	e00b      	b.n	8004df6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de4:	1c59      	adds	r1, r3, #1
 8004de6:	6379      	str	r1, [r7, #52]	; 0x34
 8004de8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	701a      	strb	r2, [r3, #0]
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	09db      	lsrs	r3, r3, #7
 8004df4:	633b      	str	r3, [r7, #48]	; 0x30
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	2b7f      	cmp	r3, #127	; 0x7f
 8004dfa:	d8f0      	bhi.n	8004dde <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	637a      	str	r2, [r7, #52]	; 0x34
 8004e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	701a      	strb	r2, [r3, #0]
 8004e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e14:	e00b      	b.n	8004e2e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1c:	1c59      	adds	r1, r3, #1
 8004e1e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	701a      	strb	r2, [r3, #0]
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	09db      	lsrs	r3, r3, #7
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	2b7f      	cmp	r3, #127	; 0x7f
 8004e32:	d8f0      	bhi.n	8004e16 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	623b      	str	r3, [r7, #32]
 8004e4c:	e00b      	b.n	8004e66 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	1c59      	adds	r1, r3, #1
 8004e56:	6279      	str	r1, [r7, #36]	; 0x24
 8004e58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	09db      	lsrs	r3, r3, #7
 8004e64:	623b      	str	r3, [r7, #32]
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	2b7f      	cmp	r3, #127	; 0x7f
 8004e6a:	d8f0      	bhi.n	8004e4e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	627a      	str	r2, [r7, #36]	; 0x24
 8004e72:	6a3a      	ldr	r2, [r7, #32]
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	6979      	ldr	r1, [r7, #20]
 8004e80:	69b8      	ldr	r0, [r7, #24]
 8004e82:	f7ff fd71 	bl	8004968 <_SendPacket>
  RECORD_END();
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	f383 8811 	msr	BASEPRI, r3
}
 8004e8c:	bf00      	nop
 8004e8e:	3738      	adds	r7, #56	; 0x38
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	2001327c 	.word	0x2001327c

08004e98 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b090      	sub	sp, #64	; 0x40
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ea6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eaa:	f04f 0120 	mov.w	r1, #32
 8004eae:	f381 8811 	msr	BASEPRI, r1
 8004eb2:	61fb      	str	r3, [r7, #28]
 8004eb4:	4840      	ldr	r0, [pc, #256]	; (8004fb8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004eb6:	f7ff fc69 	bl	800478c <_PreparePacket>
 8004eba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ec8:	e00b      	b.n	8004ee2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed0:	1c59      	adds	r1, r3, #1
 8004ed2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004ed4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ede:	09db      	lsrs	r3, r3, #7
 8004ee0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ee6:	d8f0      	bhi.n	8004eca <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	637b      	str	r3, [r7, #52]	; 0x34
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	633b      	str	r3, [r7, #48]	; 0x30
 8004f00:	e00b      	b.n	8004f1a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f08:	1c59      	adds	r1, r3, #1
 8004f0a:	6379      	str	r1, [r7, #52]	; 0x34
 8004f0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	09db      	lsrs	r3, r3, #7
 8004f18:	633b      	str	r3, [r7, #48]	; 0x30
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f1e:	d8f0      	bhi.n	8004f02 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	637a      	str	r2, [r7, #52]	; 0x34
 8004f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f38:	e00b      	b.n	8004f52 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f40:	1c59      	adds	r1, r3, #1
 8004f42:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	701a      	strb	r2, [r3, #0]
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	09db      	lsrs	r3, r3, #7
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	2b7f      	cmp	r3, #127	; 0x7f
 8004f56:	d8f0      	bhi.n	8004f3a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	701a      	strb	r2, [r3, #0]
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f6e:	623b      	str	r3, [r7, #32]
 8004f70:	e00b      	b.n	8004f8a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	1c59      	adds	r1, r3, #1
 8004f7a:	6279      	str	r1, [r7, #36]	; 0x24
 8004f7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	701a      	strb	r2, [r3, #0]
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	09db      	lsrs	r3, r3, #7
 8004f88:	623b      	str	r3, [r7, #32]
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f8e:	d8f0      	bhi.n	8004f72 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	627a      	str	r2, [r7, #36]	; 0x24
 8004f96:	6a3a      	ldr	r2, [r7, #32]
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	6979      	ldr	r1, [r7, #20]
 8004fa4:	69b8      	ldr	r0, [r7, #24]
 8004fa6:	f7ff fcdf 	bl	8004968 <_SendPacket>
  RECORD_END();
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	f383 8811 	msr	BASEPRI, r3
}
 8004fb0:	bf00      	nop
 8004fb2:	3740      	adds	r7, #64	; 0x40
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	2001327c 	.word	0x2001327c

08004fbc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08c      	sub	sp, #48	; 0x30
 8004fc0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004fc2:	4b58      	ldr	r3, [pc, #352]	; (8005124 <SEGGER_SYSVIEW_Start+0x168>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004fc8:	f3ef 8311 	mrs	r3, BASEPRI
 8004fcc:	f04f 0120 	mov.w	r1, #32
 8004fd0:	f381 8811 	msr	BASEPRI, r1
 8004fd4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004fd6:	4b53      	ldr	r3, [pc, #332]	; (8005124 <SEGGER_SYSVIEW_Start+0x168>)
 8004fd8:	785b      	ldrb	r3, [r3, #1]
 8004fda:	220a      	movs	r2, #10
 8004fdc:	4952      	ldr	r1, [pc, #328]	; (8005128 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fb f8f6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004fea:	200a      	movs	r0, #10
 8004fec:	f7ff fe2a 	bl	8004c44 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ff0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ff4:	f04f 0120 	mov.w	r1, #32
 8004ff8:	f381 8811 	msr	BASEPRI, r1
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	484b      	ldr	r0, [pc, #300]	; (800512c <SEGGER_SYSVIEW_Start+0x170>)
 8005000:	f7ff fbc4 	bl	800478c <_PreparePacket>
 8005004:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800500e:	4b45      	ldr	r3, [pc, #276]	; (8005124 <SEGGER_SYSVIEW_Start+0x168>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	62bb      	str	r3, [r7, #40]	; 0x28
 8005014:	e00b      	b.n	800502e <SEGGER_SYSVIEW_Start+0x72>
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	b2da      	uxtb	r2, r3
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	1c59      	adds	r1, r3, #1
 800501e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005020:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	701a      	strb	r2, [r3, #0]
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	09db      	lsrs	r3, r3, #7
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	2b7f      	cmp	r3, #127	; 0x7f
 8005032:	d8f0      	bhi.n	8005016 <SEGGER_SYSVIEW_Start+0x5a>
 8005034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	62fa      	str	r2, [r7, #44]	; 0x2c
 800503a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
 8005048:	4b36      	ldr	r3, [pc, #216]	; (8005124 <SEGGER_SYSVIEW_Start+0x168>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	623b      	str	r3, [r7, #32]
 800504e:	e00b      	b.n	8005068 <SEGGER_SYSVIEW_Start+0xac>
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	b2da      	uxtb	r2, r3
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	1c59      	adds	r1, r3, #1
 8005058:	6279      	str	r1, [r7, #36]	; 0x24
 800505a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	09db      	lsrs	r3, r3, #7
 8005066:	623b      	str	r3, [r7, #32]
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	2b7f      	cmp	r3, #127	; 0x7f
 800506c:	d8f0      	bhi.n	8005050 <SEGGER_SYSVIEW_Start+0x94>
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	627a      	str	r2, [r7, #36]	; 0x24
 8005074:	6a3a      	ldr	r2, [r7, #32]
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	4b28      	ldr	r3, [pc, #160]	; (8005124 <SEGGER_SYSVIEW_Start+0x168>)
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	61bb      	str	r3, [r7, #24]
 8005088:	e00b      	b.n	80050a2 <SEGGER_SYSVIEW_Start+0xe6>
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	b2da      	uxtb	r2, r3
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	1c59      	adds	r1, r3, #1
 8005092:	61f9      	str	r1, [r7, #28]
 8005094:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	701a      	strb	r2, [r3, #0]
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	09db      	lsrs	r3, r3, #7
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b7f      	cmp	r3, #127	; 0x7f
 80050a6:	d8f0      	bhi.n	800508a <SEGGER_SYSVIEW_Start+0xce>
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	61fa      	str	r2, [r7, #28]
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	2300      	movs	r3, #0
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	e00b      	b.n	80050da <SEGGER_SYSVIEW_Start+0x11e>
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	1c59      	adds	r1, r3, #1
 80050ca:	6179      	str	r1, [r7, #20]
 80050cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	09db      	lsrs	r3, r3, #7
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b7f      	cmp	r3, #127	; 0x7f
 80050de:	d8f0      	bhi.n	80050c2 <SEGGER_SYSVIEW_Start+0x106>
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	617a      	str	r2, [r7, #20]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	701a      	strb	r2, [r3, #0]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80050f0:	2218      	movs	r2, #24
 80050f2:	6839      	ldr	r1, [r7, #0]
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7ff fc37 	bl	8004968 <_SendPacket>
      RECORD_END();
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005100:	4b08      	ldr	r3, [pc, #32]	; (8005124 <SEGGER_SYSVIEW_Start+0x168>)
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005108:	4b06      	ldr	r3, [pc, #24]	; (8005124 <SEGGER_SYSVIEW_Start+0x168>)
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800510e:	f000 f9c7 	bl	80054a0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005112:	f000 f9b1 	bl	8005478 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005116:	f000 fc5f 	bl	80059d8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800511a:	bf00      	nop
 800511c:	3730      	adds	r7, #48	; 0x30
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	2001324c 	.word	0x2001324c
 8005128:	08005c7c 	.word	0x08005c7c
 800512c:	2001327c 	.word	0x2001327c

08005130 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005136:	f3ef 8311 	mrs	r3, BASEPRI
 800513a:	f04f 0120 	mov.w	r1, #32
 800513e:	f381 8811 	msr	BASEPRI, r1
 8005142:	607b      	str	r3, [r7, #4]
 8005144:	480b      	ldr	r0, [pc, #44]	; (8005174 <SEGGER_SYSVIEW_Stop+0x44>)
 8005146:	f7ff fb21 	bl	800478c <_PreparePacket>
 800514a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800514c:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <SEGGER_SYSVIEW_Stop+0x48>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005154:	220b      	movs	r2, #11
 8005156:	6839      	ldr	r1, [r7, #0]
 8005158:	6838      	ldr	r0, [r7, #0]
 800515a:	f7ff fc05 	bl	8004968 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800515e:	4b06      	ldr	r3, [pc, #24]	; (8005178 <SEGGER_SYSVIEW_Stop+0x48>)
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f383 8811 	msr	BASEPRI, r3
}
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	2001327c 	.word	0x2001327c
 8005178:	2001324c 	.word	0x2001324c

0800517c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800517c:	b580      	push	{r7, lr}
 800517e:	b08c      	sub	sp, #48	; 0x30
 8005180:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005182:	f3ef 8311 	mrs	r3, BASEPRI
 8005186:	f04f 0120 	mov.w	r1, #32
 800518a:	f381 8811 	msr	BASEPRI, r1
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	4845      	ldr	r0, [pc, #276]	; (80052a8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005192:	f7ff fafb 	bl	800478c <_PreparePacket>
 8005196:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051a0:	4b42      	ldr	r3, [pc, #264]	; (80052ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051a6:	e00b      	b.n	80051c0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ae:	1c59      	adds	r1, r3, #1
 80051b0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	09db      	lsrs	r3, r3, #7
 80051be:	62bb      	str	r3, [r7, #40]	; 0x28
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	2b7f      	cmp	r3, #127	; 0x7f
 80051c4:	d8f0      	bhi.n	80051a8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
 80051da:	4b34      	ldr	r3, [pc, #208]	; (80052ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	623b      	str	r3, [r7, #32]
 80051e0:	e00b      	b.n	80051fa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	1c59      	adds	r1, r3, #1
 80051ea:	6279      	str	r1, [r7, #36]	; 0x24
 80051ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	09db      	lsrs	r3, r3, #7
 80051f8:	623b      	str	r3, [r7, #32]
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	2b7f      	cmp	r3, #127	; 0x7f
 80051fe:	d8f0      	bhi.n	80051e2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	627a      	str	r2, [r7, #36]	; 0x24
 8005206:	6a3a      	ldr	r2, [r7, #32]
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	4b25      	ldr	r3, [pc, #148]	; (80052ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	e00b      	b.n	8005234 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	b2da      	uxtb	r2, r3
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	1c59      	adds	r1, r3, #1
 8005224:	61f9      	str	r1, [r7, #28]
 8005226:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	09db      	lsrs	r3, r3, #7
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b7f      	cmp	r3, #127	; 0x7f
 8005238:	d8f0      	bhi.n	800521c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	61fa      	str	r2, [r7, #28]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	2300      	movs	r3, #0
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	e00b      	b.n	800526c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	1c59      	adds	r1, r3, #1
 800525c:	6179      	str	r1, [r7, #20]
 800525e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	09db      	lsrs	r3, r3, #7
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	2b7f      	cmp	r3, #127	; 0x7f
 8005270:	d8f0      	bhi.n	8005254 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	617a      	str	r2, [r7, #20]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005282:	2218      	movs	r2, #24
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	68b8      	ldr	r0, [r7, #8]
 8005288:	f7ff fb6e 	bl	8004968 <_SendPacket>
  RECORD_END();
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800529a:	4b04      	ldr	r3, [pc, #16]	; (80052ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	4798      	blx	r3
  }
}
 80052a0:	bf00      	nop
 80052a2:	3730      	adds	r7, #48	; 0x30
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	2001327c 	.word	0x2001327c
 80052ac:	2001324c 	.word	0x2001324c

080052b0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b092      	sub	sp, #72	; 0x48
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80052b8:	f3ef 8311 	mrs	r3, BASEPRI
 80052bc:	f04f 0120 	mov.w	r1, #32
 80052c0:	f381 8811 	msr	BASEPRI, r1
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	486a      	ldr	r0, [pc, #424]	; (8005470 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80052c8:	f7ff fa60 	bl	800478c <_PreparePacket>
 80052cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	647b      	str	r3, [r7, #68]	; 0x44
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	4b66      	ldr	r3, [pc, #408]	; (8005474 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	643b      	str	r3, [r7, #64]	; 0x40
 80052e2:	e00b      	b.n	80052fc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80052e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ea:	1c59      	adds	r1, r3, #1
 80052ec:	6479      	str	r1, [r7, #68]	; 0x44
 80052ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f8:	09db      	lsrs	r3, r3, #7
 80052fa:	643b      	str	r3, [r7, #64]	; 0x40
 80052fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005300:	d8f0      	bhi.n	80052e4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	647a      	str	r2, [r7, #68]	; 0x44
 8005308:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005310:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	63bb      	str	r3, [r7, #56]	; 0x38
 800531c:	e00b      	b.n	8005336 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	b2da      	uxtb	r2, r3
 8005322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005324:	1c59      	adds	r1, r3, #1
 8005326:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005328:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800532c:	b2d2      	uxtb	r2, r2
 800532e:	701a      	strb	r2, [r3, #0]
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	09db      	lsrs	r3, r3, #7
 8005334:	63bb      	str	r3, [r7, #56]	; 0x38
 8005336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005338:	2b7f      	cmp	r3, #127	; 0x7f
 800533a:	d8f0      	bhi.n	800531e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800533c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	701a      	strb	r2, [r3, #0]
 8005348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2220      	movs	r2, #32
 8005352:	4619      	mov	r1, r3
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f7ff f9c9 	bl	80046ec <_EncodeStr>
 800535a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800535c:	2209      	movs	r2, #9
 800535e:	68f9      	ldr	r1, [r7, #12]
 8005360:	6938      	ldr	r0, [r7, #16]
 8005362:	f7ff fb01 	bl	8004968 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	637b      	str	r3, [r7, #52]	; 0x34
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b40      	ldr	r3, [pc, #256]	; (8005474 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	633b      	str	r3, [r7, #48]	; 0x30
 800537a:	e00b      	b.n	8005394 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	b2da      	uxtb	r2, r3
 8005380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005382:	1c59      	adds	r1, r3, #1
 8005384:	6379      	str	r1, [r7, #52]	; 0x34
 8005386:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	09db      	lsrs	r3, r3, #7
 8005392:	633b      	str	r3, [r7, #48]	; 0x30
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	2b7f      	cmp	r3, #127	; 0x7f
 8005398:	d8f0      	bhi.n	800537c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800539a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	637a      	str	r2, [r7, #52]	; 0x34
 80053a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80053b4:	e00b      	b.n	80053ce <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053bc:	1c59      	adds	r1, r3, #1
 80053be:	62f9      	str	r1, [r7, #44]	; 0x2c
 80053c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	701a      	strb	r2, [r3, #0]
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	09db      	lsrs	r3, r3, #7
 80053cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	2b7f      	cmp	r3, #127	; 0x7f
 80053d2:	d8f0      	bhi.n	80053b6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	701a      	strb	r2, [r3, #0]
 80053e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	623b      	str	r3, [r7, #32]
 80053ee:	e00b      	b.n	8005408 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	1c59      	adds	r1, r3, #1
 80053f8:	6279      	str	r1, [r7, #36]	; 0x24
 80053fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	09db      	lsrs	r3, r3, #7
 8005406:	623b      	str	r3, [r7, #32]
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	2b7f      	cmp	r3, #127	; 0x7f
 800540c:	d8f0      	bhi.n	80053f0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	627a      	str	r2, [r7, #36]	; 0x24
 8005414:	6a3a      	ldr	r2, [r7, #32]
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	2300      	movs	r3, #0
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	e00b      	b.n	8005440 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	1c59      	adds	r1, r3, #1
 8005430:	61f9      	str	r1, [r7, #28]
 8005432:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	09db      	lsrs	r3, r3, #7
 800543e:	61bb      	str	r3, [r7, #24]
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2b7f      	cmp	r3, #127	; 0x7f
 8005444:	d8f0      	bhi.n	8005428 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	61fa      	str	r2, [r7, #28]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005456:	2215      	movs	r2, #21
 8005458:	68f9      	ldr	r1, [r7, #12]
 800545a:	6938      	ldr	r0, [r7, #16]
 800545c:	f7ff fa84 	bl	8004968 <_SendPacket>
  RECORD_END();
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f383 8811 	msr	BASEPRI, r3
}
 8005466:	bf00      	nop
 8005468:	3748      	adds	r7, #72	; 0x48
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	2001327c 	.word	0x2001327c
 8005474:	2001324c 	.word	0x2001324c

08005478 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800547c:	4b07      	ldr	r3, [pc, #28]	; (800549c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005484:	4b05      	ldr	r3, [pc, #20]	; (800549c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800548e:	4b03      	ldr	r3, [pc, #12]	; (800549c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	4798      	blx	r3
  }
}
 8005496:	bf00      	nop
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	2001324c 	.word	0x2001324c

080054a0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80054a6:	4b15      	ldr	r3, [pc, #84]	; (80054fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d01a      	beq.n	80054e4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80054ae:	4b13      	ldr	r3, [pc, #76]	; (80054fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d015      	beq.n	80054e4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80054b8:	4b10      	ldr	r3, [pc, #64]	; (80054fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4798      	blx	r3
 80054c0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054c4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80054c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	f04f 0300 	mov.w	r3, #0
 80054d2:	000a      	movs	r2, r1
 80054d4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054d6:	4613      	mov	r3, r2
 80054d8:	461a      	mov	r2, r3
 80054da:	4621      	mov	r1, r4
 80054dc:	200d      	movs	r0, #13
 80054de:	f7ff fc0b 	bl	8004cf8 <SEGGER_SYSVIEW_RecordU32x2>
 80054e2:	e006      	b.n	80054f2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80054e4:	4b06      	ldr	r3, [pc, #24]	; (8005500 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4619      	mov	r1, r3
 80054ea:	200c      	movs	r0, #12
 80054ec:	f7ff fbc8 	bl	8004c80 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd90      	pop	{r4, r7, pc}
 80054fa:	bf00      	nop
 80054fc:	2001324c 	.word	0x2001324c
 8005500:	e0001004 	.word	0xe0001004

08005504 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800550a:	f3ef 8311 	mrs	r3, BASEPRI
 800550e:	f04f 0120 	mov.w	r1, #32
 8005512:	f381 8811 	msr	BASEPRI, r1
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	4819      	ldr	r0, [pc, #100]	; (8005580 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800551a:	f7ff f937 	bl	800478c <_PreparePacket>
 800551e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005524:	4b17      	ldr	r3, [pc, #92]	; (8005584 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	613b      	str	r3, [r7, #16]
 8005536:	e00b      	b.n	8005550 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	b2da      	uxtb	r2, r3
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	1c59      	adds	r1, r3, #1
 8005540:	6179      	str	r1, [r7, #20]
 8005542:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	09db      	lsrs	r3, r3, #7
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b7f      	cmp	r3, #127	; 0x7f
 8005554:	d8f0      	bhi.n	8005538 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	617a      	str	r2, [r7, #20]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005566:	2202      	movs	r2, #2
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	68b8      	ldr	r0, [r7, #8]
 800556c:	f7ff f9fc 	bl	8004968 <_SendPacket>
  RECORD_END();
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f383 8811 	msr	BASEPRI, r3
}
 8005576:	bf00      	nop
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	2001327c 	.word	0x2001327c
 8005584:	e000ed04 	.word	0xe000ed04

08005588 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800558e:	f3ef 8311 	mrs	r3, BASEPRI
 8005592:	f04f 0120 	mov.w	r1, #32
 8005596:	f381 8811 	msr	BASEPRI, r1
 800559a:	607b      	str	r3, [r7, #4]
 800559c:	4807      	ldr	r0, [pc, #28]	; (80055bc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800559e:	f7ff f8f5 	bl	800478c <_PreparePacket>
 80055a2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80055a4:	2203      	movs	r2, #3
 80055a6:	6839      	ldr	r1, [r7, #0]
 80055a8:	6838      	ldr	r0, [r7, #0]
 80055aa:	f7ff f9dd 	bl	8004968 <_SendPacket>
  RECORD_END();
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f383 8811 	msr	BASEPRI, r3
}
 80055b4:	bf00      	nop
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	2001327c 	.word	0x2001327c

080055c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055c6:	f3ef 8311 	mrs	r3, BASEPRI
 80055ca:	f04f 0120 	mov.w	r1, #32
 80055ce:	f381 8811 	msr	BASEPRI, r1
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	4807      	ldr	r0, [pc, #28]	; (80055f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80055d6:	f7ff f8d9 	bl	800478c <_PreparePacket>
 80055da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80055dc:	2212      	movs	r2, #18
 80055de:	6839      	ldr	r1, [r7, #0]
 80055e0:	6838      	ldr	r0, [r7, #0]
 80055e2:	f7ff f9c1 	bl	8004968 <_SendPacket>
  RECORD_END();
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f383 8811 	msr	BASEPRI, r3
}
 80055ec:	bf00      	nop
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	2001327c 	.word	0x2001327c

080055f8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005602:	f04f 0120 	mov.w	r1, #32
 8005606:	f381 8811 	msr	BASEPRI, r1
 800560a:	607b      	str	r3, [r7, #4]
 800560c:	4807      	ldr	r0, [pc, #28]	; (800562c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800560e:	f7ff f8bd 	bl	800478c <_PreparePacket>
 8005612:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005614:	2211      	movs	r2, #17
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	6838      	ldr	r0, [r7, #0]
 800561a:	f7ff f9a5 	bl	8004968 <_SendPacket>
  RECORD_END();
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f383 8811 	msr	BASEPRI, r3
}
 8005624:	bf00      	nop
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	2001327c 	.word	0x2001327c

08005630 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005638:	f3ef 8311 	mrs	r3, BASEPRI
 800563c:	f04f 0120 	mov.w	r1, #32
 8005640:	f381 8811 	msr	BASEPRI, r1
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	4819      	ldr	r0, [pc, #100]	; (80056ac <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005648:	f7ff f8a0 	bl	800478c <_PreparePacket>
 800564c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005652:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	61fb      	str	r3, [r7, #28]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	61bb      	str	r3, [r7, #24]
 8005664:	e00b      	b.n	800567e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	b2da      	uxtb	r2, r3
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	1c59      	adds	r1, r3, #1
 800566e:	61f9      	str	r1, [r7, #28]
 8005670:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	09db      	lsrs	r3, r3, #7
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	2b7f      	cmp	r3, #127	; 0x7f
 8005682:	d8f0      	bhi.n	8005666 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	61fa      	str	r2, [r7, #28]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	701a      	strb	r2, [r3, #0]
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005694:	2208      	movs	r2, #8
 8005696:	68f9      	ldr	r1, [r7, #12]
 8005698:	6938      	ldr	r0, [r7, #16]
 800569a:	f7ff f965 	bl	8004968 <_SendPacket>
  RECORD_END();
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f383 8811 	msr	BASEPRI, r3
}
 80056a4:	bf00      	nop
 80056a6:	3720      	adds	r7, #32
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	2001327c 	.word	0x2001327c
 80056b0:	2001324c 	.word	0x2001324c

080056b4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056bc:	f3ef 8311 	mrs	r3, BASEPRI
 80056c0:	f04f 0120 	mov.w	r1, #32
 80056c4:	f381 8811 	msr	BASEPRI, r1
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	4819      	ldr	r0, [pc, #100]	; (8005730 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80056cc:	f7ff f85e 	bl	800478c <_PreparePacket>
 80056d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056d6:	4b17      	ldr	r3, [pc, #92]	; (8005734 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	61fb      	str	r3, [r7, #28]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	61bb      	str	r3, [r7, #24]
 80056e8:	e00b      	b.n	8005702 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	1c59      	adds	r1, r3, #1
 80056f2:	61f9      	str	r1, [r7, #28]
 80056f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	09db      	lsrs	r3, r3, #7
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	2b7f      	cmp	r3, #127	; 0x7f
 8005706:	d8f0      	bhi.n	80056ea <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	61fa      	str	r2, [r7, #28]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005718:	2204      	movs	r2, #4
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	6938      	ldr	r0, [r7, #16]
 800571e:	f7ff f923 	bl	8004968 <_SendPacket>
  RECORD_END();
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f383 8811 	msr	BASEPRI, r3
}
 8005728:	bf00      	nop
 800572a:	3720      	adds	r7, #32
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	2001327c 	.word	0x2001327c
 8005734:	2001324c 	.word	0x2001324c

08005738 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005740:	f3ef 8311 	mrs	r3, BASEPRI
 8005744:	f04f 0120 	mov.w	r1, #32
 8005748:	f381 8811 	msr	BASEPRI, r1
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	4819      	ldr	r0, [pc, #100]	; (80057b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005750:	f7ff f81c 	bl	800478c <_PreparePacket>
 8005754:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800575a:	4b17      	ldr	r3, [pc, #92]	; (80057b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	61fb      	str	r3, [r7, #28]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	61bb      	str	r3, [r7, #24]
 800576c:	e00b      	b.n	8005786 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	1c59      	adds	r1, r3, #1
 8005776:	61f9      	str	r1, [r7, #28]
 8005778:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	701a      	strb	r2, [r3, #0]
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	09db      	lsrs	r3, r3, #7
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	2b7f      	cmp	r3, #127	; 0x7f
 800578a:	d8f0      	bhi.n	800576e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	61fa      	str	r2, [r7, #28]
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800579c:	2206      	movs	r2, #6
 800579e:	68f9      	ldr	r1, [r7, #12]
 80057a0:	6938      	ldr	r0, [r7, #16]
 80057a2:	f7ff f8e1 	bl	8004968 <_SendPacket>
  RECORD_END();
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f383 8811 	msr	BASEPRI, r3
}
 80057ac:	bf00      	nop
 80057ae:	3720      	adds	r7, #32
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	2001327c 	.word	0x2001327c
 80057b8:	2001324c 	.word	0x2001324c

080057bc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08a      	sub	sp, #40	; 0x28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057c6:	f3ef 8311 	mrs	r3, BASEPRI
 80057ca:	f04f 0120 	mov.w	r1, #32
 80057ce:	f381 8811 	msr	BASEPRI, r1
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	4827      	ldr	r0, [pc, #156]	; (8005874 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80057d6:	f7fe ffd9 	bl	800478c <_PreparePacket>
 80057da:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057e0:	4b25      	ldr	r3, [pc, #148]	; (8005878 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	623b      	str	r3, [r7, #32]
 80057f2:	e00b      	b.n	800580c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	1c59      	adds	r1, r3, #1
 80057fc:	6279      	str	r1, [r7, #36]	; 0x24
 80057fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	09db      	lsrs	r3, r3, #7
 800580a:	623b      	str	r3, [r7, #32]
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	2b7f      	cmp	r3, #127	; 0x7f
 8005810:	d8f0      	bhi.n	80057f4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	627a      	str	r2, [r7, #36]	; 0x24
 8005818:	6a3a      	ldr	r2, [r7, #32]
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	61bb      	str	r3, [r7, #24]
 800582a:	e00b      	b.n	8005844 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	b2da      	uxtb	r2, r3
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	1c59      	adds	r1, r3, #1
 8005834:	61f9      	str	r1, [r7, #28]
 8005836:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	09db      	lsrs	r3, r3, #7
 8005842:	61bb      	str	r3, [r7, #24]
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	2b7f      	cmp	r3, #127	; 0x7f
 8005848:	d8f0      	bhi.n	800582c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	61fa      	str	r2, [r7, #28]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800585a:	2207      	movs	r2, #7
 800585c:	68f9      	ldr	r1, [r7, #12]
 800585e:	6938      	ldr	r0, [r7, #16]
 8005860:	f7ff f882 	bl	8004968 <_SendPacket>
  RECORD_END();
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f383 8811 	msr	BASEPRI, r3
}
 800586a:	bf00      	nop
 800586c:	3728      	adds	r7, #40	; 0x28
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	2001327c 	.word	0x2001327c
 8005878:	2001324c 	.word	0x2001324c

0800587c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005884:	4b04      	ldr	r3, [pc, #16]	; (8005898 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	1ad3      	subs	r3, r2, r3
}
 800588c:	4618      	mov	r0, r3
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	2001324c 	.word	0x2001324c

0800589c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800589c:	b580      	push	{r7, lr}
 800589e:	b08c      	sub	sp, #48	; 0x30
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	4603      	mov	r3, r0
 80058a4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80058a6:	4b3b      	ldr	r3, [pc, #236]	; (8005994 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d06d      	beq.n	800598a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80058ae:	4b39      	ldr	r3, [pc, #228]	; (8005994 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80058b4:	2300      	movs	r3, #0
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058b8:	e008      	b.n	80058cc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80058ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80058c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	3301      	adds	r3, #1
 80058ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d3f2      	bcc.n	80058ba <SEGGER_SYSVIEW_SendModule+0x1e>
 80058d4:	e000      	b.n	80058d8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80058d6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80058d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d055      	beq.n	800598a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058de:	f3ef 8311 	mrs	r3, BASEPRI
 80058e2:	f04f 0120 	mov.w	r1, #32
 80058e6:	f381 8811 	msr	BASEPRI, r1
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	482a      	ldr	r0, [pc, #168]	; (8005998 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80058ee:	f7fe ff4d 	bl	800478c <_PreparePacket>
 80058f2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	623b      	str	r3, [r7, #32]
 8005900:	e00b      	b.n	800591a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	b2da      	uxtb	r2, r3
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	1c59      	adds	r1, r3, #1
 800590a:	6279      	str	r1, [r7, #36]	; 0x24
 800590c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	09db      	lsrs	r3, r3, #7
 8005918:	623b      	str	r3, [r7, #32]
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	2b7f      	cmp	r3, #127	; 0x7f
 800591e:	d8f0      	bhi.n	8005902 <SEGGER_SYSVIEW_SendModule+0x66>
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	627a      	str	r2, [r7, #36]	; 0x24
 8005926:	6a3a      	ldr	r2, [r7, #32]
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	61fb      	str	r3, [r7, #28]
 8005934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	e00b      	b.n	8005954 <SEGGER_SYSVIEW_SendModule+0xb8>
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	b2da      	uxtb	r2, r3
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	1c59      	adds	r1, r3, #1
 8005944:	61f9      	str	r1, [r7, #28]
 8005946:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	09db      	lsrs	r3, r3, #7
 8005952:	61bb      	str	r3, [r7, #24]
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	2b7f      	cmp	r3, #127	; 0x7f
 8005958:	d8f0      	bhi.n	800593c <SEGGER_SYSVIEW_SendModule+0xa0>
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	61fa      	str	r2, [r7, #28]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800596a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2280      	movs	r2, #128	; 0x80
 8005970:	4619      	mov	r1, r3
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7fe feba 	bl	80046ec <_EncodeStr>
 8005978:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800597a:	2216      	movs	r2, #22
 800597c:	68f9      	ldr	r1, [r7, #12]
 800597e:	6938      	ldr	r0, [r7, #16]
 8005980:	f7fe fff2 	bl	8004968 <_SendPacket>
      RECORD_END();
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800598a:	bf00      	nop
 800598c:	3730      	adds	r7, #48	; 0x30
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20013274 	.word	0x20013274
 8005998:	2001327c 	.word	0x2001327c

0800599c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80059a2:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00f      	beq.n	80059ca <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80059aa:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f2      	bne.n	80059b0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80059ca:	bf00      	nop
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20013274 	.word	0x20013274

080059d8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80059de:	f3ef 8311 	mrs	r3, BASEPRI
 80059e2:	f04f 0120 	mov.w	r1, #32
 80059e6:	f381 8811 	msr	BASEPRI, r1
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	4817      	ldr	r0, [pc, #92]	; (8005a4c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80059ee:	f7fe fecd 	bl	800478c <_PreparePacket>
 80059f2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	4b14      	ldr	r3, [pc, #80]	; (8005a50 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	613b      	str	r3, [r7, #16]
 8005a02:	e00b      	b.n	8005a1c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	1c59      	adds	r1, r3, #1
 8005a0c:	6179      	str	r1, [r7, #20]
 8005a0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	09db      	lsrs	r3, r3, #7
 8005a1a:	613b      	str	r3, [r7, #16]
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a20:	d8f0      	bhi.n	8005a04 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	617a      	str	r2, [r7, #20]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005a32:	221b      	movs	r2, #27
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	68b8      	ldr	r0, [r7, #8]
 8005a38:	f7fe ff96 	bl	8004968 <_SendPacket>
  RECORD_END();
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f383 8811 	msr	BASEPRI, r3
}
 8005a42:	bf00      	nop
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	2001327c 	.word	0x2001327c
 8005a50:	20013278 	.word	0x20013278

08005a54 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08a      	sub	sp, #40	; 0x28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a5c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a60:	f04f 0120 	mov.w	r1, #32
 8005a64:	f381 8811 	msr	BASEPRI, r1
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	4827      	ldr	r0, [pc, #156]	; (8005b08 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005a6c:	f7fe fe8e 	bl	800478c <_PreparePacket>
 8005a70:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a72:	2280      	movs	r2, #128	; 0x80
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	6938      	ldr	r0, [r7, #16]
 8005a78:	f7fe fe38 	bl	80046ec <_EncodeStr>
 8005a7c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
 8005a82:	2301      	movs	r3, #1
 8005a84:	623b      	str	r3, [r7, #32]
 8005a86:	e00b      	b.n	8005aa0 <SEGGER_SYSVIEW_Warn+0x4c>
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	1c59      	adds	r1, r3, #1
 8005a90:	6279      	str	r1, [r7, #36]	; 0x24
 8005a92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	09db      	lsrs	r3, r3, #7
 8005a9e:	623b      	str	r3, [r7, #32]
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8005aa4:	d8f0      	bhi.n	8005a88 <SEGGER_SYSVIEW_Warn+0x34>
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	627a      	str	r2, [r7, #36]	; 0x24
 8005aac:	6a3a      	ldr	r2, [r7, #32]
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	61fb      	str	r3, [r7, #28]
 8005aba:	2300      	movs	r3, #0
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	e00b      	b.n	8005ad8 <SEGGER_SYSVIEW_Warn+0x84>
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	1c59      	adds	r1, r3, #1
 8005ac8:	61f9      	str	r1, [r7, #28]
 8005aca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	09db      	lsrs	r3, r3, #7
 8005ad6:	61bb      	str	r3, [r7, #24]
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b7f      	cmp	r3, #127	; 0x7f
 8005adc:	d8f0      	bhi.n	8005ac0 <SEGGER_SYSVIEW_Warn+0x6c>
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	61fa      	str	r2, [r7, #28]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005aee:	221a      	movs	r2, #26
 8005af0:	68f9      	ldr	r1, [r7, #12]
 8005af2:	6938      	ldr	r0, [r7, #16]
 8005af4:	f7fe ff38 	bl	8004968 <_SendPacket>
  RECORD_END();
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f383 8811 	msr	BASEPRI, r3
}
 8005afe:	bf00      	nop
 8005b00:	3728      	adds	r7, #40	; 0x28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	2001327c 	.word	0x2001327c

08005b0c <__libc_init_array>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	4d0d      	ldr	r5, [pc, #52]	; (8005b44 <__libc_init_array+0x38>)
 8005b10:	4c0d      	ldr	r4, [pc, #52]	; (8005b48 <__libc_init_array+0x3c>)
 8005b12:	1b64      	subs	r4, r4, r5
 8005b14:	10a4      	asrs	r4, r4, #2
 8005b16:	2600      	movs	r6, #0
 8005b18:	42a6      	cmp	r6, r4
 8005b1a:	d109      	bne.n	8005b30 <__libc_init_array+0x24>
 8005b1c:	4d0b      	ldr	r5, [pc, #44]	; (8005b4c <__libc_init_array+0x40>)
 8005b1e:	4c0c      	ldr	r4, [pc, #48]	; (8005b50 <__libc_init_array+0x44>)
 8005b20:	f000 f83c 	bl	8005b9c <_init>
 8005b24:	1b64      	subs	r4, r4, r5
 8005b26:	10a4      	asrs	r4, r4, #2
 8005b28:	2600      	movs	r6, #0
 8005b2a:	42a6      	cmp	r6, r4
 8005b2c:	d105      	bne.n	8005b3a <__libc_init_array+0x2e>
 8005b2e:	bd70      	pop	{r4, r5, r6, pc}
 8005b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b34:	4798      	blx	r3
 8005b36:	3601      	adds	r6, #1
 8005b38:	e7ee      	b.n	8005b18 <__libc_init_array+0xc>
 8005b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3e:	4798      	blx	r3
 8005b40:	3601      	adds	r6, #1
 8005b42:	e7f2      	b.n	8005b2a <__libc_init_array+0x1e>
 8005b44:	08005c90 	.word	0x08005c90
 8005b48:	08005c90 	.word	0x08005c90
 8005b4c:	08005c90 	.word	0x08005c90
 8005b50:	08005c94 	.word	0x08005c94

08005b54 <memcmp>:
 8005b54:	b530      	push	{r4, r5, lr}
 8005b56:	3901      	subs	r1, #1
 8005b58:	2400      	movs	r4, #0
 8005b5a:	42a2      	cmp	r2, r4
 8005b5c:	d101      	bne.n	8005b62 <memcmp+0xe>
 8005b5e:	2000      	movs	r0, #0
 8005b60:	e005      	b.n	8005b6e <memcmp+0x1a>
 8005b62:	5d03      	ldrb	r3, [r0, r4]
 8005b64:	3401      	adds	r4, #1
 8005b66:	5d0d      	ldrb	r5, [r1, r4]
 8005b68:	42ab      	cmp	r3, r5
 8005b6a:	d0f6      	beq.n	8005b5a <memcmp+0x6>
 8005b6c:	1b58      	subs	r0, r3, r5
 8005b6e:	bd30      	pop	{r4, r5, pc}

08005b70 <memcpy>:
 8005b70:	440a      	add	r2, r1
 8005b72:	4291      	cmp	r1, r2
 8005b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b78:	d100      	bne.n	8005b7c <memcpy+0xc>
 8005b7a:	4770      	bx	lr
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b86:	4291      	cmp	r1, r2
 8005b88:	d1f9      	bne.n	8005b7e <memcpy+0xe>
 8005b8a:	bd10      	pop	{r4, pc}

08005b8c <memset>:
 8005b8c:	4402      	add	r2, r0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d100      	bne.n	8005b96 <memset+0xa>
 8005b94:	4770      	bx	lr
 8005b96:	f803 1b01 	strb.w	r1, [r3], #1
 8005b9a:	e7f9      	b.n	8005b90 <memset+0x4>

08005b9c <_init>:
 8005b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9e:	bf00      	nop
 8005ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba2:	bc08      	pop	{r3}
 8005ba4:	469e      	mov	lr, r3
 8005ba6:	4770      	bx	lr

08005ba8 <_fini>:
 8005ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005baa:	bf00      	nop
 8005bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bae:	bc08      	pop	{r3}
 8005bb0:	469e      	mov	lr, r3
 8005bb2:	4770      	bx	lr
