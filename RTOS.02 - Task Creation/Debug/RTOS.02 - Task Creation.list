
RTOS.02 - Task Creation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08006768  08006768  00016768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006908  08006908  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006908  08006908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006910  08006910  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000144a4  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001451c  2001451c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019fd8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003373  00000000  00000000  0003a080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  0003d3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d0  00000000  00000000  0003e750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024473  00000000  00000000  0003f920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000155a2  00000000  00000000  00063d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8a48  00000000  00000000  00079335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00151d7d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056f8  00000000  00000000  00151dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006750 	.word	0x08006750

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006750 	.word	0x08006750

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20014464 	.word	0x20014464

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fa05 	bl	8000970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f84f 	bl	8000608 <SystemClock_Config>

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  //enable the cycle counting
  DWT_CTRL |= (1<<0);
 800056a:	4b20      	ldr	r3, [pc, #128]	; (80005ec <main+0x90>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a1f      	ldr	r2, [pc, #124]	; (80005ec <main+0x90>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6013      	str	r3, [r2, #0]

  //starting segger recording
  SEGGER_SYSVIEW_Conf();
 8000576:	f003 fd35 	bl	8003fe4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800057a:	f004 fe01 	bl	8005180 <SEGGER_SYSVIEW_Start>

  //starting tasks
  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello - T1", 2, &task1_handle);
 800057e:	f107 0308 	add.w	r3, r7, #8
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2302      	movs	r3, #2
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <main+0x94>)
 800058a:	22c8      	movs	r2, #200	; 0xc8
 800058c:	4919      	ldr	r1, [pc, #100]	; (80005f4 <main+0x98>)
 800058e:	481a      	ldr	r0, [pc, #104]	; (80005f8 <main+0x9c>)
 8000590:	f001 fde6 	bl	8002160 <xTaskCreate>
 8000594:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d00a      	beq.n	80005b2 <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800059c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a0:	f383 8811 	msr	BASEPRI, r3
 80005a4:	f3bf 8f6f 	isb	sy
 80005a8:	f3bf 8f4f 	dsb	sy
 80005ac:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ae:	bf00      	nop
 80005b0:	e7fe      	b.n	80005b0 <main+0x54>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello - T2", 2, &task2_handle);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2302      	movs	r3, #2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <main+0xa0>)
 80005bc:	22c8      	movs	r2, #200	; 0xc8
 80005be:	4910      	ldr	r1, [pc, #64]	; (8000600 <main+0xa4>)
 80005c0:	4810      	ldr	r0, [pc, #64]	; (8000604 <main+0xa8>)
 80005c2:	f001 fdcd 	bl	8002160 <xTaskCreate>
 80005c6:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d00a      	beq.n	80005e4 <main+0x88>
        __asm volatile
 80005ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d2:	f383 8811 	msr	BASEPRI, r3
 80005d6:	f3bf 8f6f 	isb	sy
 80005da:	f3bf 8f4f 	dsb	sy
 80005de:	60fb      	str	r3, [r7, #12]
    }
 80005e0:	bf00      	nop
 80005e2:	e7fe      	b.n	80005e2 <main+0x86>

  // start the scheduler
  vTaskStartScheduler();
 80005e4:	f001 ff56 	bl	8002494 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x8c>
 80005ea:	bf00      	nop
 80005ec:	e0001000 	.word	0xe0001000
 80005f0:	08006768 	.word	0x08006768
 80005f4:	08006774 	.word	0x08006774
 80005f8:	080006c5 	.word	0x080006c5
 80005fc:	0800677c 	.word	0x0800677c
 8000600:	08006788 	.word	0x08006788
 8000604:	080006d5 	.word	0x080006d5

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f005 fbd0 	bl	8005dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <SystemClock_Config+0xb4>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xb4>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xb4>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <SystemClock_Config+0xb8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a1b      	ldr	r2, [pc, #108]	; (80006c0 <SystemClock_Config+0xb8>)
 8000652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <SystemClock_Config+0xb8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000670:	2300      	movs	r3, #0
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fa9d 	bl	8000bb8 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000684:	f000 f840 	bl	8000708 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fd00 	bl	80010a8 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ae:	f000 f82b 	bl	8000708 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	; 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void*  parameters)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	//char msg[100];
	while (1)
	{
//		snprintf(msg,100,"%s\n", (char*)parameters);
//		SEGGER_SYSVIEW_PrintTarger(msg);
		printf("%s\n", (char*)parameters);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f005 fbeb 	bl	8005ea8 <puts>
 80006d2:	e7fb      	b.n	80006cc <task1_handler+0x8>

080006d4 <task2_handler>:
		//taskYIELD();
	}
}
static void task2_handler(void*  parameters)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	//char msg[100];
	while (1)
		{
	//		snprintf(msg,100,"%s\n", (char*)parameters);
	//		SEGGER_SYSVIEW_PrintTarger(msg);
			printf("%s\n", (char*)parameters);
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f005 fbe3 	bl	8005ea8 <puts>
 80006e2:	e7fb      	b.n	80006dc <task2_handler+0x8>

080006e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d101      	bne.n	80006fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006f6:	f000 f95d 	bl	80009b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40000800 	.word	0x40000800

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x8>
	...

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <HAL_MspInit+0x4c>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	4a0f      	ldr	r2, [pc, #60]	; (8000760 <HAL_MspInit+0x4c>)
 8000724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000728:	6453      	str	r3, [r2, #68]	; 0x44
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <HAL_MspInit+0x4c>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_MspInit+0x4c>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	4a08      	ldr	r2, [pc, #32]	; (8000760 <HAL_MspInit+0x4c>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	6413      	str	r3, [r2, #64]	; 0x40
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_MspInit+0x4c>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 8000752:	f003 f891 	bl	8003878 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800

08000764 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000774:	2200      	movs	r2, #0
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	2036      	movs	r0, #54	; 0x36
 800077a:	f000 f9f3 	bl	8000b64 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800077e:	2036      	movs	r0, #54	; 0x36
 8000780:	f000 fa0c 	bl	8000b9c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <HAL_InitTick+0xa0>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <HAL_InitTick+0xa0>)
 800078e:	f043 0310 	orr.w	r3, r3, #16
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <HAL_InitTick+0xa0>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 0310 	and.w	r3, r3, #16
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007a0:	f107 0210 	add.w	r2, r7, #16
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4611      	mov	r1, r2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fe38 	bl	8001420 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007b0:	f000 fe22 	bl	80013f8 <HAL_RCC_GetPCLK1Freq>
 80007b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b8:	4a13      	ldr	r2, [pc, #76]	; (8000808 <HAL_InitTick+0xa4>)
 80007ba:	fba2 2303 	umull	r2, r3, r2, r3
 80007be:	0c9b      	lsrs	r3, r3, #18
 80007c0:	3b01      	subs	r3, #1
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <HAL_InitTick+0xa8>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <HAL_InitTick+0xac>)
 80007c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <HAL_InitTick+0xa8>)
 80007cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <HAL_InitTick+0xa8>)
 80007d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <HAL_InitTick+0xa8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <HAL_InitTick+0xa8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <HAL_InitTick+0xa8>)
 80007e6:	f000 fe4d 	bl	8001484 <HAL_TIM_Base_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d104      	bne.n	80007fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80007f0:	4806      	ldr	r0, [pc, #24]	; (800080c <HAL_InitTick+0xa8>)
 80007f2:	f000 fea1 	bl	8001538 <HAL_TIM_Base_Start_IT>
 80007f6:	4603      	mov	r3, r0
 80007f8:	e000      	b.n	80007fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3730      	adds	r7, #48	; 0x30
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	431bde83 	.word	0x431bde83
 800080c:	200143d8 	.word	0x200143d8
 8000810:	40001000 	.word	0x40001000

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <NMI_Handler+0x4>

0800081a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <HardFault_Handler+0x4>

08000820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <MemManage_Handler+0x4>

08000826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <BusFault_Handler+0x4>

0800082c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <UsageFault_Handler+0x4>

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <TIM6_DAC_IRQHandler+0x10>)
 8000846:	f000 fee7 	bl	8001618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200143d8 	.word	0x200143d8

08000854 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	e00a      	b.n	800087c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000866:	f3af 8000 	nop.w
 800086a:	4601      	mov	r1, r0
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	60ba      	str	r2, [r7, #8]
 8000872:	b2ca      	uxtb	r2, r1
 8000874:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	3301      	adds	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	429a      	cmp	r2, r3
 8000882:	dbf0      	blt.n	8000866 <_read+0x12>
	}

return len;
 8000884:	687b      	ldr	r3, [r7, #4]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <_close>:
	}
	return len;
}

int _close(int file)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	return -1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b6:	605a      	str	r2, [r3, #4]
	return 0;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <_isatty>:

int _isatty(int file)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
	return 1;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
	return 0;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <SystemInit+0x20>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <SystemInit+0x20>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800091c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000922:	490e      	ldr	r1, [pc, #56]	; (800095c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000938:	4c0b      	ldr	r4, [pc, #44]	; (8000968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000946:	f7ff ffd7 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094a:	f005 f9f7 	bl	8005d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094e:	f7ff fe05 	bl	800055c <main>
  bx  lr    
 8000952:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000960:	08006918 	.word	0x08006918
  ldr r2, =_sbss
 8000964:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000968:	2001451c 	.word	0x2001451c

0800096c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <HAL_Init+0x40>)
 800097a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_Init+0x40>)
 8000986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_Init+0x40>)
 8000992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f8d8 	bl	8000b4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	200f      	movs	r0, #15
 80009a0:	f7ff fee0 	bl	8000764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff feb6 	bl	8000714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023c00 	.word	0x40023c00

080009b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x20>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x24>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_IncTick+0x24>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000008 	.word	0x20000008
 80009d8:	20014420 	.word	0x20014420

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <HAL_GetTick+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20014420 	.word	0x20014420

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	db0b      	blt.n	8000a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f003 021f 	and.w	r2, r3, #31
 8000a70:	4907      	ldr	r1, [pc, #28]	; (8000a90 <__NVIC_EnableIRQ+0x38>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	2001      	movs	r0, #1
 8000a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e100 	.word	0xe000e100

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4908      	ldr	r1, [pc, #32]	; (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3b04      	subs	r3, #4
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43da      	mvns	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43d9      	mvns	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	4313      	orrs	r3, r2
         );
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3724      	adds	r7, #36	; 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ff4c 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b76:	f7ff ff61 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000b7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	68b9      	ldr	r1, [r7, #8]
 8000b80:	6978      	ldr	r0, [r7, #20]
 8000b82:	f7ff ffb1 	bl	8000ae8 <NVIC_EncodePriority>
 8000b86:	4602      	mov	r2, r0
 8000b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff80 	bl	8000a94 <__NVIC_SetPriority>
}
 8000b94:	bf00      	nop
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff54 	bl	8000a58 <__NVIC_EnableIRQ>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e264      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d075      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bd6:	4ba3      	ldr	r3, [pc, #652]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f003 030c 	and.w	r3, r3, #12
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	d00c      	beq.n	8000bfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000be2:	4ba0      	ldr	r3, [pc, #640]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bea:	2b08      	cmp	r3, #8
 8000bec:	d112      	bne.n	8000c14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bee:	4b9d      	ldr	r3, [pc, #628]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bfa:	d10b      	bne.n	8000c14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bfc:	4b99      	ldr	r3, [pc, #612]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d05b      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x108>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d157      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e23f      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c1c:	d106      	bne.n	8000c2c <HAL_RCC_OscConfig+0x74>
 8000c1e:	4b91      	ldr	r3, [pc, #580]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a90      	ldr	r2, [pc, #576]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	e01d      	b.n	8000c68 <HAL_RCC_OscConfig+0xb0>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c34:	d10c      	bne.n	8000c50 <HAL_RCC_OscConfig+0x98>
 8000c36:	4b8b      	ldr	r3, [pc, #556]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a8a      	ldr	r2, [pc, #552]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	4b88      	ldr	r3, [pc, #544]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a87      	ldr	r2, [pc, #540]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e00b      	b.n	8000c68 <HAL_RCC_OscConfig+0xb0>
 8000c50:	4b84      	ldr	r3, [pc, #528]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a83      	ldr	r2, [pc, #524]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b81      	ldr	r3, [pc, #516]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a80      	ldr	r2, [pc, #512]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d013      	beq.n	8000c98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c70:	f7ff feb4 	bl	80009dc <HAL_GetTick>
 8000c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c76:	e008      	b.n	8000c8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c78:	f7ff feb0 	bl	80009dc <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b64      	cmp	r3, #100	; 0x64
 8000c84:	d901      	bls.n	8000c8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e204      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8a:	4b76      	ldr	r3, [pc, #472]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f0      	beq.n	8000c78 <HAL_RCC_OscConfig+0xc0>
 8000c96:	e014      	b.n	8000cc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c98:	f7ff fea0 	bl	80009dc <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ca0:	f7ff fe9c 	bl	80009dc <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b64      	cmp	r3, #100	; 0x64
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e1f0      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb2:	4b6c      	ldr	r3, [pc, #432]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f0      	bne.n	8000ca0 <HAL_RCC_OscConfig+0xe8>
 8000cbe:	e000      	b.n	8000cc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d063      	beq.n	8000d96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cce:	4b65      	ldr	r3, [pc, #404]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f003 030c 	and.w	r3, r3, #12
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00b      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cda:	4b62      	ldr	r3, [pc, #392]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d11c      	bne.n	8000d20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ce6:	4b5f      	ldr	r3, [pc, #380]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d116      	bne.n	8000d20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf2:	4b5c      	ldr	r3, [pc, #368]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d005      	beq.n	8000d0a <HAL_RCC_OscConfig+0x152>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d001      	beq.n	8000d0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e1c4      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0a:	4b56      	ldr	r3, [pc, #344]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	4952      	ldr	r1, [pc, #328]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1e:	e03a      	b.n	8000d96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d020      	beq.n	8000d6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d28:	4b4f      	ldr	r3, [pc, #316]	; (8000e68 <HAL_RCC_OscConfig+0x2b0>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fe55 	bl	80009dc <HAL_GetTick>
 8000d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d34:	e008      	b.n	8000d48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d36:	f7ff fe51 	bl	80009dc <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d901      	bls.n	8000d48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e1a5      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d48:	4b46      	ldr	r3, [pc, #280]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0f0      	beq.n	8000d36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d54:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	4940      	ldr	r1, [pc, #256]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000d64:	4313      	orrs	r3, r2
 8000d66:	600b      	str	r3, [r1, #0]
 8000d68:	e015      	b.n	8000d96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d6a:	4b3f      	ldr	r3, [pc, #252]	; (8000e68 <HAL_RCC_OscConfig+0x2b0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d70:	f7ff fe34 	bl	80009dc <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d78:	f7ff fe30 	bl	80009dc <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e184      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8a:	4b36      	ldr	r3, [pc, #216]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f0      	bne.n	8000d78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d030      	beq.n	8000e04 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d016      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000daa:	4b30      	ldr	r3, [pc, #192]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000db0:	f7ff fe14 	bl	80009dc <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000db8:	f7ff fe10 	bl	80009dc <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e164      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f0      	beq.n	8000db8 <HAL_RCC_OscConfig+0x200>
 8000dd6:	e015      	b.n	8000e04 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <HAL_RCC_OscConfig+0x2b4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dde:	f7ff fdfd 	bl	80009dc <HAL_GetTick>
 8000de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de4:	e008      	b.n	8000df8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000de6:	f7ff fdf9 	bl	80009dc <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d901      	bls.n	8000df8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e14d      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1f0      	bne.n	8000de6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f000 80a0 	beq.w	8000f52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10f      	bne.n	8000e42 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_RCC_OscConfig+0x2ac>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_RCC_OscConfig+0x2b8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d121      	bne.n	8000e92 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_RCC_OscConfig+0x2b8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_RCC_OscConfig+0x2b8>)
 8000e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e5a:	f7ff fdbf 	bl	80009dc <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e60:	e011      	b.n	8000e86 <HAL_RCC_OscConfig+0x2ce>
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	42470000 	.word	0x42470000
 8000e6c:	42470e80 	.word	0x42470e80
 8000e70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e74:	f7ff fdb2 	bl	80009dc <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e106      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e86:	4b85      	ldr	r3, [pc, #532]	; (800109c <HAL_RCC_OscConfig+0x4e4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f0      	beq.n	8000e74 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d106      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x2f0>
 8000e9a:	4b81      	ldr	r3, [pc, #516]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e9e:	4a80      	ldr	r2, [pc, #512]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8000ea6:	e01c      	b.n	8000ee2 <HAL_RCC_OscConfig+0x32a>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	2b05      	cmp	r3, #5
 8000eae:	d10c      	bne.n	8000eca <HAL_RCC_OscConfig+0x312>
 8000eb0:	4b7b      	ldr	r3, [pc, #492]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb4:	4a7a      	ldr	r2, [pc, #488]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000eb6:	f043 0304 	orr.w	r3, r3, #4
 8000eba:	6713      	str	r3, [r2, #112]	; 0x70
 8000ebc:	4b78      	ldr	r3, [pc, #480]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec0:	4a77      	ldr	r2, [pc, #476]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8000ec8:	e00b      	b.n	8000ee2 <HAL_RCC_OscConfig+0x32a>
 8000eca:	4b75      	ldr	r3, [pc, #468]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ece:	4a74      	ldr	r2, [pc, #464]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000ed0:	f023 0301 	bic.w	r3, r3, #1
 8000ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8000ed6:	4b72      	ldr	r3, [pc, #456]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eda:	4a71      	ldr	r2, [pc, #452]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000edc:	f023 0304 	bic.w	r3, r3, #4
 8000ee0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d015      	beq.n	8000f16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eea:	f7ff fd77 	bl	80009dc <HAL_GetTick>
 8000eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef0:	e00a      	b.n	8000f08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ef2:	f7ff fd73 	bl	80009dc <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e0c5      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f08:	4b65      	ldr	r3, [pc, #404]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0ee      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x33a>
 8000f14:	e014      	b.n	8000f40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f16:	f7ff fd61 	bl	80009dc <HAL_GetTick>
 8000f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f1c:	e00a      	b.n	8000f34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f1e:	f7ff fd5d 	bl	80009dc <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e0af      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f34:	4b5a      	ldr	r3, [pc, #360]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1ee      	bne.n	8000f1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d105      	bne.n	8000f52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f46:	4b56      	ldr	r3, [pc, #344]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a55      	ldr	r2, [pc, #340]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 809b 	beq.w	8001092 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f5c:	4b50      	ldr	r3, [pc, #320]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 030c 	and.w	r3, r3, #12
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d05c      	beq.n	8001022 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d141      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f70:	4b4c      	ldr	r3, [pc, #304]	; (80010a4 <HAL_RCC_OscConfig+0x4ec>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f76:	f7ff fd31 	bl	80009dc <HAL_GetTick>
 8000f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f7e:	f7ff fd2d 	bl	80009dc <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e081      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f90:	4b43      	ldr	r3, [pc, #268]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1f0      	bne.n	8000f7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69da      	ldr	r2, [r3, #28]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000faa:	019b      	lsls	r3, r3, #6
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb2:	085b      	lsrs	r3, r3, #1
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	041b      	lsls	r3, r3, #16
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbe:	061b      	lsls	r3, r3, #24
 8000fc0:	4937      	ldr	r1, [pc, #220]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fc6:	4b37      	ldr	r3, [pc, #220]	; (80010a4 <HAL_RCC_OscConfig+0x4ec>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fd06 	bl	80009dc <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd4:	f7ff fd02 	bl	80009dc <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e056      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fe6:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d0f0      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x41c>
 8000ff2:	e04e      	b.n	8001092 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <HAL_RCC_OscConfig+0x4ec>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffa:	f7ff fcef 	bl	80009dc <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001000:	e008      	b.n	8001014 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001002:	f7ff fceb 	bl	80009dc <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e03f      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f0      	bne.n	8001002 <HAL_RCC_OscConfig+0x44a>
 8001020:	e037      	b.n	8001092 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d101      	bne.n	800102e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e032      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_RCC_OscConfig+0x4e8>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d028      	beq.n	800108e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001046:	429a      	cmp	r2, r3
 8001048:	d121      	bne.n	800108e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001054:	429a      	cmp	r2, r3
 8001056:	d11a      	bne.n	800108e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800105e:	4013      	ands	r3, r2
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001064:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001066:	4293      	cmp	r3, r2
 8001068:	d111      	bne.n	800108e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	085b      	lsrs	r3, r3, #1
 8001076:	3b01      	subs	r3, #1
 8001078:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800107a:	429a      	cmp	r2, r3
 800107c:	d107      	bne.n	800108e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001088:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800108a:	429a      	cmp	r2, r3
 800108c:	d001      	beq.n	8001092 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40007000 	.word	0x40007000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	42470060 	.word	0x42470060

080010a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e0cc      	b.n	8001256 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010bc:	4b68      	ldr	r3, [pc, #416]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d90c      	bls.n	80010e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ca:	4b65      	ldr	r3, [pc, #404]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d2:	4b63      	ldr	r3, [pc, #396]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d001      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e0b8      	b.n	8001256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d020      	beq.n	8001132 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010fc:	4b59      	ldr	r3, [pc, #356]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	4a58      	ldr	r2, [pc, #352]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001106:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	4a52      	ldr	r2, [pc, #328]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 800111a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800111e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001120:	4b50      	ldr	r3, [pc, #320]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	494d      	ldr	r1, [pc, #308]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 800112e:	4313      	orrs	r3, r2
 8001130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d044      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d107      	bne.n	8001156 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	4b47      	ldr	r3, [pc, #284]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d119      	bne.n	8001186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e07f      	b.n	8001256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b02      	cmp	r3, #2
 800115c:	d003      	beq.n	8001166 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001162:	2b03      	cmp	r3, #3
 8001164:	d107      	bne.n	8001176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001166:	4b3f      	ldr	r3, [pc, #252]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d109      	bne.n	8001186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e06f      	b.n	8001256 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001176:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e067      	b.n	8001256 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001186:	4b37      	ldr	r3, [pc, #220]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f023 0203 	bic.w	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	4934      	ldr	r1, [pc, #208]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 8001194:	4313      	orrs	r3, r2
 8001196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001198:	f7ff fc20 	bl	80009dc <HAL_GetTick>
 800119c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119e:	e00a      	b.n	80011b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a0:	f7ff fc1c 	bl	80009dc <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e04f      	b.n	8001256 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b6:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 020c 	and.w	r2, r3, #12
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d1eb      	bne.n	80011a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d20c      	bcs.n	80011f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d6:	4b22      	ldr	r3, [pc, #136]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d001      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e032      	b.n	8001256 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	4916      	ldr	r1, [pc, #88]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	4313      	orrs	r3, r2
 800120c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b00      	cmp	r3, #0
 8001218:	d009      	beq.n	800122e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	490e      	ldr	r1, [pc, #56]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	4313      	orrs	r3, r2
 800122c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800122e:	f000 f821 	bl	8001274 <HAL_RCC_GetSysClockFreq>
 8001232:	4602      	mov	r2, r0
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	490a      	ldr	r1, [pc, #40]	; (8001268 <HAL_RCC_ClockConfig+0x1c0>)
 8001240:	5ccb      	ldrb	r3, [r1, r3]
 8001242:	fa22 f303 	lsr.w	r3, r2, r3
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_RCC_ClockConfig+0x1c8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fa88 	bl	8000764 <HAL_InitTick>

  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023c00 	.word	0x40023c00
 8001264:	40023800 	.word	0x40023800
 8001268:	08006864 	.word	0x08006864
 800126c:	20000000 	.word	0x20000000
 8001270:	20000004 	.word	0x20000004

08001274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001274:	b5b0      	push	{r4, r5, r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800127a:	2100      	movs	r1, #0
 800127c:	6079      	str	r1, [r7, #4]
 800127e:	2100      	movs	r1, #0
 8001280:	60f9      	str	r1, [r7, #12]
 8001282:	2100      	movs	r1, #0
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001286:	2100      	movs	r1, #0
 8001288:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800128a:	4952      	ldr	r1, [pc, #328]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x160>)
 800128c:	6889      	ldr	r1, [r1, #8]
 800128e:	f001 010c 	and.w	r1, r1, #12
 8001292:	2908      	cmp	r1, #8
 8001294:	d00d      	beq.n	80012b2 <HAL_RCC_GetSysClockFreq+0x3e>
 8001296:	2908      	cmp	r1, #8
 8001298:	f200 8094 	bhi.w	80013c4 <HAL_RCC_GetSysClockFreq+0x150>
 800129c:	2900      	cmp	r1, #0
 800129e:	d002      	beq.n	80012a6 <HAL_RCC_GetSysClockFreq+0x32>
 80012a0:	2904      	cmp	r1, #4
 80012a2:	d003      	beq.n	80012ac <HAL_RCC_GetSysClockFreq+0x38>
 80012a4:	e08e      	b.n	80013c4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012a6:	4b4c      	ldr	r3, [pc, #304]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80012a8:	60bb      	str	r3, [r7, #8]
       break;
 80012aa:	e08e      	b.n	80013ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012ac:	4b4b      	ldr	r3, [pc, #300]	; (80013dc <HAL_RCC_GetSysClockFreq+0x168>)
 80012ae:	60bb      	str	r3, [r7, #8]
      break;
 80012b0:	e08b      	b.n	80013ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012b2:	4948      	ldr	r1, [pc, #288]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80012b4:	6849      	ldr	r1, [r1, #4]
 80012b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80012ba:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012bc:	4945      	ldr	r1, [pc, #276]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80012be:	6849      	ldr	r1, [r1, #4]
 80012c0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80012c4:	2900      	cmp	r1, #0
 80012c6:	d024      	beq.n	8001312 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012c8:	4942      	ldr	r1, [pc, #264]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80012ca:	6849      	ldr	r1, [r1, #4]
 80012cc:	0989      	lsrs	r1, r1, #6
 80012ce:	4608      	mov	r0, r1
 80012d0:	f04f 0100 	mov.w	r1, #0
 80012d4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80012d8:	f04f 0500 	mov.w	r5, #0
 80012dc:	ea00 0204 	and.w	r2, r0, r4
 80012e0:	ea01 0305 	and.w	r3, r1, r5
 80012e4:	493d      	ldr	r1, [pc, #244]	; (80013dc <HAL_RCC_GetSysClockFreq+0x168>)
 80012e6:	fb01 f003 	mul.w	r0, r1, r3
 80012ea:	2100      	movs	r1, #0
 80012ec:	fb01 f102 	mul.w	r1, r1, r2
 80012f0:	1844      	adds	r4, r0, r1
 80012f2:	493a      	ldr	r1, [pc, #232]	; (80013dc <HAL_RCC_GetSysClockFreq+0x168>)
 80012f4:	fba2 0101 	umull	r0, r1, r2, r1
 80012f8:	1863      	adds	r3, r4, r1
 80012fa:	4619      	mov	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	461a      	mov	r2, r3
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	f7fe ffae 	bl	8000264 <__aeabi_uldivmod>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4613      	mov	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	e04a      	b.n	80013a8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001312:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	099b      	lsrs	r3, r3, #6
 8001318:	461a      	mov	r2, r3
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001322:	f04f 0100 	mov.w	r1, #0
 8001326:	ea02 0400 	and.w	r4, r2, r0
 800132a:	ea03 0501 	and.w	r5, r3, r1
 800132e:	4620      	mov	r0, r4
 8001330:	4629      	mov	r1, r5
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	014b      	lsls	r3, r1, #5
 800133c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001340:	0142      	lsls	r2, r0, #5
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	1b00      	subs	r0, r0, r4
 8001348:	eb61 0105 	sbc.w	r1, r1, r5
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	018b      	lsls	r3, r1, #6
 8001356:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800135a:	0182      	lsls	r2, r0, #6
 800135c:	1a12      	subs	r2, r2, r0
 800135e:	eb63 0301 	sbc.w	r3, r3, r1
 8001362:	f04f 0000 	mov.w	r0, #0
 8001366:	f04f 0100 	mov.w	r1, #0
 800136a:	00d9      	lsls	r1, r3, #3
 800136c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001370:	00d0      	lsls	r0, r2, #3
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	1912      	adds	r2, r2, r4
 8001378:	eb45 0303 	adc.w	r3, r5, r3
 800137c:	f04f 0000 	mov.w	r0, #0
 8001380:	f04f 0100 	mov.w	r1, #0
 8001384:	0299      	lsls	r1, r3, #10
 8001386:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800138a:	0290      	lsls	r0, r2, #10
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	461a      	mov	r2, r3
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	f7fe ff62 	bl	8000264 <__aeabi_uldivmod>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4613      	mov	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	0c1b      	lsrs	r3, r3, #16
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	3301      	adds	r3, #1
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c0:	60bb      	str	r3, [r7, #8]
      break;
 80013c2:	e002      	b.n	80013ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80013c6:	60bb      	str	r3, [r7, #8]
      break;
 80013c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ca:	68bb      	ldr	r3, [r7, #8]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bdb0      	pop	{r4, r5, r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	00f42400 	.word	0x00f42400
 80013dc:	017d7840 	.word	0x017d7840

080013e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000000 	.word	0x20000000

080013f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013fc:	f7ff fff0 	bl	80013e0 <HAL_RCC_GetHCLKFreq>
 8001400:	4602      	mov	r2, r0
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	0a9b      	lsrs	r3, r3, #10
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	4903      	ldr	r1, [pc, #12]	; (800141c <HAL_RCC_GetPCLK1Freq+0x24>)
 800140e:	5ccb      	ldrb	r3, [r1, r3]
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001414:	4618      	mov	r0, r3
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	08006874 	.word	0x08006874

08001420 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	220f      	movs	r2, #15
 800142e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_RCC_GetClockConfig+0x5c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 0203 	and.w	r2, r3, #3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_RCC_GetClockConfig+0x5c>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_RCC_GetClockConfig+0x5c>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_RCC_GetClockConfig+0x5c>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	08db      	lsrs	r3, r3, #3
 800145a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <HAL_RCC_GetClockConfig+0x60>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0207 	and.w	r2, r3, #7
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	601a      	str	r2, [r3, #0]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40023c00 	.word	0x40023c00

08001484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e041      	b.n	800151a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f839 	bl	8001522 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2202      	movs	r2, #2
 80014b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3304      	adds	r3, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4610      	mov	r0, r2
 80014c4:	f000 f9d8 	bl	8001878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b01      	cmp	r3, #1
 800154a:	d001      	beq.n	8001550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e04e      	b.n	80015ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a23      	ldr	r2, [pc, #140]	; (80015fc <HAL_TIM_Base_Start_IT+0xc4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d022      	beq.n	80015b8 <HAL_TIM_Base_Start_IT+0x80>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800157a:	d01d      	beq.n	80015b8 <HAL_TIM_Base_Start_IT+0x80>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a1f      	ldr	r2, [pc, #124]	; (8001600 <HAL_TIM_Base_Start_IT+0xc8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d018      	beq.n	80015b8 <HAL_TIM_Base_Start_IT+0x80>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1e      	ldr	r2, [pc, #120]	; (8001604 <HAL_TIM_Base_Start_IT+0xcc>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d013      	beq.n	80015b8 <HAL_TIM_Base_Start_IT+0x80>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <HAL_TIM_Base_Start_IT+0xd0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d00e      	beq.n	80015b8 <HAL_TIM_Base_Start_IT+0x80>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1b      	ldr	r2, [pc, #108]	; (800160c <HAL_TIM_Base_Start_IT+0xd4>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d009      	beq.n	80015b8 <HAL_TIM_Base_Start_IT+0x80>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a19      	ldr	r2, [pc, #100]	; (8001610 <HAL_TIM_Base_Start_IT+0xd8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d004      	beq.n	80015b8 <HAL_TIM_Base_Start_IT+0x80>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a18      	ldr	r2, [pc, #96]	; (8001614 <HAL_TIM_Base_Start_IT+0xdc>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d111      	bne.n	80015dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d010      	beq.n	80015ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 0201 	orr.w	r2, r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015da:	e007      	b.n	80015ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40010000 	.word	0x40010000
 8001600:	40000400 	.word	0x40000400
 8001604:	40000800 	.word	0x40000800
 8001608:	40000c00 	.word	0x40000c00
 800160c:	40010400 	.word	0x40010400
 8001610:	40014000 	.word	0x40014000
 8001614:	40001800 	.word	0x40001800

08001618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b02      	cmp	r3, #2
 800162c:	d122      	bne.n	8001674 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b02      	cmp	r3, #2
 800163a:	d11b      	bne.n	8001674 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f06f 0202 	mvn.w	r2, #2
 8001644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f8ee 	bl	800183c <HAL_TIM_IC_CaptureCallback>
 8001660:	e005      	b.n	800166e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f8e0 	bl	8001828 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f8f1 	bl	8001850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b04      	cmp	r3, #4
 8001680:	d122      	bne.n	80016c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b04      	cmp	r3, #4
 800168e:	d11b      	bne.n	80016c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f06f 0204 	mvn.w	r2, #4
 8001698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2202      	movs	r2, #2
 800169e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f8c4 	bl	800183c <HAL_TIM_IC_CaptureCallback>
 80016b4:	e005      	b.n	80016c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f8b6 	bl	8001828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f8c7 	bl	8001850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d122      	bne.n	800171c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d11b      	bne.n	800171c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f06f 0208 	mvn.w	r2, #8
 80016ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2204      	movs	r2, #4
 80016f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f89a 	bl	800183c <HAL_TIM_IC_CaptureCallback>
 8001708:	e005      	b.n	8001716 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f88c 	bl	8001828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f89d 	bl	8001850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b10      	cmp	r3, #16
 8001728:	d122      	bne.n	8001770 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	2b10      	cmp	r3, #16
 8001736:	d11b      	bne.n	8001770 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f06f 0210 	mvn.w	r2, #16
 8001740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2208      	movs	r2, #8
 8001746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f870 	bl	800183c <HAL_TIM_IC_CaptureCallback>
 800175c:	e005      	b.n	800176a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f862 	bl	8001828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f873 	bl	8001850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b01      	cmp	r3, #1
 800177c:	d10e      	bne.n	800179c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b01      	cmp	r3, #1
 800178a:	d107      	bne.n	800179c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f06f 0201 	mvn.w	r2, #1
 8001794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7fe ffa4 	bl	80006e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a6:	2b80      	cmp	r3, #128	; 0x80
 80017a8:	d10e      	bne.n	80017c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b4:	2b80      	cmp	r3, #128	; 0x80
 80017b6:	d107      	bne.n	80017c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80017c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f902 	bl	80019cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d2:	2b40      	cmp	r3, #64	; 0x40
 80017d4:	d10e      	bne.n	80017f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e0:	2b40      	cmp	r3, #64	; 0x40
 80017e2:	d107      	bne.n	80017f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80017ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f838 	bl	8001864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	2b20      	cmp	r3, #32
 8001800:	d10e      	bne.n	8001820 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	2b20      	cmp	r3, #32
 800180e:	d107      	bne.n	8001820 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f06f 0220 	mvn.w	r2, #32
 8001818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f8cc 	bl	80019b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a40      	ldr	r2, [pc, #256]	; (800198c <TIM_Base_SetConfig+0x114>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d013      	beq.n	80018b8 <TIM_Base_SetConfig+0x40>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001896:	d00f      	beq.n	80018b8 <TIM_Base_SetConfig+0x40>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a3d      	ldr	r2, [pc, #244]	; (8001990 <TIM_Base_SetConfig+0x118>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00b      	beq.n	80018b8 <TIM_Base_SetConfig+0x40>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a3c      	ldr	r2, [pc, #240]	; (8001994 <TIM_Base_SetConfig+0x11c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d007      	beq.n	80018b8 <TIM_Base_SetConfig+0x40>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a3b      	ldr	r2, [pc, #236]	; (8001998 <TIM_Base_SetConfig+0x120>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d003      	beq.n	80018b8 <TIM_Base_SetConfig+0x40>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a3a      	ldr	r2, [pc, #232]	; (800199c <TIM_Base_SetConfig+0x124>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d108      	bne.n	80018ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a2f      	ldr	r2, [pc, #188]	; (800198c <TIM_Base_SetConfig+0x114>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d02b      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d8:	d027      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a2c      	ldr	r2, [pc, #176]	; (8001990 <TIM_Base_SetConfig+0x118>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d023      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a2b      	ldr	r2, [pc, #172]	; (8001994 <TIM_Base_SetConfig+0x11c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d01f      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a2a      	ldr	r2, [pc, #168]	; (8001998 <TIM_Base_SetConfig+0x120>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01b      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a29      	ldr	r2, [pc, #164]	; (800199c <TIM_Base_SetConfig+0x124>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d017      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a28      	ldr	r2, [pc, #160]	; (80019a0 <TIM_Base_SetConfig+0x128>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <TIM_Base_SetConfig+0x12c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00f      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <TIM_Base_SetConfig+0x130>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d00b      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a25      	ldr	r2, [pc, #148]	; (80019ac <TIM_Base_SetConfig+0x134>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d007      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a24      	ldr	r2, [pc, #144]	; (80019b0 <TIM_Base_SetConfig+0x138>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d003      	beq.n	800192a <TIM_Base_SetConfig+0xb2>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a23      	ldr	r2, [pc, #140]	; (80019b4 <TIM_Base_SetConfig+0x13c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d108      	bne.n	800193c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4313      	orrs	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	4313      	orrs	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <TIM_Base_SetConfig+0x114>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d003      	beq.n	8001970 <TIM_Base_SetConfig+0xf8>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a0c      	ldr	r2, [pc, #48]	; (800199c <TIM_Base_SetConfig+0x124>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d103      	bne.n	8001978 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	615a      	str	r2, [r3, #20]
}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40010000 	.word	0x40010000
 8001990:	40000400 	.word	0x40000400
 8001994:	40000800 	.word	0x40000800
 8001998:	40000c00 	.word	0x40000c00
 800199c:	40010400 	.word	0x40010400
 80019a0:	40014000 	.word	0x40014000
 80019a4:	40014400 	.word	0x40014400
 80019a8:	40014800 	.word	0x40014800
 80019ac:	40001800 	.word	0x40001800
 80019b0:	40001c00 	.word	0x40001c00
 80019b4:	40002000 	.word	0x40002000

080019b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f103 0208 	add.w	r2, r3, #8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f103 0208 	add.w	r2, r3, #8
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f103 0208 	add.w	r2, r3, #8
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b085      	sub	sp, #20
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a50:	d103      	bne.n	8001a5a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	e00c      	b.n	8001a74 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3308      	adds	r3, #8
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e002      	b.n	8001a68 <vListInsert+0x2e>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d2f6      	bcs.n	8001a62 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	601a      	str	r2, [r3, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6892      	ldr	r2, [r2, #8]
 8001ac2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6852      	ldr	r2, [r2, #4]
 8001acc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d103      	bne.n	8001ae0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	1e5a      	subs	r2, r3, #1
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10a      	bne.n	8001b2e <xQueueGenericReset+0x2e>
        __asm volatile
 8001b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1c:	f383 8811 	msr	BASEPRI, r3
 8001b20:	f3bf 8f6f 	isb	sy
 8001b24:	f3bf 8f4f 	dsb	sy
 8001b28:	60fb      	str	r3, [r7, #12]
    }
 8001b2a:	bf00      	nop
 8001b2c:	e7fe      	b.n	8001b2c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d05d      	beq.n	8001bf0 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d059      	beq.n	8001bf0 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b44:	2100      	movs	r1, #0
 8001b46:	fba3 2302 	umull	r2, r3, r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d000      	beq.n	8001b50 <xQueueGenericReset+0x50>
 8001b4e:	2101      	movs	r1, #1
 8001b50:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d14c      	bne.n	8001bf0 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001b56:	f001 ff0d 	bl	8003974 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b62:	6939      	ldr	r1, [r7, #16]
 8001b64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	441a      	add	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2200      	movs	r2, #0
 8001b74:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b86:	3b01      	subs	r3, #1
 8001b88:	6939      	ldr	r1, [r7, #16]
 8001b8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	441a      	add	r2, r3
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	22ff      	movs	r2, #255	; 0xff
 8001b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	22ff      	movs	r2, #255	; 0xff
 8001ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d114      	bne.n	8001bd6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01a      	beq.n	8001bea <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	3310      	adds	r3, #16
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 ffed 	bl	8002b98 <xTaskRemoveFromEventList>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d012      	beq.n	8001bea <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <xQueueGenericReset+0x11c>)
 8001bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	f3bf 8f4f 	dsb	sy
 8001bd0:	f3bf 8f6f 	isb	sy
 8001bd4:	e009      	b.n	8001bea <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	3310      	adds	r3, #16
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff00 	bl	80019e0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	3324      	adds	r3, #36	; 0x24
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fefb 	bl	80019e0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001bea:	f001 fef3 	bl	80039d4 <vPortExitCritical>
 8001bee:	e001      	b.n	8001bf4 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10a      	bne.n	8001c10 <xQueueGenericReset+0x110>
        __asm volatile
 8001bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfe:	f383 8811 	msr	BASEPRI, r3
 8001c02:	f3bf 8f6f 	isb	sy
 8001c06:	f3bf 8f4f 	dsb	sy
 8001c0a:	60bb      	str	r3, [r7, #8]
    }
 8001c0c:	bf00      	nop
 8001c0e:	e7fe      	b.n	8001c0e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001c10:	697b      	ldr	r3, [r7, #20]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	e000ed04 	.word	0xe000ed04

08001c20 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d02e      	beq.n	8001c96 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001c38:	2100      	movs	r1, #0
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d000      	beq.n	8001c48 <xQueueGenericCreate+0x28>
 8001c46:	2101      	movs	r1, #1
 8001c48:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d123      	bne.n	8001c96 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001c56:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001c5a:	d81c      	bhi.n	8001c96 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	3350      	adds	r3, #80	; 0x50
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f001 ffae 	bl	8003bcc <pvPortMalloc>
 8001c70:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01c      	beq.n	8001cb2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	3350      	adds	r3, #80	; 0x50
 8001c80:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c82:	79fa      	ldrb	r2, [r7, #7]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f814 	bl	8001cbc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001c94:	e00d      	b.n	8001cb2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10a      	bne.n	8001cb2 <xQueueGenericCreate+0x92>
        __asm volatile
 8001c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca0:	f383 8811 	msr	BASEPRI, r3
 8001ca4:	f3bf 8f6f 	isb	sy
 8001ca8:	f3bf 8f4f 	dsb	sy
 8001cac:	613b      	str	r3, [r7, #16]
    }
 8001cae:	bf00      	nop
 8001cb0:	e7fe      	b.n	8001cb0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
    }
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d103      	bne.n	8001cd8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e002      	b.n	8001cde <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001cea:	2101      	movs	r1, #1
 8001cec:	69b8      	ldr	r0, [r7, #24]
 8001cee:	f7ff ff07 	bl	8001b00 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	68f9      	ldr	r1, [r7, #12]
 8001d00:	2073      	movs	r0, #115	; 0x73
 8001d02:	f003 f935 	bl	8004f70 <SEGGER_SYSVIEW_RecordU32x3>
}
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b08f      	sub	sp, #60	; 0x3c
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10a      	bne.n	8001d40 <xQueueReceive+0x30>
        __asm volatile
 8001d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d2e:	f383 8811 	msr	BASEPRI, r3
 8001d32:	f3bf 8f6f 	isb	sy
 8001d36:	f3bf 8f4f 	dsb	sy
 8001d3a:	623b      	str	r3, [r7, #32]
    }
 8001d3c:	bf00      	nop
 8001d3e:	e7fe      	b.n	8001d3e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d103      	bne.n	8001d4e <xQueueReceive+0x3e>
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <xQueueReceive+0x42>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <xQueueReceive+0x44>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10a      	bne.n	8001d6e <xQueueReceive+0x5e>
        __asm volatile
 8001d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5c:	f383 8811 	msr	BASEPRI, r3
 8001d60:	f3bf 8f6f 	isb	sy
 8001d64:	f3bf 8f4f 	dsb	sy
 8001d68:	61fb      	str	r3, [r7, #28]
    }
 8001d6a:	bf00      	nop
 8001d6c:	e7fe      	b.n	8001d6c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d6e:	f001 f925 	bl	8002fbc <xTaskGetSchedulerState>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <xQueueReceive+0x6e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <xQueueReceive+0x72>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <xQueueReceive+0x74>
 8001d82:	2300      	movs	r3, #0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10a      	bne.n	8001d9e <xQueueReceive+0x8e>
        __asm volatile
 8001d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8c:	f383 8811 	msr	BASEPRI, r3
 8001d90:	f3bf 8f6f 	isb	sy
 8001d94:	f3bf 8f4f 	dsb	sy
 8001d98:	61bb      	str	r3, [r7, #24]
    }
 8001d9a:	bf00      	nop
 8001d9c:	e7fe      	b.n	8001d9c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001d9e:	f001 fde9 	bl	8003974 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d02f      	beq.n	8001e0e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001db2:	f000 f8bd 	bl	8001f30 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8001db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 fe65 	bl	8005a88 <SEGGER_SYSVIEW_ShrinkId>
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f003 fe61 	bl	8005a88 <SEGGER_SYSVIEW_ShrinkId>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2101      	movs	r1, #1
 8001dcc:	9100      	str	r1, [sp, #0]
 8001dce:	4621      	mov	r1, r4
 8001dd0:	205c      	movs	r0, #92	; 0x5c
 8001dd2:	f003 f943 	bl	800505c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	1e5a      	subs	r2, r3, #1
 8001dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ddc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00f      	beq.n	8001e06 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de8:	3310      	adds	r3, #16
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 fed4 	bl	8002b98 <xTaskRemoveFromEventList>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001df6:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <xQueueReceive+0x21c>)
 8001df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	f3bf 8f4f 	dsb	sy
 8001e02:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001e06:	f001 fde5 	bl	80039d4 <vPortExitCritical>
                return pdPASS;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e08a      	b.n	8001f24 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d113      	bne.n	8001e3c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001e14:	f001 fdde 	bl	80039d4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 fe34 	bl	8005a88 <SEGGER_SYSVIEW_ShrinkId>
 8001e20:	4604      	mov	r4, r0
 8001e22:	2000      	movs	r0, #0
 8001e24:	f003 fe30 	bl	8005a88 <SEGGER_SYSVIEW_ShrinkId>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	9100      	str	r1, [sp, #0]
 8001e30:	4621      	mov	r1, r4
 8001e32:	205c      	movs	r0, #92	; 0x5c
 8001e34:	f003 f912 	bl	800505c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e073      	b.n	8001f24 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001e42:	f107 0310 	add.w	r3, r7, #16
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 ff7e 	bl	8002d48 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001e50:	f001 fdc0 	bl	80039d4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001e54:	f000 fb80 	bl	8002558 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001e58:	f001 fd8c 	bl	8003974 <vPortEnterCritical>
 8001e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e62:	b25b      	sxtb	r3, r3
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d103      	bne.n	8001e72 <xQueueReceive+0x162>
 8001e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e78:	b25b      	sxtb	r3, r3
 8001e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7e:	d103      	bne.n	8001e88 <xQueueReceive+0x178>
 8001e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e88:	f001 fda4 	bl	80039d4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e8c:	1d3a      	adds	r2, r7, #4
 8001e8e:	f107 0310 	add.w	r3, r7, #16
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 ff6d 	bl	8002d74 <xTaskCheckForTimeOut>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d124      	bne.n	8001eea <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ea2:	f000 f8bd 	bl	8002020 <prvIsQueueEmpty>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d018      	beq.n	8001ede <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eae:	3324      	adds	r3, #36	; 0x24
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 fe03 	bl	8002ac0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ebc:	f000 f85e 	bl	8001f7c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001ec0:	f000 fb58 	bl	8002574 <xTaskResumeAll>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f47f af69 	bne.w	8001d9e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <xQueueReceive+0x21c>)
 8001ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	f3bf 8f4f 	dsb	sy
 8001ed8:	f3bf 8f6f 	isb	sy
 8001edc:	e75f      	b.n	8001d9e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ee0:	f000 f84c 	bl	8001f7c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001ee4:	f000 fb46 	bl	8002574 <xTaskResumeAll>
 8001ee8:	e759      	b.n	8001d9e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001eec:	f000 f846 	bl	8001f7c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001ef0:	f000 fb40 	bl	8002574 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ef6:	f000 f893 	bl	8002020 <prvIsQueueEmpty>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f43f af4e 	beq.w	8001d9e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f04:	4618      	mov	r0, r3
 8001f06:	f003 fdbf 	bl	8005a88 <SEGGER_SYSVIEW_ShrinkId>
 8001f0a:	4604      	mov	r4, r0
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f003 fdbb 	bl	8005a88 <SEGGER_SYSVIEW_ShrinkId>
 8001f12:	4602      	mov	r2, r0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2101      	movs	r1, #1
 8001f18:	9100      	str	r1, [sp, #0]
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	205c      	movs	r0, #92	; 0x5c
 8001f1e:	f003 f89d 	bl	800505c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8001f22:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3734      	adds	r7, #52	; 0x34
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd90      	pop	{r4, r7, pc}
 8001f2c:	e000ed04 	.word	0xe000ed04

08001f30 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d018      	beq.n	8001f74 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	441a      	add	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d303      	bcc.n	8001f64 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68d9      	ldr	r1, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	6838      	ldr	r0, [r7, #0]
 8001f70:	f003 ff16 	bl	8005da0 <memcpy>
    }
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001f84:	f001 fcf6 	bl	8003974 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f8e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f90:	e011      	b.n	8001fb6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d012      	beq.n	8001fc0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3324      	adds	r3, #36	; 0x24
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 fdfa 	bl	8002b98 <xTaskRemoveFromEventList>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001faa:	f000 ff49 	bl	8002e40 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	dce9      	bgt.n	8001f92 <prvUnlockQueue+0x16>
 8001fbe:	e000      	b.n	8001fc2 <prvUnlockQueue+0x46>
                        break;
 8001fc0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	22ff      	movs	r2, #255	; 0xff
 8001fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001fca:	f001 fd03 	bl	80039d4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001fce:	f001 fcd1 	bl	8003974 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fd8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001fda:	e011      	b.n	8002000 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d012      	beq.n	800200a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3310      	adds	r3, #16
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 fdd5 	bl	8002b98 <xTaskRemoveFromEventList>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001ff4:	f000 ff24 	bl	8002e40 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001ff8:	7bbb      	ldrb	r3, [r7, #14]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002004:	2b00      	cmp	r3, #0
 8002006:	dce9      	bgt.n	8001fdc <prvUnlockQueue+0x60>
 8002008:	e000      	b.n	800200c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800200a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	22ff      	movs	r2, #255	; 0xff
 8002010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002014:	f001 fcde 	bl	80039d4 <vPortExitCritical>
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002028:	f001 fca4 	bl	8003974 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002034:	2301      	movs	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	e001      	b.n	800203e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800203e:	f001 fcc9 	bl	80039d4 <vPortExitCritical>

    return xReturn;
 8002042:	68fb      	ldr	r3, [r7, #12]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10a      	bne.n	8002072 <vQueueAddToRegistry+0x26>
        __asm volatile
 800205c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002060:	f383 8811 	msr	BASEPRI, r3
 8002064:	f3bf 8f6f 	isb	sy
 8002068:	f3bf 8f4f 	dsb	sy
 800206c:	60fb      	str	r3, [r7, #12]
    }
 800206e:	bf00      	nop
 8002070:	e7fe      	b.n	8002070 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d024      	beq.n	80020c6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	e01e      	b.n	80020c0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002082:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <vQueueAddToRegistry+0xa8>)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4413      	add	r3, r2
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	429a      	cmp	r2, r3
 8002090:	d105      	bne.n	800209e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <vQueueAddToRegistry+0xa8>)
 8002098:	4413      	add	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
                    break;
 800209c:	e013      	b.n	80020c6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10a      	bne.n	80020ba <vQueueAddToRegistry+0x6e>
 80020a4:	4a13      	ldr	r2, [pc, #76]	; (80020f4 <vQueueAddToRegistry+0xa8>)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d104      	bne.n	80020ba <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4a0f      	ldr	r2, [pc, #60]	; (80020f4 <vQueueAddToRegistry+0xa8>)
 80020b6:	4413      	add	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3301      	adds	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2b07      	cmp	r3, #7
 80020c4:	d9dd      	bls.n	8002082 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00f      	beq.n	80020ec <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4618      	mov	r0, r3
 80020dc:	f003 fcd4 	bl	8005a88 <SEGGER_SYSVIEW_ShrinkId>
 80020e0:	4601      	mov	r1, r0
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	2071      	movs	r0, #113	; 0x71
 80020e8:	f002 fee8 	bl	8004ebc <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80020ec:	bf00      	nop
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20014424 	.word	0x20014424

080020f8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002108:	f001 fc34 	bl	8003974 <vPortEnterCritical>
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002112:	b25b      	sxtb	r3, r3
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002118:	d103      	bne.n	8002122 <vQueueWaitForMessageRestricted+0x2a>
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002128:	b25b      	sxtb	r3, r3
 800212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212e:	d103      	bne.n	8002138 <vQueueWaitForMessageRestricted+0x40>
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002138:	f001 fc4c 	bl	80039d4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002140:	2b00      	cmp	r3, #0
 8002142:	d106      	bne.n	8002152 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3324      	adds	r3, #36	; 0x24
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	4618      	mov	r0, r3
 800214e:	f000 fcdb 	bl	8002b08 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7ff ff12 	bl	8001f7c <prvUnlockQueue>
    }
 8002158:	bf00      	nop
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	; 0x30
 8002164:	af04      	add	r7, sp, #16
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4618      	mov	r0, r3
 8002176:	f001 fd29 	bl	8003bcc <pvPortMalloc>
 800217a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00e      	beq.n	80021a0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002182:	2058      	movs	r0, #88	; 0x58
 8002184:	f001 fd22 	bl	8003bcc <pvPortMalloc>
 8002188:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
 8002196:	e005      	b.n	80021a4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002198:	6978      	ldr	r0, [r7, #20]
 800219a:	f001 fdf7 	bl	8003d8c <vPortFree>
 800219e:	e001      	b.n	80021a4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d013      	beq.n	80021d2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021aa:	88fa      	ldrh	r2, [r7, #6]
 80021ac:	2300      	movs	r3, #0
 80021ae:	9303      	str	r3, [sp, #12]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f80e 	bl	80021e2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80021c6:	69f8      	ldr	r0, [r7, #28]
 80021c8:	f000 f8b0 	bl	800232c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80021cc:	2301      	movs	r3, #1
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	e002      	b.n	80021d8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
 80021d6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80021d8:	69bb      	ldr	r3, [r7, #24]
    }
 80021da:	4618      	mov	r0, r3
 80021dc:	3720      	adds	r7, #32
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b088      	sub	sp, #32
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	461a      	mov	r2, r3
 80021fa:	21a5      	movs	r1, #165	; 0xa5
 80021fc:	f003 fdde 	bl	8005dbc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800220a:	3b01      	subs	r3, #1
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f023 0307 	bic.w	r3, r3, #7
 8002218:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002228:	f383 8811 	msr	BASEPRI, r3
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f3bf 8f4f 	dsb	sy
 8002234:	617b      	str	r3, [r7, #20]
    }
 8002236:	bf00      	nop
 8002238:	e7fe      	b.n	8002238 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01f      	beq.n	8002280 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	e012      	b.n	800226c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	4413      	add	r3, r2
 800224c:	7819      	ldrb	r1, [r3, #0]
 800224e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	4413      	add	r3, r2
 8002254:	3334      	adds	r3, #52	; 0x34
 8002256:	460a      	mov	r2, r1
 8002258:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	4413      	add	r3, r2
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d006      	beq.n	8002274 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3301      	adds	r3, #1
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	2b09      	cmp	r3, #9
 8002270:	d9e9      	bls.n	8002246 <prvInitialiseNewTask+0x64>
 8002272:	e000      	b.n	8002276 <prvInitialiseNewTask+0x94>
            {
                break;
 8002274:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800227e:	e003      	b.n	8002288 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228a:	2b04      	cmp	r3, #4
 800228c:	d90a      	bls.n	80022a4 <prvInitialiseNewTask+0xc2>
        __asm volatile
 800228e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002292:	f383 8811 	msr	BASEPRI, r3
 8002296:	f3bf 8f6f 	isb	sy
 800229a:	f3bf 8f4f 	dsb	sy
 800229e:	613b      	str	r3, [r7, #16]
    }
 80022a0:	bf00      	nop
 80022a2:	e7fe      	b.n	80022a2 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d901      	bls.n	80022ae <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022aa:	2304      	movs	r3, #4
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022b8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80022ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022bc:	2200      	movs	r2, #0
 80022be:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c2:	3304      	adds	r3, #4
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fbab 	bl	8001a20 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	3318      	adds	r3, #24
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fba6 	bl	8001a20 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022d8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	f1c3 0205 	rsb	r2, r3, #5
 80022e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	3350      	adds	r3, #80	; 0x50
 80022ee:	2204      	movs	r2, #4
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 fd62 	bl	8005dbc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fa:	3354      	adds	r3, #84	; 0x54
 80022fc:	2201      	movs	r2, #1
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f003 fd5b 	bl	8005dbc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	68f9      	ldr	r1, [r7, #12]
 800230a:	69b8      	ldr	r0, [r7, #24]
 800230c:	f001 f984 	bl	8003618 <pxPortInitialiseStack>
 8002310:	4602      	mov	r2, r0
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002320:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002322:	bf00      	nop
 8002324:	3720      	adds	r7, #32
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800232c:	b5b0      	push	{r4, r5, r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af02      	add	r7, sp, #8
 8002332:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002334:	f001 fb1e 	bl	8003974 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002338:	4b4f      	ldr	r3, [pc, #316]	; (8002478 <prvAddNewTaskToReadyList+0x14c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	4a4e      	ldr	r2, [pc, #312]	; (8002478 <prvAddNewTaskToReadyList+0x14c>)
 8002340:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002342:	4b4e      	ldr	r3, [pc, #312]	; (800247c <prvAddNewTaskToReadyList+0x150>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800234a:	4a4c      	ldr	r2, [pc, #304]	; (800247c <prvAddNewTaskToReadyList+0x150>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002350:	4b49      	ldr	r3, [pc, #292]	; (8002478 <prvAddNewTaskToReadyList+0x14c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d110      	bne.n	800237a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002358:	f000 fd96 	bl	8002e88 <prvInitialiseTaskLists>
 800235c:	e00d      	b.n	800237a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800235e:	4b48      	ldr	r3, [pc, #288]	; (8002480 <prvAddNewTaskToReadyList+0x154>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002366:	4b45      	ldr	r3, [pc, #276]	; (800247c <prvAddNewTaskToReadyList+0x150>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	429a      	cmp	r2, r3
 8002372:	d802      	bhi.n	800237a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002374:	4a41      	ldr	r2, [pc, #260]	; (800247c <prvAddNewTaskToReadyList+0x150>)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800237a:	4b42      	ldr	r3, [pc, #264]	; (8002484 <prvAddNewTaskToReadyList+0x158>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	4a40      	ldr	r2, [pc, #256]	; (8002484 <prvAddNewTaskToReadyList+0x158>)
 8002382:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002384:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <prvAddNewTaskToReadyList+0x158>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d016      	beq.n	80023c0 <prvAddNewTaskToReadyList+0x94>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4618      	mov	r0, r3
 8002396:	f003 fa51 	bl	800583c <SEGGER_SYSVIEW_OnTaskCreate>
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	461d      	mov	r5, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	461c      	mov	r4, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	1ae3      	subs	r3, r4, r3
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	462b      	mov	r3, r5
 80023bc:	f001 feac 	bl	8004118 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 fabe 	bl	8005944 <SEGGER_SYSVIEW_OnTaskStartReady>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	2201      	movs	r2, #1
 80023ce:	409a      	lsls	r2, r3
 80023d0:	4b2d      	ldr	r3, [pc, #180]	; (8002488 <prvAddNewTaskToReadyList+0x15c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	4a2c      	ldr	r2, [pc, #176]	; (8002488 <prvAddNewTaskToReadyList+0x15c>)
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023de:	492b      	ldr	r1, [pc, #172]	; (800248c <prvAddNewTaskToReadyList+0x160>)
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3304      	adds	r3, #4
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	609a      	str	r2, [r3, #8]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	3204      	adds	r2, #4
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	1d1a      	adds	r2, r3, #4
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4a1b      	ldr	r2, [pc, #108]	; (800248c <prvAddNewTaskToReadyList+0x160>)
 800241e:	441a      	add	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	615a      	str	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002428:	4918      	ldr	r1, [pc, #96]	; (800248c <prvAddNewTaskToReadyList+0x160>)
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	1c59      	adds	r1, r3, #1
 8002438:	4814      	ldr	r0, [pc, #80]	; (800248c <prvAddNewTaskToReadyList+0x160>)
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4403      	add	r3, r0
 8002444:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002446:	f001 fac5 	bl	80039d4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <prvAddNewTaskToReadyList+0x154>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00e      	beq.n	8002470 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <prvAddNewTaskToReadyList+0x150>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	429a      	cmp	r2, r3
 800245e:	d207      	bcs.n	8002470 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <prvAddNewTaskToReadyList+0x164>)
 8002462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bdb0      	pop	{r4, r5, r7, pc}
 8002478:	2000016c 	.word	0x2000016c
 800247c:	20000094 	.word	0x20000094
 8002480:	20000178 	.word	0x20000178
 8002484:	20000188 	.word	0x20000188
 8002488:	20000174 	.word	0x20000174
 800248c:	20000098 	.word	0x20000098
 8002490:	e000ed04 	.word	0xe000ed04

08002494 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800249a:	4b27      	ldr	r3, [pc, #156]	; (8002538 <vTaskStartScheduler+0xa4>)
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	2300      	movs	r3, #0
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2300      	movs	r3, #0
 80024a4:	2282      	movs	r2, #130	; 0x82
 80024a6:	4925      	ldr	r1, [pc, #148]	; (800253c <vTaskStartScheduler+0xa8>)
 80024a8:	4825      	ldr	r0, [pc, #148]	; (8002540 <vTaskStartScheduler+0xac>)
 80024aa:	f7ff fe59 	bl	8002160 <xTaskCreate>
 80024ae:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d102      	bne.n	80024bc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80024b6:	f000 fe2b 	bl	8003110 <xTimerCreateTimerTask>
 80024ba:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d124      	bne.n	800250c <vTaskStartScheduler+0x78>
        __asm volatile
 80024c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c6:	f383 8811 	msr	BASEPRI, r3
 80024ca:	f3bf 8f6f 	isb	sy
 80024ce:	f3bf 8f4f 	dsb	sy
 80024d2:	60bb      	str	r3, [r7, #8]
    }
 80024d4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80024d6:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <vTaskStartScheduler+0xb0>)
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295
 80024dc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80024de:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <vTaskStartScheduler+0xb4>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <vTaskStartScheduler+0xb8>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80024ea:	4b19      	ldr	r3, [pc, #100]	; (8002550 <vTaskStartScheduler+0xbc>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <vTaskStartScheduler+0xa4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d102      	bne.n	80024fc <vTaskStartScheduler+0x68>
 80024f6:	f003 f985 	bl	8005804 <SEGGER_SYSVIEW_OnIdle>
 80024fa:	e004      	b.n	8002506 <vTaskStartScheduler+0x72>
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <vTaskStartScheduler+0xbc>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f003 f9dd 	bl	80058c0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002506:	f001 f915 	bl	8003734 <xPortStartScheduler>
 800250a:	e00e      	b.n	800252a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002512:	d10a      	bne.n	800252a <vTaskStartScheduler+0x96>
        __asm volatile
 8002514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	607b      	str	r3, [r7, #4]
    }
 8002526:	bf00      	nop
 8002528:	e7fe      	b.n	8002528 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <vTaskStartScheduler+0xc0>)
 800252c:	681b      	ldr	r3, [r3, #0]
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000190 	.word	0x20000190
 800253c:	08006790 	.word	0x08006790
 8002540:	08002e59 	.word	0x08002e59
 8002544:	2000018c 	.word	0x2000018c
 8002548:	20000178 	.word	0x20000178
 800254c:	20000170 	.word	0x20000170
 8002550:	20000094 	.word	0x20000094
 8002554:	2000000c 	.word	0x2000000c

08002558 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <vTaskSuspendAll+0x18>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	4a03      	ldr	r2, [pc, #12]	; (8002570 <vTaskSuspendAll+0x18>)
 8002564:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	20000194 	.word	0x20000194

08002574 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002582:	4b73      	ldr	r3, [pc, #460]	; (8002750 <xTaskResumeAll+0x1dc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10a      	bne.n	80025a0 <xTaskResumeAll+0x2c>
        __asm volatile
 800258a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258e:	f383 8811 	msr	BASEPRI, r3
 8002592:	f3bf 8f6f 	isb	sy
 8002596:	f3bf 8f4f 	dsb	sy
 800259a:	607b      	str	r3, [r7, #4]
    }
 800259c:	bf00      	nop
 800259e:	e7fe      	b.n	800259e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80025a0:	f001 f9e8 	bl	8003974 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80025a4:	4b6a      	ldr	r3, [pc, #424]	; (8002750 <xTaskResumeAll+0x1dc>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	4a69      	ldr	r2, [pc, #420]	; (8002750 <xTaskResumeAll+0x1dc>)
 80025ac:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025ae:	4b68      	ldr	r3, [pc, #416]	; (8002750 <xTaskResumeAll+0x1dc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 80c4 	bne.w	8002740 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80025b8:	4b66      	ldr	r3, [pc, #408]	; (8002754 <xTaskResumeAll+0x1e0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80bf 	beq.w	8002740 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025c2:	e08e      	b.n	80026e2 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025c4:	4b64      	ldr	r3, [pc, #400]	; (8002758 <xTaskResumeAll+0x1e4>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	6a12      	ldr	r2, [r2, #32]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	69d2      	ldr	r2, [r2, #28]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3318      	adds	r3, #24
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d103      	bne.n	80025fa <xTaskResumeAll+0x86>
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	6a1a      	ldr	r2, [r3, #32]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	2200      	movs	r2, #0
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	1e5a      	subs	r2, r3, #1
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	68d2      	ldr	r2, [r2, #12]
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	6892      	ldr	r2, [r2, #8]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	3304      	adds	r3, #4
 800262c:	429a      	cmp	r2, r3
 800262e:	d103      	bne.n	8002638 <xTaskResumeAll+0xc4>
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	2200      	movs	r2, #0
 800263c:	615a      	str	r2, [r3, #20]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	1e5a      	subs	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	4618      	mov	r0, r3
 800264c:	f003 f97a 	bl	8005944 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	2201      	movs	r2, #1
 8002656:	409a      	lsls	r2, r3
 8002658:	4b40      	ldr	r3, [pc, #256]	; (800275c <xTaskResumeAll+0x1e8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4313      	orrs	r3, r2
 800265e:	4a3f      	ldr	r2, [pc, #252]	; (800275c <xTaskResumeAll+0x1e8>)
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002666:	493e      	ldr	r1, [pc, #248]	; (8002760 <xTaskResumeAll+0x1ec>)
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3304      	adds	r3, #4
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	609a      	str	r2, [r3, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	3204      	adds	r2, #4
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	1d1a      	adds	r2, r3, #4
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4a2e      	ldr	r2, [pc, #184]	; (8002760 <xTaskResumeAll+0x1ec>)
 80026a6:	441a      	add	r2, r3
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	615a      	str	r2, [r3, #20]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b0:	492b      	ldr	r1, [pc, #172]	; (8002760 <xTaskResumeAll+0x1ec>)
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	1c59      	adds	r1, r3, #1
 80026c0:	4827      	ldr	r0, [pc, #156]	; (8002760 <xTaskResumeAll+0x1ec>)
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4403      	add	r3, r0
 80026cc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d2:	4b24      	ldr	r3, [pc, #144]	; (8002764 <xTaskResumeAll+0x1f0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	429a      	cmp	r2, r3
 80026da:	d302      	bcc.n	80026e2 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80026dc:	4b22      	ldr	r3, [pc, #136]	; (8002768 <xTaskResumeAll+0x1f4>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <xTaskResumeAll+0x1e4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f47f af6c 	bne.w	80025c4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80026f2:	f000 fc47 	bl	8002f84 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026f6:	4b1d      	ldr	r3, [pc, #116]	; (800276c <xTaskResumeAll+0x1f8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d010      	beq.n	8002724 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002702:	f000 f859 	bl	80027b8 <xTaskIncrementTick>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 800270c:	4b16      	ldr	r3, [pc, #88]	; (8002768 <xTaskResumeAll+0x1f4>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3b01      	subs	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f1      	bne.n	8002702 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <xTaskResumeAll+0x1f8>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002724:	4b10      	ldr	r3, [pc, #64]	; (8002768 <xTaskResumeAll+0x1f4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d009      	beq.n	8002740 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800272c:	2301      	movs	r3, #1
 800272e:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <xTaskResumeAll+0x1fc>)
 8002732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002740:	f001 f948 	bl	80039d4 <vPortExitCritical>

    return xAlreadyYielded;
 8002744:	69bb      	ldr	r3, [r7, #24]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3720      	adds	r7, #32
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000194 	.word	0x20000194
 8002754:	2000016c 	.word	0x2000016c
 8002758:	2000012c 	.word	0x2000012c
 800275c:	20000174 	.word	0x20000174
 8002760:	20000098 	.word	0x20000098
 8002764:	20000094 	.word	0x20000094
 8002768:	20000180 	.word	0x20000180
 800276c:	2000017c 	.word	0x2000017c
 8002770:	e000ed04 	.word	0xe000ed04

08002774 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <xTaskGetTickCount+0x1c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002780:	687b      	ldr	r3, [r7, #4]
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000170 	.word	0x20000170

08002794 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800279a:	f001 f9d7 	bl	8003b4c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80027a2:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <xTaskGetTickCountFromISR+0x20>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80027a8:	683b      	ldr	r3, [r7, #0]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000170 	.word	0x20000170

080027b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	; 0x28
 80027bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80027be:	2300      	movs	r3, #0
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027c2:	4b7f      	ldr	r3, [pc, #508]	; (80029c0 <xTaskIncrementTick+0x208>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 80f0 	bne.w	80029ac <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027cc:	4b7d      	ldr	r3, [pc, #500]	; (80029c4 <xTaskIncrementTick+0x20c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80027d4:	4a7b      	ldr	r2, [pc, #492]	; (80029c4 <xTaskIncrementTick+0x20c>)
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d120      	bne.n	8002822 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80027e0:	4b79      	ldr	r3, [pc, #484]	; (80029c8 <xTaskIncrementTick+0x210>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <xTaskIncrementTick+0x48>
        __asm volatile
 80027ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ee:	f383 8811 	msr	BASEPRI, r3
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	607b      	str	r3, [r7, #4]
    }
 80027fc:	bf00      	nop
 80027fe:	e7fe      	b.n	80027fe <xTaskIncrementTick+0x46>
 8002800:	4b71      	ldr	r3, [pc, #452]	; (80029c8 <xTaskIncrementTick+0x210>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	4b71      	ldr	r3, [pc, #452]	; (80029cc <xTaskIncrementTick+0x214>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a6f      	ldr	r2, [pc, #444]	; (80029c8 <xTaskIncrementTick+0x210>)
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4a6f      	ldr	r2, [pc, #444]	; (80029cc <xTaskIncrementTick+0x214>)
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b6e      	ldr	r3, [pc, #440]	; (80029d0 <xTaskIncrementTick+0x218>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	3301      	adds	r3, #1
 800281a:	4a6d      	ldr	r2, [pc, #436]	; (80029d0 <xTaskIncrementTick+0x218>)
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	f000 fbb1 	bl	8002f84 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002822:	4b6c      	ldr	r3, [pc, #432]	; (80029d4 <xTaskIncrementTick+0x21c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6a3a      	ldr	r2, [r7, #32]
 8002828:	429a      	cmp	r2, r3
 800282a:	f0c0 80aa 	bcc.w	8002982 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800282e:	4b66      	ldr	r3, [pc, #408]	; (80029c8 <xTaskIncrementTick+0x210>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d104      	bne.n	8002842 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002838:	4b66      	ldr	r3, [pc, #408]	; (80029d4 <xTaskIncrementTick+0x21c>)
 800283a:	f04f 32ff 	mov.w	r2, #4294967295
 800283e:	601a      	str	r2, [r3, #0]
                    break;
 8002840:	e09f      	b.n	8002982 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002842:	4b61      	ldr	r3, [pc, #388]	; (80029c8 <xTaskIncrementTick+0x210>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002852:	6a3a      	ldr	r2, [r7, #32]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	429a      	cmp	r2, r3
 8002858:	d203      	bcs.n	8002862 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800285a:	4a5e      	ldr	r2, [pc, #376]	; (80029d4 <xTaskIncrementTick+0x21c>)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002860:	e08f      	b.n	8002982 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	68d2      	ldr	r2, [r2, #12]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	6892      	ldr	r2, [r2, #8]
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	3304      	adds	r3, #4
 8002884:	429a      	cmp	r2, r3
 8002886:	d103      	bne.n	8002890 <xTaskIncrementTick+0xd8>
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2200      	movs	r2, #0
 8002894:	615a      	str	r2, [r3, #20]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	1e5a      	subs	r2, r3, #1
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01e      	beq.n	80028e6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	6a12      	ldr	r2, [r2, #32]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	69d2      	ldr	r2, [r2, #28]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	3318      	adds	r3, #24
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d103      	bne.n	80028d6 <xTaskIncrementTick+0x11e>
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	6a1a      	ldr	r2, [r3, #32]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	2200      	movs	r2, #0
 80028da:	629a      	str	r2, [r3, #40]	; 0x28
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1e5a      	subs	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f003 f82b 	bl	8005944 <SEGGER_SYSVIEW_OnTaskStartReady>
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	2201      	movs	r2, #1
 80028f4:	409a      	lsls	r2, r3
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <xTaskIncrementTick+0x220>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	4a36      	ldr	r2, [pc, #216]	; (80029d8 <xTaskIncrementTick+0x220>)
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002904:	4935      	ldr	r1, [pc, #212]	; (80029dc <xTaskIncrementTick+0x224>)
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	3304      	adds	r3, #4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	60da      	str	r2, [r3, #12]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	3204      	adds	r2, #4
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	1d1a      	adds	r2, r3, #4
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4a26      	ldr	r2, [pc, #152]	; (80029dc <xTaskIncrementTick+0x224>)
 8002944:	441a      	add	r2, r3
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	615a      	str	r2, [r3, #20]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294e:	4923      	ldr	r1, [pc, #140]	; (80029dc <xTaskIncrementTick+0x224>)
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	1c59      	adds	r1, r3, #1
 800295e:	481f      	ldr	r0, [pc, #124]	; (80029dc <xTaskIncrementTick+0x224>)
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4403      	add	r3, r0
 800296a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <xTaskIncrementTick+0x228>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	429a      	cmp	r2, r3
 8002978:	f4ff af59 	bcc.w	800282e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800297c:	2301      	movs	r3, #1
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002980:	e755      	b.n	800282e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002982:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <xTaskIncrementTick+0x228>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002988:	4914      	ldr	r1, [pc, #80]	; (80029dc <xTaskIncrementTick+0x224>)
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d901      	bls.n	800299e <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 800299a:	2301      	movs	r3, #1
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800299e:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <xTaskIncrementTick+0x22c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 80029a6:	2301      	movs	r3, #1
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
 80029aa:	e004      	b.n	80029b6 <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80029ac:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <xTaskIncrementTick+0x230>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	4a0d      	ldr	r2, [pc, #52]	; (80029e8 <xTaskIncrementTick+0x230>)
 80029b4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3728      	adds	r7, #40	; 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000194 	.word	0x20000194
 80029c4:	20000170 	.word	0x20000170
 80029c8:	20000124 	.word	0x20000124
 80029cc:	20000128 	.word	0x20000128
 80029d0:	20000184 	.word	0x20000184
 80029d4:	2000018c 	.word	0x2000018c
 80029d8:	20000174 	.word	0x20000174
 80029dc:	20000098 	.word	0x20000098
 80029e0:	20000094 	.word	0x20000094
 80029e4:	20000180 	.word	0x20000180
 80029e8:	2000017c 	.word	0x2000017c

080029ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029f2:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <vTaskSwitchContext+0xbc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80029fa:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <vTaskSwitchContext+0xc0>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002a00:	e04d      	b.n	8002a9e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002a02:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <vTaskSwitchContext+0xc0>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a08:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <vTaskSwitchContext+0xc4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	fab3 f383 	clz	r3, r3
 8002a14:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002a16:	7afb      	ldrb	r3, [r7, #11]
 8002a18:	f1c3 031f 	rsb	r3, r3, #31
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	4925      	ldr	r1, [pc, #148]	; (8002ab4 <vTaskSwitchContext+0xc8>)
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10a      	bne.n	8002a48 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	607b      	str	r3, [r7, #4]
    }
 8002a44:	bf00      	nop
 8002a46:	e7fe      	b.n	8002a46 <vTaskSwitchContext+0x5a>
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <vTaskSwitchContext+0xc8>)
 8002a54:	4413      	add	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	3308      	adds	r3, #8
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d104      	bne.n	8002a78 <vTaskSwitchContext+0x8c>
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <vTaskSwitchContext+0xcc>)
 8002a80:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <vTaskSwitchContext+0xcc>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <vTaskSwitchContext+0xd0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d102      	bne.n	8002a94 <vTaskSwitchContext+0xa8>
 8002a8e:	f002 feb9 	bl	8005804 <SEGGER_SYSVIEW_OnIdle>
}
 8002a92:	e004      	b.n	8002a9e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <vTaskSwitchContext+0xcc>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f002 ff11 	bl	80058c0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000194 	.word	0x20000194
 8002aac:	20000180 	.word	0x20000180
 8002ab0:	20000174 	.word	0x20000174
 8002ab4:	20000098 	.word	0x20000098
 8002ab8:	20000094 	.word	0x20000094
 8002abc:	20000190 	.word	0x20000190

08002ac0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10a      	bne.n	8002ae6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	60fb      	str	r3, [r7, #12]
    }
 8002ae2:	bf00      	nop
 8002ae4:	e7fe      	b.n	8002ae4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <vTaskPlaceOnEventList+0x44>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3318      	adds	r3, #24
 8002aec:	4619      	mov	r1, r3
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fe ffa3 	bl	8001a3a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002af4:	2101      	movs	r1, #1
 8002af6:	6838      	ldr	r0, [r7, #0]
 8002af8:	f000 fa7e 	bl	8002ff8 <prvAddCurrentTaskToDelayedList>
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000094 	.word	0x20000094

08002b08 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10a      	bne.n	8002b30 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1e:	f383 8811 	msr	BASEPRI, r3
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	613b      	str	r3, [r7, #16]
    }
 8002b2c:	bf00      	nop
 8002b2e:	e7fe      	b.n	8002b2e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	61da      	str	r2, [r3, #28]
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	6892      	ldr	r2, [r2, #8]
 8002b46:	621a      	str	r2, [r3, #32]
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	3218      	adds	r2, #24
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f103 0218 	add.w	r2, r3, #24
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002b78:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002b7e:	2024      	movs	r0, #36	; 0x24
 8002b80:	f002 f942 	bl	8004e08 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	68b8      	ldr	r0, [r7, #8]
 8002b88:	f000 fa36 	bl	8002ff8 <prvAddCurrentTaskToDelayedList>
    }
 8002b8c:	bf00      	nop
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000094 	.word	0x20000094

08002b98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08a      	sub	sp, #40	; 0x28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	60fb      	str	r3, [r7, #12]
    }
 8002bc0:	bf00      	nop
 8002bc2:	e7fe      	b.n	8002bc2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	6a3a      	ldr	r2, [r7, #32]
 8002bd0:	6a12      	ldr	r2, [r2, #32]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	69d2      	ldr	r2, [r2, #28]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	3318      	adds	r3, #24
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d103      	bne.n	8002bf2 <xTaskRemoveFromEventList+0x5a>
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	6a1a      	ldr	r2, [r3, #32]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	1e5a      	subs	r2, r3, #1
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c02:	4b4b      	ldr	r3, [pc, #300]	; (8002d30 <xTaskRemoveFromEventList+0x198>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d162      	bne.n	8002cd0 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	6a3a      	ldr	r2, [r7, #32]
 8002c16:	68d2      	ldr	r2, [r2, #12]
 8002c18:	609a      	str	r2, [r3, #8]
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	6a3a      	ldr	r2, [r7, #32]
 8002c20:	6892      	ldr	r2, [r2, #8]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d103      	bne.n	8002c38 <xTaskRemoveFromEventList+0xa0>
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	605a      	str	r2, [r3, #4]
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	615a      	str	r2, [r3, #20]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	1e5a      	subs	r2, r3, #1
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f002 fe7a 	bl	8005944 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	2201      	movs	r2, #1
 8002c56:	409a      	lsls	r2, r3
 8002c58:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <xTaskRemoveFromEventList+0x19c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	4a35      	ldr	r2, [pc, #212]	; (8002d34 <xTaskRemoveFromEventList+0x19c>)
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c66:	4934      	ldr	r1, [pc, #208]	; (8002d38 <xTaskRemoveFromEventList+0x1a0>)
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	3304      	adds	r3, #4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	609a      	str	r2, [r3, #8]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	60da      	str	r2, [r3, #12]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	6a3a      	ldr	r2, [r7, #32]
 8002c8c:	3204      	adds	r2, #4
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	1d1a      	adds	r2, r3, #4
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4a24      	ldr	r2, [pc, #144]	; (8002d38 <xTaskRemoveFromEventList+0x1a0>)
 8002ca6:	441a      	add	r2, r3
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	615a      	str	r2, [r3, #20]
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	4921      	ldr	r1, [pc, #132]	; (8002d38 <xTaskRemoveFromEventList+0x1a0>)
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	1c59      	adds	r1, r3, #1
 8002cc0:	481d      	ldr	r0, [pc, #116]	; (8002d38 <xTaskRemoveFromEventList+0x1a0>)
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4403      	add	r3, r0
 8002ccc:	6019      	str	r1, [r3, #0]
 8002cce:	e01b      	b.n	8002d08 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <xTaskRemoveFromEventList+0x1a4>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	61da      	str	r2, [r3, #28]
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	621a      	str	r2, [r3, #32]
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	6a3a      	ldr	r2, [r7, #32]
 8002cea:	3218      	adds	r2, #24
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	f103 0218 	add.w	r2, r3, #24
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	4a10      	ldr	r2, [pc, #64]	; (8002d3c <xTaskRemoveFromEventList+0x1a4>)
 8002cfc:	629a      	str	r2, [r3, #40]	; 0x28
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <xTaskRemoveFromEventList+0x1a4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3301      	adds	r3, #1
 8002d04:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <xTaskRemoveFromEventList+0x1a4>)
 8002d06:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <xTaskRemoveFromEventList+0x1a8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d905      	bls.n	8002d22 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002d16:	2301      	movs	r3, #1
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <xTaskRemoveFromEventList+0x1ac>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	e001      	b.n	8002d26 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3728      	adds	r7, #40	; 0x28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20000194 	.word	0x20000194
 8002d34:	20000174 	.word	0x20000174
 8002d38:	20000098 	.word	0x20000098
 8002d3c:	2000012c 	.word	0x2000012c
 8002d40:	20000094 	.word	0x20000094
 8002d44:	20000180 	.word	0x20000180

08002d48 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <vTaskInternalSetTimeOutState+0x24>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <vTaskInternalSetTimeOutState+0x28>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	605a      	str	r2, [r3, #4]
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	20000184 	.word	0x20000184
 8002d70:	20000170 	.word	0x20000170

08002d74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d88:	f383 8811 	msr	BASEPRI, r3
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	613b      	str	r3, [r7, #16]
    }
 8002d96:	bf00      	nop
 8002d98:	e7fe      	b.n	8002d98 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10a      	bne.n	8002db6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	60fb      	str	r3, [r7, #12]
    }
 8002db2:	bf00      	nop
 8002db4:	e7fe      	b.n	8002db4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002db6:	f000 fddd 	bl	8003974 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002dba:	4b1f      	ldr	r3, [pc, #124]	; (8002e38 <xTaskCheckForTimeOut+0xc4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	d102      	bne.n	8002dda <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61fb      	str	r3, [r7, #28]
 8002dd8:	e026      	b.n	8002e28 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <xTaskCheckForTimeOut+0xc8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d00a      	beq.n	8002dfc <xTaskCheckForTimeOut+0x88>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d305      	bcc.n	8002dfc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002df0:	2301      	movs	r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e015      	b.n	8002e28 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d20b      	bcs.n	8002e1e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	1ad2      	subs	r2, r2, r3
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff ff98 	bl	8002d48 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	e004      	b.n	8002e28 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002e24:	2301      	movs	r3, #1
 8002e26:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002e28:	f000 fdd4 	bl	80039d4 <vPortExitCritical>

    return xReturn;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000170 	.word	0x20000170
 8002e3c:	20000184 	.word	0x20000184

08002e40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <vTaskMissedYield+0x14>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	20000180 	.word	0x20000180

08002e58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002e60:	f000 f852 	bl	8002f08 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <prvIdleTask+0x28>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d9f9      	bls.n	8002e60 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <prvIdleTask+0x2c>)
 8002e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002e7c:	e7f0      	b.n	8002e60 <prvIdleTask+0x8>
 8002e7e:	bf00      	nop
 8002e80:	20000098 	.word	0x20000098
 8002e84:	e000ed04 	.word	0xe000ed04

08002e88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e8e:	2300      	movs	r3, #0
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	e00c      	b.n	8002eae <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4a12      	ldr	r2, [pc, #72]	; (8002ee8 <prvInitialiseTaskLists+0x60>)
 8002ea0:	4413      	add	r3, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fd9c 	bl	80019e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	607b      	str	r3, [r7, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d9ef      	bls.n	8002e94 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002eb4:	480d      	ldr	r0, [pc, #52]	; (8002eec <prvInitialiseTaskLists+0x64>)
 8002eb6:	f7fe fd93 	bl	80019e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002eba:	480d      	ldr	r0, [pc, #52]	; (8002ef0 <prvInitialiseTaskLists+0x68>)
 8002ebc:	f7fe fd90 	bl	80019e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002ec0:	480c      	ldr	r0, [pc, #48]	; (8002ef4 <prvInitialiseTaskLists+0x6c>)
 8002ec2:	f7fe fd8d 	bl	80019e0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002ec6:	480c      	ldr	r0, [pc, #48]	; (8002ef8 <prvInitialiseTaskLists+0x70>)
 8002ec8:	f7fe fd8a 	bl	80019e0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002ecc:	480b      	ldr	r0, [pc, #44]	; (8002efc <prvInitialiseTaskLists+0x74>)
 8002ece:	f7fe fd87 	bl	80019e0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <prvInitialiseTaskLists+0x78>)
 8002ed4:	4a05      	ldr	r2, [pc, #20]	; (8002eec <prvInitialiseTaskLists+0x64>)
 8002ed6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <prvInitialiseTaskLists+0x7c>)
 8002eda:	4a05      	ldr	r2, [pc, #20]	; (8002ef0 <prvInitialiseTaskLists+0x68>)
 8002edc:	601a      	str	r2, [r3, #0]
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000098 	.word	0x20000098
 8002eec:	200000fc 	.word	0x200000fc
 8002ef0:	20000110 	.word	0x20000110
 8002ef4:	2000012c 	.word	0x2000012c
 8002ef8:	20000140 	.word	0x20000140
 8002efc:	20000158 	.word	0x20000158
 8002f00:	20000124 	.word	0x20000124
 8002f04:	20000128 	.word	0x20000128

08002f08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f0e:	e019      	b.n	8002f44 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002f10:	f000 fd30 	bl	8003974 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f14:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <prvCheckTasksWaitingTermination+0x50>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fe fdc3 	bl	8001aac <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002f26:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <prvCheckTasksWaitingTermination+0x54>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	4a0b      	ldr	r2, [pc, #44]	; (8002f5c <prvCheckTasksWaitingTermination+0x54>)
 8002f2e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <prvCheckTasksWaitingTermination+0x58>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <prvCheckTasksWaitingTermination+0x58>)
 8002f38:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002f3a:	f000 fd4b 	bl	80039d4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f810 	bl	8002f64 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <prvCheckTasksWaitingTermination+0x58>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e1      	bne.n	8002f10 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000140 	.word	0x20000140
 8002f5c:	2000016c 	.word	0x2000016c
 8002f60:	20000154 	.word	0x20000154

08002f64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 ff0b 	bl	8003d8c <vPortFree>
                vPortFree( pxTCB );
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 ff08 	bl	8003d8c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <prvResetNextTaskUnblockTime+0x30>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d104      	bne.n	8002f9c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <prvResetNextTaskUnblockTime+0x34>)
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295
 8002f98:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f9a:	e005      	b.n	8002fa8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <prvResetNextTaskUnblockTime+0x30>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <prvResetNextTaskUnblockTime+0x34>)
 8002fa6:	6013      	str	r3, [r2, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000124 	.word	0x20000124
 8002fb8:	2000018c 	.word	0x2000018c

08002fbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002fc2:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <xTaskGetSchedulerState+0x34>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	607b      	str	r3, [r7, #4]
 8002fce:	e008      	b.n	8002fe2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fd0:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <xTaskGetSchedulerState+0x38>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	e001      	b.n	8002fe2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002fe2:	687b      	ldr	r3, [r7, #4]
    }
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	20000178 	.word	0x20000178
 8002ff4:	20000194 	.word	0x20000194

08002ff8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003002:	4b3c      	ldr	r3, [pc, #240]	; (80030f4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003008:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <prvAddCurrentTaskToDelayedList+0x100>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3304      	adds	r3, #4
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fd4c 	bl	8001aac <uxListRemove>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10b      	bne.n	8003032 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800301a:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <prvAddCurrentTaskToDelayedList+0x100>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	2201      	movs	r2, #1
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43da      	mvns	r2, r3
 8003028:	4b34      	ldr	r3, [pc, #208]	; (80030fc <prvAddCurrentTaskToDelayedList+0x104>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4013      	ands	r3, r2
 800302e:	4a33      	ldr	r2, [pc, #204]	; (80030fc <prvAddCurrentTaskToDelayedList+0x104>)
 8003030:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d124      	bne.n	8003084 <prvAddCurrentTaskToDelayedList+0x8c>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d021      	beq.n	8003084 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003040:	4b2f      	ldr	r3, [pc, #188]	; (8003100 <prvAddCurrentTaskToDelayedList+0x108>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	609a      	str	r2, [r3, #8]
 800304e:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	6892      	ldr	r2, [r2, #8]
 8003056:	60da      	str	r2, [r3, #12]
 8003058:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <prvAddCurrentTaskToDelayedList+0x100>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	3204      	adds	r2, #4
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	1d1a      	adds	r2, r3, #4
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	609a      	str	r2, [r3, #8]
 800306e:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a23      	ldr	r2, [pc, #140]	; (8003100 <prvAddCurrentTaskToDelayedList+0x108>)
 8003074:	615a      	str	r2, [r3, #20]
 8003076:	4b22      	ldr	r3, [pc, #136]	; (8003100 <prvAddCurrentTaskToDelayedList+0x108>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3301      	adds	r3, #1
 800307c:	4a20      	ldr	r2, [pc, #128]	; (8003100 <prvAddCurrentTaskToDelayedList+0x108>)
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003082:	e032      	b.n	80030ea <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4413      	add	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800308c:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <prvAddCurrentTaskToDelayedList+0x100>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	429a      	cmp	r2, r3
 800309a:	d20f      	bcs.n	80030bc <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800309c:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <prvAddCurrentTaskToDelayedList+0x100>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2104      	movs	r1, #4
 80030a2:	4618      	mov	r0, r3
 80030a4:	f002 fc90 	bl	80059c8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030a8:	4b16      	ldr	r3, [pc, #88]	; (8003104 <prvAddCurrentTaskToDelayedList+0x10c>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <prvAddCurrentTaskToDelayedList+0x100>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3304      	adds	r3, #4
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f7fe fcc0 	bl	8001a3a <vListInsert>
}
 80030ba:	e016      	b.n	80030ea <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80030bc:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <prvAddCurrentTaskToDelayedList+0x100>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2104      	movs	r1, #4
 80030c2:	4618      	mov	r0, r3
 80030c4:	f002 fc80 	bl	80059c8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030c8:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <prvAddCurrentTaskToDelayedList+0x110>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <prvAddCurrentTaskToDelayedList+0x100>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3304      	adds	r3, #4
 80030d2:	4619      	mov	r1, r3
 80030d4:	4610      	mov	r0, r2
 80030d6:	f7fe fcb0 	bl	8001a3a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80030da:	4b0c      	ldr	r3, [pc, #48]	; (800310c <prvAddCurrentTaskToDelayedList+0x114>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d202      	bcs.n	80030ea <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 80030e4:	4a09      	ldr	r2, [pc, #36]	; (800310c <prvAddCurrentTaskToDelayedList+0x114>)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6013      	str	r3, [r2, #0]
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000170 	.word	0x20000170
 80030f8:	20000094 	.word	0x20000094
 80030fc:	20000174 	.word	0x20000174
 8003100:	20000158 	.word	0x20000158
 8003104:	20000128 	.word	0x20000128
 8003108:	20000124 	.word	0x20000124
 800310c:	2000018c 	.word	0x2000018c

08003110 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003116:	2300      	movs	r3, #0
 8003118:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800311a:	f000 fa47 	bl	80035ac <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800311e:	4b11      	ldr	r3, [pc, #68]	; (8003164 <xTimerCreateTimerTask+0x54>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00b      	beq.n	800313e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <xTimerCreateTimerTask+0x58>)
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	2302      	movs	r3, #2
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	2300      	movs	r3, #0
 8003130:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003134:	490d      	ldr	r1, [pc, #52]	; (800316c <xTimerCreateTimerTask+0x5c>)
 8003136:	480e      	ldr	r0, [pc, #56]	; (8003170 <xTimerCreateTimerTask+0x60>)
 8003138:	f7ff f812 	bl	8002160 <xTaskCreate>
 800313c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	603b      	str	r3, [r7, #0]
    }
 8003156:	bf00      	nop
 8003158:	e7fe      	b.n	8003158 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800315a:	687b      	ldr	r3, [r7, #4]
    }
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	200001c8 	.word	0x200001c8
 8003168:	200001cc 	.word	0x200001cc
 800316c:	08006798 	.word	0x08006798
 8003170:	08003219 	.word	0x08003219

08003174 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003180:	e008      	b.n	8003194 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	4413      	add	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	699a      	ldr	r2, [r3, #24]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	18d1      	adds	r1, r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f8dd 	bl	8003360 <prvInsertTimerInActiveList>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1ea      	bne.n	8003182 <prvReloadTimer+0xe>
        }
    }
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031c2:	4b14      	ldr	r3, [pc, #80]	; (8003214 <prvProcessExpiredTimer+0x5c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3304      	adds	r3, #4
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe fc6b 	bl	8001aac <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f7ff ffc3 	bl	8003174 <prvReloadTimer>
 80031ee:	e008      	b.n	8003202 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	4798      	blx	r3
    }
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	200001c0 	.word	0x200001c0

08003218 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003220:	f107 0308 	add.w	r3, r7, #8
 8003224:	4618      	mov	r0, r3
 8003226:	f000 f857 	bl	80032d8 <prvGetNextExpireTime>
 800322a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4619      	mov	r1, r3
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 f803 	bl	800323c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003236:	f000 f8d5 	bl	80033e4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800323a:	e7f1      	b.n	8003220 <prvTimerTask+0x8>

0800323c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003246:	f7ff f987 	bl	8002558 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800324a:	f107 0308 	add.w	r3, r7, #8
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f866 	bl	8003320 <prvSampleTimeNow>
 8003254:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d130      	bne.n	80032be <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <prvProcessTimerOrBlockTask+0x3c>
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	429a      	cmp	r2, r3
 8003268:	d806      	bhi.n	8003278 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800326a:	f7ff f983 	bl	8002574 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800326e:	68f9      	ldr	r1, [r7, #12]
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff ffa1 	bl	80031b8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003276:	e024      	b.n	80032c2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800327e:	4b13      	ldr	r3, [pc, #76]	; (80032cc <prvProcessTimerOrBlockTask+0x90>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <prvProcessTimerOrBlockTask+0x50>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <prvProcessTimerOrBlockTask+0x52>
 800328c:	2300      	movs	r3, #0
 800328e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <prvProcessTimerOrBlockTask+0x94>)
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	4619      	mov	r1, r3
 800329e:	f7fe ff2b 	bl	80020f8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80032a2:	f7ff f967 	bl	8002574 <xTaskResumeAll>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10a      	bne.n	80032c2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80032ac:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <prvProcessTimerOrBlockTask+0x98>)
 80032ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	f3bf 8f6f 	isb	sy
    }
 80032bc:	e001      	b.n	80032c2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80032be:	f7ff f959 	bl	8002574 <xTaskResumeAll>
    }
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	200001c4 	.word	0x200001c4
 80032d0:	200001c8 	.word	0x200001c8
 80032d4:	e000ed04 	.word	0xe000ed04

080032d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80032e0:	4b0e      	ldr	r3, [pc, #56]	; (800331c <prvGetNextExpireTime+0x44>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <prvGetNextExpireTime+0x16>
 80032ea:	2201      	movs	r2, #1
 80032ec:	e000      	b.n	80032f0 <prvGetNextExpireTime+0x18>
 80032ee:	2200      	movs	r2, #0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80032fc:	4b07      	ldr	r3, [pc, #28]	; (800331c <prvGetNextExpireTime+0x44>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e001      	b.n	800330c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800330c:	68fb      	ldr	r3, [r7, #12]
    }
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	200001c0 	.word	0x200001c0

08003320 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003328:	f7ff fa24 	bl	8002774 <xTaskGetTickCount>
 800332c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800332e:	4b0b      	ldr	r3, [pc, #44]	; (800335c <prvSampleTimeNow+0x3c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	429a      	cmp	r2, r3
 8003336:	d205      	bcs.n	8003344 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003338:	f000 f912 	bl	8003560 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	e002      	b.n	800334a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800334a:	4a04      	ldr	r2, [pc, #16]	; (800335c <prvSampleTimeNow+0x3c>)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003350:	68fb      	ldr	r3, [r7, #12]
    }
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	200001d0 	.word	0x200001d0

08003360 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	429a      	cmp	r2, r3
 8003384:	d812      	bhi.n	80033ac <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	1ad2      	subs	r2, r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	429a      	cmp	r2, r3
 8003392:	d302      	bcc.n	800339a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003394:	2301      	movs	r3, #1
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	e01b      	b.n	80033d2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800339a:	4b10      	ldr	r3, [pc, #64]	; (80033dc <prvInsertTimerInActiveList+0x7c>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	3304      	adds	r3, #4
 80033a2:	4619      	mov	r1, r3
 80033a4:	4610      	mov	r0, r2
 80033a6:	f7fe fb48 	bl	8001a3a <vListInsert>
 80033aa:	e012      	b.n	80033d2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d206      	bcs.n	80033c2 <prvInsertTimerInActiveList+0x62>
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d302      	bcc.n	80033c2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80033bc:	2301      	movs	r3, #1
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	e007      	b.n	80033d2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80033c2:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <prvInsertTimerInActiveList+0x80>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4619      	mov	r1, r3
 80033cc:	4610      	mov	r0, r2
 80033ce:	f7fe fb34 	bl	8001a3a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80033d2:	697b      	ldr	r3, [r7, #20]
    }
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	200001c4 	.word	0x200001c4
 80033e0:	200001c0 	.word	0x200001c0

080033e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80033ea:	e0a6      	b.n	800353a <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f2c0 80a2 	blt.w	8003538 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d004      	beq.n	800340a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	3304      	adds	r3, #4
 8003404:	4618      	mov	r0, r3
 8003406:	f7fe fb51 	bl	8001aac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ff87 	bl	8003320 <prvSampleTimeNow>
 8003412:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	3b01      	subs	r3, #1
 8003418:	2b08      	cmp	r3, #8
 800341a:	f200 808e 	bhi.w	800353a <prvProcessReceivedCommands+0x156>
 800341e:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <prvProcessReceivedCommands+0x40>)
 8003420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003424:	08003449 	.word	0x08003449
 8003428:	08003449 	.word	0x08003449
 800342c:	080034b1 	.word	0x080034b1
 8003430:	080034c5 	.word	0x080034c5
 8003434:	0800350f 	.word	0x0800350f
 8003438:	08003449 	.word	0x08003449
 800343c:	08003449 	.word	0x08003449
 8003440:	080034b1 	.word	0x080034b1
 8003444:	080034c5 	.word	0x080034c5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	b2da      	uxtb	r2, r3
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	18d1      	adds	r1, r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	69f8      	ldr	r0, [r7, #28]
 8003468:	f7ff ff7a 	bl	8003360 <prvInsertTimerInActiveList>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d063      	beq.n	800353a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d009      	beq.n	8003494 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	4413      	add	r3, r2
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4619      	mov	r1, r3
 800348c:	69f8      	ldr	r0, [r7, #28]
 800348e:	f7ff fe71 	bl	8003174 <prvReloadTimer>
 8003492:	e008      	b.n	80034a6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	69f8      	ldr	r0, [r7, #28]
 80034ac:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80034ae:	e044      	b.n	800353a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034b6:	f023 0301 	bic.w	r3, r3, #1
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80034c2:	e03a      	b.n	800353a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <prvProcessReceivedCommands+0x116>
        __asm volatile
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	617b      	str	r3, [r7, #20]
    }
 80034f6:	bf00      	nop
 80034f8:	e7fe      	b.n	80034f8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	18d1      	adds	r1, r2, r3
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	69f8      	ldr	r0, [r7, #28]
 8003508:	f7ff ff2a 	bl	8003360 <prvInsertTimerInActiveList>
                        break;
 800350c:	e015      	b.n	800353a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d103      	bne.n	8003524 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 800351c:	69f8      	ldr	r0, [r7, #28]
 800351e:	f000 fc35 	bl	8003d8c <vPortFree>
 8003522:	e00a      	b.n	800353a <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800352a:	f023 0301 	bic.w	r3, r3, #1
 800352e:	b2da      	uxtb	r2, r3
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003536:	e000      	b.n	800353a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003538:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <prvProcessReceivedCommands+0x178>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f107 0108 	add.w	r1, r7, #8
 8003542:	2200      	movs	r2, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f7fe fbe3 	bl	8001d10 <xQueueReceive>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	f47f af4d 	bne.w	80033ec <prvProcessReceivedCommands+0x8>
        }
    }
 8003552:	bf00      	nop
 8003554:	bf00      	nop
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	200001c8 	.word	0x200001c8

08003560 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003566:	e009      	b.n	800357c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003568:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <prvSwitchTimerLists+0x44>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003572:	f04f 31ff 	mov.w	r1, #4294967295
 8003576:	6838      	ldr	r0, [r7, #0]
 8003578:	f7ff fe1e 	bl	80031b8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800357c:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <prvSwitchTimerLists+0x44>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003586:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <prvSwitchTimerLists+0x44>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <prvSwitchTimerLists+0x48>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <prvSwitchTimerLists+0x44>)
 8003592:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003594:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <prvSwitchTimerLists+0x48>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6013      	str	r3, [r2, #0]
    }
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200001c0 	.word	0x200001c0
 80035a8:	200001c4 	.word	0x200001c4

080035ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80035b0:	f000 f9e0 	bl	8003974 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <prvCheckForValidListAndQueue+0x54>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d11d      	bne.n	80035f8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80035bc:	4811      	ldr	r0, [pc, #68]	; (8003604 <prvCheckForValidListAndQueue+0x58>)
 80035be:	f7fe fa0f 	bl	80019e0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80035c2:	4811      	ldr	r0, [pc, #68]	; (8003608 <prvCheckForValidListAndQueue+0x5c>)
 80035c4:	f7fe fa0c 	bl	80019e0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80035c8:	4b10      	ldr	r3, [pc, #64]	; (800360c <prvCheckForValidListAndQueue+0x60>)
 80035ca:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <prvCheckForValidListAndQueue+0x58>)
 80035cc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <prvCheckForValidListAndQueue+0x64>)
 80035d0:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <prvCheckForValidListAndQueue+0x5c>)
 80035d2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80035d4:	2200      	movs	r2, #0
 80035d6:	210c      	movs	r1, #12
 80035d8:	200a      	movs	r0, #10
 80035da:	f7fe fb21 	bl	8001c20 <xQueueGenericCreate>
 80035de:	4603      	mov	r3, r0
 80035e0:	4a07      	ldr	r2, [pc, #28]	; (8003600 <prvCheckForValidListAndQueue+0x54>)
 80035e2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <prvCheckForValidListAndQueue+0x54>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <prvCheckForValidListAndQueue+0x54>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4908      	ldr	r1, [pc, #32]	; (8003614 <prvCheckForValidListAndQueue+0x68>)
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fe fd2a 	bl	800204c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80035f8:	f000 f9ec 	bl	80039d4 <vPortExitCritical>
    }
 80035fc:	bf00      	nop
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	200001c8 	.word	0x200001c8
 8003604:	20000198 	.word	0x20000198
 8003608:	200001ac 	.word	0x200001ac
 800360c:	200001c0 	.word	0x200001c0
 8003610:	200001c4 	.word	0x200001c4
 8003614:	080067a0 	.word	0x080067a0

08003618 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3b04      	subs	r3, #4
 8003628:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003630:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	3b04      	subs	r3, #4
 8003636:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f023 0201 	bic.w	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3b04      	subs	r3, #4
 8003646:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003648:	4a0c      	ldr	r2, [pc, #48]	; (800367c <pxPortInitialiseStack+0x64>)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3b14      	subs	r3, #20
 8003652:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3b04      	subs	r3, #4
 800365e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f06f 0202 	mvn.w	r2, #2
 8003666:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3b20      	subs	r3, #32
 800366c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800366e:	68fb      	ldr	r3, [r7, #12]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	08003681 	.word	0x08003681

08003680 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <prvTaskExitError+0x54>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003692:	d00a      	beq.n	80036aa <prvTaskExitError+0x2a>
        __asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	60fb      	str	r3, [r7, #12]
    }
 80036a6:	bf00      	nop
 80036a8:	e7fe      	b.n	80036a8 <prvTaskExitError+0x28>
        __asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	60bb      	str	r3, [r7, #8]
    }
 80036bc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80036be:	bf00      	nop
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0fc      	beq.n	80036c0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80036c6:	bf00      	nop
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	20000010 	.word	0x20000010
	...

080036e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <pxCurrentTCBConst2>)
 80036e2:	6819      	ldr	r1, [r3, #0]
 80036e4:	6808      	ldr	r0, [r1, #0]
 80036e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ea:	f380 8809 	msr	PSP, r0
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f04f 0000 	mov.w	r0, #0
 80036f6:	f380 8811 	msr	BASEPRI, r0
 80036fa:	4770      	bx	lr
 80036fc:	f3af 8000 	nop.w

08003700 <pxCurrentTCBConst2>:
 8003700:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop

08003708 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003708:	4808      	ldr	r0, [pc, #32]	; (800372c <prvPortStartFirstTask+0x24>)
 800370a:	6800      	ldr	r0, [r0, #0]
 800370c:	6800      	ldr	r0, [r0, #0]
 800370e:	f380 8808 	msr	MSP, r0
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f380 8814 	msr	CONTROL, r0
 800371a:	b662      	cpsie	i
 800371c:	b661      	cpsie	f
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	df00      	svc	0
 8003728:	bf00      	nop
 800372a:	0000      	.short	0x0000
 800372c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003730:	bf00      	nop
 8003732:	bf00      	nop

08003734 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800373a:	4b46      	ldr	r3, [pc, #280]	; (8003854 <xPortStartScheduler+0x120>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a46      	ldr	r2, [pc, #280]	; (8003858 <xPortStartScheduler+0x124>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d10a      	bne.n	800375a <xPortStartScheduler+0x26>
        __asm volatile
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	613b      	str	r3, [r7, #16]
    }
 8003756:	bf00      	nop
 8003758:	e7fe      	b.n	8003758 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800375a:	4b3e      	ldr	r3, [pc, #248]	; (8003854 <xPortStartScheduler+0x120>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a3f      	ldr	r2, [pc, #252]	; (800385c <xPortStartScheduler+0x128>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d10a      	bne.n	800377a <xPortStartScheduler+0x46>
        __asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	60fb      	str	r3, [r7, #12]
    }
 8003776:	bf00      	nop
 8003778:	e7fe      	b.n	8003778 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800377a:	4b39      	ldr	r3, [pc, #228]	; (8003860 <xPortStartScheduler+0x12c>)
 800377c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	22ff      	movs	r2, #255	; 0xff
 800378a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	b2db      	uxtb	r3, r3
 8003792:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800379c:	b2da      	uxtb	r2, r3
 800379e:	4b31      	ldr	r3, [pc, #196]	; (8003864 <xPortStartScheduler+0x130>)
 80037a0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80037a2:	4b31      	ldr	r3, [pc, #196]	; (8003868 <xPortStartScheduler+0x134>)
 80037a4:	2207      	movs	r2, #7
 80037a6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037a8:	e009      	b.n	80037be <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80037aa:	4b2f      	ldr	r3, [pc, #188]	; (8003868 <xPortStartScheduler+0x134>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	4a2d      	ldr	r2, [pc, #180]	; (8003868 <xPortStartScheduler+0x134>)
 80037b2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c6:	2b80      	cmp	r3, #128	; 0x80
 80037c8:	d0ef      	beq.n	80037aa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80037ca:	4b27      	ldr	r3, [pc, #156]	; (8003868 <xPortStartScheduler+0x134>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f1c3 0307 	rsb	r3, r3, #7
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d00a      	beq.n	80037ec <xPortStartScheduler+0xb8>
        __asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	60bb      	str	r3, [r7, #8]
    }
 80037e8:	bf00      	nop
 80037ea:	e7fe      	b.n	80037ea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037ec:	4b1e      	ldr	r3, [pc, #120]	; (8003868 <xPortStartScheduler+0x134>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <xPortStartScheduler+0x134>)
 80037f4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037f6:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <xPortStartScheduler+0x134>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037fe:	4a1a      	ldr	r2, [pc, #104]	; (8003868 <xPortStartScheduler+0x134>)
 8003800:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	b2da      	uxtb	r2, r3
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800380a:	4b18      	ldr	r3, [pc, #96]	; (800386c <xPortStartScheduler+0x138>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a17      	ldr	r2, [pc, #92]	; (800386c <xPortStartScheduler+0x138>)
 8003810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003814:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003816:	4b15      	ldr	r3, [pc, #84]	; (800386c <xPortStartScheduler+0x138>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a14      	ldr	r2, [pc, #80]	; (800386c <xPortStartScheduler+0x138>)
 800381c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003820:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003822:	f000 f963 	bl	8003aec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003826:	4b12      	ldr	r3, [pc, #72]	; (8003870 <xPortStartScheduler+0x13c>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800382c:	f000 f982 	bl	8003b34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003830:	4b10      	ldr	r3, [pc, #64]	; (8003874 <xPortStartScheduler+0x140>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a0f      	ldr	r2, [pc, #60]	; (8003874 <xPortStartScheduler+0x140>)
 8003836:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800383a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800383c:	f7ff ff64 	bl	8003708 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003840:	f7ff f8d4 	bl	80029ec <vTaskSwitchContext>
    prvTaskExitError();
 8003844:	f7ff ff1c 	bl	8003680 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	e000ed00 	.word	0xe000ed00
 8003858:	410fc271 	.word	0x410fc271
 800385c:	410fc270 	.word	0x410fc270
 8003860:	e000e400 	.word	0xe000e400
 8003864:	200001d4 	.word	0x200001d4
 8003868:	200001d8 	.word	0x200001d8
 800386c:	e000ed20 	.word	0xe000ed20
 8003870:	20000010 	.word	0x20000010
 8003874:	e000ef34 	.word	0xe000ef34

08003878 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800387e:	4b37      	ldr	r3, [pc, #220]	; (800395c <vInitPrioGroupValue+0xe4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a37      	ldr	r2, [pc, #220]	; (8003960 <vInitPrioGroupValue+0xe8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d10a      	bne.n	800389e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	613b      	str	r3, [r7, #16]
    }
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800389e:	4b2f      	ldr	r3, [pc, #188]	; (800395c <vInitPrioGroupValue+0xe4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a30      	ldr	r2, [pc, #192]	; (8003964 <vInitPrioGroupValue+0xec>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d10a      	bne.n	80038be <vInitPrioGroupValue+0x46>
        __asm volatile
 80038a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	60fb      	str	r3, [r7, #12]
    }
 80038ba:	bf00      	nop
 80038bc:	e7fe      	b.n	80038bc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80038be:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <vInitPrioGroupValue+0xf0>)
 80038c0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	22ff      	movs	r2, #255	; 0xff
 80038ce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	4b22      	ldr	r3, [pc, #136]	; (800396c <vInitPrioGroupValue+0xf4>)
 80038e4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80038e6:	4b22      	ldr	r3, [pc, #136]	; (8003970 <vInitPrioGroupValue+0xf8>)
 80038e8:	2207      	movs	r2, #7
 80038ea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038ec:	e009      	b.n	8003902 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80038ee:	4b20      	ldr	r3, [pc, #128]	; (8003970 <vInitPrioGroupValue+0xf8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <vInitPrioGroupValue+0xf8>)
 80038f6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390a:	2b80      	cmp	r3, #128	; 0x80
 800390c:	d0ef      	beq.n	80038ee <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800390e:	4b18      	ldr	r3, [pc, #96]	; (8003970 <vInitPrioGroupValue+0xf8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f1c3 0307 	rsb	r3, r3, #7
 8003916:	2b04      	cmp	r3, #4
 8003918:	d00a      	beq.n	8003930 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	60bb      	str	r3, [r7, #8]
    }
 800392c:	bf00      	nop
 800392e:	e7fe      	b.n	800392e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003930:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <vInitPrioGroupValue+0xf8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	4a0e      	ldr	r2, [pc, #56]	; (8003970 <vInitPrioGroupValue+0xf8>)
 8003938:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800393a:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <vInitPrioGroupValue+0xf8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003942:	4a0b      	ldr	r2, [pc, #44]	; (8003970 <vInitPrioGroupValue+0xf8>)
 8003944:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	e000ed00 	.word	0xe000ed00
 8003960:	410fc271 	.word	0x410fc271
 8003964:	410fc270 	.word	0x410fc270
 8003968:	e000e400 	.word	0xe000e400
 800396c:	200001d4 	.word	0x200001d4
 8003970:	200001d8 	.word	0x200001d8

08003974 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
        __asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	607b      	str	r3, [r7, #4]
    }
 800398c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800398e:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <vPortEnterCritical+0x58>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3301      	adds	r3, #1
 8003994:	4a0d      	ldr	r2, [pc, #52]	; (80039cc <vPortEnterCritical+0x58>)
 8003996:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003998:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <vPortEnterCritical+0x58>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d10f      	bne.n	80039c0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <vPortEnterCritical+0x5c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <vPortEnterCritical+0x4c>
        __asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	603b      	str	r3, [r7, #0]
    }
 80039bc:	bf00      	nop
 80039be:	e7fe      	b.n	80039be <vPortEnterCritical+0x4a>
    }
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	20000010 	.word	0x20000010
 80039d0:	e000ed04 	.word	0xe000ed04

080039d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <vPortExitCritical+0x50>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10a      	bne.n	80039f8 <vPortExitCritical+0x24>
        __asm volatile
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	607b      	str	r3, [r7, #4]
    }
 80039f4:	bf00      	nop
 80039f6:	e7fe      	b.n	80039f6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <vPortExitCritical+0x50>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	4a09      	ldr	r2, [pc, #36]	; (8003a24 <vPortExitCritical+0x50>)
 8003a00:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <vPortExitCritical+0x50>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d105      	bne.n	8003a16 <vPortExitCritical+0x42>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003a14:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000010 	.word	0x20000010
	...

08003a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003a30:	f3ef 8009 	mrs	r0, PSP
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <pxCurrentTCBConst>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	f01e 0f10 	tst.w	lr, #16
 8003a40:	bf08      	it	eq
 8003a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4a:	6010      	str	r0, [r2, #0]
 8003a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a54:	f380 8811 	msr	BASEPRI, r0
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f7fe ffc4 	bl	80029ec <vTaskSwitchContext>
 8003a64:	f04f 0000 	mov.w	r0, #0
 8003a68:	f380 8811 	msr	BASEPRI, r0
 8003a6c:	bc09      	pop	{r0, r3}
 8003a6e:	6819      	ldr	r1, [r3, #0]
 8003a70:	6808      	ldr	r0, [r1, #0]
 8003a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a76:	f01e 0f10 	tst.w	lr, #16
 8003a7a:	bf08      	it	eq
 8003a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a80:	f380 8809 	msr	PSP, r0
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	f3af 8000 	nop.w

08003a90 <pxCurrentTCBConst>:
 8003a90:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop

08003a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
        __asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	607b      	str	r3, [r7, #4]
    }
 8003ab0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003ab2:	f001 fe2d 	bl	8005710 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003ab6:	f7fe fe7f 	bl	80027b8 <xTaskIncrementTick>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d006      	beq.n	8003ace <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003ac0:	f001 fe84 	bl	80057cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ac4:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <SysTick_Handler+0x50>)
 8003ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e001      	b.n	8003ad2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003ace:	f001 fe61 	bl	8005794 <SEGGER_SYSVIEW_RecordExitISR>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	f383 8811 	msr	BASEPRI, r3
    }
 8003adc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <vPortSetupTimerInterrupt+0x34>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003af6:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <vPortSetupTimerInterrupt+0x38>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003afc:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <vPortSetupTimerInterrupt+0x3c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <vPortSetupTimerInterrupt+0x40>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	099b      	lsrs	r3, r3, #6
 8003b08:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <vPortSetupTimerInterrupt+0x44>)
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b0e:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <vPortSetupTimerInterrupt+0x34>)
 8003b10:	2207      	movs	r2, #7
 8003b12:	601a      	str	r2, [r3, #0]
}
 8003b14:	bf00      	nop
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	e000e010 	.word	0xe000e010
 8003b24:	e000e018 	.word	0xe000e018
 8003b28:	20000000 	.word	0x20000000
 8003b2c:	10624dd3 	.word	0x10624dd3
 8003b30:	e000e014 	.word	0xe000e014

08003b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003b34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b44 <vPortEnableVFP+0x10>
 8003b38:	6801      	ldr	r1, [r0, #0]
 8003b3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b3e:	6001      	str	r1, [r0, #0]
 8003b40:	4770      	bx	lr
 8003b42:	0000      	.short	0x0000
 8003b44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop

08003b4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003b52:	f3ef 8305 	mrs	r3, IPSR
 8003b56:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b0f      	cmp	r3, #15
 8003b5c:	d914      	bls.n	8003b88 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b5e:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <vPortValidateInterruptPriority+0x70>)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003b68:	4b15      	ldr	r3, [pc, #84]	; (8003bc0 <vPortValidateInterruptPriority+0x74>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	7afa      	ldrb	r2, [r7, #11]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d20a      	bcs.n	8003b88 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	607b      	str	r3, [r7, #4]
    }
 8003b84:	bf00      	nop
 8003b86:	e7fe      	b.n	8003b86 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003b88:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <vPortValidateInterruptPriority+0x78>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b90:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <vPortValidateInterruptPriority+0x7c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d90a      	bls.n	8003bae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	603b      	str	r3, [r7, #0]
    }
 8003baa:	bf00      	nop
 8003bac:	e7fe      	b.n	8003bac <vPortValidateInterruptPriority+0x60>
    }
 8003bae:	bf00      	nop
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	e000e3f0 	.word	0xe000e3f0
 8003bc0:	200001d4 	.word	0x200001d4
 8003bc4:	e000ed0c 	.word	0xe000ed0c
 8003bc8:	200001d8 	.word	0x200001d8

08003bcc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003bd8:	f7fe fcbe 	bl	8002558 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003bdc:	4b65      	ldr	r3, [pc, #404]	; (8003d74 <pvPortMalloc+0x1a8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003be4:	f000 f934 	bl	8003e50 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003be8:	4b63      	ldr	r3, [pc, #396]	; (8003d78 <pvPortMalloc+0x1ac>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f040 80a7 	bne.w	8003d44 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d02d      	beq.n	8003c58 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d227      	bcs.n	8003c58 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003c08:	2208      	movs	r2, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d021      	beq.n	8003c5e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f023 0307 	bic.w	r3, r3, #7
 8003c20:	3308      	adds	r3, #8
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d214      	bcs.n	8003c52 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f023 0307 	bic.w	r3, r3, #7
 8003c2e:	3308      	adds	r3, #8
 8003c30:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d010      	beq.n	8003c5e <pvPortMalloc+0x92>
        __asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	617b      	str	r3, [r7, #20]
    }
 8003c4e:	bf00      	nop
 8003c50:	e7fe      	b.n	8003c50 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003c52:	2300      	movs	r3, #0
 8003c54:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c56:	e002      	b.n	8003c5e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	607b      	str	r3, [r7, #4]
 8003c5c:	e000      	b.n	8003c60 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c5e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d06e      	beq.n	8003d44 <pvPortMalloc+0x178>
 8003c66:	4b45      	ldr	r3, [pc, #276]	; (8003d7c <pvPortMalloc+0x1b0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d869      	bhi.n	8003d44 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003c70:	4b43      	ldr	r3, [pc, #268]	; (8003d80 <pvPortMalloc+0x1b4>)
 8003c72:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003c74:	4b42      	ldr	r3, [pc, #264]	; (8003d80 <pvPortMalloc+0x1b4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c7a:	e004      	b.n	8003c86 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d903      	bls.n	8003c98 <pvPortMalloc+0xcc>
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f1      	bne.n	8003c7c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003c98:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <pvPortMalloc+0x1a8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d050      	beq.n	8003d44 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2208      	movs	r2, #8
 8003ca8:	4413      	add	r3, r2
 8003caa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	1ad2      	subs	r2, r2, r3
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d91f      	bls.n	8003d04 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <pvPortMalloc+0x120>
        __asm volatile
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	613b      	str	r3, [r7, #16]
    }
 8003ce8:	bf00      	nop
 8003cea:	e7fe      	b.n	8003cea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	1ad2      	subs	r2, r2, r3
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003cfe:	69b8      	ldr	r0, [r7, #24]
 8003d00:	f000 f908 	bl	8003f14 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d04:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <pvPortMalloc+0x1b0>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	4a1b      	ldr	r2, [pc, #108]	; (8003d7c <pvPortMalloc+0x1b0>)
 8003d10:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d12:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <pvPortMalloc+0x1b0>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <pvPortMalloc+0x1b8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d203      	bcs.n	8003d26 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d1e:	4b17      	ldr	r3, [pc, #92]	; (8003d7c <pvPortMalloc+0x1b0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <pvPortMalloc+0x1b8>)
 8003d24:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <pvPortMalloc+0x1ac>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003d3a:	4b13      	ldr	r3, [pc, #76]	; (8003d88 <pvPortMalloc+0x1bc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	4a11      	ldr	r2, [pc, #68]	; (8003d88 <pvPortMalloc+0x1bc>)
 8003d42:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003d44:	f7fe fc16 	bl	8002574 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <pvPortMalloc+0x19c>
        __asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	60fb      	str	r3, [r7, #12]
    }
 8003d64:	bf00      	nop
 8003d66:	e7fe      	b.n	8003d66 <pvPortMalloc+0x19a>
    return pvReturn;
 8003d68:	69fb      	ldr	r3, [r7, #28]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3728      	adds	r7, #40	; 0x28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20012de4 	.word	0x20012de4
 8003d78:	20012df8 	.word	0x20012df8
 8003d7c:	20012de8 	.word	0x20012de8
 8003d80:	20012ddc 	.word	0x20012ddc
 8003d84:	20012dec 	.word	0x20012dec
 8003d88:	20012df0 	.word	0x20012df0

08003d8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d04d      	beq.n	8003e3a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003d9e:	2308      	movs	r3, #8
 8003da0:	425b      	negs	r3, r3
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4413      	add	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <vPortFree+0xb8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4013      	ands	r3, r2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10a      	bne.n	8003dd0 <vPortFree+0x44>
        __asm volatile
 8003dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	60fb      	str	r3, [r7, #12]
    }
 8003dcc:	bf00      	nop
 8003dce:	e7fe      	b.n	8003dce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <vPortFree+0x62>
        __asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	60bb      	str	r3, [r7, #8]
    }
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <vPortFree+0xb8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01e      	beq.n	8003e3a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d11a      	bne.n	8003e3a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <vPortFree+0xb8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	401a      	ands	r2, r3
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003e14:	f7fe fba0 	bl	8002558 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <vPortFree+0xbc>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4413      	add	r3, r2
 8003e22:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <vPortFree+0xbc>)
 8003e24:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e26:	6938      	ldr	r0, [r7, #16]
 8003e28:	f000 f874 	bl	8003f14 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003e2c:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <vPortFree+0xc0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3301      	adds	r3, #1
 8003e32:	4a06      	ldr	r2, [pc, #24]	; (8003e4c <vPortFree+0xc0>)
 8003e34:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003e36:	f7fe fb9d 	bl	8002574 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003e3a:	bf00      	nop
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20012df8 	.word	0x20012df8
 8003e48:	20012de8 	.word	0x20012de8
 8003e4c:	20012df4 	.word	0x20012df4

08003e50 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e56:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003e5a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003e5c:	4b27      	ldr	r3, [pc, #156]	; (8003efc <prvHeapInit+0xac>)
 8003e5e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00c      	beq.n	8003e84 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3307      	adds	r3, #7
 8003e6e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0307 	bic.w	r3, r3, #7
 8003e76:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	4a1f      	ldr	r2, [pc, #124]	; (8003efc <prvHeapInit+0xac>)
 8003e80:	4413      	add	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e88:	4a1d      	ldr	r2, [pc, #116]	; (8003f00 <prvHeapInit+0xb0>)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003e8e:	4b1c      	ldr	r3, [pc, #112]	; (8003f00 <prvHeapInit+0xb0>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	4413      	add	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0307 	bic.w	r3, r3, #7
 8003eaa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <prvHeapInit+0xb4>)
 8003eb0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003eb2:	4b14      	ldr	r3, [pc, #80]	; (8003f04 <prvHeapInit+0xb4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003eba:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <prvHeapInit+0xb4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	1ad2      	subs	r2, r2, r3
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <prvHeapInit+0xb4>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <prvHeapInit+0xb8>)
 8003ede:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <prvHeapInit+0xbc>)
 8003ee6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ee8:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <prvHeapInit+0xc0>)
 8003eea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003eee:	601a      	str	r2, [r3, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	200001dc 	.word	0x200001dc
 8003f00:	20012ddc 	.word	0x20012ddc
 8003f04:	20012de4 	.word	0x20012de4
 8003f08:	20012dec 	.word	0x20012dec
 8003f0c:	20012de8 	.word	0x20012de8
 8003f10:	20012df8 	.word	0x20012df8

08003f14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f1c:	4b28      	ldr	r3, [pc, #160]	; (8003fc0 <prvInsertBlockIntoFreeList+0xac>)
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	e002      	b.n	8003f28 <prvInsertBlockIntoFreeList+0x14>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d8f7      	bhi.n	8003f22 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d108      	bne.n	8003f56 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	441a      	add	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	441a      	add	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d118      	bne.n	8003f9c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d00d      	beq.n	8003f92 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	441a      	add	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e008      	b.n	8003fa4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f92:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	e003      	b.n	8003fa4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d002      	beq.n	8003fb2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	20012ddc 	.word	0x20012ddc
 8003fc4:	20012de4 	.word	0x20012de4

08003fc8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003fcc:	4803      	ldr	r0, [pc, #12]	; (8003fdc <_cbSendSystemDesc+0x14>)
 8003fce:	f001 fb49 	bl	8005664 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003fd2:	4803      	ldr	r0, [pc, #12]	; (8003fe0 <_cbSendSystemDesc+0x18>)
 8003fd4:	f001 fb46 	bl	8005664 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003fd8:	bf00      	nop
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	080067a8 	.word	0x080067a8
 8003fe0:	080067e8 	.word	0x080067e8

08003fe4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <SEGGER_SYSVIEW_Conf+0x20>)
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <SEGGER_SYSVIEW_Conf+0x20>)
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <SEGGER_SYSVIEW_Conf+0x24>)
 8003ff2:	4a06      	ldr	r2, [pc, #24]	; (800400c <SEGGER_SYSVIEW_Conf+0x28>)
 8003ff4:	f000 feb4 	bl	8004d60 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003ff8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003ffc:	f000 fef4 	bl	8004de8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004000:	bf00      	nop
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000000 	.word	0x20000000
 8004008:	08003fc9 	.word	0x08003fc9
 800400c:	0800687c 	.word	0x0800687c

08004010 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004012:	b085      	sub	sp, #20
 8004014:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004016:	2300      	movs	r3, #0
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	e033      	b.n	8004084 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800401c:	491e      	ldr	r1, [pc, #120]	; (8004098 <_cbSendTaskList+0x88>)
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	491a      	ldr	r1, [pc, #104]	; (8004098 <_cbSendTaskList+0x88>)
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	3304      	adds	r3, #4
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	4c16      	ldr	r4, [pc, #88]	; (8004098 <_cbSendTaskList+0x88>)
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4423      	add	r3, r4
 800404c:	3308      	adds	r3, #8
 800404e:	681c      	ldr	r4, [r3, #0]
 8004050:	4d11      	ldr	r5, [pc, #68]	; (8004098 <_cbSendTaskList+0x88>)
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	442b      	add	r3, r5
 800405e:	330c      	adds	r3, #12
 8004060:	681d      	ldr	r5, [r3, #0]
 8004062:	4e0d      	ldr	r6, [pc, #52]	; (8004098 <_cbSendTaskList+0x88>)
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4433      	add	r3, r6
 8004070:	3310      	adds	r3, #16
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	462b      	mov	r3, r5
 8004078:	4622      	mov	r2, r4
 800407a:	f000 f8b5 	bl	80041e8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3301      	adds	r3, #1
 8004082:	607b      	str	r3, [r7, #4]
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <_cbSendTaskList+0x8c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	429a      	cmp	r2, r3
 800408c:	d3c6      	bcc.n	800401c <_cbSendTaskList+0xc>
  }
}
 800408e:	bf00      	nop
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004098:	20012dfc 	.word	0x20012dfc
 800409c:	20012e9c 	.word	0x20012e9c

080040a0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80040a0:	b5b0      	push	{r4, r5, r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80040a6:	f7fe fb75 	bl	8002794 <xTaskGetTickCountFromISR>
 80040aa:	4603      	mov	r3, r0
 80040ac:	461a      	mov	r2, r3
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80040b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	f04f 0400 	mov.w	r4, #0
 80040c2:	f04f 0500 	mov.w	r5, #0
 80040c6:	015d      	lsls	r5, r3, #5
 80040c8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80040cc:	0154      	lsls	r4, r2, #5
 80040ce:	4622      	mov	r2, r4
 80040d0:	462b      	mov	r3, r5
 80040d2:	1a12      	subs	r2, r2, r0
 80040d4:	eb63 0301 	sbc.w	r3, r3, r1
 80040d8:	f04f 0400 	mov.w	r4, #0
 80040dc:	f04f 0500 	mov.w	r5, #0
 80040e0:	009d      	lsls	r5, r3, #2
 80040e2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80040e6:	0094      	lsls	r4, r2, #2
 80040e8:	4622      	mov	r2, r4
 80040ea:	462b      	mov	r3, r5
 80040ec:	1812      	adds	r2, r2, r0
 80040ee:	eb41 0303 	adc.w	r3, r1, r3
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f04f 0100 	mov.w	r1, #0
 80040fa:	00d9      	lsls	r1, r3, #3
 80040fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004100:	00d0      	lsls	r0, r2, #3
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800410a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800410e:	4610      	mov	r0, r2
 8004110:	4619      	mov	r1, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bdb0      	pop	{r4, r5, r7, pc}

08004118 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af02      	add	r7, sp, #8
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004126:	2205      	movs	r2, #5
 8004128:	492b      	ldr	r1, [pc, #172]	; (80041d8 <SYSVIEW_AddTask+0xc0>)
 800412a:	68b8      	ldr	r0, [r7, #8]
 800412c:	f001 fe2a 	bl	8005d84 <memcmp>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d04b      	beq.n	80041ce <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004136:	4b29      	ldr	r3, [pc, #164]	; (80041dc <SYSVIEW_AddTask+0xc4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b07      	cmp	r3, #7
 800413c:	d903      	bls.n	8004146 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800413e:	4828      	ldr	r0, [pc, #160]	; (80041e0 <SYSVIEW_AddTask+0xc8>)
 8004140:	f001 fd8e 	bl	8005c60 <SEGGER_SYSVIEW_Warn>
    return;
 8004144:	e044      	b.n	80041d0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004146:	4b25      	ldr	r3, [pc, #148]	; (80041dc <SYSVIEW_AddTask+0xc4>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4926      	ldr	r1, [pc, #152]	; (80041e4 <SYSVIEW_AddTask+0xcc>)
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800415a:	4b20      	ldr	r3, [pc, #128]	; (80041dc <SYSVIEW_AddTask+0xc4>)
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	4921      	ldr	r1, [pc, #132]	; (80041e4 <SYSVIEW_AddTask+0xcc>)
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	3304      	adds	r3, #4
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004170:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <SYSVIEW_AddTask+0xc4>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	491b      	ldr	r1, [pc, #108]	; (80041e4 <SYSVIEW_AddTask+0xcc>)
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	3308      	adds	r3, #8
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004186:	4b15      	ldr	r3, [pc, #84]	; (80041dc <SYSVIEW_AddTask+0xc4>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4916      	ldr	r1, [pc, #88]	; (80041e4 <SYSVIEW_AddTask+0xcc>)
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	330c      	adds	r3, #12
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800419c:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <SYSVIEW_AddTask+0xc4>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4910      	ldr	r1, [pc, #64]	; (80041e4 <SYSVIEW_AddTask+0xcc>)
 80041a2:	4613      	mov	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	3310      	adds	r3, #16
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <SYSVIEW_AddTask+0xc4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3301      	adds	r3, #1
 80041b8:	4a08      	ldr	r2, [pc, #32]	; (80041dc <SYSVIEW_AddTask+0xc4>)
 80041ba:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f80e 	bl	80041e8 <SYSVIEW_SendTaskInfo>
 80041cc:	e000      	b.n	80041d0 <SYSVIEW_AddTask+0xb8>
    return;
 80041ce:	bf00      	nop

}
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	080067f8 	.word	0x080067f8
 80041dc:	20012e9c 	.word	0x20012e9c
 80041e0:	08006800 	.word	0x08006800
 80041e4:	20012dfc 	.word	0x20012dfc

080041e8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08a      	sub	sp, #40	; 0x28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80041f6:	f107 0314 	add.w	r3, r7, #20
 80041fa:	2214      	movs	r2, #20
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 fddc 	bl	8005dbc <memset>
  TaskInfo.TaskID     = TaskID;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004218:	f107 0314 	add.w	r3, r7, #20
 800421c:	4618      	mov	r0, r3
 800421e:	f001 f929 	bl	8005474 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004222:	bf00      	nop
 8004224:	3728      	adds	r7, #40	; 0x28
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004232:	4b26      	ldr	r3, [pc, #152]	; (80042cc <_DoInit+0xa0>)
 8004234:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004236:	22a8      	movs	r2, #168	; 0xa8
 8004238:	2100      	movs	r1, #0
 800423a:	6838      	ldr	r0, [r7, #0]
 800423c:	f001 fdbe 	bl	8005dbc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2203      	movs	r2, #3
 8004244:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2203      	movs	r2, #3
 800424a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	4a20      	ldr	r2, [pc, #128]	; (80042d0 <_DoInit+0xa4>)
 8004250:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	4a1f      	ldr	r2, [pc, #124]	; (80042d4 <_DoInit+0xa8>)
 8004256:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800425e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2200      	movs	r2, #0
 8004264:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2200      	movs	r2, #0
 800426a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2200      	movs	r2, #0
 8004270:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <_DoInit+0xa4>)
 8004276:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <_DoInit+0xac>)
 800427c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2210      	movs	r2, #16
 8004282:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2200      	movs	r2, #0
 8004288:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2200      	movs	r2, #0
 800428e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2200      	movs	r2, #0
 8004294:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004296:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800429a:	2300      	movs	r3, #0
 800429c:	607b      	str	r3, [r7, #4]
 800429e:	e00c      	b.n	80042ba <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f1c3 030f 	rsb	r3, r3, #15
 80042a6:	4a0d      	ldr	r2, [pc, #52]	; (80042dc <_DoInit+0xb0>)
 80042a8:	5cd1      	ldrb	r1, [r2, r3]
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4413      	add	r3, r2
 80042b0:	460a      	mov	r2, r1
 80042b2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3301      	adds	r3, #1
 80042b8:	607b      	str	r3, [r7, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b0f      	cmp	r3, #15
 80042be:	d9ef      	bls.n	80042a0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80042c0:	f3bf 8f5f 	dmb	sy
}
 80042c4:	bf00      	nop
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20014464 	.word	0x20014464
 80042d0:	08006850 	.word	0x08006850
 80042d4:	20012ea0 	.word	0x20012ea0
 80042d8:	200132a0 	.word	0x200132a0
 80042dc:	08006884 	.word	0x08006884

080042e0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08a      	sub	sp, #40	; 0x28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80042ec:	2300      	movs	r3, #0
 80042ee:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	429a      	cmp	r2, r3
 8004302:	d905      	bls.n	8004310 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
 800430e:	e007      	b.n	8004320 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	69b9      	ldr	r1, [r7, #24]
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	1acb      	subs	r3, r1, r3
 800431a:	4413      	add	r3, r2
 800431c:	3b01      	subs	r3, #1
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432a:	4293      	cmp	r3, r2
 800432c:	bf28      	it	cs
 800432e:	4613      	movcs	r3, r2
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4293      	cmp	r3, r2
 8004338:	bf28      	it	cs
 800433a:	4613      	movcs	r3, r2
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	6978      	ldr	r0, [r7, #20]
 800434e:	f001 fd27 	bl	8005da0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004352:	6a3a      	ldr	r2, [r7, #32]
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	4413      	add	r3, r2
 8004358:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	4413      	add	r3, r2
 8004360:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	4413      	add	r3, r2
 8004370:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	429a      	cmp	r2, r3
 800437a:	d101      	bne.n	8004380 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004380:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1b2      	bne.n	80042f6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004390:	6a3b      	ldr	r3, [r7, #32]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3728      	adds	r7, #40	; 0x28
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800439a:	b580      	push	{r7, lr}
 800439c:	b088      	sub	sp, #32
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d911      	bls.n	80043e2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	6938      	ldr	r0, [r7, #16]
 80043ce:	f001 fce7 	bl	8005da0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80043d2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	441a      	add	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80043e0:	e01f      	b.n	8004422 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	4413      	add	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	6938      	ldr	r0, [r7, #16]
 80043f6:	f001 fcd3 	bl	8005da0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	4413      	add	r3, r2
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4619      	mov	r1, r3
 8004412:	6938      	ldr	r0, [r7, #16]
 8004414:	f001 fcc4 	bl	8005da0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004418:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	60da      	str	r2, [r3, #12]
}
 8004422:	bf00      	nop
 8004424:	3720      	adds	r7, #32
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800442a:	b480      	push	{r7}
 800442c:	b087      	sub	sp, #28
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	429a      	cmp	r2, r3
 8004444:	d808      	bhi.n	8004458 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	1ad2      	subs	r2, r2, r3
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4413      	add	r3, r2
 8004452:	3b01      	subs	r3, #1
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	e004      	b.n	8004462 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004462:	697b      	ldr	r3, [r7, #20]
}
 8004464:	4618      	mov	r0, r3
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b08c      	sub	sp, #48	; 0x30
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800447c:	4b3e      	ldr	r3, [pc, #248]	; (8004578 <SEGGER_RTT_ReadNoLock+0x108>)
 800447e:	623b      	str	r3, [r7, #32]
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <SEGGER_RTT_ReadNoLock+0x1e>
 800448a:	f7ff fecf 	bl	800422c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4613      	mov	r3, r2
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	4413      	add	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	3360      	adds	r3, #96	; 0x60
 800449a:	4a37      	ldr	r2, [pc, #220]	; (8004578 <SEGGER_RTT_ReadNoLock+0x108>)
 800449c:	4413      	add	r3, r2
 800449e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80044b0:	2300      	movs	r3, #0
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80044b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d92b      	bls.n	8004514 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4293      	cmp	r3, r2
 80044cc:	bf28      	it	cs
 80044ce:	4613      	movcs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	4413      	add	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	6939      	ldr	r1, [r7, #16]
 80044e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044e2:	f001 fc5d 	bl	8005da0 <memcpy>
    NumBytesRead += NumBytesRem;
 80044e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4413      	add	r3, r2
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80044ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	4413      	add	r3, r2
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80044fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	4413      	add	r3, r2
 8004504:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800450c:	429a      	cmp	r2, r3
 800450e:	d101      	bne.n	8004514 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004510:	2300      	movs	r3, #0
 8004512:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4293      	cmp	r3, r2
 8004522:	bf28      	it	cs
 8004524:	4613      	movcs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d019      	beq.n	8004562 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	4413      	add	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	6939      	ldr	r1, [r7, #16]
 800453c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800453e:	f001 fc2f 	bl	8005da0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	4413      	add	r3, r2
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800454a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	4413      	add	r3, r2
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800455a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	4413      	add	r3, r2
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800456c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004570:	4618      	mov	r0, r3
 8004572:	3730      	adds	r7, #48	; 0x30
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20014464 	.word	0x20014464

0800457c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	4613      	mov	r3, r2
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	4413      	add	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <SEGGER_RTT_WriteNoLock+0x9c>)
 800459a:	4413      	add	r3, r2
 800459c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d029      	beq.n	80045fa <SEGGER_RTT_WriteNoLock+0x7e>
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d82e      	bhi.n	8004608 <SEGGER_RTT_WriteNoLock+0x8c>
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <SEGGER_RTT_WriteNoLock+0x38>
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d013      	beq.n	80045da <SEGGER_RTT_WriteNoLock+0x5e>
 80045b2:	e029      	b.n	8004608 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80045b4:	6978      	ldr	r0, [r7, #20]
 80045b6:	f7ff ff38 	bl	800442a <_GetAvailWriteSpace>
 80045ba:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d202      	bcs.n	80045ca <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80045c8:	e021      	b.n	800460e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	69b9      	ldr	r1, [r7, #24]
 80045d2:	6978      	ldr	r0, [r7, #20]
 80045d4:	f7ff fee1 	bl	800439a <_WriteNoCheck>
    break;
 80045d8:	e019      	b.n	800460e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80045da:	6978      	ldr	r0, [r7, #20]
 80045dc:	f7ff ff25 	bl	800442a <_GetAvailWriteSpace>
 80045e0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4293      	cmp	r3, r2
 80045e8:	bf28      	it	cs
 80045ea:	4613      	movcs	r3, r2
 80045ec:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80045ee:	69fa      	ldr	r2, [r7, #28]
 80045f0:	69b9      	ldr	r1, [r7, #24]
 80045f2:	6978      	ldr	r0, [r7, #20]
 80045f4:	f7ff fed1 	bl	800439a <_WriteNoCheck>
    break;
 80045f8:	e009      	b.n	800460e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	69b9      	ldr	r1, [r7, #24]
 80045fe:	6978      	ldr	r0, [r7, #20]
 8004600:	f7ff fe6e 	bl	80042e0 <_WriteBlocking>
 8004604:	61f8      	str	r0, [r7, #28]
    break;
 8004606:	e002      	b.n	800460e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004608:	2300      	movs	r3, #0
 800460a:	61fb      	str	r3, [r7, #28]
    break;
 800460c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800460e:	69fb      	ldr	r3, [r7, #28]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20014464 	.word	0x20014464

0800461c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004628:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <SEGGER_RTT_Write+0x48>)
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <SEGGER_RTT_Write+0x1e>
 8004636:	f7ff fdf9 	bl	800422c <_DoInit>
  SEGGER_RTT_LOCK();
 800463a:	f3ef 8311 	mrs	r3, BASEPRI
 800463e:	f04f 0120 	mov.w	r1, #32
 8004642:	f381 8811 	msr	BASEPRI, r1
 8004646:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f7ff ff95 	bl	800457c <SEGGER_RTT_WriteNoLock>
 8004652:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800465a:	697b      	ldr	r3, [r7, #20]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3720      	adds	r7, #32
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20014464 	.word	0x20014464

08004668 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004676:	4b3d      	ldr	r3, [pc, #244]	; (800476c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004684:	f7ff fdd2 	bl	800422c <_DoInit>
  SEGGER_RTT_LOCK();
 8004688:	f3ef 8311 	mrs	r3, BASEPRI
 800468c:	f04f 0120 	mov.w	r1, #32
 8004690:	f381 8811 	msr	BASEPRI, r1
 8004694:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004696:	4b35      	ldr	r3, [pc, #212]	; (800476c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004698:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800469e:	6939      	ldr	r1, [r7, #16]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	4613      	mov	r3, r2
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	4413      	add	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	440b      	add	r3, r1
 80046ae:	3304      	adds	r3, #4
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d008      	beq.n	80046c8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	3301      	adds	r3, #1
 80046ba:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	dbeb      	blt.n	800469e <SEGGER_RTT_AllocUpBuffer+0x36>
 80046c6:	e000      	b.n	80046ca <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80046c8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	da3f      	bge.n	8004754 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80046d4:	6939      	ldr	r1, [r7, #16]
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	4613      	mov	r3, r2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	4413      	add	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	440b      	add	r3, r1
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80046e8:	6939      	ldr	r1, [r7, #16]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	4613      	mov	r3, r2
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	4413      	add	r3, r2
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	440b      	add	r3, r1
 80046f8:	3304      	adds	r3, #4
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80046fe:	6939      	ldr	r1, [r7, #16]
 8004700:	69fa      	ldr	r2, [r7, #28]
 8004702:	4613      	mov	r3, r2
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	4413      	add	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	440b      	add	r3, r1
 800470c:	3320      	adds	r3, #32
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004712:	6939      	ldr	r1, [r7, #16]
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	4613      	mov	r3, r2
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	4413      	add	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	440b      	add	r3, r1
 8004720:	3328      	adds	r3, #40	; 0x28
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004726:	6939      	ldr	r1, [r7, #16]
 8004728:	69fa      	ldr	r2, [r7, #28]
 800472a:	4613      	mov	r3, r2
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	4413      	add	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	440b      	add	r3, r1
 8004734:	3324      	adds	r3, #36	; 0x24
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800473a:	6939      	ldr	r1, [r7, #16]
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	4613      	mov	r3, r2
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	4413      	add	r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	440b      	add	r3, r1
 8004748:	332c      	adds	r3, #44	; 0x2c
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800474e:	f3bf 8f5f 	dmb	sy
 8004752:	e002      	b.n	800475a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004754:	f04f 33ff 	mov.w	r3, #4294967295
 8004758:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004760:	69fb      	ldr	r3, [r7, #28]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3720      	adds	r7, #32
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20014464 	.word	0x20014464

08004770 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004770:	b580      	push	{r7, lr}
 8004772:	b08a      	sub	sp, #40	; 0x28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800477e:	4b21      	ldr	r3, [pc, #132]	; (8004804 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004780:	623b      	str	r3, [r7, #32]
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800478c:	f7ff fd4e 	bl	800422c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004790:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004792:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d82c      	bhi.n	80047f4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800479a:	f3ef 8311 	mrs	r3, BASEPRI
 800479e:	f04f 0120 	mov.w	r1, #32
 80047a2:	f381 8811 	msr	BASEPRI, r1
 80047a6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4613      	mov	r3, r2
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	4413      	add	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	3360      	adds	r3, #96	; 0x60
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	4413      	add	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00e      	beq.n	80047de <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2200      	movs	r2, #0
 80047d6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2200      	movs	r2, #0
 80047dc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80047e4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
 80047f2:	e002      	b.n	80047fa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80047f4:	f04f 33ff 	mov.w	r3, #4294967295
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3728      	adds	r7, #40	; 0x28
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20014464 	.word	0x20014464

08004808 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00f      	beq.n	800483e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800481e:	e002      	b.n	8004826 <_EncodeStr+0x1e>
      Len++;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	3301      	adds	r3, #1
 8004824:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4413      	add	r3, r2
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f6      	bne.n	8004820 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	429a      	cmp	r2, r3
 8004838:	d901      	bls.n	800483e <_EncodeStr+0x36>
      Len = Limit;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2bfe      	cmp	r3, #254	; 0xfe
 8004842:	d806      	bhi.n	8004852 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	60fa      	str	r2, [r7, #12]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	e011      	b.n	8004876 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	60fa      	str	r2, [r7, #12]
 8004858:	22ff      	movs	r2, #255	; 0xff
 800485a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	60fa      	str	r2, [r7, #12]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	0a19      	lsrs	r1, r3, #8
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	60fa      	str	r2, [r7, #12]
 8004872:	b2ca      	uxtb	r2, r1
 8004874:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800487a:	e00a      	b.n	8004892 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	1c53      	adds	r3, r2, #1
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1c59      	adds	r1, r3, #1
 8004886:	60f9      	str	r1, [r7, #12]
 8004888:	7812      	ldrb	r2, [r2, #0]
 800488a:	701a      	strb	r2, [r3, #0]
    n++;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	3301      	adds	r3, #1
 8004890:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	429a      	cmp	r2, r3
 8004898:	d3f0      	bcc.n	800487c <_EncodeStr+0x74>
  }
  return pPayload;
 800489a:	68fb      	ldr	r3, [r7, #12]
}
 800489c:	4618      	mov	r0, r3
 800489e:	371c      	adds	r7, #28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3307      	adds	r3, #7
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80048c6:	4b35      	ldr	r3, [pc, #212]	; (800499c <_HandleIncomingPacket+0xdc>)
 80048c8:	7e1b      	ldrb	r3, [r3, #24]
 80048ca:	4618      	mov	r0, r3
 80048cc:	1cfb      	adds	r3, r7, #3
 80048ce:	2201      	movs	r2, #1
 80048d0:	4619      	mov	r1, r3
 80048d2:	f7ff fdcd 	bl	8004470 <SEGGER_RTT_ReadNoLock>
 80048d6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d052      	beq.n	8004984 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80048de:	78fb      	ldrb	r3, [r7, #3]
 80048e0:	2b80      	cmp	r3, #128	; 0x80
 80048e2:	d031      	beq.n	8004948 <_HandleIncomingPacket+0x88>
 80048e4:	2b80      	cmp	r3, #128	; 0x80
 80048e6:	dc40      	bgt.n	800496a <_HandleIncomingPacket+0xaa>
 80048e8:	2b07      	cmp	r3, #7
 80048ea:	dc15      	bgt.n	8004918 <_HandleIncomingPacket+0x58>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	dd3c      	ble.n	800496a <_HandleIncomingPacket+0xaa>
 80048f0:	3b01      	subs	r3, #1
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d839      	bhi.n	800496a <_HandleIncomingPacket+0xaa>
 80048f6:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <_HandleIncomingPacket+0x3c>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	0800491f 	.word	0x0800491f
 8004900:	08004925 	.word	0x08004925
 8004904:	0800492b 	.word	0x0800492b
 8004908:	08004931 	.word	0x08004931
 800490c:	08004937 	.word	0x08004937
 8004910:	0800493d 	.word	0x0800493d
 8004914:	08004943 	.word	0x08004943
 8004918:	2b7f      	cmp	r3, #127	; 0x7f
 800491a:	d035      	beq.n	8004988 <_HandleIncomingPacket+0xc8>
 800491c:	e025      	b.n	800496a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800491e:	f000 fc2f 	bl	8005180 <SEGGER_SYSVIEW_Start>
      break;
 8004922:	e036      	b.n	8004992 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004924:	f000 fce6 	bl	80052f4 <SEGGER_SYSVIEW_Stop>
      break;
 8004928:	e033      	b.n	8004992 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800492a:	f000 febf 	bl	80056ac <SEGGER_SYSVIEW_RecordSystime>
      break;
 800492e:	e030      	b.n	8004992 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004930:	f000 fe84 	bl	800563c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004934:	e02d      	b.n	8004992 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004936:	f000 fd03 	bl	8005340 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800493a:	e02a      	b.n	8004992 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800493c:	f001 f952 	bl	8005be4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004940:	e027      	b.n	8004992 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004942:	f001 f931 	bl	8005ba8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004946:	e024      	b.n	8004992 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004948:	4b14      	ldr	r3, [pc, #80]	; (800499c <_HandleIncomingPacket+0xdc>)
 800494a:	7e1b      	ldrb	r3, [r3, #24]
 800494c:	4618      	mov	r0, r3
 800494e:	1cfb      	adds	r3, r7, #3
 8004950:	2201      	movs	r2, #1
 8004952:	4619      	mov	r1, r3
 8004954:	f7ff fd8c 	bl	8004470 <SEGGER_RTT_ReadNoLock>
 8004958:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d015      	beq.n	800498c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	4618      	mov	r0, r3
 8004964:	f001 f8a0 	bl	8005aa8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004968:	e010      	b.n	800498c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800496a:	78fb      	ldrb	r3, [r7, #3]
 800496c:	b25b      	sxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	da0e      	bge.n	8004990 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004972:	4b0a      	ldr	r3, [pc, #40]	; (800499c <_HandleIncomingPacket+0xdc>)
 8004974:	7e1b      	ldrb	r3, [r3, #24]
 8004976:	4618      	mov	r0, r3
 8004978:	1cfb      	adds	r3, r7, #3
 800497a:	2201      	movs	r2, #1
 800497c:	4619      	mov	r1, r3
 800497e:	f7ff fd77 	bl	8004470 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004982:	e005      	b.n	8004990 <_HandleIncomingPacket+0xd0>
    }
  }
 8004984:	bf00      	nop
 8004986:	e004      	b.n	8004992 <_HandleIncomingPacket+0xd2>
      break;
 8004988:	bf00      	nop
 800498a:	e002      	b.n	8004992 <_HandleIncomingPacket+0xd2>
      break;
 800498c:	bf00      	nop
 800498e:	e000      	b.n	8004992 <_HandleIncomingPacket+0xd2>
      break;
 8004990:	bf00      	nop
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	200142b8 	.word	0x200142b8

080049a0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08c      	sub	sp, #48	; 0x30
 80049a4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80049a6:	2301      	movs	r3, #1
 80049a8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80049aa:	1d3b      	adds	r3, r7, #4
 80049ac:	3301      	adds	r3, #1
 80049ae:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049b4:	4b31      	ldr	r3, [pc, #196]	; (8004a7c <_TrySendOverflowPacket+0xdc>)
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ba:	e00b      	b.n	80049d4 <_TrySendOverflowPacket+0x34>
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	1c59      	adds	r1, r3, #1
 80049c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80049c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	09db      	lsrs	r3, r3, #7
 80049d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	2b7f      	cmp	r3, #127	; 0x7f
 80049d8:	d8f0      	bhi.n	80049bc <_TrySendOverflowPacket+0x1c>
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80049ea:	4b25      	ldr	r3, [pc, #148]	; (8004a80 <_TrySendOverflowPacket+0xe0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80049f0:	4b22      	ldr	r3, [pc, #136]	; (8004a7c <_TrySendOverflowPacket+0xdc>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	623b      	str	r3, [r7, #32]
 8004a02:	e00b      	b.n	8004a1c <_TrySendOverflowPacket+0x7c>
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	1c59      	adds	r1, r3, #1
 8004a0c:	6279      	str	r1, [r7, #36]	; 0x24
 8004a0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	09db      	lsrs	r3, r3, #7
 8004a1a:	623b      	str	r3, [r7, #32]
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a20:	d8f0      	bhi.n	8004a04 <_TrySendOverflowPacket+0x64>
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	627a      	str	r2, [r7, #36]	; 0x24
 8004a28:	6a3a      	ldr	r2, [r7, #32]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004a32:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <_TrySendOverflowPacket+0xdc>)
 8004a34:	785b      	ldrb	r3, [r3, #1]
 8004a36:	4618      	mov	r0, r3
 8004a38:	1d3b      	adds	r3, r7, #4
 8004a3a:	69fa      	ldr	r2, [r7, #28]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	461a      	mov	r2, r3
 8004a40:	1d3b      	adds	r3, r7, #4
 8004a42:	4619      	mov	r1, r3
 8004a44:	f7fb fbc4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004a52:	4a0a      	ldr	r2, [pc, #40]	; (8004a7c <_TrySendOverflowPacket+0xdc>)
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004a58:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <_TrySendOverflowPacket+0xdc>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <_TrySendOverflowPacket+0xdc>)
 8004a62:	701a      	strb	r2, [r3, #0]
 8004a64:	e004      	b.n	8004a70 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <_TrySendOverflowPacket+0xdc>)
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	4a03      	ldr	r2, [pc, #12]	; (8004a7c <_TrySendOverflowPacket+0xdc>)
 8004a6e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004a70:	693b      	ldr	r3, [r7, #16]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3730      	adds	r7, #48	; 0x30
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	200142b8 	.word	0x200142b8
 8004a80:	e0001004 	.word	0xe0001004

08004a84 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	; 0x28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004a90:	4b9a      	ldr	r3, [pc, #616]	; (8004cfc <_SendPacket+0x278>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d010      	beq.n	8004aba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004a98:	4b98      	ldr	r3, [pc, #608]	; (8004cfc <_SendPacket+0x278>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8129 	beq.w	8004cf4 <_SendPacket+0x270>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004aa2:	4b96      	ldr	r3, [pc, #600]	; (8004cfc <_SendPacket+0x278>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d109      	bne.n	8004abe <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004aaa:	f7ff ff79 	bl	80049a0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004aae:	4b93      	ldr	r3, [pc, #588]	; (8004cfc <_SendPacket+0x278>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	f040 8120 	bne.w	8004cf8 <_SendPacket+0x274>
      goto SendDone;
    }
  }
Send:
 8004ab8:	e001      	b.n	8004abe <_SendPacket+0x3a>
    goto Send;
 8004aba:	bf00      	nop
 8004abc:	e000      	b.n	8004ac0 <_SendPacket+0x3c>
Send:
 8004abe:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b1f      	cmp	r3, #31
 8004ac4:	d809      	bhi.n	8004ada <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004ac6:	4b8d      	ldr	r3, [pc, #564]	; (8004cfc <_SendPacket+0x278>)
 8004ac8:	69da      	ldr	r2, [r3, #28]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f040 8115 	bne.w	8004d04 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b17      	cmp	r3, #23
 8004ade:	d807      	bhi.n	8004af0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	e0c4      	b.n	8004c7a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	2b7f      	cmp	r3, #127	; 0x7f
 8004afc:	d912      	bls.n	8004b24 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	09da      	lsrs	r2, r3, #7
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	3a01      	subs	r2, #1
 8004b16:	60fa      	str	r2, [r7, #12]
 8004b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	e006      	b.n	8004b32 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b7e      	cmp	r3, #126	; 0x7e
 8004b36:	d807      	bhi.n	8004b48 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	e098      	b.n	8004c7a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b4e:	d212      	bcs.n	8004b76 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	09da      	lsrs	r2, r3, #7
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	3a01      	subs	r2, #1
 8004b68:	60fa      	str	r2, [r7, #12]
 8004b6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	701a      	strb	r2, [r3, #0]
 8004b74:	e081      	b.n	8004c7a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b7c:	d21d      	bcs.n	8004bba <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	0b9a      	lsrs	r2, r3, #14
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	09db      	lsrs	r3, r3, #7
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	3a01      	subs	r2, #1
 8004b98:	60fa      	str	r2, [r7, #12]
 8004b9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	3a01      	subs	r2, #1
 8004bac:	60fa      	str	r2, [r7, #12]
 8004bae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	701a      	strb	r2, [r3, #0]
 8004bb8:	e05f      	b.n	8004c7a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bc0:	d228      	bcs.n	8004c14 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	0d5a      	lsrs	r2, r3, #21
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	0b9b      	lsrs	r3, r3, #14
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	3a01      	subs	r2, #1
 8004bdc:	60fa      	str	r2, [r7, #12]
 8004bde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	09db      	lsrs	r3, r3, #7
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	3a01      	subs	r2, #1
 8004bf2:	60fa      	str	r2, [r7, #12]
 8004bf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	3a01      	subs	r2, #1
 8004c06:	60fa      	str	r2, [r7, #12]
 8004c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	e032      	b.n	8004c7a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	0f1a      	lsrs	r2, r3, #28
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	0d5b      	lsrs	r3, r3, #21
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	3a01      	subs	r2, #1
 8004c2e:	60fa      	str	r2, [r7, #12]
 8004c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	0b9b      	lsrs	r3, r3, #14
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	3a01      	subs	r2, #1
 8004c44:	60fa      	str	r2, [r7, #12]
 8004c46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	09db      	lsrs	r3, r3, #7
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	3a01      	subs	r2, #1
 8004c5a:	60fa      	str	r2, [r7, #12]
 8004c5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	3a01      	subs	r2, #1
 8004c6e:	60fa      	str	r2, [r7, #12]
 8004c70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c7a:	4b21      	ldr	r3, [pc, #132]	; (8004d00 <_SendPacket+0x27c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004c80:	4b1e      	ldr	r3, [pc, #120]	; (8004cfc <_SendPacket+0x278>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	623b      	str	r3, [r7, #32]
 8004c92:	e00b      	b.n	8004cac <_SendPacket+0x228>
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	1c59      	adds	r1, r3, #1
 8004c9c:	6279      	str	r1, [r7, #36]	; 0x24
 8004c9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	09db      	lsrs	r3, r3, #7
 8004caa:	623b      	str	r3, [r7, #32]
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	2b7f      	cmp	r3, #127	; 0x7f
 8004cb0:	d8f0      	bhi.n	8004c94 <_SendPacket+0x210>
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	627a      	str	r2, [r7, #36]	; 0x24
 8004cb8:	6a3a      	ldr	r2, [r7, #32]
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004cc2:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <_SendPacket+0x278>)
 8004cc4:	785b      	ldrb	r3, [r3, #1]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	461a      	mov	r2, r3
 8004cd0:	68f9      	ldr	r1, [r7, #12]
 8004cd2:	f7fb fa7d 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004cd6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004cde:	4a07      	ldr	r2, [pc, #28]	; (8004cfc <_SendPacket+0x278>)
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	60d3      	str	r3, [r2, #12]
 8004ce4:	e00f      	b.n	8004d06 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004ce6:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <_SendPacket+0x278>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	3301      	adds	r3, #1
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <_SendPacket+0x278>)
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	e008      	b.n	8004d06 <_SendPacket+0x282>
    goto SendDone;
 8004cf4:	bf00      	nop
 8004cf6:	e006      	b.n	8004d06 <_SendPacket+0x282>
      goto SendDone;
 8004cf8:	bf00      	nop
 8004cfa:	e004      	b.n	8004d06 <_SendPacket+0x282>
 8004cfc:	200142b8 	.word	0x200142b8
 8004d00:	e0001004 	.word	0xe0001004
      goto SendDone;
 8004d04:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004d06:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <_SendPacket+0x2d4>)
 8004d08:	7e1b      	ldrb	r3, [r3, #24]
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <_SendPacket+0x2d8>)
 8004d0e:	460b      	mov	r3, r1
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	440b      	add	r3, r1
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	4413      	add	r3, r2
 8004d18:	336c      	adds	r3, #108	; 0x6c
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	4b0e      	ldr	r3, [pc, #56]	; (8004d58 <_SendPacket+0x2d4>)
 8004d1e:	7e1b      	ldrb	r3, [r3, #24]
 8004d20:	4618      	mov	r0, r3
 8004d22:	490e      	ldr	r1, [pc, #56]	; (8004d5c <_SendPacket+0x2d8>)
 8004d24:	4603      	mov	r3, r0
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	4403      	add	r3, r0
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	440b      	add	r3, r1
 8004d2e:	3370      	adds	r3, #112	; 0x70
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d00b      	beq.n	8004d4e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <_SendPacket+0x2d4>)
 8004d38:	789b      	ldrb	r3, [r3, #2]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d107      	bne.n	8004d4e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <_SendPacket+0x2d4>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004d44:	f7ff fdbc 	bl	80048c0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <_SendPacket+0x2d4>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004d4e:	bf00      	nop
 8004d50:	3728      	adds	r7, #40	; 0x28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	200142b8 	.word	0x200142b8
 8004d5c:	20014464 	.word	0x20014464

08004d60 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d74:	4917      	ldr	r1, [pc, #92]	; (8004dd4 <SEGGER_SYSVIEW_Init+0x74>)
 8004d76:	4818      	ldr	r0, [pc, #96]	; (8004dd8 <SEGGER_SYSVIEW_Init+0x78>)
 8004d78:	f7ff fc76 	bl	8004668 <SEGGER_RTT_AllocUpBuffer>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	4b16      	ldr	r3, [pc, #88]	; (8004ddc <SEGGER_SYSVIEW_Init+0x7c>)
 8004d82:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004d84:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <SEGGER_SYSVIEW_Init+0x7c>)
 8004d86:	785a      	ldrb	r2, [r3, #1]
 8004d88:	4b14      	ldr	r3, [pc, #80]	; (8004ddc <SEGGER_SYSVIEW_Init+0x7c>)
 8004d8a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004d8c:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <SEGGER_SYSVIEW_Init+0x7c>)
 8004d8e:	7e1b      	ldrb	r3, [r3, #24]
 8004d90:	4618      	mov	r0, r3
 8004d92:	2300      	movs	r3, #0
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	2308      	movs	r3, #8
 8004d98:	4a11      	ldr	r2, [pc, #68]	; (8004de0 <SEGGER_SYSVIEW_Init+0x80>)
 8004d9a:	490f      	ldr	r1, [pc, #60]	; (8004dd8 <SEGGER_SYSVIEW_Init+0x78>)
 8004d9c:	f7ff fce8 	bl	8004770 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004da0:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <SEGGER_SYSVIEW_Init+0x7c>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004da6:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <SEGGER_SYSVIEW_Init+0x84>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a0c      	ldr	r2, [pc, #48]	; (8004ddc <SEGGER_SYSVIEW_Init+0x7c>)
 8004dac:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004dae:	4a0b      	ldr	r2, [pc, #44]	; (8004ddc <SEGGER_SYSVIEW_Init+0x7c>)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004db4:	4a09      	ldr	r2, [pc, #36]	; (8004ddc <SEGGER_SYSVIEW_Init+0x7c>)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004dba:	4a08      	ldr	r2, [pc, #32]	; (8004ddc <SEGGER_SYSVIEW_Init+0x7c>)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004dc0:	4a06      	ldr	r2, [pc, #24]	; (8004ddc <SEGGER_SYSVIEW_Init+0x7c>)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004dc6:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <SEGGER_SYSVIEW_Init+0x7c>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	200132b0 	.word	0x200132b0
 8004dd8:	0800685c 	.word	0x0800685c
 8004ddc:	200142b8 	.word	0x200142b8
 8004de0:	200142b0 	.word	0x200142b0
 8004de4:	e0001004 	.word	0xe0001004

08004de8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004df0:	4a04      	ldr	r2, [pc, #16]	; (8004e04 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6113      	str	r3, [r2, #16]
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	200142b8 	.word	0x200142b8

08004e08 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e10:	f3ef 8311 	mrs	r3, BASEPRI
 8004e14:	f04f 0120 	mov.w	r1, #32
 8004e18:	f381 8811 	msr	BASEPRI, r1
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	4808      	ldr	r0, [pc, #32]	; (8004e40 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004e20:	f7ff fd42 	bl	80048a8 <_PreparePacket>
 8004e24:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	68b8      	ldr	r0, [r7, #8]
 8004e2c:	f7ff fe2a 	bl	8004a84 <_SendPacket>
  RECORD_END();
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f383 8811 	msr	BASEPRI, r3
}
 8004e36:	bf00      	nop
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	200142e8 	.word	0x200142e8

08004e44 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e52:	f04f 0120 	mov.w	r1, #32
 8004e56:	f381 8811 	msr	BASEPRI, r1
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	4816      	ldr	r0, [pc, #88]	; (8004eb8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004e5e:	f7ff fd23 	bl	80048a8 <_PreparePacket>
 8004e62:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	61fb      	str	r3, [r7, #28]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	61bb      	str	r3, [r7, #24]
 8004e70:	e00b      	b.n	8004e8a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	1c59      	adds	r1, r3, #1
 8004e7a:	61f9      	str	r1, [r7, #28]
 8004e7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	09db      	lsrs	r3, r3, #7
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e8e:	d8f0      	bhi.n	8004e72 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	61fa      	str	r2, [r7, #28]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	68f9      	ldr	r1, [r7, #12]
 8004ea4:	6938      	ldr	r0, [r7, #16]
 8004ea6:	f7ff fded 	bl	8004a84 <_SendPacket>
  RECORD_END();
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f383 8811 	msr	BASEPRI, r3
}
 8004eb0:	bf00      	nop
 8004eb2:	3720      	adds	r7, #32
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	200142e8 	.word	0x200142e8

08004ebc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08c      	sub	sp, #48	; 0x30
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ec8:	f3ef 8311 	mrs	r3, BASEPRI
 8004ecc:	f04f 0120 	mov.w	r1, #32
 8004ed0:	f381 8811 	msr	BASEPRI, r1
 8004ed4:	61fb      	str	r3, [r7, #28]
 8004ed6:	4825      	ldr	r0, [pc, #148]	; (8004f6c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004ed8:	f7ff fce6 	bl	80048a8 <_PreparePacket>
 8004edc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eea:	e00b      	b.n	8004f04 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	1c59      	adds	r1, r3, #1
 8004ef4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ef6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	09db      	lsrs	r3, r3, #7
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	2b7f      	cmp	r3, #127	; 0x7f
 8004f08:	d8f0      	bhi.n	8004eec <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f18:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	623b      	str	r3, [r7, #32]
 8004f22:	e00b      	b.n	8004f3c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	1c59      	adds	r1, r3, #1
 8004f2c:	6279      	str	r1, [r7, #36]	; 0x24
 8004f2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	09db      	lsrs	r3, r3, #7
 8004f3a:	623b      	str	r3, [r7, #32]
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f40:	d8f0      	bhi.n	8004f24 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	627a      	str	r2, [r7, #36]	; 0x24
 8004f48:	6a3a      	ldr	r2, [r7, #32]
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	6979      	ldr	r1, [r7, #20]
 8004f56:	69b8      	ldr	r0, [r7, #24]
 8004f58:	f7ff fd94 	bl	8004a84 <_SendPacket>
  RECORD_END();
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f383 8811 	msr	BASEPRI, r3
}
 8004f62:	bf00      	nop
 8004f64:	3730      	adds	r7, #48	; 0x30
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	200142e8 	.word	0x200142e8

08004f70 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08e      	sub	sp, #56	; 0x38
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f7e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f82:	f04f 0120 	mov.w	r1, #32
 8004f86:	f381 8811 	msr	BASEPRI, r1
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	4832      	ldr	r0, [pc, #200]	; (8005058 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004f8e:	f7ff fc8b 	bl	80048a8 <_PreparePacket>
 8004f92:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8004fa0:	e00b      	b.n	8004fba <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa8:	1c59      	adds	r1, r3, #1
 8004faa:	6379      	str	r1, [r7, #52]	; 0x34
 8004fac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	09db      	lsrs	r3, r3, #7
 8004fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8004fbe:	d8f0      	bhi.n	8004fa2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	637a      	str	r2, [r7, #52]	; 0x34
 8004fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd8:	e00b      	b.n	8004ff2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	1c59      	adds	r1, r3, #1
 8004fe2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	09db      	lsrs	r3, r3, #7
 8004ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff6:	d8f0      	bhi.n	8004fda <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	623b      	str	r3, [r7, #32]
 8005010:	e00b      	b.n	800502a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	b2da      	uxtb	r2, r3
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	1c59      	adds	r1, r3, #1
 800501a:	6279      	str	r1, [r7, #36]	; 0x24
 800501c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	701a      	strb	r2, [r3, #0]
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	09db      	lsrs	r3, r3, #7
 8005028:	623b      	str	r3, [r7, #32]
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	2b7f      	cmp	r3, #127	; 0x7f
 800502e:	d8f0      	bhi.n	8005012 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	627a      	str	r2, [r7, #36]	; 0x24
 8005036:	6a3a      	ldr	r2, [r7, #32]
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	701a      	strb	r2, [r3, #0]
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	6979      	ldr	r1, [r7, #20]
 8005044:	69b8      	ldr	r0, [r7, #24]
 8005046:	f7ff fd1d 	bl	8004a84 <_SendPacket>
  RECORD_END();
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f383 8811 	msr	BASEPRI, r3
}
 8005050:	bf00      	nop
 8005052:	3738      	adds	r7, #56	; 0x38
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	200142e8 	.word	0x200142e8

0800505c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b090      	sub	sp, #64	; 0x40
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800506a:	f3ef 8311 	mrs	r3, BASEPRI
 800506e:	f04f 0120 	mov.w	r1, #32
 8005072:	f381 8811 	msr	BASEPRI, r1
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	4840      	ldr	r0, [pc, #256]	; (800517c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800507a:	f7ff fc15 	bl	80048a8 <_PreparePacket>
 800507e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	63bb      	str	r3, [r7, #56]	; 0x38
 800508c:	e00b      	b.n	80050a6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005090:	b2da      	uxtb	r2, r3
 8005092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005094:	1c59      	adds	r1, r3, #1
 8005096:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005098:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	701a      	strb	r2, [r3, #0]
 80050a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a2:	09db      	lsrs	r3, r3, #7
 80050a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80050a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a8:	2b7f      	cmp	r3, #127	; 0x7f
 80050aa:	d8f0      	bhi.n	800508e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80050ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	701a      	strb	r2, [r3, #0]
 80050b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	637b      	str	r3, [r7, #52]	; 0x34
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	633b      	str	r3, [r7, #48]	; 0x30
 80050c4:	e00b      	b.n	80050de <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050cc:	1c59      	adds	r1, r3, #1
 80050ce:	6379      	str	r1, [r7, #52]	; 0x34
 80050d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050da:	09db      	lsrs	r3, r3, #7
 80050dc:	633b      	str	r3, [r7, #48]	; 0x30
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	2b7f      	cmp	r3, #127	; 0x7f
 80050e2:	d8f0      	bhi.n	80050c6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80050e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	637a      	str	r2, [r7, #52]	; 0x34
 80050ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80050fc:	e00b      	b.n	8005116 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80050fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005100:	b2da      	uxtb	r2, r3
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	1c59      	adds	r1, r3, #1
 8005106:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005108:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	09db      	lsrs	r3, r3, #7
 8005114:	62bb      	str	r3, [r7, #40]	; 0x28
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	2b7f      	cmp	r3, #127	; 0x7f
 800511a:	d8f0      	bhi.n	80050fe <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
 8005130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005132:	623b      	str	r3, [r7, #32]
 8005134:	e00b      	b.n	800514e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	b2da      	uxtb	r2, r3
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	1c59      	adds	r1, r3, #1
 800513e:	6279      	str	r1, [r7, #36]	; 0x24
 8005140:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	701a      	strb	r2, [r3, #0]
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	09db      	lsrs	r3, r3, #7
 800514c:	623b      	str	r3, [r7, #32]
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	2b7f      	cmp	r3, #127	; 0x7f
 8005152:	d8f0      	bhi.n	8005136 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	627a      	str	r2, [r7, #36]	; 0x24
 800515a:	6a3a      	ldr	r2, [r7, #32]
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	6979      	ldr	r1, [r7, #20]
 8005168:	69b8      	ldr	r0, [r7, #24]
 800516a:	f7ff fc8b 	bl	8004a84 <_SendPacket>
  RECORD_END();
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	f383 8811 	msr	BASEPRI, r3
}
 8005174:	bf00      	nop
 8005176:	3740      	adds	r7, #64	; 0x40
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	200142e8 	.word	0x200142e8

08005180 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005180:	b580      	push	{r7, lr}
 8005182:	b08c      	sub	sp, #48	; 0x30
 8005184:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005186:	4b58      	ldr	r3, [pc, #352]	; (80052e8 <SEGGER_SYSVIEW_Start+0x168>)
 8005188:	2201      	movs	r2, #1
 800518a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800518c:	f3ef 8311 	mrs	r3, BASEPRI
 8005190:	f04f 0120 	mov.w	r1, #32
 8005194:	f381 8811 	msr	BASEPRI, r1
 8005198:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800519a:	4b53      	ldr	r3, [pc, #332]	; (80052e8 <SEGGER_SYSVIEW_Start+0x168>)
 800519c:	785b      	ldrb	r3, [r3, #1]
 800519e:	220a      	movs	r2, #10
 80051a0:	4952      	ldr	r1, [pc, #328]	; (80052ec <SEGGER_SYSVIEW_Start+0x16c>)
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fb f814 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80051ae:	200a      	movs	r0, #10
 80051b0:	f7ff fe2a 	bl	8004e08 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80051b4:	f3ef 8311 	mrs	r3, BASEPRI
 80051b8:	f04f 0120 	mov.w	r1, #32
 80051bc:	f381 8811 	msr	BASEPRI, r1
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	484b      	ldr	r0, [pc, #300]	; (80052f0 <SEGGER_SYSVIEW_Start+0x170>)
 80051c4:	f7ff fb70 	bl	80048a8 <_PreparePacket>
 80051c8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d2:	4b45      	ldr	r3, [pc, #276]	; (80052e8 <SEGGER_SYSVIEW_Start+0x168>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d8:	e00b      	b.n	80051f2 <SEGGER_SYSVIEW_Start+0x72>
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e0:	1c59      	adds	r1, r3, #1
 80051e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	09db      	lsrs	r3, r3, #7
 80051f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	2b7f      	cmp	r3, #127	; 0x7f
 80051f6:	d8f0      	bhi.n	80051da <SEGGER_SYSVIEW_Start+0x5a>
 80051f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	701a      	strb	r2, [r3, #0]
 8005204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005206:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
 800520c:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <SEGGER_SYSVIEW_Start+0x168>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	623b      	str	r3, [r7, #32]
 8005212:	e00b      	b.n	800522c <SEGGER_SYSVIEW_Start+0xac>
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	b2da      	uxtb	r2, r3
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	1c59      	adds	r1, r3, #1
 800521c:	6279      	str	r1, [r7, #36]	; 0x24
 800521e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	09db      	lsrs	r3, r3, #7
 800522a:	623b      	str	r3, [r7, #32]
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	2b7f      	cmp	r3, #127	; 0x7f
 8005230:	d8f0      	bhi.n	8005214 <SEGGER_SYSVIEW_Start+0x94>
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	627a      	str	r2, [r7, #36]	; 0x24
 8005238:	6a3a      	ldr	r2, [r7, #32]
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	61fb      	str	r3, [r7, #28]
 8005246:	4b28      	ldr	r3, [pc, #160]	; (80052e8 <SEGGER_SYSVIEW_Start+0x168>)
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	e00b      	b.n	8005266 <SEGGER_SYSVIEW_Start+0xe6>
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	b2da      	uxtb	r2, r3
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	1c59      	adds	r1, r3, #1
 8005256:	61f9      	str	r1, [r7, #28]
 8005258:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	09db      	lsrs	r3, r3, #7
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b7f      	cmp	r3, #127	; 0x7f
 800526a:	d8f0      	bhi.n	800524e <SEGGER_SYSVIEW_Start+0xce>
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	61fa      	str	r2, [r7, #28]
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	2300      	movs	r3, #0
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	e00b      	b.n	800529e <SEGGER_SYSVIEW_Start+0x11e>
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	b2da      	uxtb	r2, r3
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	1c59      	adds	r1, r3, #1
 800528e:	6179      	str	r1, [r7, #20]
 8005290:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	09db      	lsrs	r3, r3, #7
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b7f      	cmp	r3, #127	; 0x7f
 80052a2:	d8f0      	bhi.n	8005286 <SEGGER_SYSVIEW_Start+0x106>
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	617a      	str	r2, [r7, #20]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80052b4:	2218      	movs	r2, #24
 80052b6:	6839      	ldr	r1, [r7, #0]
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff fbe3 	bl	8004a84 <_SendPacket>
      RECORD_END();
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80052c4:	4b08      	ldr	r3, [pc, #32]	; (80052e8 <SEGGER_SYSVIEW_Start+0x168>)
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <SEGGER_SYSVIEW_Start+0x168>)
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80052d2:	f000 f9eb 	bl	80056ac <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80052d6:	f000 f9b1 	bl	800563c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80052da:	f000 fc83 	bl	8005be4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80052de:	bf00      	nop
 80052e0:	3730      	adds	r7, #48	; 0x30
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	200142b8 	.word	0x200142b8
 80052ec:	08006898 	.word	0x08006898
 80052f0:	200142e8 	.word	0x200142e8

080052f4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052fa:	f3ef 8311 	mrs	r3, BASEPRI
 80052fe:	f04f 0120 	mov.w	r1, #32
 8005302:	f381 8811 	msr	BASEPRI, r1
 8005306:	607b      	str	r3, [r7, #4]
 8005308:	480b      	ldr	r0, [pc, #44]	; (8005338 <SEGGER_SYSVIEW_Stop+0x44>)
 800530a:	f7ff facd 	bl	80048a8 <_PreparePacket>
 800530e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <SEGGER_SYSVIEW_Stop+0x48>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d007      	beq.n	8005328 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005318:	220b      	movs	r2, #11
 800531a:	6839      	ldr	r1, [r7, #0]
 800531c:	6838      	ldr	r0, [r7, #0]
 800531e:	f7ff fbb1 	bl	8004a84 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005322:	4b06      	ldr	r3, [pc, #24]	; (800533c <SEGGER_SYSVIEW_Stop+0x48>)
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f383 8811 	msr	BASEPRI, r3
}
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	200142e8 	.word	0x200142e8
 800533c:	200142b8 	.word	0x200142b8

08005340 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b08c      	sub	sp, #48	; 0x30
 8005344:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005346:	f3ef 8311 	mrs	r3, BASEPRI
 800534a:	f04f 0120 	mov.w	r1, #32
 800534e:	f381 8811 	msr	BASEPRI, r1
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	4845      	ldr	r0, [pc, #276]	; (800546c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005356:	f7ff faa7 	bl	80048a8 <_PreparePacket>
 800535a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005364:	4b42      	ldr	r3, [pc, #264]	; (8005470 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	62bb      	str	r3, [r7, #40]	; 0x28
 800536a:	e00b      	b.n	8005384 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	b2da      	uxtb	r2, r3
 8005370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005372:	1c59      	adds	r1, r3, #1
 8005374:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	09db      	lsrs	r3, r3, #7
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	2b7f      	cmp	r3, #127	; 0x7f
 8005388:	d8f0      	bhi.n	800536c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
 800539e:	4b34      	ldr	r3, [pc, #208]	; (8005470 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	623b      	str	r3, [r7, #32]
 80053a4:	e00b      	b.n	80053be <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	1c59      	adds	r1, r3, #1
 80053ae:	6279      	str	r1, [r7, #36]	; 0x24
 80053b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	09db      	lsrs	r3, r3, #7
 80053bc:	623b      	str	r3, [r7, #32]
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	2b7f      	cmp	r3, #127	; 0x7f
 80053c2:	d8f0      	bhi.n	80053a6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	627a      	str	r2, [r7, #36]	; 0x24
 80053ca:	6a3a      	ldr	r2, [r7, #32]
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	61fb      	str	r3, [r7, #28]
 80053d8:	4b25      	ldr	r3, [pc, #148]	; (8005470 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	e00b      	b.n	80053f8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	61f9      	str	r1, [r7, #28]
 80053ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	09db      	lsrs	r3, r3, #7
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2b7f      	cmp	r3, #127	; 0x7f
 80053fc:	d8f0      	bhi.n	80053e0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	61fa      	str	r2, [r7, #28]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	2300      	movs	r3, #0
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	e00b      	b.n	8005430 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	b2da      	uxtb	r2, r3
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	1c59      	adds	r1, r3, #1
 8005420:	6179      	str	r1, [r7, #20]
 8005422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	09db      	lsrs	r3, r3, #7
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	2b7f      	cmp	r3, #127	; 0x7f
 8005434:	d8f0      	bhi.n	8005418 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	617a      	str	r2, [r7, #20]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005446:	2218      	movs	r2, #24
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	68b8      	ldr	r0, [r7, #8]
 800544c:	f7ff fb1a 	bl	8004a84 <_SendPacket>
  RECORD_END();
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005456:	4b06      	ldr	r3, [pc, #24]	; (8005470 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800545e:	4b04      	ldr	r3, [pc, #16]	; (8005470 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	4798      	blx	r3
  }
}
 8005464:	bf00      	nop
 8005466:	3730      	adds	r7, #48	; 0x30
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	200142e8 	.word	0x200142e8
 8005470:	200142b8 	.word	0x200142b8

08005474 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b092      	sub	sp, #72	; 0x48
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800547c:	f3ef 8311 	mrs	r3, BASEPRI
 8005480:	f04f 0120 	mov.w	r1, #32
 8005484:	f381 8811 	msr	BASEPRI, r1
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	486a      	ldr	r0, [pc, #424]	; (8005634 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800548c:	f7ff fa0c 	bl	80048a8 <_PreparePacket>
 8005490:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	647b      	str	r3, [r7, #68]	; 0x44
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b66      	ldr	r3, [pc, #408]	; (8005638 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	643b      	str	r3, [r7, #64]	; 0x40
 80054a6:	e00b      	b.n	80054c0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80054a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ae:	1c59      	adds	r1, r3, #1
 80054b0:	6479      	str	r1, [r7, #68]	; 0x44
 80054b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054bc:	09db      	lsrs	r3, r3, #7
 80054be:	643b      	str	r3, [r7, #64]	; 0x40
 80054c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c2:	2b7f      	cmp	r3, #127	; 0x7f
 80054c4:	d8f0      	bhi.n	80054a8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80054c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	647a      	str	r2, [r7, #68]	; 0x44
 80054cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e0:	e00b      	b.n	80054fa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e8:	1c59      	adds	r1, r3, #1
 80054ea:	63f9      	str	r1, [r7, #60]	; 0x3c
 80054ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	09db      	lsrs	r3, r3, #7
 80054f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	2b7f      	cmp	r3, #127	; 0x7f
 80054fe:	d8f0      	bhi.n	80054e2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]
 800550c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	4619      	mov	r1, r3
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f7ff f975 	bl	8004808 <_EncodeStr>
 800551e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005520:	2209      	movs	r2, #9
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	6938      	ldr	r0, [r7, #16]
 8005526:	f7ff faad 	bl	8004a84 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	4b40      	ldr	r3, [pc, #256]	; (8005638 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	633b      	str	r3, [r7, #48]	; 0x30
 800553e:	e00b      	b.n	8005558 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	b2da      	uxtb	r2, r3
 8005544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005546:	1c59      	adds	r1, r3, #1
 8005548:	6379      	str	r1, [r7, #52]	; 0x34
 800554a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	701a      	strb	r2, [r3, #0]
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	09db      	lsrs	r3, r3, #7
 8005556:	633b      	str	r3, [r7, #48]	; 0x30
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	2b7f      	cmp	r3, #127	; 0x7f
 800555c:	d8f0      	bhi.n	8005540 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	637a      	str	r2, [r7, #52]	; 0x34
 8005564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28
 8005578:	e00b      	b.n	8005592 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	b2da      	uxtb	r2, r3
 800557e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005580:	1c59      	adds	r1, r3, #1
 8005582:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	09db      	lsrs	r3, r3, #7
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28
 8005592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005594:	2b7f      	cmp	r3, #127	; 0x7f
 8005596:	d8f0      	bhi.n	800557a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800559e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	701a      	strb	r2, [r3, #0]
 80055a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	623b      	str	r3, [r7, #32]
 80055b2:	e00b      	b.n	80055cc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	1c59      	adds	r1, r3, #1
 80055bc:	6279      	str	r1, [r7, #36]	; 0x24
 80055be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	09db      	lsrs	r3, r3, #7
 80055ca:	623b      	str	r3, [r7, #32]
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	2b7f      	cmp	r3, #127	; 0x7f
 80055d0:	d8f0      	bhi.n	80055b4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	627a      	str	r2, [r7, #36]	; 0x24
 80055d8:	6a3a      	ldr	r2, [r7, #32]
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	61fb      	str	r3, [r7, #28]
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	e00b      	b.n	8005604 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	1c59      	adds	r1, r3, #1
 80055f4:	61f9      	str	r1, [r7, #28]
 80055f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	09db      	lsrs	r3, r3, #7
 8005602:	61bb      	str	r3, [r7, #24]
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	2b7f      	cmp	r3, #127	; 0x7f
 8005608:	d8f0      	bhi.n	80055ec <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	61fa      	str	r2, [r7, #28]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800561a:	2215      	movs	r2, #21
 800561c:	68f9      	ldr	r1, [r7, #12]
 800561e:	6938      	ldr	r0, [r7, #16]
 8005620:	f7ff fa30 	bl	8004a84 <_SendPacket>
  RECORD_END();
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f383 8811 	msr	BASEPRI, r3
}
 800562a:	bf00      	nop
 800562c:	3748      	adds	r7, #72	; 0x48
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	200142e8 	.word	0x200142e8
 8005638:	200142b8 	.word	0x200142b8

0800563c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005640:	4b07      	ldr	r3, [pc, #28]	; (8005660 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005648:	4b05      	ldr	r3, [pc, #20]	; (8005660 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005652:	4b03      	ldr	r3, [pc, #12]	; (8005660 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	4798      	blx	r3
  }
}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	200142b8 	.word	0x200142b8

08005664 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800566c:	f3ef 8311 	mrs	r3, BASEPRI
 8005670:	f04f 0120 	mov.w	r1, #32
 8005674:	f381 8811 	msr	BASEPRI, r1
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	480b      	ldr	r0, [pc, #44]	; (80056a8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800567c:	f7ff f914 	bl	80048a8 <_PreparePacket>
 8005680:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005682:	2280      	movs	r2, #128	; 0x80
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	6938      	ldr	r0, [r7, #16]
 8005688:	f7ff f8be 	bl	8004808 <_EncodeStr>
 800568c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800568e:	220e      	movs	r2, #14
 8005690:	68f9      	ldr	r1, [r7, #12]
 8005692:	6938      	ldr	r0, [r7, #16]
 8005694:	f7ff f9f6 	bl	8004a84 <_SendPacket>
  RECORD_END();
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f383 8811 	msr	BASEPRI, r3
}
 800569e:	bf00      	nop
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	200142e8 	.word	0x200142e8

080056ac <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80056ac:	b590      	push	{r4, r7, lr}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80056b2:	4b15      	ldr	r3, [pc, #84]	; (8005708 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d01a      	beq.n	80056f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80056ba:	4b13      	ldr	r3, [pc, #76]	; (8005708 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d015      	beq.n	80056f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80056c4:	4b10      	ldr	r3, [pc, #64]	; (8005708 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4798      	blx	r3
 80056cc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80056d0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80056d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	000a      	movs	r2, r1
 80056e0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80056e2:	4613      	mov	r3, r2
 80056e4:	461a      	mov	r2, r3
 80056e6:	4621      	mov	r1, r4
 80056e8:	200d      	movs	r0, #13
 80056ea:	f7ff fbe7 	bl	8004ebc <SEGGER_SYSVIEW_RecordU32x2>
 80056ee:	e006      	b.n	80056fe <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80056f0:	4b06      	ldr	r3, [pc, #24]	; (800570c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4619      	mov	r1, r3
 80056f6:	200c      	movs	r0, #12
 80056f8:	f7ff fba4 	bl	8004e44 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80056fc:	bf00      	nop
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	bd90      	pop	{r4, r7, pc}
 8005706:	bf00      	nop
 8005708:	200142b8 	.word	0x200142b8
 800570c:	e0001004 	.word	0xe0001004

08005710 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005716:	f3ef 8311 	mrs	r3, BASEPRI
 800571a:	f04f 0120 	mov.w	r1, #32
 800571e:	f381 8811 	msr	BASEPRI, r1
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	4819      	ldr	r0, [pc, #100]	; (800578c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005726:	f7ff f8bf 	bl	80048a8 <_PreparePacket>
 800572a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005730:	4b17      	ldr	r3, [pc, #92]	; (8005790 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005738:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	e00b      	b.n	800575c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	b2da      	uxtb	r2, r3
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	1c59      	adds	r1, r3, #1
 800574c:	6179      	str	r1, [r7, #20]
 800574e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	09db      	lsrs	r3, r3, #7
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b7f      	cmp	r3, #127	; 0x7f
 8005760:	d8f0      	bhi.n	8005744 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	617a      	str	r2, [r7, #20]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005772:	2202      	movs	r2, #2
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	68b8      	ldr	r0, [r7, #8]
 8005778:	f7ff f984 	bl	8004a84 <_SendPacket>
  RECORD_END();
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f383 8811 	msr	BASEPRI, r3
}
 8005782:	bf00      	nop
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	200142e8 	.word	0x200142e8
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800579a:	f3ef 8311 	mrs	r3, BASEPRI
 800579e:	f04f 0120 	mov.w	r1, #32
 80057a2:	f381 8811 	msr	BASEPRI, r1
 80057a6:	607b      	str	r3, [r7, #4]
 80057a8:	4807      	ldr	r0, [pc, #28]	; (80057c8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80057aa:	f7ff f87d 	bl	80048a8 <_PreparePacket>
 80057ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80057b0:	2203      	movs	r2, #3
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	6838      	ldr	r0, [r7, #0]
 80057b6:	f7ff f965 	bl	8004a84 <_SendPacket>
  RECORD_END();
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f383 8811 	msr	BASEPRI, r3
}
 80057c0:	bf00      	nop
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	200142e8 	.word	0x200142e8

080057cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80057d2:	f3ef 8311 	mrs	r3, BASEPRI
 80057d6:	f04f 0120 	mov.w	r1, #32
 80057da:	f381 8811 	msr	BASEPRI, r1
 80057de:	607b      	str	r3, [r7, #4]
 80057e0:	4807      	ldr	r0, [pc, #28]	; (8005800 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80057e2:	f7ff f861 	bl	80048a8 <_PreparePacket>
 80057e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80057e8:	2212      	movs	r2, #18
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	6838      	ldr	r0, [r7, #0]
 80057ee:	f7ff f949 	bl	8004a84 <_SendPacket>
  RECORD_END();
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f383 8811 	msr	BASEPRI, r3
}
 80057f8:	bf00      	nop
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	200142e8 	.word	0x200142e8

08005804 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800580a:	f3ef 8311 	mrs	r3, BASEPRI
 800580e:	f04f 0120 	mov.w	r1, #32
 8005812:	f381 8811 	msr	BASEPRI, r1
 8005816:	607b      	str	r3, [r7, #4]
 8005818:	4807      	ldr	r0, [pc, #28]	; (8005838 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800581a:	f7ff f845 	bl	80048a8 <_PreparePacket>
 800581e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005820:	2211      	movs	r2, #17
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	6838      	ldr	r0, [r7, #0]
 8005826:	f7ff f92d 	bl	8004a84 <_SendPacket>
  RECORD_END();
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f383 8811 	msr	BASEPRI, r3
}
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	200142e8 	.word	0x200142e8

0800583c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005844:	f3ef 8311 	mrs	r3, BASEPRI
 8005848:	f04f 0120 	mov.w	r1, #32
 800584c:	f381 8811 	msr	BASEPRI, r1
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	4819      	ldr	r0, [pc, #100]	; (80058b8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005854:	f7ff f828 	bl	80048a8 <_PreparePacket>
 8005858:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800585e:	4b17      	ldr	r3, [pc, #92]	; (80058bc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	61fb      	str	r3, [r7, #28]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	61bb      	str	r3, [r7, #24]
 8005870:	e00b      	b.n	800588a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	b2da      	uxtb	r2, r3
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	1c59      	adds	r1, r3, #1
 800587a:	61f9      	str	r1, [r7, #28]
 800587c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	09db      	lsrs	r3, r3, #7
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	2b7f      	cmp	r3, #127	; 0x7f
 800588e:	d8f0      	bhi.n	8005872 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	61fa      	str	r2, [r7, #28]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80058a0:	2208      	movs	r2, #8
 80058a2:	68f9      	ldr	r1, [r7, #12]
 80058a4:	6938      	ldr	r0, [r7, #16]
 80058a6:	f7ff f8ed 	bl	8004a84 <_SendPacket>
  RECORD_END();
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f383 8811 	msr	BASEPRI, r3
}
 80058b0:	bf00      	nop
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	200142e8 	.word	0x200142e8
 80058bc:	200142b8 	.word	0x200142b8

080058c0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058c8:	f3ef 8311 	mrs	r3, BASEPRI
 80058cc:	f04f 0120 	mov.w	r1, #32
 80058d0:	f381 8811 	msr	BASEPRI, r1
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	4819      	ldr	r0, [pc, #100]	; (800593c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80058d8:	f7fe ffe6 	bl	80048a8 <_PreparePacket>
 80058dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80058e2:	4b17      	ldr	r3, [pc, #92]	; (8005940 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	61bb      	str	r3, [r7, #24]
 80058f4:	e00b      	b.n	800590e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	1c59      	adds	r1, r3, #1
 80058fe:	61f9      	str	r1, [r7, #28]
 8005900:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	09db      	lsrs	r3, r3, #7
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2b7f      	cmp	r3, #127	; 0x7f
 8005912:	d8f0      	bhi.n	80058f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	61fa      	str	r2, [r7, #28]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005924:	2204      	movs	r2, #4
 8005926:	68f9      	ldr	r1, [r7, #12]
 8005928:	6938      	ldr	r0, [r7, #16]
 800592a:	f7ff f8ab 	bl	8004a84 <_SendPacket>
  RECORD_END();
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f383 8811 	msr	BASEPRI, r3
}
 8005934:	bf00      	nop
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	200142e8 	.word	0x200142e8
 8005940:	200142b8 	.word	0x200142b8

08005944 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800594c:	f3ef 8311 	mrs	r3, BASEPRI
 8005950:	f04f 0120 	mov.w	r1, #32
 8005954:	f381 8811 	msr	BASEPRI, r1
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	4819      	ldr	r0, [pc, #100]	; (80059c0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800595c:	f7fe ffa4 	bl	80048a8 <_PreparePacket>
 8005960:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005966:	4b17      	ldr	r3, [pc, #92]	; (80059c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	61bb      	str	r3, [r7, #24]
 8005978:	e00b      	b.n	8005992 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	b2da      	uxtb	r2, r3
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	1c59      	adds	r1, r3, #1
 8005982:	61f9      	str	r1, [r7, #28]
 8005984:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	09db      	lsrs	r3, r3, #7
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b7f      	cmp	r3, #127	; 0x7f
 8005996:	d8f0      	bhi.n	800597a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	61fa      	str	r2, [r7, #28]
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	701a      	strb	r2, [r3, #0]
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80059a8:	2206      	movs	r2, #6
 80059aa:	68f9      	ldr	r1, [r7, #12]
 80059ac:	6938      	ldr	r0, [r7, #16]
 80059ae:	f7ff f869 	bl	8004a84 <_SendPacket>
  RECORD_END();
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f383 8811 	msr	BASEPRI, r3
}
 80059b8:	bf00      	nop
 80059ba:	3720      	adds	r7, #32
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	200142e8 	.word	0x200142e8
 80059c4:	200142b8 	.word	0x200142b8

080059c8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08a      	sub	sp, #40	; 0x28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80059d2:	f3ef 8311 	mrs	r3, BASEPRI
 80059d6:	f04f 0120 	mov.w	r1, #32
 80059da:	f381 8811 	msr	BASEPRI, r1
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	4827      	ldr	r0, [pc, #156]	; (8005a80 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80059e2:	f7fe ff61 	bl	80048a8 <_PreparePacket>
 80059e6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80059ec:	4b25      	ldr	r3, [pc, #148]	; (8005a84 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	623b      	str	r3, [r7, #32]
 80059fe:	e00b      	b.n	8005a18 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	1c59      	adds	r1, r3, #1
 8005a08:	6279      	str	r1, [r7, #36]	; 0x24
 8005a0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	09db      	lsrs	r3, r3, #7
 8005a16:	623b      	str	r3, [r7, #32]
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a1c:	d8f0      	bhi.n	8005a00 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	627a      	str	r2, [r7, #36]	; 0x24
 8005a24:	6a3a      	ldr	r2, [r7, #32]
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	61fb      	str	r3, [r7, #28]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	e00b      	b.n	8005a50 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	1c59      	adds	r1, r3, #1
 8005a40:	61f9      	str	r1, [r7, #28]
 8005a42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	09db      	lsrs	r3, r3, #7
 8005a4e:	61bb      	str	r3, [r7, #24]
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b7f      	cmp	r3, #127	; 0x7f
 8005a54:	d8f0      	bhi.n	8005a38 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	61fa      	str	r2, [r7, #28]
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005a66:	2207      	movs	r2, #7
 8005a68:	68f9      	ldr	r1, [r7, #12]
 8005a6a:	6938      	ldr	r0, [r7, #16]
 8005a6c:	f7ff f80a 	bl	8004a84 <_SendPacket>
  RECORD_END();
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f383 8811 	msr	BASEPRI, r3
}
 8005a76:	bf00      	nop
 8005a78:	3728      	adds	r7, #40	; 0x28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	200142e8 	.word	0x200142e8
 8005a84:	200142b8 	.word	0x200142b8

08005a88 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005a90:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	1ad3      	subs	r3, r2, r3
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	200142b8 	.word	0x200142b8

08005aa8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08c      	sub	sp, #48	; 0x30
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005ab2:	4b3b      	ldr	r3, [pc, #236]	; (8005ba0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d06d      	beq.n	8005b96 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005aba:	4b39      	ldr	r3, [pc, #228]	; (8005ba0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ac4:	e008      	b.n	8005ad8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d007      	beq.n	8005ae2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d3f2      	bcc.n	8005ac6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005ae0:	e000      	b.n	8005ae4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005ae2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d055      	beq.n	8005b96 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005aea:	f3ef 8311 	mrs	r3, BASEPRI
 8005aee:	f04f 0120 	mov.w	r1, #32
 8005af2:	f381 8811 	msr	BASEPRI, r1
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	482a      	ldr	r0, [pc, #168]	; (8005ba4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005afa:	f7fe fed5 	bl	80048a8 <_PreparePacket>
 8005afe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
 8005b08:	79fb      	ldrb	r3, [r7, #7]
 8005b0a:	623b      	str	r3, [r7, #32]
 8005b0c:	e00b      	b.n	8005b26 <SEGGER_SYSVIEW_SendModule+0x7e>
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	1c59      	adds	r1, r3, #1
 8005b16:	6279      	str	r1, [r7, #36]	; 0x24
 8005b18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	09db      	lsrs	r3, r3, #7
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	2b7f      	cmp	r3, #127	; 0x7f
 8005b2a:	d8f0      	bhi.n	8005b0e <SEGGER_SYSVIEW_SendModule+0x66>
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	627a      	str	r2, [r7, #36]	; 0x24
 8005b32:	6a3a      	ldr	r2, [r7, #32]
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	e00b      	b.n	8005b60 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	1c59      	adds	r1, r3, #1
 8005b50:	61f9      	str	r1, [r7, #28]
 8005b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	09db      	lsrs	r3, r3, #7
 8005b5e:	61bb      	str	r3, [r7, #24]
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b7f      	cmp	r3, #127	; 0x7f
 8005b64:	d8f0      	bhi.n	8005b48 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	61fa      	str	r2, [r7, #28]
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2280      	movs	r2, #128	; 0x80
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7fe fe42 	bl	8004808 <_EncodeStr>
 8005b84:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005b86:	2216      	movs	r2, #22
 8005b88:	68f9      	ldr	r1, [r7, #12]
 8005b8a:	6938      	ldr	r0, [r7, #16]
 8005b8c:	f7fe ff7a 	bl	8004a84 <_SendPacket>
      RECORD_END();
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005b96:	bf00      	nop
 8005b98:	3730      	adds	r7, #48	; 0x30
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	200142e0 	.word	0x200142e0
 8005ba4:	200142e8 	.word	0x200142e8

08005ba8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005bae:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00f      	beq.n	8005bd6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005bb6:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1f2      	bne.n	8005bbc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005bd6:	bf00      	nop
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	200142e0 	.word	0x200142e0

08005be4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005bea:	f3ef 8311 	mrs	r3, BASEPRI
 8005bee:	f04f 0120 	mov.w	r1, #32
 8005bf2:	f381 8811 	msr	BASEPRI, r1
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	4817      	ldr	r0, [pc, #92]	; (8005c58 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005bfa:	f7fe fe55 	bl	80048a8 <_PreparePacket>
 8005bfe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	4b14      	ldr	r3, [pc, #80]	; (8005c5c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	e00b      	b.n	8005c28 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	1c59      	adds	r1, r3, #1
 8005c18:	6179      	str	r1, [r7, #20]
 8005c1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	09db      	lsrs	r3, r3, #7
 8005c26:	613b      	str	r3, [r7, #16]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c2c:	d8f0      	bhi.n	8005c10 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	617a      	str	r2, [r7, #20]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005c3e:	221b      	movs	r2, #27
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	68b8      	ldr	r0, [r7, #8]
 8005c44:	f7fe ff1e 	bl	8004a84 <_SendPacket>
  RECORD_END();
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f383 8811 	msr	BASEPRI, r3
}
 8005c4e:	bf00      	nop
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	200142e8 	.word	0x200142e8
 8005c5c:	200142e4 	.word	0x200142e4

08005c60 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08a      	sub	sp, #40	; 0x28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c68:	f3ef 8311 	mrs	r3, BASEPRI
 8005c6c:	f04f 0120 	mov.w	r1, #32
 8005c70:	f381 8811 	msr	BASEPRI, r1
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	4827      	ldr	r0, [pc, #156]	; (8005d14 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005c78:	f7fe fe16 	bl	80048a8 <_PreparePacket>
 8005c7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c7e:	2280      	movs	r2, #128	; 0x80
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	6938      	ldr	r0, [r7, #16]
 8005c84:	f7fe fdc0 	bl	8004808 <_EncodeStr>
 8005c88:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c8e:	2301      	movs	r3, #1
 8005c90:	623b      	str	r3, [r7, #32]
 8005c92:	e00b      	b.n	8005cac <SEGGER_SYSVIEW_Warn+0x4c>
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	1c59      	adds	r1, r3, #1
 8005c9c:	6279      	str	r1, [r7, #36]	; 0x24
 8005c9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	09db      	lsrs	r3, r3, #7
 8005caa:	623b      	str	r3, [r7, #32]
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	2b7f      	cmp	r3, #127	; 0x7f
 8005cb0:	d8f0      	bhi.n	8005c94 <SEGGER_SYSVIEW_Warn+0x34>
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	627a      	str	r2, [r7, #36]	; 0x24
 8005cb8:	6a3a      	ldr	r2, [r7, #32]
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	61fb      	str	r3, [r7, #28]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	e00b      	b.n	8005ce4 <SEGGER_SYSVIEW_Warn+0x84>
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	1c59      	adds	r1, r3, #1
 8005cd4:	61f9      	str	r1, [r7, #28]
 8005cd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	09db      	lsrs	r3, r3, #7
 8005ce2:	61bb      	str	r3, [r7, #24]
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce8:	d8f0      	bhi.n	8005ccc <SEGGER_SYSVIEW_Warn+0x6c>
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	61fa      	str	r2, [r7, #28]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005cfa:	221a      	movs	r2, #26
 8005cfc:	68f9      	ldr	r1, [r7, #12]
 8005cfe:	6938      	ldr	r0, [r7, #16]
 8005d00:	f7fe fec0 	bl	8004a84 <_SendPacket>
  RECORD_END();
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f383 8811 	msr	BASEPRI, r3
}
 8005d0a:	bf00      	nop
 8005d0c:	3728      	adds	r7, #40	; 0x28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	200142e8 	.word	0x200142e8

08005d18 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	f7fe fc76 	bl	800461c <SEGGER_RTT_Write>
  return len;
 8005d30:	683b      	ldr	r3, [r7, #0]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <__libc_init_array>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	4d0d      	ldr	r5, [pc, #52]	; (8005d74 <__libc_init_array+0x38>)
 8005d40:	4c0d      	ldr	r4, [pc, #52]	; (8005d78 <__libc_init_array+0x3c>)
 8005d42:	1b64      	subs	r4, r4, r5
 8005d44:	10a4      	asrs	r4, r4, #2
 8005d46:	2600      	movs	r6, #0
 8005d48:	42a6      	cmp	r6, r4
 8005d4a:	d109      	bne.n	8005d60 <__libc_init_array+0x24>
 8005d4c:	4d0b      	ldr	r5, [pc, #44]	; (8005d7c <__libc_init_array+0x40>)
 8005d4e:	4c0c      	ldr	r4, [pc, #48]	; (8005d80 <__libc_init_array+0x44>)
 8005d50:	f000 fcfe 	bl	8006750 <_init>
 8005d54:	1b64      	subs	r4, r4, r5
 8005d56:	10a4      	asrs	r4, r4, #2
 8005d58:	2600      	movs	r6, #0
 8005d5a:	42a6      	cmp	r6, r4
 8005d5c:	d105      	bne.n	8005d6a <__libc_init_array+0x2e>
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d64:	4798      	blx	r3
 8005d66:	3601      	adds	r6, #1
 8005d68:	e7ee      	b.n	8005d48 <__libc_init_array+0xc>
 8005d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d6e:	4798      	blx	r3
 8005d70:	3601      	adds	r6, #1
 8005d72:	e7f2      	b.n	8005d5a <__libc_init_array+0x1e>
 8005d74:	08006910 	.word	0x08006910
 8005d78:	08006910 	.word	0x08006910
 8005d7c:	08006910 	.word	0x08006910
 8005d80:	08006914 	.word	0x08006914

08005d84 <memcmp>:
 8005d84:	b530      	push	{r4, r5, lr}
 8005d86:	3901      	subs	r1, #1
 8005d88:	2400      	movs	r4, #0
 8005d8a:	42a2      	cmp	r2, r4
 8005d8c:	d101      	bne.n	8005d92 <memcmp+0xe>
 8005d8e:	2000      	movs	r0, #0
 8005d90:	e005      	b.n	8005d9e <memcmp+0x1a>
 8005d92:	5d03      	ldrb	r3, [r0, r4]
 8005d94:	3401      	adds	r4, #1
 8005d96:	5d0d      	ldrb	r5, [r1, r4]
 8005d98:	42ab      	cmp	r3, r5
 8005d9a:	d0f6      	beq.n	8005d8a <memcmp+0x6>
 8005d9c:	1b58      	subs	r0, r3, r5
 8005d9e:	bd30      	pop	{r4, r5, pc}

08005da0 <memcpy>:
 8005da0:	440a      	add	r2, r1
 8005da2:	4291      	cmp	r1, r2
 8005da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005da8:	d100      	bne.n	8005dac <memcpy+0xc>
 8005daa:	4770      	bx	lr
 8005dac:	b510      	push	{r4, lr}
 8005dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005db2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005db6:	4291      	cmp	r1, r2
 8005db8:	d1f9      	bne.n	8005dae <memcpy+0xe>
 8005dba:	bd10      	pop	{r4, pc}

08005dbc <memset>:
 8005dbc:	4402      	add	r2, r0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d100      	bne.n	8005dc6 <memset+0xa>
 8005dc4:	4770      	bx	lr
 8005dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dca:	e7f9      	b.n	8005dc0 <memset+0x4>

08005dcc <_puts_r>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	460e      	mov	r6, r1
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	b118      	cbz	r0, 8005ddc <_puts_r+0x10>
 8005dd4:	6983      	ldr	r3, [r0, #24]
 8005dd6:	b90b      	cbnz	r3, 8005ddc <_puts_r+0x10>
 8005dd8:	f000 fa48 	bl	800626c <__sinit>
 8005ddc:	69ab      	ldr	r3, [r5, #24]
 8005dde:	68ac      	ldr	r4, [r5, #8]
 8005de0:	b913      	cbnz	r3, 8005de8 <_puts_r+0x1c>
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 fa42 	bl	800626c <__sinit>
 8005de8:	4b2c      	ldr	r3, [pc, #176]	; (8005e9c <_puts_r+0xd0>)
 8005dea:	429c      	cmp	r4, r3
 8005dec:	d120      	bne.n	8005e30 <_puts_r+0x64>
 8005dee:	686c      	ldr	r4, [r5, #4]
 8005df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005df2:	07db      	lsls	r3, r3, #31
 8005df4:	d405      	bmi.n	8005e02 <_puts_r+0x36>
 8005df6:	89a3      	ldrh	r3, [r4, #12]
 8005df8:	0598      	lsls	r0, r3, #22
 8005dfa:	d402      	bmi.n	8005e02 <_puts_r+0x36>
 8005dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dfe:	f000 fad3 	bl	80063a8 <__retarget_lock_acquire_recursive>
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	0719      	lsls	r1, r3, #28
 8005e06:	d51d      	bpl.n	8005e44 <_puts_r+0x78>
 8005e08:	6923      	ldr	r3, [r4, #16]
 8005e0a:	b1db      	cbz	r3, 8005e44 <_puts_r+0x78>
 8005e0c:	3e01      	subs	r6, #1
 8005e0e:	68a3      	ldr	r3, [r4, #8]
 8005e10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e14:	3b01      	subs	r3, #1
 8005e16:	60a3      	str	r3, [r4, #8]
 8005e18:	bb39      	cbnz	r1, 8005e6a <_puts_r+0x9e>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	da38      	bge.n	8005e90 <_puts_r+0xc4>
 8005e1e:	4622      	mov	r2, r4
 8005e20:	210a      	movs	r1, #10
 8005e22:	4628      	mov	r0, r5
 8005e24:	f000 f848 	bl	8005eb8 <__swbuf_r>
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d011      	beq.n	8005e50 <_puts_r+0x84>
 8005e2c:	250a      	movs	r5, #10
 8005e2e:	e011      	b.n	8005e54 <_puts_r+0x88>
 8005e30:	4b1b      	ldr	r3, [pc, #108]	; (8005ea0 <_puts_r+0xd4>)
 8005e32:	429c      	cmp	r4, r3
 8005e34:	d101      	bne.n	8005e3a <_puts_r+0x6e>
 8005e36:	68ac      	ldr	r4, [r5, #8]
 8005e38:	e7da      	b.n	8005df0 <_puts_r+0x24>
 8005e3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ea4 <_puts_r+0xd8>)
 8005e3c:	429c      	cmp	r4, r3
 8005e3e:	bf08      	it	eq
 8005e40:	68ec      	ldreq	r4, [r5, #12]
 8005e42:	e7d5      	b.n	8005df0 <_puts_r+0x24>
 8005e44:	4621      	mov	r1, r4
 8005e46:	4628      	mov	r0, r5
 8005e48:	f000 f888 	bl	8005f5c <__swsetup_r>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d0dd      	beq.n	8005e0c <_puts_r+0x40>
 8005e50:	f04f 35ff 	mov.w	r5, #4294967295
 8005e54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e56:	07da      	lsls	r2, r3, #31
 8005e58:	d405      	bmi.n	8005e66 <_puts_r+0x9a>
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	059b      	lsls	r3, r3, #22
 8005e5e:	d402      	bmi.n	8005e66 <_puts_r+0x9a>
 8005e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e62:	f000 faa2 	bl	80063aa <__retarget_lock_release_recursive>
 8005e66:	4628      	mov	r0, r5
 8005e68:	bd70      	pop	{r4, r5, r6, pc}
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	da04      	bge.n	8005e78 <_puts_r+0xac>
 8005e6e:	69a2      	ldr	r2, [r4, #24]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	dc06      	bgt.n	8005e82 <_puts_r+0xb6>
 8005e74:	290a      	cmp	r1, #10
 8005e76:	d004      	beq.n	8005e82 <_puts_r+0xb6>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	6022      	str	r2, [r4, #0]
 8005e7e:	7019      	strb	r1, [r3, #0]
 8005e80:	e7c5      	b.n	8005e0e <_puts_r+0x42>
 8005e82:	4622      	mov	r2, r4
 8005e84:	4628      	mov	r0, r5
 8005e86:	f000 f817 	bl	8005eb8 <__swbuf_r>
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	d1bf      	bne.n	8005e0e <_puts_r+0x42>
 8005e8e:	e7df      	b.n	8005e50 <_puts_r+0x84>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	250a      	movs	r5, #10
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	6022      	str	r2, [r4, #0]
 8005e98:	701d      	strb	r5, [r3, #0]
 8005e9a:	e7db      	b.n	8005e54 <_puts_r+0x88>
 8005e9c:	080068c8 	.word	0x080068c8
 8005ea0:	080068e8 	.word	0x080068e8
 8005ea4:	080068a8 	.word	0x080068a8

08005ea8 <puts>:
 8005ea8:	4b02      	ldr	r3, [pc, #8]	; (8005eb4 <puts+0xc>)
 8005eaa:	4601      	mov	r1, r0
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	f7ff bf8d 	b.w	8005dcc <_puts_r>
 8005eb2:	bf00      	nop
 8005eb4:	20000014 	.word	0x20000014

08005eb8 <__swbuf_r>:
 8005eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eba:	460e      	mov	r6, r1
 8005ebc:	4614      	mov	r4, r2
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	b118      	cbz	r0, 8005eca <__swbuf_r+0x12>
 8005ec2:	6983      	ldr	r3, [r0, #24]
 8005ec4:	b90b      	cbnz	r3, 8005eca <__swbuf_r+0x12>
 8005ec6:	f000 f9d1 	bl	800626c <__sinit>
 8005eca:	4b21      	ldr	r3, [pc, #132]	; (8005f50 <__swbuf_r+0x98>)
 8005ecc:	429c      	cmp	r4, r3
 8005ece:	d12b      	bne.n	8005f28 <__swbuf_r+0x70>
 8005ed0:	686c      	ldr	r4, [r5, #4]
 8005ed2:	69a3      	ldr	r3, [r4, #24]
 8005ed4:	60a3      	str	r3, [r4, #8]
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	071a      	lsls	r2, r3, #28
 8005eda:	d52f      	bpl.n	8005f3c <__swbuf_r+0x84>
 8005edc:	6923      	ldr	r3, [r4, #16]
 8005ede:	b36b      	cbz	r3, 8005f3c <__swbuf_r+0x84>
 8005ee0:	6923      	ldr	r3, [r4, #16]
 8005ee2:	6820      	ldr	r0, [r4, #0]
 8005ee4:	1ac0      	subs	r0, r0, r3
 8005ee6:	6963      	ldr	r3, [r4, #20]
 8005ee8:	b2f6      	uxtb	r6, r6
 8005eea:	4283      	cmp	r3, r0
 8005eec:	4637      	mov	r7, r6
 8005eee:	dc04      	bgt.n	8005efa <__swbuf_r+0x42>
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f000 f926 	bl	8006144 <_fflush_r>
 8005ef8:	bb30      	cbnz	r0, 8005f48 <__swbuf_r+0x90>
 8005efa:	68a3      	ldr	r3, [r4, #8]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	60a3      	str	r3, [r4, #8]
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	6022      	str	r2, [r4, #0]
 8005f06:	701e      	strb	r6, [r3, #0]
 8005f08:	6963      	ldr	r3, [r4, #20]
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	4283      	cmp	r3, r0
 8005f0e:	d004      	beq.n	8005f1a <__swbuf_r+0x62>
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	07db      	lsls	r3, r3, #31
 8005f14:	d506      	bpl.n	8005f24 <__swbuf_r+0x6c>
 8005f16:	2e0a      	cmp	r6, #10
 8005f18:	d104      	bne.n	8005f24 <__swbuf_r+0x6c>
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f000 f911 	bl	8006144 <_fflush_r>
 8005f22:	b988      	cbnz	r0, 8005f48 <__swbuf_r+0x90>
 8005f24:	4638      	mov	r0, r7
 8005f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f28:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <__swbuf_r+0x9c>)
 8005f2a:	429c      	cmp	r4, r3
 8005f2c:	d101      	bne.n	8005f32 <__swbuf_r+0x7a>
 8005f2e:	68ac      	ldr	r4, [r5, #8]
 8005f30:	e7cf      	b.n	8005ed2 <__swbuf_r+0x1a>
 8005f32:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <__swbuf_r+0xa0>)
 8005f34:	429c      	cmp	r4, r3
 8005f36:	bf08      	it	eq
 8005f38:	68ec      	ldreq	r4, [r5, #12]
 8005f3a:	e7ca      	b.n	8005ed2 <__swbuf_r+0x1a>
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f000 f80c 	bl	8005f5c <__swsetup_r>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d0cb      	beq.n	8005ee0 <__swbuf_r+0x28>
 8005f48:	f04f 37ff 	mov.w	r7, #4294967295
 8005f4c:	e7ea      	b.n	8005f24 <__swbuf_r+0x6c>
 8005f4e:	bf00      	nop
 8005f50:	080068c8 	.word	0x080068c8
 8005f54:	080068e8 	.word	0x080068e8
 8005f58:	080068a8 	.word	0x080068a8

08005f5c <__swsetup_r>:
 8005f5c:	4b32      	ldr	r3, [pc, #200]	; (8006028 <__swsetup_r+0xcc>)
 8005f5e:	b570      	push	{r4, r5, r6, lr}
 8005f60:	681d      	ldr	r5, [r3, #0]
 8005f62:	4606      	mov	r6, r0
 8005f64:	460c      	mov	r4, r1
 8005f66:	b125      	cbz	r5, 8005f72 <__swsetup_r+0x16>
 8005f68:	69ab      	ldr	r3, [r5, #24]
 8005f6a:	b913      	cbnz	r3, 8005f72 <__swsetup_r+0x16>
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	f000 f97d 	bl	800626c <__sinit>
 8005f72:	4b2e      	ldr	r3, [pc, #184]	; (800602c <__swsetup_r+0xd0>)
 8005f74:	429c      	cmp	r4, r3
 8005f76:	d10f      	bne.n	8005f98 <__swsetup_r+0x3c>
 8005f78:	686c      	ldr	r4, [r5, #4]
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f80:	0719      	lsls	r1, r3, #28
 8005f82:	d42c      	bmi.n	8005fde <__swsetup_r+0x82>
 8005f84:	06dd      	lsls	r5, r3, #27
 8005f86:	d411      	bmi.n	8005fac <__swsetup_r+0x50>
 8005f88:	2309      	movs	r3, #9
 8005f8a:	6033      	str	r3, [r6, #0]
 8005f8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f90:	81a3      	strh	r3, [r4, #12]
 8005f92:	f04f 30ff 	mov.w	r0, #4294967295
 8005f96:	e03e      	b.n	8006016 <__swsetup_r+0xba>
 8005f98:	4b25      	ldr	r3, [pc, #148]	; (8006030 <__swsetup_r+0xd4>)
 8005f9a:	429c      	cmp	r4, r3
 8005f9c:	d101      	bne.n	8005fa2 <__swsetup_r+0x46>
 8005f9e:	68ac      	ldr	r4, [r5, #8]
 8005fa0:	e7eb      	b.n	8005f7a <__swsetup_r+0x1e>
 8005fa2:	4b24      	ldr	r3, [pc, #144]	; (8006034 <__swsetup_r+0xd8>)
 8005fa4:	429c      	cmp	r4, r3
 8005fa6:	bf08      	it	eq
 8005fa8:	68ec      	ldreq	r4, [r5, #12]
 8005faa:	e7e6      	b.n	8005f7a <__swsetup_r+0x1e>
 8005fac:	0758      	lsls	r0, r3, #29
 8005fae:	d512      	bpl.n	8005fd6 <__swsetup_r+0x7a>
 8005fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fb2:	b141      	cbz	r1, 8005fc6 <__swsetup_r+0x6a>
 8005fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fb8:	4299      	cmp	r1, r3
 8005fba:	d002      	beq.n	8005fc2 <__swsetup_r+0x66>
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	f000 fa59 	bl	8006474 <_free_r>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	6363      	str	r3, [r4, #52]	; 0x34
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fcc:	81a3      	strh	r3, [r4, #12]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	6063      	str	r3, [r4, #4]
 8005fd2:	6923      	ldr	r3, [r4, #16]
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	f043 0308 	orr.w	r3, r3, #8
 8005fdc:	81a3      	strh	r3, [r4, #12]
 8005fde:	6923      	ldr	r3, [r4, #16]
 8005fe0:	b94b      	cbnz	r3, 8005ff6 <__swsetup_r+0x9a>
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fec:	d003      	beq.n	8005ff6 <__swsetup_r+0x9a>
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f000 f9ff 	bl	80063f4 <__smakebuf_r>
 8005ff6:	89a0      	ldrh	r0, [r4, #12]
 8005ff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ffc:	f010 0301 	ands.w	r3, r0, #1
 8006000:	d00a      	beq.n	8006018 <__swsetup_r+0xbc>
 8006002:	2300      	movs	r3, #0
 8006004:	60a3      	str	r3, [r4, #8]
 8006006:	6963      	ldr	r3, [r4, #20]
 8006008:	425b      	negs	r3, r3
 800600a:	61a3      	str	r3, [r4, #24]
 800600c:	6923      	ldr	r3, [r4, #16]
 800600e:	b943      	cbnz	r3, 8006022 <__swsetup_r+0xc6>
 8006010:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006014:	d1ba      	bne.n	8005f8c <__swsetup_r+0x30>
 8006016:	bd70      	pop	{r4, r5, r6, pc}
 8006018:	0781      	lsls	r1, r0, #30
 800601a:	bf58      	it	pl
 800601c:	6963      	ldrpl	r3, [r4, #20]
 800601e:	60a3      	str	r3, [r4, #8]
 8006020:	e7f4      	b.n	800600c <__swsetup_r+0xb0>
 8006022:	2000      	movs	r0, #0
 8006024:	e7f7      	b.n	8006016 <__swsetup_r+0xba>
 8006026:	bf00      	nop
 8006028:	20000014 	.word	0x20000014
 800602c:	080068c8 	.word	0x080068c8
 8006030:	080068e8 	.word	0x080068e8
 8006034:	080068a8 	.word	0x080068a8

08006038 <__sflush_r>:
 8006038:	898a      	ldrh	r2, [r1, #12]
 800603a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800603e:	4605      	mov	r5, r0
 8006040:	0710      	lsls	r0, r2, #28
 8006042:	460c      	mov	r4, r1
 8006044:	d458      	bmi.n	80060f8 <__sflush_r+0xc0>
 8006046:	684b      	ldr	r3, [r1, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	dc05      	bgt.n	8006058 <__sflush_r+0x20>
 800604c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	dc02      	bgt.n	8006058 <__sflush_r+0x20>
 8006052:	2000      	movs	r0, #0
 8006054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800605a:	2e00      	cmp	r6, #0
 800605c:	d0f9      	beq.n	8006052 <__sflush_r+0x1a>
 800605e:	2300      	movs	r3, #0
 8006060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006064:	682f      	ldr	r7, [r5, #0]
 8006066:	602b      	str	r3, [r5, #0]
 8006068:	d032      	beq.n	80060d0 <__sflush_r+0x98>
 800606a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	075a      	lsls	r2, r3, #29
 8006070:	d505      	bpl.n	800607e <__sflush_r+0x46>
 8006072:	6863      	ldr	r3, [r4, #4]
 8006074:	1ac0      	subs	r0, r0, r3
 8006076:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006078:	b10b      	cbz	r3, 800607e <__sflush_r+0x46>
 800607a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800607c:	1ac0      	subs	r0, r0, r3
 800607e:	2300      	movs	r3, #0
 8006080:	4602      	mov	r2, r0
 8006082:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006084:	6a21      	ldr	r1, [r4, #32]
 8006086:	4628      	mov	r0, r5
 8006088:	47b0      	blx	r6
 800608a:	1c43      	adds	r3, r0, #1
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	d106      	bne.n	800609e <__sflush_r+0x66>
 8006090:	6829      	ldr	r1, [r5, #0]
 8006092:	291d      	cmp	r1, #29
 8006094:	d82c      	bhi.n	80060f0 <__sflush_r+0xb8>
 8006096:	4a2a      	ldr	r2, [pc, #168]	; (8006140 <__sflush_r+0x108>)
 8006098:	40ca      	lsrs	r2, r1
 800609a:	07d6      	lsls	r6, r2, #31
 800609c:	d528      	bpl.n	80060f0 <__sflush_r+0xb8>
 800609e:	2200      	movs	r2, #0
 80060a0:	6062      	str	r2, [r4, #4]
 80060a2:	04d9      	lsls	r1, r3, #19
 80060a4:	6922      	ldr	r2, [r4, #16]
 80060a6:	6022      	str	r2, [r4, #0]
 80060a8:	d504      	bpl.n	80060b4 <__sflush_r+0x7c>
 80060aa:	1c42      	adds	r2, r0, #1
 80060ac:	d101      	bne.n	80060b2 <__sflush_r+0x7a>
 80060ae:	682b      	ldr	r3, [r5, #0]
 80060b0:	b903      	cbnz	r3, 80060b4 <__sflush_r+0x7c>
 80060b2:	6560      	str	r0, [r4, #84]	; 0x54
 80060b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060b6:	602f      	str	r7, [r5, #0]
 80060b8:	2900      	cmp	r1, #0
 80060ba:	d0ca      	beq.n	8006052 <__sflush_r+0x1a>
 80060bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060c0:	4299      	cmp	r1, r3
 80060c2:	d002      	beq.n	80060ca <__sflush_r+0x92>
 80060c4:	4628      	mov	r0, r5
 80060c6:	f000 f9d5 	bl	8006474 <_free_r>
 80060ca:	2000      	movs	r0, #0
 80060cc:	6360      	str	r0, [r4, #52]	; 0x34
 80060ce:	e7c1      	b.n	8006054 <__sflush_r+0x1c>
 80060d0:	6a21      	ldr	r1, [r4, #32]
 80060d2:	2301      	movs	r3, #1
 80060d4:	4628      	mov	r0, r5
 80060d6:	47b0      	blx	r6
 80060d8:	1c41      	adds	r1, r0, #1
 80060da:	d1c7      	bne.n	800606c <__sflush_r+0x34>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0c4      	beq.n	800606c <__sflush_r+0x34>
 80060e2:	2b1d      	cmp	r3, #29
 80060e4:	d001      	beq.n	80060ea <__sflush_r+0xb2>
 80060e6:	2b16      	cmp	r3, #22
 80060e8:	d101      	bne.n	80060ee <__sflush_r+0xb6>
 80060ea:	602f      	str	r7, [r5, #0]
 80060ec:	e7b1      	b.n	8006052 <__sflush_r+0x1a>
 80060ee:	89a3      	ldrh	r3, [r4, #12]
 80060f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f4:	81a3      	strh	r3, [r4, #12]
 80060f6:	e7ad      	b.n	8006054 <__sflush_r+0x1c>
 80060f8:	690f      	ldr	r7, [r1, #16]
 80060fa:	2f00      	cmp	r7, #0
 80060fc:	d0a9      	beq.n	8006052 <__sflush_r+0x1a>
 80060fe:	0793      	lsls	r3, r2, #30
 8006100:	680e      	ldr	r6, [r1, #0]
 8006102:	bf08      	it	eq
 8006104:	694b      	ldreq	r3, [r1, #20]
 8006106:	600f      	str	r7, [r1, #0]
 8006108:	bf18      	it	ne
 800610a:	2300      	movne	r3, #0
 800610c:	eba6 0807 	sub.w	r8, r6, r7
 8006110:	608b      	str	r3, [r1, #8]
 8006112:	f1b8 0f00 	cmp.w	r8, #0
 8006116:	dd9c      	ble.n	8006052 <__sflush_r+0x1a>
 8006118:	6a21      	ldr	r1, [r4, #32]
 800611a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800611c:	4643      	mov	r3, r8
 800611e:	463a      	mov	r2, r7
 8006120:	4628      	mov	r0, r5
 8006122:	47b0      	blx	r6
 8006124:	2800      	cmp	r0, #0
 8006126:	dc06      	bgt.n	8006136 <__sflush_r+0xfe>
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800612e:	81a3      	strh	r3, [r4, #12]
 8006130:	f04f 30ff 	mov.w	r0, #4294967295
 8006134:	e78e      	b.n	8006054 <__sflush_r+0x1c>
 8006136:	4407      	add	r7, r0
 8006138:	eba8 0800 	sub.w	r8, r8, r0
 800613c:	e7e9      	b.n	8006112 <__sflush_r+0xda>
 800613e:	bf00      	nop
 8006140:	20400001 	.word	0x20400001

08006144 <_fflush_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	690b      	ldr	r3, [r1, #16]
 8006148:	4605      	mov	r5, r0
 800614a:	460c      	mov	r4, r1
 800614c:	b913      	cbnz	r3, 8006154 <_fflush_r+0x10>
 800614e:	2500      	movs	r5, #0
 8006150:	4628      	mov	r0, r5
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	b118      	cbz	r0, 800615e <_fflush_r+0x1a>
 8006156:	6983      	ldr	r3, [r0, #24]
 8006158:	b90b      	cbnz	r3, 800615e <_fflush_r+0x1a>
 800615a:	f000 f887 	bl	800626c <__sinit>
 800615e:	4b14      	ldr	r3, [pc, #80]	; (80061b0 <_fflush_r+0x6c>)
 8006160:	429c      	cmp	r4, r3
 8006162:	d11b      	bne.n	800619c <_fflush_r+0x58>
 8006164:	686c      	ldr	r4, [r5, #4]
 8006166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0ef      	beq.n	800614e <_fflush_r+0xa>
 800616e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006170:	07d0      	lsls	r0, r2, #31
 8006172:	d404      	bmi.n	800617e <_fflush_r+0x3a>
 8006174:	0599      	lsls	r1, r3, #22
 8006176:	d402      	bmi.n	800617e <_fflush_r+0x3a>
 8006178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800617a:	f000 f915 	bl	80063a8 <__retarget_lock_acquire_recursive>
 800617e:	4628      	mov	r0, r5
 8006180:	4621      	mov	r1, r4
 8006182:	f7ff ff59 	bl	8006038 <__sflush_r>
 8006186:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006188:	07da      	lsls	r2, r3, #31
 800618a:	4605      	mov	r5, r0
 800618c:	d4e0      	bmi.n	8006150 <_fflush_r+0xc>
 800618e:	89a3      	ldrh	r3, [r4, #12]
 8006190:	059b      	lsls	r3, r3, #22
 8006192:	d4dd      	bmi.n	8006150 <_fflush_r+0xc>
 8006194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006196:	f000 f908 	bl	80063aa <__retarget_lock_release_recursive>
 800619a:	e7d9      	b.n	8006150 <_fflush_r+0xc>
 800619c:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <_fflush_r+0x70>)
 800619e:	429c      	cmp	r4, r3
 80061a0:	d101      	bne.n	80061a6 <_fflush_r+0x62>
 80061a2:	68ac      	ldr	r4, [r5, #8]
 80061a4:	e7df      	b.n	8006166 <_fflush_r+0x22>
 80061a6:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <_fflush_r+0x74>)
 80061a8:	429c      	cmp	r4, r3
 80061aa:	bf08      	it	eq
 80061ac:	68ec      	ldreq	r4, [r5, #12]
 80061ae:	e7da      	b.n	8006166 <_fflush_r+0x22>
 80061b0:	080068c8 	.word	0x080068c8
 80061b4:	080068e8 	.word	0x080068e8
 80061b8:	080068a8 	.word	0x080068a8

080061bc <std>:
 80061bc:	2300      	movs	r3, #0
 80061be:	b510      	push	{r4, lr}
 80061c0:	4604      	mov	r4, r0
 80061c2:	e9c0 3300 	strd	r3, r3, [r0]
 80061c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ca:	6083      	str	r3, [r0, #8]
 80061cc:	8181      	strh	r1, [r0, #12]
 80061ce:	6643      	str	r3, [r0, #100]	; 0x64
 80061d0:	81c2      	strh	r2, [r0, #14]
 80061d2:	6183      	str	r3, [r0, #24]
 80061d4:	4619      	mov	r1, r3
 80061d6:	2208      	movs	r2, #8
 80061d8:	305c      	adds	r0, #92	; 0x5c
 80061da:	f7ff fdef 	bl	8005dbc <memset>
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <std+0x38>)
 80061e0:	6263      	str	r3, [r4, #36]	; 0x24
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <std+0x3c>)
 80061e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80061e6:	4b05      	ldr	r3, [pc, #20]	; (80061fc <std+0x40>)
 80061e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061ea:	4b05      	ldr	r3, [pc, #20]	; (8006200 <std+0x44>)
 80061ec:	6224      	str	r4, [r4, #32]
 80061ee:	6323      	str	r3, [r4, #48]	; 0x30
 80061f0:	bd10      	pop	{r4, pc}
 80061f2:	bf00      	nop
 80061f4:	080065e9 	.word	0x080065e9
 80061f8:	0800660b 	.word	0x0800660b
 80061fc:	08006643 	.word	0x08006643
 8006200:	08006667 	.word	0x08006667

08006204 <_cleanup_r>:
 8006204:	4901      	ldr	r1, [pc, #4]	; (800620c <_cleanup_r+0x8>)
 8006206:	f000 b8af 	b.w	8006368 <_fwalk_reent>
 800620a:	bf00      	nop
 800620c:	08006145 	.word	0x08006145

08006210 <__sfmoreglue>:
 8006210:	b570      	push	{r4, r5, r6, lr}
 8006212:	1e4a      	subs	r2, r1, #1
 8006214:	2568      	movs	r5, #104	; 0x68
 8006216:	4355      	muls	r5, r2
 8006218:	460e      	mov	r6, r1
 800621a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800621e:	f000 f979 	bl	8006514 <_malloc_r>
 8006222:	4604      	mov	r4, r0
 8006224:	b140      	cbz	r0, 8006238 <__sfmoreglue+0x28>
 8006226:	2100      	movs	r1, #0
 8006228:	e9c0 1600 	strd	r1, r6, [r0]
 800622c:	300c      	adds	r0, #12
 800622e:	60a0      	str	r0, [r4, #8]
 8006230:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006234:	f7ff fdc2 	bl	8005dbc <memset>
 8006238:	4620      	mov	r0, r4
 800623a:	bd70      	pop	{r4, r5, r6, pc}

0800623c <__sfp_lock_acquire>:
 800623c:	4801      	ldr	r0, [pc, #4]	; (8006244 <__sfp_lock_acquire+0x8>)
 800623e:	f000 b8b3 	b.w	80063a8 <__retarget_lock_acquire_recursive>
 8006242:	bf00      	nop
 8006244:	20014514 	.word	0x20014514

08006248 <__sfp_lock_release>:
 8006248:	4801      	ldr	r0, [pc, #4]	; (8006250 <__sfp_lock_release+0x8>)
 800624a:	f000 b8ae 	b.w	80063aa <__retarget_lock_release_recursive>
 800624e:	bf00      	nop
 8006250:	20014514 	.word	0x20014514

08006254 <__sinit_lock_acquire>:
 8006254:	4801      	ldr	r0, [pc, #4]	; (800625c <__sinit_lock_acquire+0x8>)
 8006256:	f000 b8a7 	b.w	80063a8 <__retarget_lock_acquire_recursive>
 800625a:	bf00      	nop
 800625c:	2001450f 	.word	0x2001450f

08006260 <__sinit_lock_release>:
 8006260:	4801      	ldr	r0, [pc, #4]	; (8006268 <__sinit_lock_release+0x8>)
 8006262:	f000 b8a2 	b.w	80063aa <__retarget_lock_release_recursive>
 8006266:	bf00      	nop
 8006268:	2001450f 	.word	0x2001450f

0800626c <__sinit>:
 800626c:	b510      	push	{r4, lr}
 800626e:	4604      	mov	r4, r0
 8006270:	f7ff fff0 	bl	8006254 <__sinit_lock_acquire>
 8006274:	69a3      	ldr	r3, [r4, #24]
 8006276:	b11b      	cbz	r3, 8006280 <__sinit+0x14>
 8006278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800627c:	f7ff bff0 	b.w	8006260 <__sinit_lock_release>
 8006280:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006284:	6523      	str	r3, [r4, #80]	; 0x50
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <__sinit+0x68>)
 8006288:	4a13      	ldr	r2, [pc, #76]	; (80062d8 <__sinit+0x6c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	62a2      	str	r2, [r4, #40]	; 0x28
 800628e:	42a3      	cmp	r3, r4
 8006290:	bf04      	itt	eq
 8006292:	2301      	moveq	r3, #1
 8006294:	61a3      	streq	r3, [r4, #24]
 8006296:	4620      	mov	r0, r4
 8006298:	f000 f820 	bl	80062dc <__sfp>
 800629c:	6060      	str	r0, [r4, #4]
 800629e:	4620      	mov	r0, r4
 80062a0:	f000 f81c 	bl	80062dc <__sfp>
 80062a4:	60a0      	str	r0, [r4, #8]
 80062a6:	4620      	mov	r0, r4
 80062a8:	f000 f818 	bl	80062dc <__sfp>
 80062ac:	2200      	movs	r2, #0
 80062ae:	60e0      	str	r0, [r4, #12]
 80062b0:	2104      	movs	r1, #4
 80062b2:	6860      	ldr	r0, [r4, #4]
 80062b4:	f7ff ff82 	bl	80061bc <std>
 80062b8:	68a0      	ldr	r0, [r4, #8]
 80062ba:	2201      	movs	r2, #1
 80062bc:	2109      	movs	r1, #9
 80062be:	f7ff ff7d 	bl	80061bc <std>
 80062c2:	68e0      	ldr	r0, [r4, #12]
 80062c4:	2202      	movs	r2, #2
 80062c6:	2112      	movs	r1, #18
 80062c8:	f7ff ff78 	bl	80061bc <std>
 80062cc:	2301      	movs	r3, #1
 80062ce:	61a3      	str	r3, [r4, #24]
 80062d0:	e7d2      	b.n	8006278 <__sinit+0xc>
 80062d2:	bf00      	nop
 80062d4:	080068a4 	.word	0x080068a4
 80062d8:	08006205 	.word	0x08006205

080062dc <__sfp>:
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	4607      	mov	r7, r0
 80062e0:	f7ff ffac 	bl	800623c <__sfp_lock_acquire>
 80062e4:	4b1e      	ldr	r3, [pc, #120]	; (8006360 <__sfp+0x84>)
 80062e6:	681e      	ldr	r6, [r3, #0]
 80062e8:	69b3      	ldr	r3, [r6, #24]
 80062ea:	b913      	cbnz	r3, 80062f2 <__sfp+0x16>
 80062ec:	4630      	mov	r0, r6
 80062ee:	f7ff ffbd 	bl	800626c <__sinit>
 80062f2:	3648      	adds	r6, #72	; 0x48
 80062f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	d503      	bpl.n	8006304 <__sfp+0x28>
 80062fc:	6833      	ldr	r3, [r6, #0]
 80062fe:	b30b      	cbz	r3, 8006344 <__sfp+0x68>
 8006300:	6836      	ldr	r6, [r6, #0]
 8006302:	e7f7      	b.n	80062f4 <__sfp+0x18>
 8006304:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006308:	b9d5      	cbnz	r5, 8006340 <__sfp+0x64>
 800630a:	4b16      	ldr	r3, [pc, #88]	; (8006364 <__sfp+0x88>)
 800630c:	60e3      	str	r3, [r4, #12]
 800630e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006312:	6665      	str	r5, [r4, #100]	; 0x64
 8006314:	f000 f847 	bl	80063a6 <__retarget_lock_init_recursive>
 8006318:	f7ff ff96 	bl	8006248 <__sfp_lock_release>
 800631c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006320:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006324:	6025      	str	r5, [r4, #0]
 8006326:	61a5      	str	r5, [r4, #24]
 8006328:	2208      	movs	r2, #8
 800632a:	4629      	mov	r1, r5
 800632c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006330:	f7ff fd44 	bl	8005dbc <memset>
 8006334:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006338:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800633c:	4620      	mov	r0, r4
 800633e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006340:	3468      	adds	r4, #104	; 0x68
 8006342:	e7d9      	b.n	80062f8 <__sfp+0x1c>
 8006344:	2104      	movs	r1, #4
 8006346:	4638      	mov	r0, r7
 8006348:	f7ff ff62 	bl	8006210 <__sfmoreglue>
 800634c:	4604      	mov	r4, r0
 800634e:	6030      	str	r0, [r6, #0]
 8006350:	2800      	cmp	r0, #0
 8006352:	d1d5      	bne.n	8006300 <__sfp+0x24>
 8006354:	f7ff ff78 	bl	8006248 <__sfp_lock_release>
 8006358:	230c      	movs	r3, #12
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	e7ee      	b.n	800633c <__sfp+0x60>
 800635e:	bf00      	nop
 8006360:	080068a4 	.word	0x080068a4
 8006364:	ffff0001 	.word	0xffff0001

08006368 <_fwalk_reent>:
 8006368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800636c:	4606      	mov	r6, r0
 800636e:	4688      	mov	r8, r1
 8006370:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006374:	2700      	movs	r7, #0
 8006376:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800637a:	f1b9 0901 	subs.w	r9, r9, #1
 800637e:	d505      	bpl.n	800638c <_fwalk_reent+0x24>
 8006380:	6824      	ldr	r4, [r4, #0]
 8006382:	2c00      	cmp	r4, #0
 8006384:	d1f7      	bne.n	8006376 <_fwalk_reent+0xe>
 8006386:	4638      	mov	r0, r7
 8006388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800638c:	89ab      	ldrh	r3, [r5, #12]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d907      	bls.n	80063a2 <_fwalk_reent+0x3a>
 8006392:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006396:	3301      	adds	r3, #1
 8006398:	d003      	beq.n	80063a2 <_fwalk_reent+0x3a>
 800639a:	4629      	mov	r1, r5
 800639c:	4630      	mov	r0, r6
 800639e:	47c0      	blx	r8
 80063a0:	4307      	orrs	r7, r0
 80063a2:	3568      	adds	r5, #104	; 0x68
 80063a4:	e7e9      	b.n	800637a <_fwalk_reent+0x12>

080063a6 <__retarget_lock_init_recursive>:
 80063a6:	4770      	bx	lr

080063a8 <__retarget_lock_acquire_recursive>:
 80063a8:	4770      	bx	lr

080063aa <__retarget_lock_release_recursive>:
 80063aa:	4770      	bx	lr

080063ac <__swhatbuf_r>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	460e      	mov	r6, r1
 80063b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b4:	2900      	cmp	r1, #0
 80063b6:	b096      	sub	sp, #88	; 0x58
 80063b8:	4614      	mov	r4, r2
 80063ba:	461d      	mov	r5, r3
 80063bc:	da07      	bge.n	80063ce <__swhatbuf_r+0x22>
 80063be:	2300      	movs	r3, #0
 80063c0:	602b      	str	r3, [r5, #0]
 80063c2:	89b3      	ldrh	r3, [r6, #12]
 80063c4:	061a      	lsls	r2, r3, #24
 80063c6:	d410      	bmi.n	80063ea <__swhatbuf_r+0x3e>
 80063c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063cc:	e00e      	b.n	80063ec <__swhatbuf_r+0x40>
 80063ce:	466a      	mov	r2, sp
 80063d0:	f000 f95e 	bl	8006690 <_fstat_r>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	dbf2      	blt.n	80063be <__swhatbuf_r+0x12>
 80063d8:	9a01      	ldr	r2, [sp, #4]
 80063da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063e2:	425a      	negs	r2, r3
 80063e4:	415a      	adcs	r2, r3
 80063e6:	602a      	str	r2, [r5, #0]
 80063e8:	e7ee      	b.n	80063c8 <__swhatbuf_r+0x1c>
 80063ea:	2340      	movs	r3, #64	; 0x40
 80063ec:	2000      	movs	r0, #0
 80063ee:	6023      	str	r3, [r4, #0]
 80063f0:	b016      	add	sp, #88	; 0x58
 80063f2:	bd70      	pop	{r4, r5, r6, pc}

080063f4 <__smakebuf_r>:
 80063f4:	898b      	ldrh	r3, [r1, #12]
 80063f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063f8:	079d      	lsls	r5, r3, #30
 80063fa:	4606      	mov	r6, r0
 80063fc:	460c      	mov	r4, r1
 80063fe:	d507      	bpl.n	8006410 <__smakebuf_r+0x1c>
 8006400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	6123      	str	r3, [r4, #16]
 8006408:	2301      	movs	r3, #1
 800640a:	6163      	str	r3, [r4, #20]
 800640c:	b002      	add	sp, #8
 800640e:	bd70      	pop	{r4, r5, r6, pc}
 8006410:	ab01      	add	r3, sp, #4
 8006412:	466a      	mov	r2, sp
 8006414:	f7ff ffca 	bl	80063ac <__swhatbuf_r>
 8006418:	9900      	ldr	r1, [sp, #0]
 800641a:	4605      	mov	r5, r0
 800641c:	4630      	mov	r0, r6
 800641e:	f000 f879 	bl	8006514 <_malloc_r>
 8006422:	b948      	cbnz	r0, 8006438 <__smakebuf_r+0x44>
 8006424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006428:	059a      	lsls	r2, r3, #22
 800642a:	d4ef      	bmi.n	800640c <__smakebuf_r+0x18>
 800642c:	f023 0303 	bic.w	r3, r3, #3
 8006430:	f043 0302 	orr.w	r3, r3, #2
 8006434:	81a3      	strh	r3, [r4, #12]
 8006436:	e7e3      	b.n	8006400 <__smakebuf_r+0xc>
 8006438:	4b0d      	ldr	r3, [pc, #52]	; (8006470 <__smakebuf_r+0x7c>)
 800643a:	62b3      	str	r3, [r6, #40]	; 0x28
 800643c:	89a3      	ldrh	r3, [r4, #12]
 800643e:	6020      	str	r0, [r4, #0]
 8006440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006444:	81a3      	strh	r3, [r4, #12]
 8006446:	9b00      	ldr	r3, [sp, #0]
 8006448:	6163      	str	r3, [r4, #20]
 800644a:	9b01      	ldr	r3, [sp, #4]
 800644c:	6120      	str	r0, [r4, #16]
 800644e:	b15b      	cbz	r3, 8006468 <__smakebuf_r+0x74>
 8006450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006454:	4630      	mov	r0, r6
 8006456:	f000 f92d 	bl	80066b4 <_isatty_r>
 800645a:	b128      	cbz	r0, 8006468 <__smakebuf_r+0x74>
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	f023 0303 	bic.w	r3, r3, #3
 8006462:	f043 0301 	orr.w	r3, r3, #1
 8006466:	81a3      	strh	r3, [r4, #12]
 8006468:	89a0      	ldrh	r0, [r4, #12]
 800646a:	4305      	orrs	r5, r0
 800646c:	81a5      	strh	r5, [r4, #12]
 800646e:	e7cd      	b.n	800640c <__smakebuf_r+0x18>
 8006470:	08006205 	.word	0x08006205

08006474 <_free_r>:
 8006474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006476:	2900      	cmp	r1, #0
 8006478:	d048      	beq.n	800650c <_free_r+0x98>
 800647a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800647e:	9001      	str	r0, [sp, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	f1a1 0404 	sub.w	r4, r1, #4
 8006486:	bfb8      	it	lt
 8006488:	18e4      	addlt	r4, r4, r3
 800648a:	f000 f935 	bl	80066f8 <__malloc_lock>
 800648e:	4a20      	ldr	r2, [pc, #128]	; (8006510 <_free_r+0x9c>)
 8006490:	9801      	ldr	r0, [sp, #4]
 8006492:	6813      	ldr	r3, [r2, #0]
 8006494:	4615      	mov	r5, r2
 8006496:	b933      	cbnz	r3, 80064a6 <_free_r+0x32>
 8006498:	6063      	str	r3, [r4, #4]
 800649a:	6014      	str	r4, [r2, #0]
 800649c:	b003      	add	sp, #12
 800649e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064a2:	f000 b92f 	b.w	8006704 <__malloc_unlock>
 80064a6:	42a3      	cmp	r3, r4
 80064a8:	d90b      	bls.n	80064c2 <_free_r+0x4e>
 80064aa:	6821      	ldr	r1, [r4, #0]
 80064ac:	1862      	adds	r2, r4, r1
 80064ae:	4293      	cmp	r3, r2
 80064b0:	bf04      	itt	eq
 80064b2:	681a      	ldreq	r2, [r3, #0]
 80064b4:	685b      	ldreq	r3, [r3, #4]
 80064b6:	6063      	str	r3, [r4, #4]
 80064b8:	bf04      	itt	eq
 80064ba:	1852      	addeq	r2, r2, r1
 80064bc:	6022      	streq	r2, [r4, #0]
 80064be:	602c      	str	r4, [r5, #0]
 80064c0:	e7ec      	b.n	800649c <_free_r+0x28>
 80064c2:	461a      	mov	r2, r3
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	b10b      	cbz	r3, 80064cc <_free_r+0x58>
 80064c8:	42a3      	cmp	r3, r4
 80064ca:	d9fa      	bls.n	80064c2 <_free_r+0x4e>
 80064cc:	6811      	ldr	r1, [r2, #0]
 80064ce:	1855      	adds	r5, r2, r1
 80064d0:	42a5      	cmp	r5, r4
 80064d2:	d10b      	bne.n	80064ec <_free_r+0x78>
 80064d4:	6824      	ldr	r4, [r4, #0]
 80064d6:	4421      	add	r1, r4
 80064d8:	1854      	adds	r4, r2, r1
 80064da:	42a3      	cmp	r3, r4
 80064dc:	6011      	str	r1, [r2, #0]
 80064de:	d1dd      	bne.n	800649c <_free_r+0x28>
 80064e0:	681c      	ldr	r4, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	6053      	str	r3, [r2, #4]
 80064e6:	4421      	add	r1, r4
 80064e8:	6011      	str	r1, [r2, #0]
 80064ea:	e7d7      	b.n	800649c <_free_r+0x28>
 80064ec:	d902      	bls.n	80064f4 <_free_r+0x80>
 80064ee:	230c      	movs	r3, #12
 80064f0:	6003      	str	r3, [r0, #0]
 80064f2:	e7d3      	b.n	800649c <_free_r+0x28>
 80064f4:	6825      	ldr	r5, [r4, #0]
 80064f6:	1961      	adds	r1, r4, r5
 80064f8:	428b      	cmp	r3, r1
 80064fa:	bf04      	itt	eq
 80064fc:	6819      	ldreq	r1, [r3, #0]
 80064fe:	685b      	ldreq	r3, [r3, #4]
 8006500:	6063      	str	r3, [r4, #4]
 8006502:	bf04      	itt	eq
 8006504:	1949      	addeq	r1, r1, r5
 8006506:	6021      	streq	r1, [r4, #0]
 8006508:	6054      	str	r4, [r2, #4]
 800650a:	e7c7      	b.n	800649c <_free_r+0x28>
 800650c:	b003      	add	sp, #12
 800650e:	bd30      	pop	{r4, r5, pc}
 8006510:	200143cc 	.word	0x200143cc

08006514 <_malloc_r>:
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	1ccd      	adds	r5, r1, #3
 8006518:	f025 0503 	bic.w	r5, r5, #3
 800651c:	3508      	adds	r5, #8
 800651e:	2d0c      	cmp	r5, #12
 8006520:	bf38      	it	cc
 8006522:	250c      	movcc	r5, #12
 8006524:	2d00      	cmp	r5, #0
 8006526:	4606      	mov	r6, r0
 8006528:	db01      	blt.n	800652e <_malloc_r+0x1a>
 800652a:	42a9      	cmp	r1, r5
 800652c:	d903      	bls.n	8006536 <_malloc_r+0x22>
 800652e:	230c      	movs	r3, #12
 8006530:	6033      	str	r3, [r6, #0]
 8006532:	2000      	movs	r0, #0
 8006534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006536:	f000 f8df 	bl	80066f8 <__malloc_lock>
 800653a:	4921      	ldr	r1, [pc, #132]	; (80065c0 <_malloc_r+0xac>)
 800653c:	680a      	ldr	r2, [r1, #0]
 800653e:	4614      	mov	r4, r2
 8006540:	b99c      	cbnz	r4, 800656a <_malloc_r+0x56>
 8006542:	4f20      	ldr	r7, [pc, #128]	; (80065c4 <_malloc_r+0xb0>)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	b923      	cbnz	r3, 8006552 <_malloc_r+0x3e>
 8006548:	4621      	mov	r1, r4
 800654a:	4630      	mov	r0, r6
 800654c:	f000 f83c 	bl	80065c8 <_sbrk_r>
 8006550:	6038      	str	r0, [r7, #0]
 8006552:	4629      	mov	r1, r5
 8006554:	4630      	mov	r0, r6
 8006556:	f000 f837 	bl	80065c8 <_sbrk_r>
 800655a:	1c43      	adds	r3, r0, #1
 800655c:	d123      	bne.n	80065a6 <_malloc_r+0x92>
 800655e:	230c      	movs	r3, #12
 8006560:	6033      	str	r3, [r6, #0]
 8006562:	4630      	mov	r0, r6
 8006564:	f000 f8ce 	bl	8006704 <__malloc_unlock>
 8006568:	e7e3      	b.n	8006532 <_malloc_r+0x1e>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	1b5b      	subs	r3, r3, r5
 800656e:	d417      	bmi.n	80065a0 <_malloc_r+0x8c>
 8006570:	2b0b      	cmp	r3, #11
 8006572:	d903      	bls.n	800657c <_malloc_r+0x68>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	441c      	add	r4, r3
 8006578:	6025      	str	r5, [r4, #0]
 800657a:	e004      	b.n	8006586 <_malloc_r+0x72>
 800657c:	6863      	ldr	r3, [r4, #4]
 800657e:	42a2      	cmp	r2, r4
 8006580:	bf0c      	ite	eq
 8006582:	600b      	streq	r3, [r1, #0]
 8006584:	6053      	strne	r3, [r2, #4]
 8006586:	4630      	mov	r0, r6
 8006588:	f000 f8bc 	bl	8006704 <__malloc_unlock>
 800658c:	f104 000b 	add.w	r0, r4, #11
 8006590:	1d23      	adds	r3, r4, #4
 8006592:	f020 0007 	bic.w	r0, r0, #7
 8006596:	1ac2      	subs	r2, r0, r3
 8006598:	d0cc      	beq.n	8006534 <_malloc_r+0x20>
 800659a:	1a1b      	subs	r3, r3, r0
 800659c:	50a3      	str	r3, [r4, r2]
 800659e:	e7c9      	b.n	8006534 <_malloc_r+0x20>
 80065a0:	4622      	mov	r2, r4
 80065a2:	6864      	ldr	r4, [r4, #4]
 80065a4:	e7cc      	b.n	8006540 <_malloc_r+0x2c>
 80065a6:	1cc4      	adds	r4, r0, #3
 80065a8:	f024 0403 	bic.w	r4, r4, #3
 80065ac:	42a0      	cmp	r0, r4
 80065ae:	d0e3      	beq.n	8006578 <_malloc_r+0x64>
 80065b0:	1a21      	subs	r1, r4, r0
 80065b2:	4630      	mov	r0, r6
 80065b4:	f000 f808 	bl	80065c8 <_sbrk_r>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d1dd      	bne.n	8006578 <_malloc_r+0x64>
 80065bc:	e7cf      	b.n	800655e <_malloc_r+0x4a>
 80065be:	bf00      	nop
 80065c0:	200143cc 	.word	0x200143cc
 80065c4:	200143d0 	.word	0x200143d0

080065c8 <_sbrk_r>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	4d06      	ldr	r5, [pc, #24]	; (80065e4 <_sbrk_r+0x1c>)
 80065cc:	2300      	movs	r3, #0
 80065ce:	4604      	mov	r4, r0
 80065d0:	4608      	mov	r0, r1
 80065d2:	602b      	str	r3, [r5, #0]
 80065d4:	f000 f8ae 	bl	8006734 <_sbrk>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	d102      	bne.n	80065e2 <_sbrk_r+0x1a>
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	b103      	cbz	r3, 80065e2 <_sbrk_r+0x1a>
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	20014518 	.word	0x20014518

080065e8 <__sread>:
 80065e8:	b510      	push	{r4, lr}
 80065ea:	460c      	mov	r4, r1
 80065ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065f0:	f000 f88e 	bl	8006710 <_read_r>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	bfab      	itete	ge
 80065f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065fa:	89a3      	ldrhlt	r3, [r4, #12]
 80065fc:	181b      	addge	r3, r3, r0
 80065fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006602:	bfac      	ite	ge
 8006604:	6563      	strge	r3, [r4, #84]	; 0x54
 8006606:	81a3      	strhlt	r3, [r4, #12]
 8006608:	bd10      	pop	{r4, pc}

0800660a <__swrite>:
 800660a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800660e:	461f      	mov	r7, r3
 8006610:	898b      	ldrh	r3, [r1, #12]
 8006612:	05db      	lsls	r3, r3, #23
 8006614:	4605      	mov	r5, r0
 8006616:	460c      	mov	r4, r1
 8006618:	4616      	mov	r6, r2
 800661a:	d505      	bpl.n	8006628 <__swrite+0x1e>
 800661c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006620:	2302      	movs	r3, #2
 8006622:	2200      	movs	r2, #0
 8006624:	f000 f856 	bl	80066d4 <_lseek_r>
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800662e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006632:	81a3      	strh	r3, [r4, #12]
 8006634:	4632      	mov	r2, r6
 8006636:	463b      	mov	r3, r7
 8006638:	4628      	mov	r0, r5
 800663a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800663e:	f7ff bb6b 	b.w	8005d18 <_write_r>

08006642 <__sseek>:
 8006642:	b510      	push	{r4, lr}
 8006644:	460c      	mov	r4, r1
 8006646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800664a:	f000 f843 	bl	80066d4 <_lseek_r>
 800664e:	1c43      	adds	r3, r0, #1
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	bf15      	itete	ne
 8006654:	6560      	strne	r0, [r4, #84]	; 0x54
 8006656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800665a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800665e:	81a3      	strheq	r3, [r4, #12]
 8006660:	bf18      	it	ne
 8006662:	81a3      	strhne	r3, [r4, #12]
 8006664:	bd10      	pop	{r4, pc}

08006666 <__sclose>:
 8006666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800666a:	f000 b801 	b.w	8006670 <_close_r>
	...

08006670 <_close_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4d06      	ldr	r5, [pc, #24]	; (800668c <_close_r+0x1c>)
 8006674:	2300      	movs	r3, #0
 8006676:	4604      	mov	r4, r0
 8006678:	4608      	mov	r0, r1
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	f7fa f907 	bl	800088e <_close>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d102      	bne.n	800668a <_close_r+0x1a>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	b103      	cbz	r3, 800668a <_close_r+0x1a>
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	20014518 	.word	0x20014518

08006690 <_fstat_r>:
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	4d07      	ldr	r5, [pc, #28]	; (80066b0 <_fstat_r+0x20>)
 8006694:	2300      	movs	r3, #0
 8006696:	4604      	mov	r4, r0
 8006698:	4608      	mov	r0, r1
 800669a:	4611      	mov	r1, r2
 800669c:	602b      	str	r3, [r5, #0]
 800669e:	f7fa f902 	bl	80008a6 <_fstat>
 80066a2:	1c43      	adds	r3, r0, #1
 80066a4:	d102      	bne.n	80066ac <_fstat_r+0x1c>
 80066a6:	682b      	ldr	r3, [r5, #0]
 80066a8:	b103      	cbz	r3, 80066ac <_fstat_r+0x1c>
 80066aa:	6023      	str	r3, [r4, #0]
 80066ac:	bd38      	pop	{r3, r4, r5, pc}
 80066ae:	bf00      	nop
 80066b0:	20014518 	.word	0x20014518

080066b4 <_isatty_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	4d06      	ldr	r5, [pc, #24]	; (80066d0 <_isatty_r+0x1c>)
 80066b8:	2300      	movs	r3, #0
 80066ba:	4604      	mov	r4, r0
 80066bc:	4608      	mov	r0, r1
 80066be:	602b      	str	r3, [r5, #0]
 80066c0:	f7fa f901 	bl	80008c6 <_isatty>
 80066c4:	1c43      	adds	r3, r0, #1
 80066c6:	d102      	bne.n	80066ce <_isatty_r+0x1a>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	b103      	cbz	r3, 80066ce <_isatty_r+0x1a>
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
 80066d0:	20014518 	.word	0x20014518

080066d4 <_lseek_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	4d07      	ldr	r5, [pc, #28]	; (80066f4 <_lseek_r+0x20>)
 80066d8:	4604      	mov	r4, r0
 80066da:	4608      	mov	r0, r1
 80066dc:	4611      	mov	r1, r2
 80066de:	2200      	movs	r2, #0
 80066e0:	602a      	str	r2, [r5, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	f7fa f8fa 	bl	80008dc <_lseek>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d102      	bne.n	80066f2 <_lseek_r+0x1e>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	b103      	cbz	r3, 80066f2 <_lseek_r+0x1e>
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	20014518 	.word	0x20014518

080066f8 <__malloc_lock>:
 80066f8:	4801      	ldr	r0, [pc, #4]	; (8006700 <__malloc_lock+0x8>)
 80066fa:	f7ff be55 	b.w	80063a8 <__retarget_lock_acquire_recursive>
 80066fe:	bf00      	nop
 8006700:	20014510 	.word	0x20014510

08006704 <__malloc_unlock>:
 8006704:	4801      	ldr	r0, [pc, #4]	; (800670c <__malloc_unlock+0x8>)
 8006706:	f7ff be50 	b.w	80063aa <__retarget_lock_release_recursive>
 800670a:	bf00      	nop
 800670c:	20014510 	.word	0x20014510

08006710 <_read_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	4d07      	ldr	r5, [pc, #28]	; (8006730 <_read_r+0x20>)
 8006714:	4604      	mov	r4, r0
 8006716:	4608      	mov	r0, r1
 8006718:	4611      	mov	r1, r2
 800671a:	2200      	movs	r2, #0
 800671c:	602a      	str	r2, [r5, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	f7fa f898 	bl	8000854 <_read>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d102      	bne.n	800672e <_read_r+0x1e>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	b103      	cbz	r3, 800672e <_read_r+0x1e>
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	bd38      	pop	{r3, r4, r5, pc}
 8006730:	20014518 	.word	0x20014518

08006734 <_sbrk>:
 8006734:	4b04      	ldr	r3, [pc, #16]	; (8006748 <_sbrk+0x14>)
 8006736:	6819      	ldr	r1, [r3, #0]
 8006738:	4602      	mov	r2, r0
 800673a:	b909      	cbnz	r1, 8006740 <_sbrk+0xc>
 800673c:	4903      	ldr	r1, [pc, #12]	; (800674c <_sbrk+0x18>)
 800673e:	6019      	str	r1, [r3, #0]
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	4402      	add	r2, r0
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	4770      	bx	lr
 8006748:	200143d4 	.word	0x200143d4
 800674c:	20014520 	.word	0x20014520

08006750 <_init>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	bf00      	nop
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr

0800675c <_fini>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	bf00      	nop
 8006760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006762:	bc08      	pop	{r3}
 8006764:	469e      	mov	lr, r3
 8006766:	4770      	bx	lr
