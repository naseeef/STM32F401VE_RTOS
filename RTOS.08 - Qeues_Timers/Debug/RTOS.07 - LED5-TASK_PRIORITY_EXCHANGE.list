
RTOS.07 - LED5-TASK_PRIORITY_EXCHANGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006570  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006858  08006858  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006858  08006858  00016858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006860  08006860  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006860  08006860  00016860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006864  08006864  00016864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0001449c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144b0  200144b0  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f40  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000314f  00000000  00000000  00038f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  0003c0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001180  00000000  00000000  0003d3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023728  00000000  00000000  0003e550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001569d  00000000  00000000  00061c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d76ae  00000000  00000000  00077315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014e9c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f48  00000000  00000000  0014ea18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066e8 	.word	0x080066e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080066e8 	.word	0x080066e8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20014408 	.word	0x20014408

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fa1d 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f855 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8b1 	bl	80006d0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //cyclic counter
  DWT_CTRL |= (1<<0);
 800056e:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <main+0x98>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a20      	ldr	r2, [pc, #128]	; (80005f4 <main+0x98>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800057a:	f003 ff63 	bl	8004444 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(task_green_handler, "LED_Green", 200, NULL, 1, &ledg_handle);
 800057e:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <main+0x9c>)
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2301      	movs	r3, #1
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	22c8      	movs	r2, #200	; 0xc8
 800058a:	491c      	ldr	r1, [pc, #112]	; (80005fc <main+0xa0>)
 800058c:	481c      	ldr	r0, [pc, #112]	; (8000600 <main+0xa4>)
 800058e:	f002 f817 	bl	80025c0 <xTaskCreate>
 8000592:	4603      	mov	r3, r0
 8000594:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <main+0xa8>)
 8000596:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000598:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <main+0xa8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d00a      	beq.n	80005b6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	f383 8811 	msr	BASEPRI, r3
 80005a8:	f3bf 8f6f 	isb	sy
 80005ac:	f3bf 8f4f 	dsb	sy
 80005b0:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b2:	bf00      	nop
 80005b4:	e7fe      	b.n	80005b4 <main+0x58>

  status = xTaskCreate(task_red_handler, "LED_Red", 200, NULL, 2, &ledr_handle);
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <main+0xac>)
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2302      	movs	r3, #2
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	22c8      	movs	r2, #200	; 0xc8
 80005c2:	4912      	ldr	r1, [pc, #72]	; (800060c <main+0xb0>)
 80005c4:	4812      	ldr	r0, [pc, #72]	; (8000610 <main+0xb4>)
 80005c6:	f001 fffb 	bl	80025c0 <xTaskCreate>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <main+0xa8>)
 80005ce:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <main+0xa8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00a      	beq.n	80005ee <main+0x92>
        __asm volatile
 80005d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005dc:	f383 8811 	msr	BASEPRI, r3
 80005e0:	f3bf 8f6f 	isb	sy
 80005e4:	f3bf 8f4f 	dsb	sy
 80005e8:	603b      	str	r3, [r7, #0]
    }
 80005ea:	bf00      	nop
 80005ec:	e7fe      	b.n	80005ec <main+0x90>

//  status = xTaskCreate(task_button_handler, "Button", 200, NULL, 3, &btn_handle);
//  configASSERT(status == pdPASS);

  //start freertos scheduler
  vTaskStartScheduler();
 80005ee:	f002 f981 	bl	80028f4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <main+0x96>
 80005f4:	e0001000 	.word	0xe0001000
 80005f8:	20014374 	.word	0x20014374
 80005fc:	08006700 	.word	0x08006700
 8000600:	08000739 	.word	0x08000739
 8000604:	20014378 	.word	0x20014378
 8000608:	2001436c 	.word	0x2001436c
 800060c:	0800670c 	.word	0x0800670c
 8000610:	08000761 	.word	0x08000761

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f006 f858 	bl	80066d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <SystemClock_Config+0xb4>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xb4>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xb4>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <SystemClock_Config+0xb8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <SystemClock_Config+0xb8>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <SystemClock_Config+0xb8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fcc7 	bl	8001018 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000690:	f000 f89a 	bl	80007c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 ff2a 	bl	8001508 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ba:	f000 f885 	bl	80007c8 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_GPIO_Init+0x60>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	4a10      	ldr	r2, [pc, #64]	; (8000730 <MX_GPIO_Init+0x60>)
 80006ee:	f043 0308 	orr.w	r3, r3, #8
 80006f2:	6313      	str	r3, [r2, #48]	; 0x30
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_GPIO_Init+0x60>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f8:	f003 0308 	and.w	r3, r3, #8
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000706:	480b      	ldr	r0, [pc, #44]	; (8000734 <MX_GPIO_Init+0x64>)
 8000708:	f000 fc2e 	bl	8000f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800070c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000710:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4619      	mov	r1, r3
 8000722:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_GPIO_Init+0x64>)
 8000724:	f000 fa84 	bl	8000c30 <HAL_GPIO_Init>

}
 8000728:	bf00      	nop
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40020c00 	.word	0x40020c00

08000738 <task_green_handler>:

/* USER CODE BEGIN 4 */
static void task_green_handler(void* parameters)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling L G");
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <task_green_handler+0x20>)
 8000742:	f005 ff19 	bl	8006578 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, 12);
 8000746:	210c      	movs	r1, #12
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <task_green_handler+0x24>)
 800074a:	f000 fc26 	bl	8000f9a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800074e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000752:	f000 f967 	bl	8000a24 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling L G");
 8000756:	e7f3      	b.n	8000740 <task_green_handler+0x8>
 8000758:	08006714 	.word	0x08006714
 800075c:	40020c00 	.word	0x40020c00

08000760 <task_red_handler>:
		//switch_priority();
	}
}

static void task_red_handler(void* parameters)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling L R");
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <task_red_handler+0x20>)
 800076a:	f005 ff05 	bl	8006578 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, 13);
 800076e:	210d      	movs	r1, #13
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <task_red_handler+0x24>)
 8000772:	f000 fc12 	bl	8000f9a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000776:	2064      	movs	r0, #100	; 0x64
 8000778:	f000 f954 	bl	8000a24 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling L R");
 800077c:	e7f4      	b.n	8000768 <task_red_handler+0x8>
 800077e:	bf00      	nop
 8000780:	08006724 	.word	0x08006724
 8000784:	40020c00 	.word	0x40020c00

08000788 <button_interrupt_handler>:
			vTaskPrioritySet(t1,p2);
		}
}

void button_interrupt_handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 800078c:	f005 fc4c 	bl	8006028 <SEGGER_SYSVIEW_RecordEnterISR>
	status_button =1;
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <button_interrupt_handler+0x18>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 8000796:	f005 fc89 	bl	80060ac <SEGGER_SYSVIEW_RecordExitISR>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000030 	.word	0x20000030

080007a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d101      	bne.n	80007ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b6:	f000 f915 	bl	80009e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40001000 	.word	0x40001000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <HAL_MspInit+0x4c>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x4c>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 8000812:	f003 fa61 	bl	8003cd8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000834:	2200      	movs	r2, #0
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	2036      	movs	r0, #54	; 0x36
 800083a:	f000 f9cf 	bl	8000bdc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800083e:	2036      	movs	r0, #54	; 0x36
 8000840:	f000 f9e8 	bl	8000c14 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <HAL_InitTick+0xa0>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a1d      	ldr	r2, [pc, #116]	; (80008c4 <HAL_InitTick+0xa0>)
 800084e:	f043 0310 	orr.w	r3, r3, #16
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <HAL_InitTick+0xa0>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f003 0310 	and.w	r3, r3, #16
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000860:	f107 0210 	add.w	r2, r7, #16
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4611      	mov	r1, r2
 800086a:	4618      	mov	r0, r3
 800086c:	f001 f808 	bl	8001880 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000870:	f000 fff2 	bl	8001858 <HAL_RCC_GetPCLK1Freq>
 8000874:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000878:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <HAL_InitTick+0xa4>)
 800087a:	fba2 2303 	umull	r2, r3, r2, r3
 800087e:	0c9b      	lsrs	r3, r3, #18
 8000880:	3b01      	subs	r3, #1
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <HAL_InitTick+0xa8>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <HAL_InitTick+0xac>)
 8000888:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <HAL_InitTick+0xa8>)
 800088c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000890:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000892:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <HAL_InitTick+0xa8>)
 8000894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000896:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_InitTick+0xa8>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <HAL_InitTick+0xa8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <HAL_InitTick+0xa8>)
 80008a6:	f001 f81d 	bl	80018e4 <HAL_TIM_Base_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d104      	bne.n	80008ba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008b0:	4806      	ldr	r0, [pc, #24]	; (80008cc <HAL_InitTick+0xa8>)
 80008b2:	f001 f871 	bl	8001998 <HAL_TIM_Base_Start_IT>
 80008b6:	4603      	mov	r3, r0
 80008b8:	e000      	b.n	80008bc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3730      	adds	r7, #48	; 0x30
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	431bde83 	.word	0x431bde83
 80008cc:	2001437c 	.word	0x2001437c
 80008d0:	40001000 	.word	0x40001000

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
button_interrupt_handler();
 8000904:	f7ff ff40 	bl	8000788 <button_interrupt_handler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000908:	2001      	movs	r0, #1
 800090a:	f000 fb61 	bl	8000fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <TIM6_DAC_IRQHandler+0x10>)
 800091a:	f001 f8ad 	bl	8001a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2001437c 	.word	0x2001437c

08000928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <SystemInit+0x20>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <SystemInit+0x20>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000984 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000952:	490e      	ldr	r1, [pc, #56]	; (800098c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000968:	4c0b      	ldr	r4, [pc, #44]	; (8000998 <LoopFillZerobss+0x26>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000976:	f7ff ffd7 	bl	8000928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097a:	f005 fe6d 	bl	8006658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097e:	f7ff fded 	bl	800055c <main>
  bx  lr    
 8000982:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000990:	08006868 	.word	0x08006868
  ldr r2, =_sbss
 8000994:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000998:	200144b0 	.word	0x200144b0

0800099c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <HAL_Init+0x40>)
 80009aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <HAL_Init+0x40>)
 80009b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <HAL_Init+0x40>)
 80009c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 f8fc 	bl	8000bc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ce:	200f      	movs	r0, #15
 80009d0:	f7ff ff28 	bl	8000824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d4:	f7ff fefe 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023c00 	.word	0x40023c00

080009e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_IncTick+0x20>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_IncTick+0x24>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4413      	add	r3, r2
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <HAL_IncTick+0x24>)
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000008 	.word	0x20000008
 8000a08:	200143c4 	.word	0x200143c4

08000a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <HAL_GetTick+0x14>)
 8000a12:	681b      	ldr	r3, [r3, #0]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	200143c4 	.word	0x200143c4

08000a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a2c:	f7ff ffee 	bl	8000a0c <HAL_GetTick>
 8000a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a3c:	d005      	beq.n	8000a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <HAL_Delay+0x44>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4413      	add	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a4a:	bf00      	nop
 8000a4c:	f7ff ffde 	bl	8000a0c <HAL_GetTick>
 8000a50:	4602      	mov	r2, r0
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d8f7      	bhi.n	8000a4c <HAL_Delay+0x28>
  {
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008

08000a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	60d3      	str	r3, [r2, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <__NVIC_GetPriorityGrouping+0x18>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	f003 0307 	and.w	r3, r3, #7
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	db0b      	blt.n	8000afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f003 021f 	and.w	r2, r3, #31
 8000ae8:	4907      	ldr	r1, [pc, #28]	; (8000b08 <__NVIC_EnableIRQ+0x38>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	095b      	lsrs	r3, r3, #5
 8000af0:	2001      	movs	r0, #1
 8000af2:	fa00 f202 	lsl.w	r2, r0, r2
 8000af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100

08000b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db0a      	blt.n	8000b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	490c      	ldr	r1, [pc, #48]	; (8000b58 <__NVIC_SetPriority+0x4c>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	0112      	lsls	r2, r2, #4
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	440b      	add	r3, r1
 8000b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b34:	e00a      	b.n	8000b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4908      	ldr	r1, [pc, #32]	; (8000b5c <__NVIC_SetPriority+0x50>)
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	3b04      	subs	r3, #4
 8000b44:	0112      	lsls	r2, r2, #4
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	440b      	add	r3, r1
 8000b4a:	761a      	strb	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f1c3 0307 	rsb	r3, r3, #7
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	bf28      	it	cs
 8000b7e:	2304      	movcs	r3, #4
 8000b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3304      	adds	r3, #4
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d902      	bls.n	8000b90 <NVIC_EncodePriority+0x30>
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3b03      	subs	r3, #3
 8000b8e:	e000      	b.n	8000b92 <NVIC_EncodePriority+0x32>
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43d9      	mvns	r1, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	4313      	orrs	r3, r2
         );
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3724      	adds	r7, #36	; 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ff4c 	bl	8000a6c <__NVIC_SetPriorityGrouping>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bee:	f7ff ff61 	bl	8000ab4 <__NVIC_GetPriorityGrouping>
 8000bf2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	68b9      	ldr	r1, [r7, #8]
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff ffb1 	bl	8000b60 <NVIC_EncodePriority>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff80 	bl	8000b0c <__NVIC_SetPriority>
}
 8000c0c:	bf00      	nop
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff54 	bl	8000ad0 <__NVIC_EnableIRQ>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
 8000c4a:	e16b      	b.n	8000f24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	f040 815a 	bne.w	8000f1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 0303 	and.w	r3, r3, #3
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d005      	beq.n	8000c82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d130      	bne.n	8000ce4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4013      	ands	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	091b      	lsrs	r3, r3, #4
 8000cce:	f003 0201 	and.w	r2, r3, #1
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b03      	cmp	r3, #3
 8000cee:	d017      	beq.n	8000d20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d123      	bne.n	8000d74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	08da      	lsrs	r2, r3, #3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3208      	adds	r2, #8
 8000d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	220f      	movs	r2, #15
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	691a      	ldr	r2, [r3, #16]
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	08da      	lsrs	r2, r3, #3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3208      	adds	r2, #8
 8000d6e:	69b9      	ldr	r1, [r7, #24]
 8000d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0203 	and.w	r2, r3, #3
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f000 80b4 	beq.w	8000f1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b60      	ldr	r3, [pc, #384]	; (8000f3c <HAL_GPIO_Init+0x30c>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	4a5f      	ldr	r2, [pc, #380]	; (8000f3c <HAL_GPIO_Init+0x30c>)
 8000dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc6:	4b5d      	ldr	r3, [pc, #372]	; (8000f3c <HAL_GPIO_Init+0x30c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dd2:	4a5b      	ldr	r2, [pc, #364]	; (8000f40 <HAL_GPIO_Init+0x310>)
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	3302      	adds	r3, #2
 8000dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	220f      	movs	r2, #15
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a52      	ldr	r2, [pc, #328]	; (8000f44 <HAL_GPIO_Init+0x314>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d02b      	beq.n	8000e56 <HAL_GPIO_Init+0x226>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a51      	ldr	r2, [pc, #324]	; (8000f48 <HAL_GPIO_Init+0x318>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d025      	beq.n	8000e52 <HAL_GPIO_Init+0x222>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a50      	ldr	r2, [pc, #320]	; (8000f4c <HAL_GPIO_Init+0x31c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d01f      	beq.n	8000e4e <HAL_GPIO_Init+0x21e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4f      	ldr	r2, [pc, #316]	; (8000f50 <HAL_GPIO_Init+0x320>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d019      	beq.n	8000e4a <HAL_GPIO_Init+0x21a>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4e      	ldr	r2, [pc, #312]	; (8000f54 <HAL_GPIO_Init+0x324>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d013      	beq.n	8000e46 <HAL_GPIO_Init+0x216>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4d      	ldr	r2, [pc, #308]	; (8000f58 <HAL_GPIO_Init+0x328>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d00d      	beq.n	8000e42 <HAL_GPIO_Init+0x212>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4c      	ldr	r2, [pc, #304]	; (8000f5c <HAL_GPIO_Init+0x32c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d007      	beq.n	8000e3e <HAL_GPIO_Init+0x20e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4b      	ldr	r2, [pc, #300]	; (8000f60 <HAL_GPIO_Init+0x330>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d101      	bne.n	8000e3a <HAL_GPIO_Init+0x20a>
 8000e36:	2307      	movs	r3, #7
 8000e38:	e00e      	b.n	8000e58 <HAL_GPIO_Init+0x228>
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	e00c      	b.n	8000e58 <HAL_GPIO_Init+0x228>
 8000e3e:	2306      	movs	r3, #6
 8000e40:	e00a      	b.n	8000e58 <HAL_GPIO_Init+0x228>
 8000e42:	2305      	movs	r3, #5
 8000e44:	e008      	b.n	8000e58 <HAL_GPIO_Init+0x228>
 8000e46:	2304      	movs	r3, #4
 8000e48:	e006      	b.n	8000e58 <HAL_GPIO_Init+0x228>
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e004      	b.n	8000e58 <HAL_GPIO_Init+0x228>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_Init+0x228>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e000      	b.n	8000e58 <HAL_GPIO_Init+0x228>
 8000e56:	2300      	movs	r3, #0
 8000e58:	69fa      	ldr	r2, [r7, #28]
 8000e5a:	f002 0203 	and.w	r2, r2, #3
 8000e5e:	0092      	lsls	r2, r2, #2
 8000e60:	4093      	lsls	r3, r2
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e68:	4935      	ldr	r1, [pc, #212]	; (8000f40 <HAL_GPIO_Init+0x310>)
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3302      	adds	r3, #2
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e76:	4b3b      	ldr	r3, [pc, #236]	; (8000f64 <HAL_GPIO_Init+0x334>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e9a:	4a32      	ldr	r2, [pc, #200]	; (8000f64 <HAL_GPIO_Init+0x334>)
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ea0:	4b30      	ldr	r3, [pc, #192]	; (8000f64 <HAL_GPIO_Init+0x334>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ec4:	4a27      	ldr	r2, [pc, #156]	; (8000f64 <HAL_GPIO_Init+0x334>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eca:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <HAL_GPIO_Init+0x334>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eee:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_GPIO_Init+0x334>)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <HAL_GPIO_Init+0x334>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <HAL_GPIO_Init+0x334>)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3301      	adds	r3, #1
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	2b0f      	cmp	r3, #15
 8000f28:	f67f ae90 	bls.w	8000c4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40013800 	.word	0x40013800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	40020c00 	.word	0x40020c00
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40021400 	.word	0x40021400
 8000f5c:	40021800 	.word	0x40021800
 8000f60:	40021c00 	.word	0x40021c00
 8000f64:	40013c00 	.word	0x40013c00

08000f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
 8000f74:	4613      	mov	r3, r2
 8000f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f78:	787b      	ldrb	r3, [r7, #1]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f84:	e003      	b.n	8000f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	041a      	lsls	r2, r3, #16
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	619a      	str	r2, [r3, #24]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fac:	887a      	ldrh	r2, [r7, #2]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	041a      	lsls	r2, r3, #16
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	400b      	ands	r3, r1
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fdc:	695a      	ldr	r2, [r3, #20]
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f806 	bl	8001000 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40013c00 	.word	0x40013c00

08001000 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e264      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d075      	beq.n	8001122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001036:	4ba3      	ldr	r3, [pc, #652]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 030c 	and.w	r3, r3, #12
 800103e:	2b04      	cmp	r3, #4
 8001040:	d00c      	beq.n	800105c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001042:	4ba0      	ldr	r3, [pc, #640]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800104a:	2b08      	cmp	r3, #8
 800104c:	d112      	bne.n	8001074 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800104e:	4b9d      	ldr	r3, [pc, #628]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800105a:	d10b      	bne.n	8001074 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105c:	4b99      	ldr	r3, [pc, #612]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d05b      	beq.n	8001120 <HAL_RCC_OscConfig+0x108>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d157      	bne.n	8001120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e23f      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107c:	d106      	bne.n	800108c <HAL_RCC_OscConfig+0x74>
 800107e:	4b91      	ldr	r3, [pc, #580]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a90      	ldr	r2, [pc, #576]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 8001084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e01d      	b.n	80010c8 <HAL_RCC_OscConfig+0xb0>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001094:	d10c      	bne.n	80010b0 <HAL_RCC_OscConfig+0x98>
 8001096:	4b8b      	ldr	r3, [pc, #556]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a8a      	ldr	r2, [pc, #552]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 800109c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	4b88      	ldr	r3, [pc, #544]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a87      	ldr	r2, [pc, #540]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 80010a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e00b      	b.n	80010c8 <HAL_RCC_OscConfig+0xb0>
 80010b0:	4b84      	ldr	r3, [pc, #528]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a83      	ldr	r2, [pc, #524]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 80010b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b81      	ldr	r3, [pc, #516]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a80      	ldr	r2, [pc, #512]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 80010c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d013      	beq.n	80010f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fc9c 	bl	8000a0c <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fc98 	bl	8000a0c <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b64      	cmp	r3, #100	; 0x64
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e204      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ea:	4b76      	ldr	r3, [pc, #472]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0xc0>
 80010f6:	e014      	b.n	8001122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fc88 	bl	8000a0c <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fc84 	bl	8000a0c <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e1f0      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001112:	4b6c      	ldr	r3, [pc, #432]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0xe8>
 800111e:	e000      	b.n	8001122 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d063      	beq.n	80011f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800112e:	4b65      	ldr	r3, [pc, #404]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00b      	beq.n	8001152 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800113a:	4b62      	ldr	r3, [pc, #392]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001142:	2b08      	cmp	r3, #8
 8001144:	d11c      	bne.n	8001180 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001146:	4b5f      	ldr	r3, [pc, #380]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d116      	bne.n	8001180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001152:	4b5c      	ldr	r3, [pc, #368]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d005      	beq.n	800116a <HAL_RCC_OscConfig+0x152>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d001      	beq.n	800116a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e1c4      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116a:	4b56      	ldr	r3, [pc, #344]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4952      	ldr	r1, [pc, #328]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 800117a:	4313      	orrs	r3, r2
 800117c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117e:	e03a      	b.n	80011f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d020      	beq.n	80011ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001188:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <HAL_RCC_OscConfig+0x2b0>)
 800118a:	2201      	movs	r2, #1
 800118c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118e:	f7ff fc3d 	bl	8000a0c <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001196:	f7ff fc39 	bl	8000a0c <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e1a5      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a8:	4b46      	ldr	r3, [pc, #280]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f0      	beq.n	8001196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b4:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4940      	ldr	r1, [pc, #256]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	600b      	str	r3, [r1, #0]
 80011c8:	e015      	b.n	80011f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ca:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <HAL_RCC_OscConfig+0x2b0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fc1c 	bl	8000a0c <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d8:	f7ff fc18 	bl	8000a0c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e184      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ea:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d030      	beq.n	8001264 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d016      	beq.n	8001238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800120a:	4b30      	ldr	r3, [pc, #192]	; (80012cc <HAL_RCC_OscConfig+0x2b4>)
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001210:	f7ff fbfc 	bl	8000a0c <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001218:	f7ff fbf8 	bl	8000a0c <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e164      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 800122c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0x200>
 8001236:	e015      	b.n	8001264 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <HAL_RCC_OscConfig+0x2b4>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123e:	f7ff fbe5 	bl	8000a0c <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001246:	f7ff fbe1 	bl	8000a0c <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e14d      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 800125a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f0      	bne.n	8001246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80a0 	beq.w	80013b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10f      	bne.n	80012a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800129e:	2301      	movs	r3, #1
 80012a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_RCC_OscConfig+0x2b8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d121      	bne.n	80012f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_RCC_OscConfig+0x2b8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <HAL_RCC_OscConfig+0x2b8>)
 80012b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ba:	f7ff fba7 	bl	8000a0c <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c0:	e011      	b.n	80012e6 <HAL_RCC_OscConfig+0x2ce>
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	42470000 	.word	0x42470000
 80012cc:	42470e80 	.word	0x42470e80
 80012d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d4:	f7ff fb9a 	bl	8000a0c <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e106      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e6:	4b85      	ldr	r3, [pc, #532]	; (80014fc <HAL_RCC_OscConfig+0x4e4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d106      	bne.n	8001308 <HAL_RCC_OscConfig+0x2f0>
 80012fa:	4b81      	ldr	r3, [pc, #516]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 80012fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fe:	4a80      	ldr	r2, [pc, #512]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6713      	str	r3, [r2, #112]	; 0x70
 8001306:	e01c      	b.n	8001342 <HAL_RCC_OscConfig+0x32a>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b05      	cmp	r3, #5
 800130e:	d10c      	bne.n	800132a <HAL_RCC_OscConfig+0x312>
 8001310:	4b7b      	ldr	r3, [pc, #492]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 8001312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001314:	4a7a      	ldr	r2, [pc, #488]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6713      	str	r3, [r2, #112]	; 0x70
 800131c:	4b78      	ldr	r3, [pc, #480]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 800131e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001320:	4a77      	ldr	r2, [pc, #476]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6713      	str	r3, [r2, #112]	; 0x70
 8001328:	e00b      	b.n	8001342 <HAL_RCC_OscConfig+0x32a>
 800132a:	4b75      	ldr	r3, [pc, #468]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 800132c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132e:	4a74      	ldr	r2, [pc, #464]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	6713      	str	r3, [r2, #112]	; 0x70
 8001336:	4b72      	ldr	r3, [pc, #456]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 8001338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133a:	4a71      	ldr	r2, [pc, #452]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 800133c:	f023 0304 	bic.w	r3, r3, #4
 8001340:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d015      	beq.n	8001376 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800134a:	f7ff fb5f 	bl	8000a0c <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001350:	e00a      	b.n	8001368 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001352:	f7ff fb5b 	bl	8000a0c <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001360:	4293      	cmp	r3, r2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e0c5      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001368:	4b65      	ldr	r3, [pc, #404]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 800136a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0ee      	beq.n	8001352 <HAL_RCC_OscConfig+0x33a>
 8001374:	e014      	b.n	80013a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001376:	f7ff fb49 	bl	8000a0c <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137c:	e00a      	b.n	8001394 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800137e:	f7ff fb45 	bl	8000a0c <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	f241 3288 	movw	r2, #5000	; 0x1388
 800138c:	4293      	cmp	r3, r2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e0af      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001394:	4b5a      	ldr	r3, [pc, #360]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 8001396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1ee      	bne.n	800137e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d105      	bne.n	80013b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a6:	4b56      	ldr	r3, [pc, #344]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a55      	ldr	r2, [pc, #340]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 80013ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 809b 	beq.w	80014f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013bc:	4b50      	ldr	r3, [pc, #320]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 030c 	and.w	r3, r3, #12
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d05c      	beq.n	8001482 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d141      	bne.n	8001454 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d0:	4b4c      	ldr	r3, [pc, #304]	; (8001504 <HAL_RCC_OscConfig+0x4ec>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fb19 	bl	8000a0c <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013de:	f7ff fb15 	bl	8000a0c <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e081      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f0:	4b43      	ldr	r3, [pc, #268]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f0      	bne.n	80013de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69da      	ldr	r2, [r3, #28]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	019b      	lsls	r3, r3, #6
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001412:	085b      	lsrs	r3, r3, #1
 8001414:	3b01      	subs	r3, #1
 8001416:	041b      	lsls	r3, r3, #16
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	061b      	lsls	r3, r3, #24
 8001420:	4937      	ldr	r1, [pc, #220]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001426:	4b37      	ldr	r3, [pc, #220]	; (8001504 <HAL_RCC_OscConfig+0x4ec>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff faee 	bl	8000a0c <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001434:	f7ff faea 	bl	8000a0c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e056      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001446:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x41c>
 8001452:	e04e      	b.n	80014f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_RCC_OscConfig+0x4ec>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7ff fad7 	bl	8000a0c <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001462:	f7ff fad3 	bl	8000a0c <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e03f      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f0      	bne.n	8001462 <HAL_RCC_OscConfig+0x44a>
 8001480:	e037      	b.n	80014f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e032      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_RCC_OscConfig+0x4e8>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d028      	beq.n	80014ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d121      	bne.n	80014ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d11a      	bne.n	80014ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014be:	4013      	ands	r3, r2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d111      	bne.n	80014ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	085b      	lsrs	r3, r3, #1
 80014d6:	3b01      	subs	r3, #1
 80014d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014da:	429a      	cmp	r2, r3
 80014dc:	d107      	bne.n	80014ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d001      	beq.n	80014f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40007000 	.word	0x40007000
 8001500:	40023800 	.word	0x40023800
 8001504:	42470060 	.word	0x42470060

08001508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0cc      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800151c:	4b68      	ldr	r3, [pc, #416]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d90c      	bls.n	8001544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b65      	ldr	r3, [pc, #404]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001532:	4b63      	ldr	r3, [pc, #396]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d001      	beq.n	8001544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0b8      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d020      	beq.n	8001592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800155c:	4b59      	ldr	r3, [pc, #356]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4a58      	ldr	r2, [pc, #352]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001566:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001574:	4b53      	ldr	r3, [pc, #332]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a52      	ldr	r2, [pc, #328]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800157e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001580:	4b50      	ldr	r3, [pc, #320]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	494d      	ldr	r1, [pc, #308]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	4313      	orrs	r3, r2
 8001590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d044      	beq.n	8001628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d107      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d119      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e07f      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d003      	beq.n	80015c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c6:	4b3f      	ldr	r3, [pc, #252]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e06f      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d6:	4b3b      	ldr	r3, [pc, #236]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e067      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e6:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f023 0203 	bic.w	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4934      	ldr	r1, [pc, #208]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f8:	f7ff fa08 	bl	8000a0c <HAL_GetTick>
 80015fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001600:	f7ff fa04 	bl	8000a0c <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	; 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e04f      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001616:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 020c 	and.w	r2, r3, #12
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	429a      	cmp	r2, r3
 8001626:	d1eb      	bne.n	8001600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001628:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d20c      	bcs.n	8001650 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e032      	b.n	80016b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d008      	beq.n	800166e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	4916      	ldr	r1, [pc, #88]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	4313      	orrs	r3, r2
 800166c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	490e      	ldr	r1, [pc, #56]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800168e:	f000 f821 	bl	80016d4 <HAL_RCC_GetSysClockFreq>
 8001692:	4602      	mov	r2, r0
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	490a      	ldr	r1, [pc, #40]	; (80016c8 <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	5ccb      	ldrb	r3, [r1, r3]
 80016a2:	fa22 f303 	lsr.w	r3, r2, r3
 80016a6:	4a09      	ldr	r2, [pc, #36]	; (80016cc <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_RCC_ClockConfig+0x1c8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff f8b8 	bl	8000824 <HAL_InitTick>

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023c00 	.word	0x40023c00
 80016c4:	40023800 	.word	0x40023800
 80016c8:	08006808 	.word	0x08006808
 80016cc:	20000000 	.word	0x20000000
 80016d0:	20000004 	.word	0x20000004

080016d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016d4:	b5b0      	push	{r4, r5, r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016da:	2100      	movs	r1, #0
 80016dc:	6079      	str	r1, [r7, #4]
 80016de:	2100      	movs	r1, #0
 80016e0:	60f9      	str	r1, [r7, #12]
 80016e2:	2100      	movs	r1, #0
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016e6:	2100      	movs	r1, #0
 80016e8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ea:	4952      	ldr	r1, [pc, #328]	; (8001834 <HAL_RCC_GetSysClockFreq+0x160>)
 80016ec:	6889      	ldr	r1, [r1, #8]
 80016ee:	f001 010c 	and.w	r1, r1, #12
 80016f2:	2908      	cmp	r1, #8
 80016f4:	d00d      	beq.n	8001712 <HAL_RCC_GetSysClockFreq+0x3e>
 80016f6:	2908      	cmp	r1, #8
 80016f8:	f200 8094 	bhi.w	8001824 <HAL_RCC_GetSysClockFreq+0x150>
 80016fc:	2900      	cmp	r1, #0
 80016fe:	d002      	beq.n	8001706 <HAL_RCC_GetSysClockFreq+0x32>
 8001700:	2904      	cmp	r1, #4
 8001702:	d003      	beq.n	800170c <HAL_RCC_GetSysClockFreq+0x38>
 8001704:	e08e      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001706:	4b4c      	ldr	r3, [pc, #304]	; (8001838 <HAL_RCC_GetSysClockFreq+0x164>)
 8001708:	60bb      	str	r3, [r7, #8]
       break;
 800170a:	e08e      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800170c:	4b4b      	ldr	r3, [pc, #300]	; (800183c <HAL_RCC_GetSysClockFreq+0x168>)
 800170e:	60bb      	str	r3, [r7, #8]
      break;
 8001710:	e08b      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001712:	4948      	ldr	r1, [pc, #288]	; (8001834 <HAL_RCC_GetSysClockFreq+0x160>)
 8001714:	6849      	ldr	r1, [r1, #4]
 8001716:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800171a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800171c:	4945      	ldr	r1, [pc, #276]	; (8001834 <HAL_RCC_GetSysClockFreq+0x160>)
 800171e:	6849      	ldr	r1, [r1, #4]
 8001720:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001724:	2900      	cmp	r1, #0
 8001726:	d024      	beq.n	8001772 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001728:	4942      	ldr	r1, [pc, #264]	; (8001834 <HAL_RCC_GetSysClockFreq+0x160>)
 800172a:	6849      	ldr	r1, [r1, #4]
 800172c:	0989      	lsrs	r1, r1, #6
 800172e:	4608      	mov	r0, r1
 8001730:	f04f 0100 	mov.w	r1, #0
 8001734:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001738:	f04f 0500 	mov.w	r5, #0
 800173c:	ea00 0204 	and.w	r2, r0, r4
 8001740:	ea01 0305 	and.w	r3, r1, r5
 8001744:	493d      	ldr	r1, [pc, #244]	; (800183c <HAL_RCC_GetSysClockFreq+0x168>)
 8001746:	fb01 f003 	mul.w	r0, r1, r3
 800174a:	2100      	movs	r1, #0
 800174c:	fb01 f102 	mul.w	r1, r1, r2
 8001750:	1844      	adds	r4, r0, r1
 8001752:	493a      	ldr	r1, [pc, #232]	; (800183c <HAL_RCC_GetSysClockFreq+0x168>)
 8001754:	fba2 0101 	umull	r0, r1, r2, r1
 8001758:	1863      	adds	r3, r4, r1
 800175a:	4619      	mov	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	461a      	mov	r2, r3
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	f7fe fd7e 	bl	8000264 <__aeabi_uldivmod>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4613      	mov	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e04a      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001772:	4b30      	ldr	r3, [pc, #192]	; (8001834 <HAL_RCC_GetSysClockFreq+0x160>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	461a      	mov	r2, r3
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001782:	f04f 0100 	mov.w	r1, #0
 8001786:	ea02 0400 	and.w	r4, r2, r0
 800178a:	ea03 0501 	and.w	r5, r3, r1
 800178e:	4620      	mov	r0, r4
 8001790:	4629      	mov	r1, r5
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	014b      	lsls	r3, r1, #5
 800179c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017a0:	0142      	lsls	r2, r0, #5
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	1b00      	subs	r0, r0, r4
 80017a8:	eb61 0105 	sbc.w	r1, r1, r5
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	018b      	lsls	r3, r1, #6
 80017b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017ba:	0182      	lsls	r2, r0, #6
 80017bc:	1a12      	subs	r2, r2, r0
 80017be:	eb63 0301 	sbc.w	r3, r3, r1
 80017c2:	f04f 0000 	mov.w	r0, #0
 80017c6:	f04f 0100 	mov.w	r1, #0
 80017ca:	00d9      	lsls	r1, r3, #3
 80017cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017d0:	00d0      	lsls	r0, r2, #3
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	1912      	adds	r2, r2, r4
 80017d8:	eb45 0303 	adc.w	r3, r5, r3
 80017dc:	f04f 0000 	mov.w	r0, #0
 80017e0:	f04f 0100 	mov.w	r1, #0
 80017e4:	0299      	lsls	r1, r3, #10
 80017e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017ea:	0290      	lsls	r0, r2, #10
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	461a      	mov	r2, r3
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	f7fe fd32 	bl	8000264 <__aeabi_uldivmod>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4613      	mov	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_RCC_GetSysClockFreq+0x160>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	0c1b      	lsrs	r3, r3, #16
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	3301      	adds	r3, #1
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001820:	60bb      	str	r3, [r7, #8]
      break;
 8001822:	e002      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <HAL_RCC_GetSysClockFreq+0x164>)
 8001826:	60bb      	str	r3, [r7, #8]
      break;
 8001828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800182a:	68bb      	ldr	r3, [r7, #8]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bdb0      	pop	{r4, r5, r7, pc}
 8001834:	40023800 	.word	0x40023800
 8001838:	00f42400 	.word	0x00f42400
 800183c:	017d7840 	.word	0x017d7840

08001840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_RCC_GetHCLKFreq+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000000 	.word	0x20000000

08001858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800185c:	f7ff fff0 	bl	8001840 <HAL_RCC_GetHCLKFreq>
 8001860:	4602      	mov	r2, r0
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	0a9b      	lsrs	r3, r3, #10
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	4903      	ldr	r1, [pc, #12]	; (800187c <HAL_RCC_GetPCLK1Freq+0x24>)
 800186e:	5ccb      	ldrb	r3, [r1, r3]
 8001870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001874:	4618      	mov	r0, r3
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800
 800187c:	08006818 	.word	0x08006818

08001880 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	220f      	movs	r2, #15
 800188e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_RCC_GetClockConfig+0x5c>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 0203 	and.w	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_RCC_GetClockConfig+0x5c>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_RCC_GetClockConfig+0x5c>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_RCC_GetClockConfig+0x5c>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	08db      	lsrs	r3, r3, #3
 80018ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <HAL_RCC_GetClockConfig+0x60>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0207 	and.w	r2, r3, #7
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	601a      	str	r2, [r3, #0]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40023c00 	.word	0x40023c00

080018e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e041      	b.n	800197a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f839 	bl	8001982 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3304      	adds	r3, #4
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f000 f9d8 	bl	8001cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d001      	beq.n	80019b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e04e      	b.n	8001a4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2202      	movs	r2, #2
 80019b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0201 	orr.w	r2, r2, #1
 80019c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a23      	ldr	r2, [pc, #140]	; (8001a5c <HAL_TIM_Base_Start_IT+0xc4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d022      	beq.n	8001a18 <HAL_TIM_Base_Start_IT+0x80>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019da:	d01d      	beq.n	8001a18 <HAL_TIM_Base_Start_IT+0x80>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1f      	ldr	r2, [pc, #124]	; (8001a60 <HAL_TIM_Base_Start_IT+0xc8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d018      	beq.n	8001a18 <HAL_TIM_Base_Start_IT+0x80>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1e      	ldr	r2, [pc, #120]	; (8001a64 <HAL_TIM_Base_Start_IT+0xcc>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d013      	beq.n	8001a18 <HAL_TIM_Base_Start_IT+0x80>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <HAL_TIM_Base_Start_IT+0xd0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d00e      	beq.n	8001a18 <HAL_TIM_Base_Start_IT+0x80>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a1b      	ldr	r2, [pc, #108]	; (8001a6c <HAL_TIM_Base_Start_IT+0xd4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d009      	beq.n	8001a18 <HAL_TIM_Base_Start_IT+0x80>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a19      	ldr	r2, [pc, #100]	; (8001a70 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d004      	beq.n	8001a18 <HAL_TIM_Base_Start_IT+0x80>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a18      	ldr	r2, [pc, #96]	; (8001a74 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d111      	bne.n	8001a3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d010      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0201 	orr.w	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a3a:	e007      	b.n	8001a4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	40000400 	.word	0x40000400
 8001a64:	40000800 	.word	0x40000800
 8001a68:	40000c00 	.word	0x40000c00
 8001a6c:	40010400 	.word	0x40010400
 8001a70:	40014000 	.word	0x40014000
 8001a74:	40001800 	.word	0x40001800

08001a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d122      	bne.n	8001ad4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d11b      	bne.n	8001ad4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f06f 0202 	mvn.w	r2, #2
 8001aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f8ee 	bl	8001c9c <HAL_TIM_IC_CaptureCallback>
 8001ac0:	e005      	b.n	8001ace <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f8e0 	bl	8001c88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f8f1 	bl	8001cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d122      	bne.n	8001b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d11b      	bne.n	8001b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f06f 0204 	mvn.w	r2, #4
 8001af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f8c4 	bl	8001c9c <HAL_TIM_IC_CaptureCallback>
 8001b14:	e005      	b.n	8001b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f8b6 	bl	8001c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f8c7 	bl	8001cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d122      	bne.n	8001b7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d11b      	bne.n	8001b7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f06f 0208 	mvn.w	r2, #8
 8001b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2204      	movs	r2, #4
 8001b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f89a 	bl	8001c9c <HAL_TIM_IC_CaptureCallback>
 8001b68:	e005      	b.n	8001b76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f88c 	bl	8001c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f89d 	bl	8001cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b10      	cmp	r3, #16
 8001b88:	d122      	bne.n	8001bd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	2b10      	cmp	r3, #16
 8001b96:	d11b      	bne.n	8001bd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f06f 0210 	mvn.w	r2, #16
 8001ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f870 	bl	8001c9c <HAL_TIM_IC_CaptureCallback>
 8001bbc:	e005      	b.n	8001bca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f862 	bl	8001c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f873 	bl	8001cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d10e      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d107      	bne.n	8001bfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f06f 0201 	mvn.w	r2, #1
 8001bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7fe fdd4 	bl	80007a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c06:	2b80      	cmp	r3, #128	; 0x80
 8001c08:	d10e      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c14:	2b80      	cmp	r3, #128	; 0x80
 8001c16:	d107      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f902 	bl	8001e2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c32:	2b40      	cmp	r3, #64	; 0x40
 8001c34:	d10e      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c40:	2b40      	cmp	r3, #64	; 0x40
 8001c42:	d107      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f838 	bl	8001cc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0320 	and.w	r3, r3, #32
 8001c5e:	2b20      	cmp	r3, #32
 8001c60:	d10e      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d107      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0220 	mvn.w	r2, #32
 8001c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f8cc 	bl	8001e18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a40      	ldr	r2, [pc, #256]	; (8001dec <TIM_Base_SetConfig+0x114>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d013      	beq.n	8001d18 <TIM_Base_SetConfig+0x40>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf6:	d00f      	beq.n	8001d18 <TIM_Base_SetConfig+0x40>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a3d      	ldr	r2, [pc, #244]	; (8001df0 <TIM_Base_SetConfig+0x118>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00b      	beq.n	8001d18 <TIM_Base_SetConfig+0x40>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a3c      	ldr	r2, [pc, #240]	; (8001df4 <TIM_Base_SetConfig+0x11c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d007      	beq.n	8001d18 <TIM_Base_SetConfig+0x40>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a3b      	ldr	r2, [pc, #236]	; (8001df8 <TIM_Base_SetConfig+0x120>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d003      	beq.n	8001d18 <TIM_Base_SetConfig+0x40>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a3a      	ldr	r2, [pc, #232]	; (8001dfc <TIM_Base_SetConfig+0x124>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d108      	bne.n	8001d2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a2f      	ldr	r2, [pc, #188]	; (8001dec <TIM_Base_SetConfig+0x114>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d02b      	beq.n	8001d8a <TIM_Base_SetConfig+0xb2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d38:	d027      	beq.n	8001d8a <TIM_Base_SetConfig+0xb2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a2c      	ldr	r2, [pc, #176]	; (8001df0 <TIM_Base_SetConfig+0x118>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d023      	beq.n	8001d8a <TIM_Base_SetConfig+0xb2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a2b      	ldr	r2, [pc, #172]	; (8001df4 <TIM_Base_SetConfig+0x11c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d01f      	beq.n	8001d8a <TIM_Base_SetConfig+0xb2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a2a      	ldr	r2, [pc, #168]	; (8001df8 <TIM_Base_SetConfig+0x120>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01b      	beq.n	8001d8a <TIM_Base_SetConfig+0xb2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a29      	ldr	r2, [pc, #164]	; (8001dfc <TIM_Base_SetConfig+0x124>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d017      	beq.n	8001d8a <TIM_Base_SetConfig+0xb2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a28      	ldr	r2, [pc, #160]	; (8001e00 <TIM_Base_SetConfig+0x128>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <TIM_Base_SetConfig+0xb2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <TIM_Base_SetConfig+0x12c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00f      	beq.n	8001d8a <TIM_Base_SetConfig+0xb2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a26      	ldr	r2, [pc, #152]	; (8001e08 <TIM_Base_SetConfig+0x130>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00b      	beq.n	8001d8a <TIM_Base_SetConfig+0xb2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a25      	ldr	r2, [pc, #148]	; (8001e0c <TIM_Base_SetConfig+0x134>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d007      	beq.n	8001d8a <TIM_Base_SetConfig+0xb2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a24      	ldr	r2, [pc, #144]	; (8001e10 <TIM_Base_SetConfig+0x138>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d003      	beq.n	8001d8a <TIM_Base_SetConfig+0xb2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a23      	ldr	r2, [pc, #140]	; (8001e14 <TIM_Base_SetConfig+0x13c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d108      	bne.n	8001d9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <TIM_Base_SetConfig+0x114>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d003      	beq.n	8001dd0 <TIM_Base_SetConfig+0xf8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a0c      	ldr	r2, [pc, #48]	; (8001dfc <TIM_Base_SetConfig+0x124>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d103      	bne.n	8001dd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	615a      	str	r2, [r3, #20]
}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40010000 	.word	0x40010000
 8001df0:	40000400 	.word	0x40000400
 8001df4:	40000800 	.word	0x40000800
 8001df8:	40000c00 	.word	0x40000c00
 8001dfc:	40010400 	.word	0x40010400
 8001e00:	40014000 	.word	0x40014000
 8001e04:	40014400 	.word	0x40014400
 8001e08:	40014800 	.word	0x40014800
 8001e0c:	40001800 	.word	0x40001800
 8001e10:	40001c00 	.word	0x40001c00
 8001e14:	40002000 	.word	0x40002000

08001e18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f103 0208 	add.w	r2, r3, #8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f103 0208 	add.w	r2, r3, #8
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f103 0208 	add.w	r2, r3, #8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b085      	sub	sp, #20
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d103      	bne.n	8001eba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	e00c      	b.n	8001ed4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3308      	adds	r3, #8
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e002      	b.n	8001ec8 <vListInsert+0x2e>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d2f6      	bcs.n	8001ec2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	601a      	str	r2, [r3, #0]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6892      	ldr	r2, [r2, #8]
 8001f22:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6852      	ldr	r2, [r2, #4]
 8001f2c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d103      	bne.n	8001f40 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	1e5a      	subs	r2, r3, #1
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10a      	bne.n	8001f8e <xQueueGenericReset+0x2e>
        __asm volatile
 8001f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f7c:	f383 8811 	msr	BASEPRI, r3
 8001f80:	f3bf 8f6f 	isb	sy
 8001f84:	f3bf 8f4f 	dsb	sy
 8001f88:	60fb      	str	r3, [r7, #12]
    }
 8001f8a:	bf00      	nop
 8001f8c:	e7fe      	b.n	8001f8c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d05d      	beq.n	8002050 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d059      	beq.n	8002050 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d000      	beq.n	8001fb0 <xQueueGenericReset+0x50>
 8001fae:	2101      	movs	r1, #1
 8001fb0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d14c      	bne.n	8002050 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001fb6:	f001 ff0d 	bl	8003dd4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc2:	6939      	ldr	r1, [r7, #16]
 8001fc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	441a      	add	r2, r3
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	6939      	ldr	r1, [r7, #16]
 8001fea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	441a      	add	r2, r3
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	22ff      	movs	r2, #255	; 0xff
 8001ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	22ff      	movs	r2, #255	; 0xff
 8002002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d114      	bne.n	8002036 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01a      	beq.n	800204a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	3310      	adds	r3, #16
 8002018:	4618      	mov	r0, r3
 800201a:	f000 ffed 	bl	8002ff8 <xTaskRemoveFromEventList>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d012      	beq.n	800204a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002024:	4b15      	ldr	r3, [pc, #84]	; (800207c <xQueueGenericReset+0x11c>)
 8002026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	f3bf 8f4f 	dsb	sy
 8002030:	f3bf 8f6f 	isb	sy
 8002034:	e009      	b.n	800204a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	3310      	adds	r3, #16
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff00 	bl	8001e40 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	3324      	adds	r3, #36	; 0x24
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fefb 	bl	8001e40 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800204a:	f001 fef3 	bl	8003e34 <vPortExitCritical>
 800204e:	e001      	b.n	8002054 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10a      	bne.n	8002070 <xQueueGenericReset+0x110>
        __asm volatile
 800205a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205e:	f383 8811 	msr	BASEPRI, r3
 8002062:	f3bf 8f6f 	isb	sy
 8002066:	f3bf 8f4f 	dsb	sy
 800206a:	60bb      	str	r3, [r7, #8]
    }
 800206c:	bf00      	nop
 800206e:	e7fe      	b.n	800206e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002070:	697b      	ldr	r3, [r7, #20]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	e000ed04 	.word	0xe000ed04

08002080 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af02      	add	r7, sp, #8
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	4613      	mov	r3, r2
 800208c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d02e      	beq.n	80020f6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002098:	2100      	movs	r1, #0
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	fba3 2302 	umull	r2, r3, r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d000      	beq.n	80020a8 <xQueueGenericCreate+0x28>
 80020a6:	2101      	movs	r1, #1
 80020a8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d123      	bne.n	80020f6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80020b6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80020ba:	d81c      	bhi.n	80020f6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	3350      	adds	r3, #80	; 0x50
 80020ca:	4618      	mov	r0, r3
 80020cc:	f001 ffae 	bl	800402c <pvPortMalloc>
 80020d0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01c      	beq.n	8002112 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	3350      	adds	r3, #80	; 0x50
 80020e0:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020e2:	79fa      	ldrb	r2, [r7, #7]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	4613      	mov	r3, r2
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f814 	bl	800211c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80020f4:	e00d      	b.n	8002112 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10a      	bne.n	8002112 <xQueueGenericCreate+0x92>
        __asm volatile
 80020fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002100:	f383 8811 	msr	BASEPRI, r3
 8002104:	f3bf 8f6f 	isb	sy
 8002108:	f3bf 8f4f 	dsb	sy
 800210c:	613b      	str	r3, [r7, #16]
    }
 800210e:	bf00      	nop
 8002110:	e7fe      	b.n	8002110 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002112:	69fb      	ldr	r3, [r7, #28]
    }
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d103      	bne.n	8002138 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e002      	b.n	800213e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800214a:	2101      	movs	r1, #1
 800214c:	69b8      	ldr	r0, [r7, #24]
 800214e:	f7ff ff07 	bl	8001f60 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	68f9      	ldr	r1, [r7, #12]
 8002160:	2073      	movs	r0, #115	; 0x73
 8002162:	f003 fb91 	bl	8005888 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b08f      	sub	sp, #60	; 0x3c
 8002174:	af02      	add	r7, sp, #8
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800217c:	2300      	movs	r3, #0
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10a      	bne.n	80021a0 <xQueueReceive+0x30>
        __asm volatile
 800218a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218e:	f383 8811 	msr	BASEPRI, r3
 8002192:	f3bf 8f6f 	isb	sy
 8002196:	f3bf 8f4f 	dsb	sy
 800219a:	623b      	str	r3, [r7, #32]
    }
 800219c:	bf00      	nop
 800219e:	e7fe      	b.n	800219e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d103      	bne.n	80021ae <xQueueReceive+0x3e>
 80021a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <xQueueReceive+0x42>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <xQueueReceive+0x44>
 80021b2:	2300      	movs	r3, #0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10a      	bne.n	80021ce <xQueueReceive+0x5e>
        __asm volatile
 80021b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021bc:	f383 8811 	msr	BASEPRI, r3
 80021c0:	f3bf 8f6f 	isb	sy
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	61fb      	str	r3, [r7, #28]
    }
 80021ca:	bf00      	nop
 80021cc:	e7fe      	b.n	80021cc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021ce:	f001 f925 	bl	800341c <xTaskGetSchedulerState>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d102      	bne.n	80021de <xQueueReceive+0x6e>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <xQueueReceive+0x72>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <xQueueReceive+0x74>
 80021e2:	2300      	movs	r3, #0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10a      	bne.n	80021fe <xQueueReceive+0x8e>
        __asm volatile
 80021e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ec:	f383 8811 	msr	BASEPRI, r3
 80021f0:	f3bf 8f6f 	isb	sy
 80021f4:	f3bf 8f4f 	dsb	sy
 80021f8:	61bb      	str	r3, [r7, #24]
    }
 80021fa:	bf00      	nop
 80021fc:	e7fe      	b.n	80021fc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80021fe:	f001 fde9 	bl	8003dd4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002206:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	2b00      	cmp	r3, #0
 800220c:	d02f      	beq.n	800226e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002212:	f000 f8bd 	bl	8002390 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	4618      	mov	r0, r3
 800221a:	f004 f8c1 	bl	80063a0 <SEGGER_SYSVIEW_ShrinkId>
 800221e:	4604      	mov	r4, r0
 8002220:	2000      	movs	r0, #0
 8002222:	f004 f8bd 	bl	80063a0 <SEGGER_SYSVIEW_ShrinkId>
 8002226:	4602      	mov	r2, r0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2101      	movs	r1, #1
 800222c:	9100      	str	r1, [sp, #0]
 800222e:	4621      	mov	r1, r4
 8002230:	205c      	movs	r0, #92	; 0x5c
 8002232:	f003 fb9f 	bl	8005974 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	1e5a      	subs	r2, r3, #1
 800223a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00f      	beq.n	8002266 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	3310      	adds	r3, #16
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fed4 	bl	8002ff8 <xTaskRemoveFromEventList>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002256:	4b4d      	ldr	r3, [pc, #308]	; (800238c <xQueueReceive+0x21c>)
 8002258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002266:	f001 fde5 	bl	8003e34 <vPortExitCritical>
                return pdPASS;
 800226a:	2301      	movs	r3, #1
 800226c:	e08a      	b.n	8002384 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d113      	bne.n	800229c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002274:	f001 fdde 	bl	8003e34 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227a:	4618      	mov	r0, r3
 800227c:	f004 f890 	bl	80063a0 <SEGGER_SYSVIEW_ShrinkId>
 8002280:	4604      	mov	r4, r0
 8002282:	2000      	movs	r0, #0
 8002284:	f004 f88c 	bl	80063a0 <SEGGER_SYSVIEW_ShrinkId>
 8002288:	4602      	mov	r2, r0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2101      	movs	r1, #1
 800228e:	9100      	str	r1, [sp, #0]
 8002290:	4621      	mov	r1, r4
 8002292:	205c      	movs	r0, #92	; 0x5c
 8002294:	f003 fb6e 	bl	8005974 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002298:	2300      	movs	r3, #0
 800229a:	e073      	b.n	8002384 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d106      	bne.n	80022b0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80022a2:	f107 0310 	add.w	r3, r7, #16
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 ff7e 	bl	80031a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80022ac:	2301      	movs	r3, #1
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80022b0:	f001 fdc0 	bl	8003e34 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80022b4:	f000 fb80 	bl	80029b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80022b8:	f001 fd8c 	bl	8003dd4 <vPortEnterCritical>
 80022bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022c2:	b25b      	sxtb	r3, r3
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d103      	bne.n	80022d2 <xQueueReceive+0x162>
 80022ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022d8:	b25b      	sxtb	r3, r3
 80022da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022de:	d103      	bne.n	80022e8 <xQueueReceive+0x178>
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022e8:	f001 fda4 	bl	8003e34 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022ec:	1d3a      	adds	r2, r7, #4
 80022ee:	f107 0310 	add.w	r3, r7, #16
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 ff6d 	bl	80031d4 <xTaskCheckForTimeOut>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d124      	bne.n	800234a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002302:	f000 f8bd 	bl	8002480 <prvIsQueueEmpty>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d018      	beq.n	800233e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800230c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230e:	3324      	adds	r3, #36	; 0x24
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fe03 	bl	8002f20 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800231a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800231c:	f000 f85e 	bl	80023dc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002320:	f000 fb58 	bl	80029d4 <xTaskResumeAll>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	f47f af69 	bne.w	80021fe <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <xQueueReceive+0x21c>)
 800232e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	f3bf 8f6f 	isb	sy
 800233c:	e75f      	b.n	80021fe <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800233e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002340:	f000 f84c 	bl	80023dc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002344:	f000 fb46 	bl	80029d4 <xTaskResumeAll>
 8002348:	e759      	b.n	80021fe <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800234a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800234c:	f000 f846 	bl	80023dc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002350:	f000 fb40 	bl	80029d4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002356:	f000 f893 	bl	8002480 <prvIsQueueEmpty>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	f43f af4e 	beq.w	80021fe <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	4618      	mov	r0, r3
 8002366:	f004 f81b 	bl	80063a0 <SEGGER_SYSVIEW_ShrinkId>
 800236a:	4604      	mov	r4, r0
 800236c:	2000      	movs	r0, #0
 800236e:	f004 f817 	bl	80063a0 <SEGGER_SYSVIEW_ShrinkId>
 8002372:	4602      	mov	r2, r0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2101      	movs	r1, #1
 8002378:	9100      	str	r1, [sp, #0]
 800237a:	4621      	mov	r1, r4
 800237c:	205c      	movs	r0, #92	; 0x5c
 800237e:	f003 faf9 	bl	8005974 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002382:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002384:	4618      	mov	r0, r3
 8002386:	3734      	adds	r7, #52	; 0x34
 8002388:	46bd      	mov	sp, r7
 800238a:	bd90      	pop	{r4, r7, pc}
 800238c:	e000ed04 	.word	0xe000ed04

08002390 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d018      	beq.n	80023d4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	441a      	add	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d303      	bcc.n	80023c4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68d9      	ldr	r1, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	461a      	mov	r2, r3
 80023ce:	6838      	ldr	r0, [r7, #0]
 80023d0:	f004 f974 	bl	80066bc <memcpy>
    }
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80023e4:	f001 fcf6 	bl	8003dd4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023ee:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80023f0:	e011      	b.n	8002416 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d012      	beq.n	8002420 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3324      	adds	r3, #36	; 0x24
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 fdfa 	bl	8002ff8 <xTaskRemoveFromEventList>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800240a:	f000 ff49 	bl	80032a0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	3b01      	subs	r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	2b00      	cmp	r3, #0
 800241c:	dce9      	bgt.n	80023f2 <prvUnlockQueue+0x16>
 800241e:	e000      	b.n	8002422 <prvUnlockQueue+0x46>
                        break;
 8002420:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	22ff      	movs	r2, #255	; 0xff
 8002426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800242a:	f001 fd03 	bl	8003e34 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800242e:	f001 fcd1 	bl	8003dd4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002438:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800243a:	e011      	b.n	8002460 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d012      	beq.n	800246a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3310      	adds	r3, #16
 8002448:	4618      	mov	r0, r3
 800244a:	f000 fdd5 	bl	8002ff8 <xTaskRemoveFromEventList>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002454:	f000 ff24 	bl	80032a0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002458:	7bbb      	ldrb	r3, [r7, #14]
 800245a:	3b01      	subs	r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002464:	2b00      	cmp	r3, #0
 8002466:	dce9      	bgt.n	800243c <prvUnlockQueue+0x60>
 8002468:	e000      	b.n	800246c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800246a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	22ff      	movs	r2, #255	; 0xff
 8002470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002474:	f001 fcde 	bl	8003e34 <vPortExitCritical>
}
 8002478:	bf00      	nop
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002488:	f001 fca4 	bl	8003dd4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002494:	2301      	movs	r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	e001      	b.n	800249e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800249e:	f001 fcc9 	bl	8003e34 <vPortExitCritical>

    return xReturn;
 80024a2:	68fb      	ldr	r3, [r7, #12]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10a      	bne.n	80024d2 <vQueueAddToRegistry+0x26>
        __asm volatile
 80024bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	60fb      	str	r3, [r7, #12]
    }
 80024ce:	bf00      	nop
 80024d0:	e7fe      	b.n	80024d0 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d024      	beq.n	8002526 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	e01e      	b.n	8002520 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80024e2:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <vQueueAddToRegistry+0xa8>)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d105      	bne.n	80024fe <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4a17      	ldr	r2, [pc, #92]	; (8002554 <vQueueAddToRegistry+0xa8>)
 80024f8:	4413      	add	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
                    break;
 80024fc:	e013      	b.n	8002526 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <vQueueAddToRegistry+0x6e>
 8002504:	4a13      	ldr	r2, [pc, #76]	; (8002554 <vQueueAddToRegistry+0xa8>)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d104      	bne.n	800251a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4a0f      	ldr	r2, [pc, #60]	; (8002554 <vQueueAddToRegistry+0xa8>)
 8002516:	4413      	add	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3301      	adds	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b07      	cmp	r3, #7
 8002524:	d9dd      	bls.n	80024e2 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00f      	beq.n	800254c <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4618      	mov	r0, r3
 800253c:	f003 ff30 	bl	80063a0 <SEGGER_SYSVIEW_ShrinkId>
 8002540:	4601      	mov	r1, r0
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	2071      	movs	r0, #113	; 0x71
 8002548:	f003 f944 	bl	80057d4 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 800254c:	bf00      	nop
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	200143c8 	.word	0x200143c8

08002558 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002568:	f001 fc34 	bl	8003dd4 <vPortEnterCritical>
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002572:	b25b      	sxtb	r3, r3
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d103      	bne.n	8002582 <vQueueWaitForMessageRestricted+0x2a>
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002588:	b25b      	sxtb	r3, r3
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258e:	d103      	bne.n	8002598 <vQueueWaitForMessageRestricted+0x40>
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002598:	f001 fc4c 	bl	8003e34 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d106      	bne.n	80025b2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3324      	adds	r3, #36	; 0x24
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fcdb 	bl	8002f68 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80025b2:	6978      	ldr	r0, [r7, #20]
 80025b4:	f7ff ff12 	bl	80023dc <prvUnlockQueue>
    }
 80025b8:	bf00      	nop
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	; 0x30
 80025c4:	af04      	add	r7, sp, #16
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f001 fd29 	bl	800402c <pvPortMalloc>
 80025da:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00e      	beq.n	8002600 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80025e2:	2058      	movs	r0, #88	; 0x58
 80025e4:	f001 fd22 	bl	800402c <pvPortMalloc>
 80025e8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
 80025f6:	e005      	b.n	8002604 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80025f8:	6978      	ldr	r0, [r7, #20]
 80025fa:	f001 fdf7 	bl	80041ec <vPortFree>
 80025fe:	e001      	b.n	8002604 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d013      	beq.n	8002632 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800260a:	88fa      	ldrh	r2, [r7, #6]
 800260c:	2300      	movs	r3, #0
 800260e:	9303      	str	r3, [sp, #12]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	9302      	str	r3, [sp, #8]
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f80e 	bl	8002642 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002626:	69f8      	ldr	r0, [r7, #28]
 8002628:	f000 f8b0 	bl	800278c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800262c:	2301      	movs	r3, #1
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	e002      	b.n	8002638 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295
 8002636:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002638:	69bb      	ldr	r3, [r7, #24]
    }
 800263a:	4618      	mov	r0, r3
 800263c:	3720      	adds	r7, #32
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b088      	sub	sp, #32
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	461a      	mov	r2, r3
 800265a:	21a5      	movs	r1, #165	; 0xa5
 800265c:	f004 f83c 	bl	80066d8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800266a:	3b01      	subs	r3, #1
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f023 0307 	bic.w	r3, r3, #7
 8002678:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002688:	f383 8811 	msr	BASEPRI, r3
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	617b      	str	r3, [r7, #20]
    }
 8002696:	bf00      	nop
 8002698:	e7fe      	b.n	8002698 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01f      	beq.n	80026e0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	e012      	b.n	80026cc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	4413      	add	r3, r2
 80026ac:	7819      	ldrb	r1, [r3, #0]
 80026ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	4413      	add	r3, r2
 80026b4:	3334      	adds	r3, #52	; 0x34
 80026b6:	460a      	mov	r2, r1
 80026b8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	4413      	add	r3, r2
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3301      	adds	r3, #1
 80026ca:	61fb      	str	r3, [r7, #28]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	2b09      	cmp	r3, #9
 80026d0:	d9e9      	bls.n	80026a6 <prvInitialiseNewTask+0x64>
 80026d2:	e000      	b.n	80026d6 <prvInitialiseNewTask+0x94>
            {
                break;
 80026d4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80026de:	e003      	b.n	80026e8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d90a      	bls.n	8002704 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80026ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	613b      	str	r3, [r7, #16]
    }
 8002700:	bf00      	nop
 8002702:	e7fe      	b.n	8002702 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002706:	2b04      	cmp	r3, #4
 8002708:	d901      	bls.n	800270e <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800270a:	2304      	movs	r3, #4
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002712:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002718:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	2200      	movs	r2, #0
 800271e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002722:	3304      	adds	r3, #4
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fbab 	bl	8001e80 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272c:	3318      	adds	r3, #24
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fba6 	bl	8001e80 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002738:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	f1c3 0205 	rsb	r2, r3, #5
 8002740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002742:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002748:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274c:	3350      	adds	r3, #80	; 0x50
 800274e:	2204      	movs	r2, #4
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f003 ffc0 	bl	80066d8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275a:	3354      	adds	r3, #84	; 0x54
 800275c:	2201      	movs	r2, #1
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f003 ffb9 	bl	80066d8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	68f9      	ldr	r1, [r7, #12]
 800276a:	69b8      	ldr	r0, [r7, #24]
 800276c:	f001 f984 	bl	8003a78 <pxPortInitialiseStack>
 8002770:	4602      	mov	r2, r0
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002780:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002782:	bf00      	nop
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800278c:	b5b0      	push	{r4, r5, r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af02      	add	r7, sp, #8
 8002792:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002794:	f001 fb1e 	bl	8003dd4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002798:	4b4f      	ldr	r3, [pc, #316]	; (80028d8 <prvAddNewTaskToReadyList+0x14c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	4a4e      	ldr	r2, [pc, #312]	; (80028d8 <prvAddNewTaskToReadyList+0x14c>)
 80027a0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80027a2:	4b4e      	ldr	r3, [pc, #312]	; (80028dc <prvAddNewTaskToReadyList+0x150>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80027aa:	4a4c      	ldr	r2, [pc, #304]	; (80028dc <prvAddNewTaskToReadyList+0x150>)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80027b0:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <prvAddNewTaskToReadyList+0x14c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d110      	bne.n	80027da <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80027b8:	f000 fd96 	bl	80032e8 <prvInitialiseTaskLists>
 80027bc:	e00d      	b.n	80027da <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80027be:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <prvAddNewTaskToReadyList+0x154>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80027c6:	4b45      	ldr	r3, [pc, #276]	; (80028dc <prvAddNewTaskToReadyList+0x150>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d802      	bhi.n	80027da <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80027d4:	4a41      	ldr	r2, [pc, #260]	; (80028dc <prvAddNewTaskToReadyList+0x150>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80027da:	4b42      	ldr	r3, [pc, #264]	; (80028e4 <prvAddNewTaskToReadyList+0x158>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	3301      	adds	r3, #1
 80027e0:	4a40      	ldr	r2, [pc, #256]	; (80028e4 <prvAddNewTaskToReadyList+0x158>)
 80027e2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80027e4:	4b3f      	ldr	r3, [pc, #252]	; (80028e4 <prvAddNewTaskToReadyList+0x158>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d016      	beq.n	8002820 <prvAddNewTaskToReadyList+0x94>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f003 fcad 	bl	8006154 <SEGGER_SYSVIEW_OnTaskCreate>
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	461d      	mov	r5, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	461c      	mov	r4, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	1ae3      	subs	r3, r4, r3
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	462b      	mov	r3, r5
 800281c:	f001 feac 	bl	8004578 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4618      	mov	r0, r3
 8002824:	f003 fd1a 	bl	800625c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	2201      	movs	r2, #1
 800282e:	409a      	lsls	r2, r3
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <prvAddNewTaskToReadyList+0x15c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4313      	orrs	r3, r2
 8002836:	4a2c      	ldr	r2, [pc, #176]	; (80028e8 <prvAddNewTaskToReadyList+0x15c>)
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283e:	492b      	ldr	r1, [pc, #172]	; (80028ec <prvAddNewTaskToReadyList+0x160>)
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	3304      	adds	r3, #4
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	3204      	adds	r2, #4
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	1d1a      	adds	r2, r3, #4
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <prvAddNewTaskToReadyList+0x160>)
 800287e:	441a      	add	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	615a      	str	r2, [r3, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002888:	4918      	ldr	r1, [pc, #96]	; (80028ec <prvAddNewTaskToReadyList+0x160>)
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	1c59      	adds	r1, r3, #1
 8002898:	4814      	ldr	r0, [pc, #80]	; (80028ec <prvAddNewTaskToReadyList+0x160>)
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4403      	add	r3, r0
 80028a4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80028a6:	f001 fac5 	bl	8003e34 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <prvAddNewTaskToReadyList+0x154>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00e      	beq.n	80028d0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <prvAddNewTaskToReadyList+0x150>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	429a      	cmp	r2, r3
 80028be:	d207      	bcs.n	80028d0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <prvAddNewTaskToReadyList+0x164>)
 80028c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bdb0      	pop	{r4, r5, r7, pc}
 80028d8:	2000010c 	.word	0x2000010c
 80028dc:	20000034 	.word	0x20000034
 80028e0:	20000118 	.word	0x20000118
 80028e4:	20000128 	.word	0x20000128
 80028e8:	20000114 	.word	0x20000114
 80028ec:	20000038 	.word	0x20000038
 80028f0:	e000ed04 	.word	0xe000ed04

080028f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80028fa:	4b27      	ldr	r3, [pc, #156]	; (8002998 <vTaskStartScheduler+0xa4>)
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	2300      	movs	r3, #0
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2300      	movs	r3, #0
 8002904:	2282      	movs	r2, #130	; 0x82
 8002906:	4925      	ldr	r1, [pc, #148]	; (800299c <vTaskStartScheduler+0xa8>)
 8002908:	4825      	ldr	r0, [pc, #148]	; (80029a0 <vTaskStartScheduler+0xac>)
 800290a:	f7ff fe59 	bl	80025c0 <xTaskCreate>
 800290e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d102      	bne.n	800291c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002916:	f000 fe2b 	bl	8003570 <xTimerCreateTimerTask>
 800291a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d124      	bne.n	800296c <vTaskStartScheduler+0x78>
        __asm volatile
 8002922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	60bb      	str	r3, [r7, #8]
    }
 8002934:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <vTaskStartScheduler+0xb0>)
 8002938:	f04f 32ff 	mov.w	r2, #4294967295
 800293c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <vTaskStartScheduler+0xb4>)
 8002940:	2201      	movs	r2, #1
 8002942:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <vTaskStartScheduler+0xb8>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800294a:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <vTaskStartScheduler+0xbc>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4b12      	ldr	r3, [pc, #72]	; (8002998 <vTaskStartScheduler+0xa4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d102      	bne.n	800295c <vTaskStartScheduler+0x68>
 8002956:	f003 fbe1 	bl	800611c <SEGGER_SYSVIEW_OnIdle>
 800295a:	e004      	b.n	8002966 <vTaskStartScheduler+0x72>
 800295c:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <vTaskStartScheduler+0xbc>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f003 fc39 	bl	80061d8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002966:	f001 f915 	bl	8003b94 <xPortStartScheduler>
 800296a:	e00e      	b.n	800298a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d10a      	bne.n	800298a <vTaskStartScheduler+0x96>
        __asm volatile
 8002974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	607b      	str	r3, [r7, #4]
    }
 8002986:	bf00      	nop
 8002988:	e7fe      	b.n	8002988 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <vTaskStartScheduler+0xc0>)
 800298c:	681b      	ldr	r3, [r3, #0]
}
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000130 	.word	0x20000130
 800299c:	08006734 	.word	0x08006734
 80029a0:	080032b9 	.word	0x080032b9
 80029a4:	2000012c 	.word	0x2000012c
 80029a8:	20000118 	.word	0x20000118
 80029ac:	20000110 	.word	0x20000110
 80029b0:	20000034 	.word	0x20000034
 80029b4:	2000000c 	.word	0x2000000c

080029b8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <vTaskSuspendAll+0x18>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	4a03      	ldr	r2, [pc, #12]	; (80029d0 <vTaskSuspendAll+0x18>)
 80029c4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	20000134 	.word	0x20000134

080029d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80029e2:	4b73      	ldr	r3, [pc, #460]	; (8002bb0 <xTaskResumeAll+0x1dc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10a      	bne.n	8002a00 <xTaskResumeAll+0x2c>
        __asm volatile
 80029ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	607b      	str	r3, [r7, #4]
    }
 80029fc:	bf00      	nop
 80029fe:	e7fe      	b.n	80029fe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002a00:	f001 f9e8 	bl	8003dd4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002a04:	4b6a      	ldr	r3, [pc, #424]	; (8002bb0 <xTaskResumeAll+0x1dc>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	4a69      	ldr	r2, [pc, #420]	; (8002bb0 <xTaskResumeAll+0x1dc>)
 8002a0c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a0e:	4b68      	ldr	r3, [pc, #416]	; (8002bb0 <xTaskResumeAll+0x1dc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f040 80c4 	bne.w	8002ba0 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a18:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <xTaskResumeAll+0x1e0>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80bf 	beq.w	8002ba0 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a22:	e08e      	b.n	8002b42 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a24:	4b64      	ldr	r3, [pc, #400]	; (8002bb8 <xTaskResumeAll+0x1e4>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	6a12      	ldr	r2, [r2, #32]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	69d2      	ldr	r2, [r2, #28]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3318      	adds	r3, #24
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d103      	bne.n	8002a5a <xTaskResumeAll+0x86>
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	6a1a      	ldr	r2, [r3, #32]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	1e5a      	subs	r2, r3, #1
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	68d2      	ldr	r2, [r2, #12]
 8002a78:	609a      	str	r2, [r3, #8]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	6892      	ldr	r2, [r2, #8]
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d103      	bne.n	8002a98 <xTaskResumeAll+0xc4>
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	615a      	str	r2, [r3, #20]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	1e5a      	subs	r2, r3, #1
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 fbd6 	bl	800625c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	4b40      	ldr	r3, [pc, #256]	; (8002bbc <xTaskResumeAll+0x1e8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	4a3f      	ldr	r2, [pc, #252]	; (8002bbc <xTaskResumeAll+0x1e8>)
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac6:	493e      	ldr	r1, [pc, #248]	; (8002bc0 <xTaskResumeAll+0x1ec>)
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	609a      	str	r2, [r3, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	3204      	adds	r2, #4
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	1d1a      	adds	r2, r3, #4
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4a2e      	ldr	r2, [pc, #184]	; (8002bc0 <xTaskResumeAll+0x1ec>)
 8002b06:	441a      	add	r2, r3
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	615a      	str	r2, [r3, #20]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b10:	492b      	ldr	r1, [pc, #172]	; (8002bc0 <xTaskResumeAll+0x1ec>)
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	1c59      	adds	r1, r3, #1
 8002b20:	4827      	ldr	r0, [pc, #156]	; (8002bc0 <xTaskResumeAll+0x1ec>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4403      	add	r3, r0
 8002b2c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <xTaskResumeAll+0x1f0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d302      	bcc.n	8002b42 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002b3c:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <xTaskResumeAll+0x1f4>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b42:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <xTaskResumeAll+0x1e4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f47f af6c 	bne.w	8002a24 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002b52:	f000 fc47 	bl	80033e4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b56:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <xTaskResumeAll+0x1f8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d010      	beq.n	8002b84 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002b62:	f000 f859 	bl	8002c18 <xTaskIncrementTick>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <xTaskResumeAll+0x1f4>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f1      	bne.n	8002b62 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002b7e:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <xTaskResumeAll+0x1f8>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002b84:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <xTaskResumeAll+0x1f4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d009      	beq.n	8002ba0 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <xTaskResumeAll+0x1fc>)
 8002b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002ba0:	f001 f948 	bl	8003e34 <vPortExitCritical>

    return xAlreadyYielded;
 8002ba4:	69bb      	ldr	r3, [r7, #24]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3720      	adds	r7, #32
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000134 	.word	0x20000134
 8002bb4:	2000010c 	.word	0x2000010c
 8002bb8:	200000cc 	.word	0x200000cc
 8002bbc:	20000114 	.word	0x20000114
 8002bc0:	20000038 	.word	0x20000038
 8002bc4:	20000034 	.word	0x20000034
 8002bc8:	20000120 	.word	0x20000120
 8002bcc:	2000011c 	.word	0x2000011c
 8002bd0:	e000ed04 	.word	0xe000ed04

08002bd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <xTaskGetTickCount+0x1c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002be0:	687b      	ldr	r3, [r7, #4]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000110 	.word	0x20000110

08002bf4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bfa:	f001 f9d7 	bl	8003fac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002c02:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <xTaskGetTickCountFromISR+0x20>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002c08:	683b      	ldr	r3, [r7, #0]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000110 	.word	0x20000110

08002c18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c22:	4b7f      	ldr	r3, [pc, #508]	; (8002e20 <xTaskIncrementTick+0x208>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f040 80f0 	bne.w	8002e0c <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c2c:	4b7d      	ldr	r3, [pc, #500]	; (8002e24 <xTaskIncrementTick+0x20c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3301      	adds	r3, #1
 8002c32:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002c34:	4a7b      	ldr	r2, [pc, #492]	; (8002e24 <xTaskIncrementTick+0x20c>)
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d120      	bne.n	8002c82 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002c40:	4b79      	ldr	r3, [pc, #484]	; (8002e28 <xTaskIncrementTick+0x210>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <xTaskIncrementTick+0x48>
        __asm volatile
 8002c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4e:	f383 8811 	msr	BASEPRI, r3
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	f3bf 8f4f 	dsb	sy
 8002c5a:	607b      	str	r3, [r7, #4]
    }
 8002c5c:	bf00      	nop
 8002c5e:	e7fe      	b.n	8002c5e <xTaskIncrementTick+0x46>
 8002c60:	4b71      	ldr	r3, [pc, #452]	; (8002e28 <xTaskIncrementTick+0x210>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	4b71      	ldr	r3, [pc, #452]	; (8002e2c <xTaskIncrementTick+0x214>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a6f      	ldr	r2, [pc, #444]	; (8002e28 <xTaskIncrementTick+0x210>)
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4a6f      	ldr	r2, [pc, #444]	; (8002e2c <xTaskIncrementTick+0x214>)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b6e      	ldr	r3, [pc, #440]	; (8002e30 <xTaskIncrementTick+0x218>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	4a6d      	ldr	r2, [pc, #436]	; (8002e30 <xTaskIncrementTick+0x218>)
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	f000 fbb1 	bl	80033e4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002c82:	4b6c      	ldr	r3, [pc, #432]	; (8002e34 <xTaskIncrementTick+0x21c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a3a      	ldr	r2, [r7, #32]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	f0c0 80aa 	bcc.w	8002de2 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c8e:	4b66      	ldr	r3, [pc, #408]	; (8002e28 <xTaskIncrementTick+0x210>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d104      	bne.n	8002ca2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c98:	4b66      	ldr	r3, [pc, #408]	; (8002e34 <xTaskIncrementTick+0x21c>)
 8002c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9e:	601a      	str	r2, [r3, #0]
                    break;
 8002ca0:	e09f      	b.n	8002de2 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ca2:	4b61      	ldr	r3, [pc, #388]	; (8002e28 <xTaskIncrementTick+0x210>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002cb2:	6a3a      	ldr	r2, [r7, #32]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d203      	bcs.n	8002cc2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002cba:	4a5e      	ldr	r2, [pc, #376]	; (8002e34 <xTaskIncrementTick+0x21c>)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002cc0:	e08f      	b.n	8002de2 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	68d2      	ldr	r2, [r2, #12]
 8002cd0:	609a      	str	r2, [r3, #8]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	6892      	ldr	r2, [r2, #8]
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d103      	bne.n	8002cf0 <xTaskIncrementTick+0xd8>
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	615a      	str	r2, [r3, #20]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	1e5a      	subs	r2, r3, #1
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01e      	beq.n	8002d46 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	6a12      	ldr	r2, [r2, #32]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	69d2      	ldr	r2, [r2, #28]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	3318      	adds	r3, #24
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d103      	bne.n	8002d36 <xTaskIncrementTick+0x11e>
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	6a1a      	ldr	r2, [r3, #32]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	1e5a      	subs	r2, r3, #1
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f003 fa87 	bl	800625c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	2201      	movs	r2, #1
 8002d54:	409a      	lsls	r2, r3
 8002d56:	4b38      	ldr	r3, [pc, #224]	; (8002e38 <xTaskIncrementTick+0x220>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	4a36      	ldr	r2, [pc, #216]	; (8002e38 <xTaskIncrementTick+0x220>)
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d64:	4935      	ldr	r1, [pc, #212]	; (8002e3c <xTaskIncrementTick+0x224>)
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	3304      	adds	r3, #4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	60da      	str	r2, [r3, #12]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	3204      	adds	r2, #4
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	1d1a      	adds	r2, r3, #4
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <xTaskIncrementTick+0x224>)
 8002da4:	441a      	add	r2, r3
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	615a      	str	r2, [r3, #20]
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dae:	4923      	ldr	r1, [pc, #140]	; (8002e3c <xTaskIncrementTick+0x224>)
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	1c59      	adds	r1, r3, #1
 8002dbe:	481f      	ldr	r0, [pc, #124]	; (8002e3c <xTaskIncrementTick+0x224>)
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4403      	add	r3, r0
 8002dca:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <xTaskIncrementTick+0x228>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	f4ff af59 	bcc.w	8002c8e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002de0:	e755      	b.n	8002c8e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002de2:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <xTaskIncrementTick+0x228>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de8:	4914      	ldr	r1, [pc, #80]	; (8002e3c <xTaskIncrementTick+0x224>)
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d901      	bls.n	8002dfe <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <xTaskIncrementTick+0x22c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8002e06:	2301      	movs	r3, #1
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0a:	e004      	b.n	8002e16 <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002e0c:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <xTaskIncrementTick+0x230>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <xTaskIncrementTick+0x230>)
 8002e14:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3728      	adds	r7, #40	; 0x28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20000134 	.word	0x20000134
 8002e24:	20000110 	.word	0x20000110
 8002e28:	200000c4 	.word	0x200000c4
 8002e2c:	200000c8 	.word	0x200000c8
 8002e30:	20000124 	.word	0x20000124
 8002e34:	2000012c 	.word	0x2000012c
 8002e38:	20000114 	.word	0x20000114
 8002e3c:	20000038 	.word	0x20000038
 8002e40:	20000034 	.word	0x20000034
 8002e44:	20000120 	.word	0x20000120
 8002e48:	2000011c 	.word	0x2000011c

08002e4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e52:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <vTaskSwitchContext+0xbc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002e5a:	4b2c      	ldr	r3, [pc, #176]	; (8002f0c <vTaskSwitchContext+0xc0>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002e60:	e04d      	b.n	8002efe <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002e62:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <vTaskSwitchContext+0xc0>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e68:	4b29      	ldr	r3, [pc, #164]	; (8002f10 <vTaskSwitchContext+0xc4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002e76:	7afb      	ldrb	r3, [r7, #11]
 8002e78:	f1c3 031f 	rsb	r3, r3, #31
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	4925      	ldr	r1, [pc, #148]	; (8002f14 <vTaskSwitchContext+0xc8>)
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10a      	bne.n	8002ea8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e96:	f383 8811 	msr	BASEPRI, r3
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	607b      	str	r3, [r7, #4]
    }
 8002ea4:	bf00      	nop
 8002ea6:	e7fe      	b.n	8002ea6 <vTaskSwitchContext+0x5a>
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <vTaskSwitchContext+0xc8>)
 8002eb4:	4413      	add	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	3308      	adds	r3, #8
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d104      	bne.n	8002ed8 <vTaskSwitchContext+0x8c>
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	4a0e      	ldr	r2, [pc, #56]	; (8002f18 <vTaskSwitchContext+0xcc>)
 8002ee0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <vTaskSwitchContext+0xcc>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <vTaskSwitchContext+0xd0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d102      	bne.n	8002ef4 <vTaskSwitchContext+0xa8>
 8002eee:	f003 f915 	bl	800611c <SEGGER_SYSVIEW_OnIdle>
}
 8002ef2:	e004      	b.n	8002efe <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002ef4:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <vTaskSwitchContext+0xcc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f003 f96d 	bl	80061d8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002efe:	bf00      	nop
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000134 	.word	0x20000134
 8002f0c:	20000120 	.word	0x20000120
 8002f10:	20000114 	.word	0x20000114
 8002f14:	20000038 	.word	0x20000038
 8002f18:	20000034 	.word	0x20000034
 8002f1c:	20000130 	.word	0x20000130

08002f20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10a      	bne.n	8002f46 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	60fb      	str	r3, [r7, #12]
    }
 8002f42:	bf00      	nop
 8002f44:	e7fe      	b.n	8002f44 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <vTaskPlaceOnEventList+0x44>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3318      	adds	r3, #24
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe ffa3 	bl	8001e9a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f54:	2101      	movs	r1, #1
 8002f56:	6838      	ldr	r0, [r7, #0]
 8002f58:	f000 fa7e 	bl	8003458 <prvAddCurrentTaskToDelayedList>
}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20000034 	.word	0x20000034

08002f68 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10a      	bne.n	8002f90 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	613b      	str	r3, [r7, #16]
    }
 8002f8c:	bf00      	nop
 8002f8e:	e7fe      	b.n	8002f8e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	61da      	str	r2, [r3, #28]
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	6892      	ldr	r2, [r2, #8]
 8002fa6:	621a      	str	r2, [r3, #32]
 8002fa8:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	3218      	adds	r2, #24
 8002fb2:	605a      	str	r2, [r3, #4]
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f103 0218 	add.w	r2, r3, #24
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fdc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002fde:	2024      	movs	r0, #36	; 0x24
 8002fe0:	f002 fb9e 	bl	8005720 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	68b8      	ldr	r0, [r7, #8]
 8002fe8:	f000 fa36 	bl	8003458 <prvAddCurrentTaskToDelayedList>
    }
 8002fec:	bf00      	nop
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20000034 	.word	0x20000034

08002ff8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	60fb      	str	r3, [r7, #12]
    }
 8003020:	bf00      	nop
 8003022:	e7fe      	b.n	8003022 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	6a3a      	ldr	r2, [r7, #32]
 8003030:	6a12      	ldr	r2, [r2, #32]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	6a3a      	ldr	r2, [r7, #32]
 800303a:	69d2      	ldr	r2, [r2, #28]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	3318      	adds	r3, #24
 8003046:	429a      	cmp	r2, r3
 8003048:	d103      	bne.n	8003052 <xTaskRemoveFromEventList+0x5a>
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	6a1a      	ldr	r2, [r3, #32]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	2200      	movs	r2, #0
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	1e5a      	subs	r2, r3, #1
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003062:	4b4b      	ldr	r3, [pc, #300]	; (8003190 <xTaskRemoveFromEventList+0x198>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d162      	bne.n	8003130 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	6a3a      	ldr	r2, [r7, #32]
 8003076:	68d2      	ldr	r2, [r2, #12]
 8003078:	609a      	str	r2, [r3, #8]
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	6a3a      	ldr	r2, [r7, #32]
 8003080:	6892      	ldr	r2, [r2, #8]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	3304      	adds	r3, #4
 800308c:	429a      	cmp	r2, r3
 800308e:	d103      	bne.n	8003098 <xTaskRemoveFromEventList+0xa0>
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	2200      	movs	r2, #0
 800309c:	615a      	str	r2, [r3, #20]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	1e5a      	subs	r2, r3, #1
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 f8d6 	bl	800625c <SEGGER_SYSVIEW_OnTaskStartReady>
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	2201      	movs	r2, #1
 80030b6:	409a      	lsls	r2, r3
 80030b8:	4b36      	ldr	r3, [pc, #216]	; (8003194 <xTaskRemoveFromEventList+0x19c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4313      	orrs	r3, r2
 80030be:	4a35      	ldr	r2, [pc, #212]	; (8003194 <xTaskRemoveFromEventList+0x19c>)
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c6:	4934      	ldr	r1, [pc, #208]	; (8003198 <xTaskRemoveFromEventList+0x1a0>)
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	3304      	adds	r3, #4
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	609a      	str	r2, [r3, #8]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	6a3a      	ldr	r2, [r7, #32]
 80030ec:	3204      	adds	r2, #4
 80030ee:	605a      	str	r2, [r3, #4]
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	1d1a      	adds	r2, r3, #4
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4a24      	ldr	r2, [pc, #144]	; (8003198 <xTaskRemoveFromEventList+0x1a0>)
 8003106:	441a      	add	r2, r3
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	615a      	str	r2, [r3, #20]
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003110:	4921      	ldr	r1, [pc, #132]	; (8003198 <xTaskRemoveFromEventList+0x1a0>)
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	1c59      	adds	r1, r3, #1
 8003120:	481d      	ldr	r0, [pc, #116]	; (8003198 <xTaskRemoveFromEventList+0x1a0>)
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4403      	add	r3, r0
 800312c:	6019      	str	r1, [r3, #0]
 800312e:	e01b      	b.n	8003168 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <xTaskRemoveFromEventList+0x1a4>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	61da      	str	r2, [r3, #28]
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	621a      	str	r2, [r3, #32]
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	6a3a      	ldr	r2, [r7, #32]
 800314a:	3218      	adds	r2, #24
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	f103 0218 	add.w	r2, r3, #24
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	4a10      	ldr	r2, [pc, #64]	; (800319c <xTaskRemoveFromEventList+0x1a4>)
 800315c:	629a      	str	r2, [r3, #40]	; 0x28
 800315e:	4b0f      	ldr	r3, [pc, #60]	; (800319c <xTaskRemoveFromEventList+0x1a4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3301      	adds	r3, #1
 8003164:	4a0d      	ldr	r2, [pc, #52]	; (800319c <xTaskRemoveFromEventList+0x1a4>)
 8003166:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <xTaskRemoveFromEventList+0x1a8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	429a      	cmp	r2, r3
 8003174:	d905      	bls.n	8003182 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003176:	2301      	movs	r3, #1
 8003178:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <xTaskRemoveFromEventList+0x1ac>)
 800317c:	2201      	movs	r2, #1
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	e001      	b.n	8003186 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003188:	4618      	mov	r0, r3
 800318a:	3728      	adds	r7, #40	; 0x28
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000134 	.word	0x20000134
 8003194:	20000114 	.word	0x20000114
 8003198:	20000038 	.word	0x20000038
 800319c:	200000cc 	.word	0x200000cc
 80031a0:	20000034 	.word	0x20000034
 80031a4:	20000120 	.word	0x20000120

080031a8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <vTaskInternalSetTimeOutState+0x24>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <vTaskInternalSetTimeOutState+0x28>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	605a      	str	r2, [r3, #4]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	20000124 	.word	0x20000124
 80031d0:	20000110 	.word	0x20000110

080031d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80031e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	613b      	str	r3, [r7, #16]
    }
 80031f6:	bf00      	nop
 80031f8:	e7fe      	b.n	80031f8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	60fb      	str	r3, [r7, #12]
    }
 8003212:	bf00      	nop
 8003214:	e7fe      	b.n	8003214 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003216:	f000 fddd 	bl	8003dd4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800321a:	4b1f      	ldr	r3, [pc, #124]	; (8003298 <xTaskCheckForTimeOut+0xc4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003232:	d102      	bne.n	800323a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003234:	2300      	movs	r3, #0
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	e026      	b.n	8003288 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	4b17      	ldr	r3, [pc, #92]	; (800329c <xTaskCheckForTimeOut+0xc8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d00a      	beq.n	800325c <xTaskCheckForTimeOut+0x88>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	429a      	cmp	r2, r3
 800324e:	d305      	bcc.n	800325c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003250:	2301      	movs	r3, #1
 8003252:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e015      	b.n	8003288 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	429a      	cmp	r2, r3
 8003264:	d20b      	bcs.n	800327e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	1ad2      	subs	r2, r2, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff ff98 	bl	80031a8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
 800327c:	e004      	b.n	8003288 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003284:	2301      	movs	r3, #1
 8003286:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003288:	f000 fdd4 	bl	8003e34 <vPortExitCritical>

    return xReturn;
 800328c:	69fb      	ldr	r3, [r7, #28]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3720      	adds	r7, #32
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000110 	.word	0x20000110
 800329c:	20000124 	.word	0x20000124

080032a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <vTaskMissedYield+0x14>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
}
 80032aa:	bf00      	nop
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	20000120 	.word	0x20000120

080032b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80032c0:	f000 f852 	bl	8003368 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <prvIdleTask+0x28>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d9f9      	bls.n	80032c0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <prvIdleTask+0x2c>)
 80032ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80032dc:	e7f0      	b.n	80032c0 <prvIdleTask+0x8>
 80032de:	bf00      	nop
 80032e0:	20000038 	.word	0x20000038
 80032e4:	e000ed04 	.word	0xe000ed04

080032e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032ee:	2300      	movs	r3, #0
 80032f0:	607b      	str	r3, [r7, #4]
 80032f2:	e00c      	b.n	800330e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4a12      	ldr	r2, [pc, #72]	; (8003348 <prvInitialiseTaskLists+0x60>)
 8003300:	4413      	add	r3, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fd9c 	bl	8001e40 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3301      	adds	r3, #1
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b04      	cmp	r3, #4
 8003312:	d9ef      	bls.n	80032f4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003314:	480d      	ldr	r0, [pc, #52]	; (800334c <prvInitialiseTaskLists+0x64>)
 8003316:	f7fe fd93 	bl	8001e40 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800331a:	480d      	ldr	r0, [pc, #52]	; (8003350 <prvInitialiseTaskLists+0x68>)
 800331c:	f7fe fd90 	bl	8001e40 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003320:	480c      	ldr	r0, [pc, #48]	; (8003354 <prvInitialiseTaskLists+0x6c>)
 8003322:	f7fe fd8d 	bl	8001e40 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003326:	480c      	ldr	r0, [pc, #48]	; (8003358 <prvInitialiseTaskLists+0x70>)
 8003328:	f7fe fd8a 	bl	8001e40 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800332c:	480b      	ldr	r0, [pc, #44]	; (800335c <prvInitialiseTaskLists+0x74>)
 800332e:	f7fe fd87 	bl	8001e40 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <prvInitialiseTaskLists+0x78>)
 8003334:	4a05      	ldr	r2, [pc, #20]	; (800334c <prvInitialiseTaskLists+0x64>)
 8003336:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003338:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <prvInitialiseTaskLists+0x7c>)
 800333a:	4a05      	ldr	r2, [pc, #20]	; (8003350 <prvInitialiseTaskLists+0x68>)
 800333c:	601a      	str	r2, [r3, #0]
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000038 	.word	0x20000038
 800334c:	2000009c 	.word	0x2000009c
 8003350:	200000b0 	.word	0x200000b0
 8003354:	200000cc 	.word	0x200000cc
 8003358:	200000e0 	.word	0x200000e0
 800335c:	200000f8 	.word	0x200000f8
 8003360:	200000c4 	.word	0x200000c4
 8003364:	200000c8 	.word	0x200000c8

08003368 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800336e:	e019      	b.n	80033a4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003370:	f000 fd30 	bl	8003dd4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003374:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <prvCheckTasksWaitingTermination+0x50>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3304      	adds	r3, #4
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe fdc3 	bl	8001f0c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003386:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <prvCheckTasksWaitingTermination+0x54>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3b01      	subs	r3, #1
 800338c:	4a0b      	ldr	r2, [pc, #44]	; (80033bc <prvCheckTasksWaitingTermination+0x54>)
 800338e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <prvCheckTasksWaitingTermination+0x58>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3b01      	subs	r3, #1
 8003396:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <prvCheckTasksWaitingTermination+0x58>)
 8003398:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800339a:	f000 fd4b 	bl	8003e34 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f810 	bl	80033c4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <prvCheckTasksWaitingTermination+0x58>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e1      	bne.n	8003370 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200000e0 	.word	0x200000e0
 80033bc:	2000010c 	.word	0x2000010c
 80033c0:	200000f4 	.word	0x200000f4

080033c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 ff0b 	bl	80041ec <vPortFree>
                vPortFree( pxTCB );
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 ff08 	bl	80041ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <prvResetNextTaskUnblockTime+0x30>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d104      	bne.n	80033fc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <prvResetNextTaskUnblockTime+0x34>)
 80033f4:	f04f 32ff 	mov.w	r2, #4294967295
 80033f8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80033fa:	e005      	b.n	8003408 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <prvResetNextTaskUnblockTime+0x30>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a04      	ldr	r2, [pc, #16]	; (8003418 <prvResetNextTaskUnblockTime+0x34>)
 8003406:	6013      	str	r3, [r2, #0]
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	200000c4 	.word	0x200000c4
 8003418:	2000012c 	.word	0x2000012c

0800341c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003422:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <xTaskGetSchedulerState+0x34>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800342a:	2301      	movs	r3, #1
 800342c:	607b      	str	r3, [r7, #4]
 800342e:	e008      	b.n	8003442 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <xTaskGetSchedulerState+0x38>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d102      	bne.n	800343e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003438:	2302      	movs	r3, #2
 800343a:	607b      	str	r3, [r7, #4]
 800343c:	e001      	b.n	8003442 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800343e:	2300      	movs	r3, #0
 8003440:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003442:	687b      	ldr	r3, [r7, #4]
    }
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	20000118 	.word	0x20000118
 8003454:	20000134 	.word	0x20000134

08003458 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003462:	4b3c      	ldr	r3, [pc, #240]	; (8003554 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003468:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <prvAddCurrentTaskToDelayedList+0x100>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3304      	adds	r3, #4
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe fd4c 	bl	8001f0c <uxListRemove>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10b      	bne.n	8003492 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800347a:	4b37      	ldr	r3, [pc, #220]	; (8003558 <prvAddCurrentTaskToDelayedList+0x100>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	2201      	movs	r2, #1
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43da      	mvns	r2, r3
 8003488:	4b34      	ldr	r3, [pc, #208]	; (800355c <prvAddCurrentTaskToDelayedList+0x104>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4013      	ands	r3, r2
 800348e:	4a33      	ldr	r2, [pc, #204]	; (800355c <prvAddCurrentTaskToDelayedList+0x104>)
 8003490:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d124      	bne.n	80034e4 <prvAddCurrentTaskToDelayedList+0x8c>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d021      	beq.n	80034e4 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034a0:	4b2f      	ldr	r3, [pc, #188]	; (8003560 <prvAddCurrentTaskToDelayedList+0x108>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	4b2c      	ldr	r3, [pc, #176]	; (8003558 <prvAddCurrentTaskToDelayedList+0x100>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	609a      	str	r2, [r3, #8]
 80034ae:	4b2a      	ldr	r3, [pc, #168]	; (8003558 <prvAddCurrentTaskToDelayedList+0x100>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	6892      	ldr	r2, [r2, #8]
 80034b6:	60da      	str	r2, [r3, #12]
 80034b8:	4b27      	ldr	r3, [pc, #156]	; (8003558 <prvAddCurrentTaskToDelayedList+0x100>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	3204      	adds	r2, #4
 80034c2:	605a      	str	r2, [r3, #4]
 80034c4:	4b24      	ldr	r3, [pc, #144]	; (8003558 <prvAddCurrentTaskToDelayedList+0x100>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	1d1a      	adds	r2, r3, #4
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	609a      	str	r2, [r3, #8]
 80034ce:	4b22      	ldr	r3, [pc, #136]	; (8003558 <prvAddCurrentTaskToDelayedList+0x100>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a23      	ldr	r2, [pc, #140]	; (8003560 <prvAddCurrentTaskToDelayedList+0x108>)
 80034d4:	615a      	str	r2, [r3, #20]
 80034d6:	4b22      	ldr	r3, [pc, #136]	; (8003560 <prvAddCurrentTaskToDelayedList+0x108>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3301      	adds	r3, #1
 80034dc:	4a20      	ldr	r2, [pc, #128]	; (8003560 <prvAddCurrentTaskToDelayedList+0x108>)
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80034e2:	e032      	b.n	800354a <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4413      	add	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034ec:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <prvAddCurrentTaskToDelayedList+0x100>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d20f      	bcs.n	800351c <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80034fc:	4b16      	ldr	r3, [pc, #88]	; (8003558 <prvAddCurrentTaskToDelayedList+0x100>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2104      	movs	r1, #4
 8003502:	4618      	mov	r0, r3
 8003504:	f002 feec 	bl	80062e0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003508:	4b16      	ldr	r3, [pc, #88]	; (8003564 <prvAddCurrentTaskToDelayedList+0x10c>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <prvAddCurrentTaskToDelayedList+0x100>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3304      	adds	r3, #4
 8003512:	4619      	mov	r1, r3
 8003514:	4610      	mov	r0, r2
 8003516:	f7fe fcc0 	bl	8001e9a <vListInsert>
}
 800351a:	e016      	b.n	800354a <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <prvAddCurrentTaskToDelayedList+0x100>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2104      	movs	r1, #4
 8003522:	4618      	mov	r0, r3
 8003524:	f002 fedc 	bl	80062e0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003528:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <prvAddCurrentTaskToDelayedList+0x110>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <prvAddCurrentTaskToDelayedList+0x100>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3304      	adds	r3, #4
 8003532:	4619      	mov	r1, r3
 8003534:	4610      	mov	r0, r2
 8003536:	f7fe fcb0 	bl	8001e9a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800353a:	4b0c      	ldr	r3, [pc, #48]	; (800356c <prvAddCurrentTaskToDelayedList+0x114>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	429a      	cmp	r2, r3
 8003542:	d202      	bcs.n	800354a <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8003544:	4a09      	ldr	r2, [pc, #36]	; (800356c <prvAddCurrentTaskToDelayedList+0x114>)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6013      	str	r3, [r2, #0]
}
 800354a:	bf00      	nop
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000110 	.word	0x20000110
 8003558:	20000034 	.word	0x20000034
 800355c:	20000114 	.word	0x20000114
 8003560:	200000f8 	.word	0x200000f8
 8003564:	200000c8 	.word	0x200000c8
 8003568:	200000c4 	.word	0x200000c4
 800356c:	2000012c 	.word	0x2000012c

08003570 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800357a:	f000 fa47 	bl	8003a0c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <xTimerCreateTimerTask+0x54>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00b      	beq.n	800359e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003586:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <xTimerCreateTimerTask+0x58>)
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	2302      	movs	r3, #2
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	2300      	movs	r3, #0
 8003590:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003594:	490d      	ldr	r1, [pc, #52]	; (80035cc <xTimerCreateTimerTask+0x5c>)
 8003596:	480e      	ldr	r0, [pc, #56]	; (80035d0 <xTimerCreateTimerTask+0x60>)
 8003598:	f7ff f812 	bl	80025c0 <xTaskCreate>
 800359c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	603b      	str	r3, [r7, #0]
    }
 80035b6:	bf00      	nop
 80035b8:	e7fe      	b.n	80035b8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80035ba:	687b      	ldr	r3, [r7, #4]
    }
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000168 	.word	0x20000168
 80035c8:	2000016c 	.word	0x2000016c
 80035cc:	0800673c 	.word	0x0800673c
 80035d0:	08003679 	.word	0x08003679

080035d4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80035e0:	e008      	b.n	80035f4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	4413      	add	r3, r2
 80035ea:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	699a      	ldr	r2, [r3, #24]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	18d1      	adds	r1, r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f8dd 	bl	80037c0 <prvInsertTimerInActiveList>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1ea      	bne.n	80035e2 <prvReloadTimer+0xe>
        }
    }
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003622:	4b14      	ldr	r3, [pc, #80]	; (8003674 <prvProcessExpiredTimer+0x5c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3304      	adds	r3, #4
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fc6b 	bl	8001f0c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f7ff ffc3 	bl	80035d4 <prvReloadTimer>
 800364e:	e008      	b.n	8003662 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003656:	f023 0301 	bic.w	r3, r3, #1
 800365a:	b2da      	uxtb	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	4798      	blx	r3
    }
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000160 	.word	0x20000160

08003678 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003680:	f107 0308 	add.w	r3, r7, #8
 8003684:	4618      	mov	r0, r3
 8003686:	f000 f857 	bl	8003738 <prvGetNextExpireTime>
 800368a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4619      	mov	r1, r3
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f803 	bl	800369c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003696:	f000 f8d5 	bl	8003844 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800369a:	e7f1      	b.n	8003680 <prvTimerTask+0x8>

0800369c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80036a6:	f7ff f987 	bl	80029b8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036aa:	f107 0308 	add.w	r3, r7, #8
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f866 	bl	8003780 <prvSampleTimeNow>
 80036b4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d130      	bne.n	800371e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10a      	bne.n	80036d8 <prvProcessTimerOrBlockTask+0x3c>
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d806      	bhi.n	80036d8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80036ca:	f7ff f983 	bl	80029d4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80036ce:	68f9      	ldr	r1, [r7, #12]
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ffa1 	bl	8003618 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80036d6:	e024      	b.n	8003722 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <prvProcessTimerOrBlockTask+0x90>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <prvProcessTimerOrBlockTask+0x50>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <prvProcessTimerOrBlockTask+0x52>
 80036ec:	2300      	movs	r3, #0
 80036ee:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80036f0:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <prvProcessTimerOrBlockTask+0x94>)
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	4619      	mov	r1, r3
 80036fe:	f7fe ff2b 	bl	8002558 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003702:	f7ff f967 	bl	80029d4 <xTaskResumeAll>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800370c:	4b09      	ldr	r3, [pc, #36]	; (8003734 <prvProcessTimerOrBlockTask+0x98>)
 800370e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	f3bf 8f6f 	isb	sy
    }
 800371c:	e001      	b.n	8003722 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800371e:	f7ff f959 	bl	80029d4 <xTaskResumeAll>
    }
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000164 	.word	0x20000164
 8003730:	20000168 	.word	0x20000168
 8003734:	e000ed04 	.word	0xe000ed04

08003738 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003740:	4b0e      	ldr	r3, [pc, #56]	; (800377c <prvGetNextExpireTime+0x44>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <prvGetNextExpireTime+0x16>
 800374a:	2201      	movs	r2, #1
 800374c:	e000      	b.n	8003750 <prvGetNextExpireTime+0x18>
 800374e:	2200      	movs	r2, #0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800375c:	4b07      	ldr	r3, [pc, #28]	; (800377c <prvGetNextExpireTime+0x44>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e001      	b.n	800376c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800376c:	68fb      	ldr	r3, [r7, #12]
    }
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	20000160 	.word	0x20000160

08003780 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003788:	f7ff fa24 	bl	8002bd4 <xTaskGetTickCount>
 800378c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <prvSampleTimeNow+0x3c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	429a      	cmp	r2, r3
 8003796:	d205      	bcs.n	80037a4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003798:	f000 f912 	bl	80039c0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e002      	b.n	80037aa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80037aa:	4a04      	ldr	r2, [pc, #16]	; (80037bc <prvSampleTimeNow+0x3c>)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80037b0:	68fb      	ldr	r3, [r7, #12]
    }
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000170 	.word	0x20000170

080037c0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d812      	bhi.n	800380c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	1ad2      	subs	r2, r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d302      	bcc.n	80037fa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80037f4:	2301      	movs	r3, #1
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	e01b      	b.n	8003832 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <prvInsertTimerInActiveList+0x7c>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	3304      	adds	r3, #4
 8003802:	4619      	mov	r1, r3
 8003804:	4610      	mov	r0, r2
 8003806:	f7fe fb48 	bl	8001e9a <vListInsert>
 800380a:	e012      	b.n	8003832 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d206      	bcs.n	8003822 <prvInsertTimerInActiveList+0x62>
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d302      	bcc.n	8003822 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800381c:	2301      	movs	r3, #1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e007      	b.n	8003832 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003822:	4b07      	ldr	r3, [pc, #28]	; (8003840 <prvInsertTimerInActiveList+0x80>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3304      	adds	r3, #4
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f7fe fb34 	bl	8001e9a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003832:	697b      	ldr	r3, [r7, #20]
    }
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000164 	.word	0x20000164
 8003840:	20000160 	.word	0x20000160

08003844 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800384a:	e0a6      	b.n	800399a <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f2c0 80a2 	blt.w	8003998 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d004      	beq.n	800386a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	3304      	adds	r3, #4
 8003864:	4618      	mov	r0, r3
 8003866:	f7fe fb51 	bl	8001f0c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800386a:	1d3b      	adds	r3, r7, #4
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ff87 	bl	8003780 <prvSampleTimeNow>
 8003872:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	3b01      	subs	r3, #1
 8003878:	2b08      	cmp	r3, #8
 800387a:	f200 808e 	bhi.w	800399a <prvProcessReceivedCommands+0x156>
 800387e:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <prvProcessReceivedCommands+0x40>)
 8003880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003884:	080038a9 	.word	0x080038a9
 8003888:	080038a9 	.word	0x080038a9
 800388c:	08003911 	.word	0x08003911
 8003890:	08003925 	.word	0x08003925
 8003894:	0800396f 	.word	0x0800396f
 8003898:	080038a9 	.word	0x080038a9
 800389c:	080038a9 	.word	0x080038a9
 80038a0:	08003911 	.word	0x08003911
 80038a4:	08003925 	.word	0x08003925
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	18d1      	adds	r1, r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	69f8      	ldr	r0, [r7, #28]
 80038c8:	f7ff ff7a 	bl	80037c0 <prvInsertTimerInActiveList>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d063      	beq.n	800399a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	4413      	add	r3, r2
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4619      	mov	r1, r3
 80038ec:	69f8      	ldr	r0, [r7, #28]
 80038ee:	f7ff fe71 	bl	80035d4 <prvReloadTimer>
 80038f2:	e008      	b.n	8003906 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	69f8      	ldr	r0, [r7, #28]
 800390c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800390e:	e044      	b.n	800399a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	b2da      	uxtb	r2, r3
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003922:	e03a      	b.n	800399a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	b2da      	uxtb	r2, r3
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	617b      	str	r3, [r7, #20]
    }
 8003956:	bf00      	nop
 8003958:	e7fe      	b.n	8003958 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	18d1      	adds	r1, r2, r3
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	69f8      	ldr	r0, [r7, #28]
 8003968:	f7ff ff2a 	bl	80037c0 <prvInsertTimerInActiveList>
                        break;
 800396c:	e015      	b.n	800399a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d103      	bne.n	8003984 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 800397c:	69f8      	ldr	r0, [r7, #28]
 800397e:	f000 fc35 	bl	80041ec <vPortFree>
 8003982:	e00a      	b.n	800399a <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	b2da      	uxtb	r2, r3
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003996:	e000      	b.n	800399a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003998:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <prvProcessReceivedCommands+0x178>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f107 0108 	add.w	r1, r7, #8
 80039a2:	2200      	movs	r2, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe fbe3 	bl	8002170 <xQueueReceive>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f47f af4d 	bne.w	800384c <prvProcessReceivedCommands+0x8>
        }
    }
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000168 	.word	0x20000168

080039c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039c6:	e009      	b.n	80039dc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <prvSwitchTimerLists+0x44>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80039d2:	f04f 31ff 	mov.w	r1, #4294967295
 80039d6:	6838      	ldr	r0, [r7, #0]
 80039d8:	f7ff fe1e 	bl	8003618 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039dc:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <prvSwitchTimerLists+0x44>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <prvSwitchTimerLists+0x44>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <prvSwitchTimerLists+0x48>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <prvSwitchTimerLists+0x44>)
 80039f2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80039f4:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <prvSwitchTimerLists+0x48>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6013      	str	r3, [r2, #0]
    }
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000160 	.word	0x20000160
 8003a08:	20000164 	.word	0x20000164

08003a0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003a10:	f000 f9e0 	bl	8003dd4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003a14:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <prvCheckForValidListAndQueue+0x54>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d11d      	bne.n	8003a58 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003a1c:	4811      	ldr	r0, [pc, #68]	; (8003a64 <prvCheckForValidListAndQueue+0x58>)
 8003a1e:	f7fe fa0f 	bl	8001e40 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003a22:	4811      	ldr	r0, [pc, #68]	; (8003a68 <prvCheckForValidListAndQueue+0x5c>)
 8003a24:	f7fe fa0c 	bl	8001e40 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003a28:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <prvCheckForValidListAndQueue+0x60>)
 8003a2a:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <prvCheckForValidListAndQueue+0x58>)
 8003a2c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003a2e:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <prvCheckForValidListAndQueue+0x64>)
 8003a30:	4a0d      	ldr	r2, [pc, #52]	; (8003a68 <prvCheckForValidListAndQueue+0x5c>)
 8003a32:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a34:	2200      	movs	r2, #0
 8003a36:	210c      	movs	r1, #12
 8003a38:	200a      	movs	r0, #10
 8003a3a:	f7fe fb21 	bl	8002080 <xQueueGenericCreate>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	4a07      	ldr	r2, [pc, #28]	; (8003a60 <prvCheckForValidListAndQueue+0x54>)
 8003a42:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <prvCheckForValidListAndQueue+0x54>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a4c:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <prvCheckForValidListAndQueue+0x54>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4908      	ldr	r1, [pc, #32]	; (8003a74 <prvCheckForValidListAndQueue+0x68>)
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fd2a 	bl	80024ac <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003a58:	f000 f9ec 	bl	8003e34 <vPortExitCritical>
    }
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20000168 	.word	0x20000168
 8003a64:	20000138 	.word	0x20000138
 8003a68:	2000014c 	.word	0x2000014c
 8003a6c:	20000160 	.word	0x20000160
 8003a70:	20000164 	.word	0x20000164
 8003a74:	08006744 	.word	0x08006744

08003a78 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3b04      	subs	r3, #4
 8003a88:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a90:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3b04      	subs	r3, #4
 8003a96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f023 0201 	bic.w	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3b04      	subs	r3, #4
 8003aa6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003aa8:	4a0c      	ldr	r2, [pc, #48]	; (8003adc <pxPortInitialiseStack+0x64>)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3b14      	subs	r3, #20
 8003ab2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3b04      	subs	r3, #4
 8003abe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f06f 0202 	mvn.w	r2, #2
 8003ac6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3b20      	subs	r3, #32
 8003acc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003ace:	68fb      	ldr	r3, [r7, #12]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	08003ae1 	.word	0x08003ae1

08003ae0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003aea:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <prvTaskExitError+0x54>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d00a      	beq.n	8003b0a <prvTaskExitError+0x2a>
        __asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	60fb      	str	r3, [r7, #12]
    }
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <prvTaskExitError+0x28>
        __asm volatile
 8003b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	60bb      	str	r3, [r7, #8]
    }
 8003b1c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b1e:	bf00      	nop
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0fc      	beq.n	8003b20 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b26:	bf00      	nop
 8003b28:	bf00      	nop
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	20000010 	.word	0x20000010
	...

08003b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003b40:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <pxCurrentTCBConst2>)
 8003b42:	6819      	ldr	r1, [r3, #0]
 8003b44:	6808      	ldr	r0, [r1, #0]
 8003b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4a:	f380 8809 	msr	PSP, r0
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f04f 0000 	mov.w	r0, #0
 8003b56:	f380 8811 	msr	BASEPRI, r0
 8003b5a:	4770      	bx	lr
 8003b5c:	f3af 8000 	nop.w

08003b60 <pxCurrentTCBConst2>:
 8003b60:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop

08003b68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003b68:	4808      	ldr	r0, [pc, #32]	; (8003b8c <prvPortStartFirstTask+0x24>)
 8003b6a:	6800      	ldr	r0, [r0, #0]
 8003b6c:	6800      	ldr	r0, [r0, #0]
 8003b6e:	f380 8808 	msr	MSP, r0
 8003b72:	f04f 0000 	mov.w	r0, #0
 8003b76:	f380 8814 	msr	CONTROL, r0
 8003b7a:	b662      	cpsie	i
 8003b7c:	b661      	cpsie	f
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	df00      	svc	0
 8003b88:	bf00      	nop
 8003b8a:	0000      	.short	0x0000
 8003b8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop

08003b94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b9a:	4b46      	ldr	r3, [pc, #280]	; (8003cb4 <xPortStartScheduler+0x120>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a46      	ldr	r2, [pc, #280]	; (8003cb8 <xPortStartScheduler+0x124>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d10a      	bne.n	8003bba <xPortStartScheduler+0x26>
        __asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	613b      	str	r3, [r7, #16]
    }
 8003bb6:	bf00      	nop
 8003bb8:	e7fe      	b.n	8003bb8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bba:	4b3e      	ldr	r3, [pc, #248]	; (8003cb4 <xPortStartScheduler+0x120>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a3f      	ldr	r2, [pc, #252]	; (8003cbc <xPortStartScheduler+0x128>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d10a      	bne.n	8003bda <xPortStartScheduler+0x46>
        __asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60fb      	str	r3, [r7, #12]
    }
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bda:	4b39      	ldr	r3, [pc, #228]	; (8003cc0 <xPortStartScheduler+0x12c>)
 8003bdc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	22ff      	movs	r2, #255	; 0xff
 8003bea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	4b31      	ldr	r3, [pc, #196]	; (8003cc4 <xPortStartScheduler+0x130>)
 8003c00:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c02:	4b31      	ldr	r3, [pc, #196]	; (8003cc8 <xPortStartScheduler+0x134>)
 8003c04:	2207      	movs	r2, #7
 8003c06:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c08:	e009      	b.n	8003c1e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003c0a:	4b2f      	ldr	r3, [pc, #188]	; (8003cc8 <xPortStartScheduler+0x134>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	4a2d      	ldr	r2, [pc, #180]	; (8003cc8 <xPortStartScheduler+0x134>)
 8003c12:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c26:	2b80      	cmp	r3, #128	; 0x80
 8003c28:	d0ef      	beq.n	8003c0a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c2a:	4b27      	ldr	r3, [pc, #156]	; (8003cc8 <xPortStartScheduler+0x134>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f1c3 0307 	rsb	r3, r3, #7
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d00a      	beq.n	8003c4c <xPortStartScheduler+0xb8>
        __asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	60bb      	str	r3, [r7, #8]
    }
 8003c48:	bf00      	nop
 8003c4a:	e7fe      	b.n	8003c4a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c4c:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <xPortStartScheduler+0x134>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <xPortStartScheduler+0x134>)
 8003c54:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c56:	4b1c      	ldr	r3, [pc, #112]	; (8003cc8 <xPortStartScheduler+0x134>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c5e:	4a1a      	ldr	r2, [pc, #104]	; (8003cc8 <xPortStartScheduler+0x134>)
 8003c60:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003c6a:	4b18      	ldr	r3, [pc, #96]	; (8003ccc <xPortStartScheduler+0x138>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <xPortStartScheduler+0x138>)
 8003c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c74:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <xPortStartScheduler+0x138>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <xPortStartScheduler+0x138>)
 8003c7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c80:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003c82:	f000 f963 	bl	8003f4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003c86:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <xPortStartScheduler+0x13c>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003c8c:	f000 f982 	bl	8003f94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c90:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <xPortStartScheduler+0x140>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a0f      	ldr	r2, [pc, #60]	; (8003cd4 <xPortStartScheduler+0x140>)
 8003c96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c9a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003c9c:	f7ff ff64 	bl	8003b68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ca0:	f7ff f8d4 	bl	8002e4c <vTaskSwitchContext>
    prvTaskExitError();
 8003ca4:	f7ff ff1c 	bl	8003ae0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	e000ed00 	.word	0xe000ed00
 8003cb8:	410fc271 	.word	0x410fc271
 8003cbc:	410fc270 	.word	0x410fc270
 8003cc0:	e000e400 	.word	0xe000e400
 8003cc4:	20000174 	.word	0x20000174
 8003cc8:	20000178 	.word	0x20000178
 8003ccc:	e000ed20 	.word	0xe000ed20
 8003cd0:	20000010 	.word	0x20000010
 8003cd4:	e000ef34 	.word	0xe000ef34

08003cd8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003cde:	4b37      	ldr	r3, [pc, #220]	; (8003dbc <vInitPrioGroupValue+0xe4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a37      	ldr	r2, [pc, #220]	; (8003dc0 <vInitPrioGroupValue+0xe8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d10a      	bne.n	8003cfe <vInitPrioGroupValue+0x26>
        __asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	613b      	str	r3, [r7, #16]
    }
 8003cfa:	bf00      	nop
 8003cfc:	e7fe      	b.n	8003cfc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003cfe:	4b2f      	ldr	r3, [pc, #188]	; (8003dbc <vInitPrioGroupValue+0xe4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a30      	ldr	r2, [pc, #192]	; (8003dc4 <vInitPrioGroupValue+0xec>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d10a      	bne.n	8003d1e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	60fb      	str	r3, [r7, #12]
    }
 8003d1a:	bf00      	nop
 8003d1c:	e7fe      	b.n	8003d1c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d1e:	4b2a      	ldr	r3, [pc, #168]	; (8003dc8 <vInitPrioGroupValue+0xf0>)
 8003d20:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	22ff      	movs	r2, #255	; 0xff
 8003d2e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <vInitPrioGroupValue+0xf4>)
 8003d44:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d46:	4b22      	ldr	r3, [pc, #136]	; (8003dd0 <vInitPrioGroupValue+0xf8>)
 8003d48:	2207      	movs	r2, #7
 8003d4a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d4c:	e009      	b.n	8003d62 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003d4e:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <vInitPrioGroupValue+0xf8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	4a1e      	ldr	r2, [pc, #120]	; (8003dd0 <vInitPrioGroupValue+0xf8>)
 8003d56:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6a:	2b80      	cmp	r3, #128	; 0x80
 8003d6c:	d0ef      	beq.n	8003d4e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d6e:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <vInitPrioGroupValue+0xf8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f1c3 0307 	rsb	r3, r3, #7
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d00a      	beq.n	8003d90 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8003d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	60bb      	str	r3, [r7, #8]
    }
 8003d8c:	bf00      	nop
 8003d8e:	e7fe      	b.n	8003d8e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d90:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <vInitPrioGroupValue+0xf8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	4a0e      	ldr	r2, [pc, #56]	; (8003dd0 <vInitPrioGroupValue+0xf8>)
 8003d98:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <vInitPrioGroupValue+0xf8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003da2:	4a0b      	ldr	r2, [pc, #44]	; (8003dd0 <vInitPrioGroupValue+0xf8>)
 8003da4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003dae:	bf00      	nop
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	e000ed00 	.word	0xe000ed00
 8003dc0:	410fc271 	.word	0x410fc271
 8003dc4:	410fc270 	.word	0x410fc270
 8003dc8:	e000e400 	.word	0xe000e400
 8003dcc:	20000174 	.word	0x20000174
 8003dd0:	20000178 	.word	0x20000178

08003dd4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
        __asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	607b      	str	r3, [r7, #4]
    }
 8003dec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003dee:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <vPortEnterCritical+0x58>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3301      	adds	r3, #1
 8003df4:	4a0d      	ldr	r2, [pc, #52]	; (8003e2c <vPortEnterCritical+0x58>)
 8003df6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <vPortEnterCritical+0x58>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d10f      	bne.n	8003e20 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <vPortEnterCritical+0x5c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <vPortEnterCritical+0x4c>
        __asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	603b      	str	r3, [r7, #0]
    }
 8003e1c:	bf00      	nop
 8003e1e:	e7fe      	b.n	8003e1e <vPortEnterCritical+0x4a>
    }
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	20000010 	.word	0x20000010
 8003e30:	e000ed04 	.word	0xe000ed04

08003e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003e3a:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <vPortExitCritical+0x50>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <vPortExitCritical+0x24>
        __asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	607b      	str	r3, [r7, #4]
    }
 8003e54:	bf00      	nop
 8003e56:	e7fe      	b.n	8003e56 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <vPortExitCritical+0x50>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <vPortExitCritical+0x50>)
 8003e60:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003e62:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <vPortExitCritical+0x50>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d105      	bne.n	8003e76 <vPortExitCritical+0x42>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003e74:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000010 	.word	0x20000010
	...

08003e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003e90:	f3ef 8009 	mrs	r0, PSP
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <pxCurrentTCBConst>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	f01e 0f10 	tst.w	lr, #16
 8003ea0:	bf08      	it	eq
 8003ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eaa:	6010      	str	r0, [r2, #0]
 8003eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003eb4:	f380 8811 	msr	BASEPRI, r0
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f7fe ffc4 	bl	8002e4c <vTaskSwitchContext>
 8003ec4:	f04f 0000 	mov.w	r0, #0
 8003ec8:	f380 8811 	msr	BASEPRI, r0
 8003ecc:	bc09      	pop	{r0, r3}
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	6808      	ldr	r0, [r1, #0]
 8003ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed6:	f01e 0f10 	tst.w	lr, #16
 8003eda:	bf08      	it	eq
 8003edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ee0:	f380 8809 	msr	PSP, r0
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	f3af 8000 	nop.w

08003ef0 <pxCurrentTCBConst>:
 8003ef0:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop

08003ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
        __asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	607b      	str	r3, [r7, #4]
    }
 8003f10:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003f12:	f002 f889 	bl	8006028 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003f16:	f7fe fe7f 	bl	8002c18 <xTaskIncrementTick>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d006      	beq.n	8003f2e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003f20:	f002 f8e0 	bl	80060e4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f24:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <SysTick_Handler+0x50>)
 8003f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e001      	b.n	8003f32 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003f2e:	f002 f8bd 	bl	80060ac <SEGGER_SYSVIEW_RecordExitISR>
 8003f32:	2300      	movs	r3, #0
 8003f34:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	f383 8811 	msr	BASEPRI, r3
    }
 8003f3c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	e000ed04 	.word	0xe000ed04

08003f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <vPortSetupTimerInterrupt+0x34>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <vPortSetupTimerInterrupt+0x38>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <vPortSetupTimerInterrupt+0x3c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <vPortSetupTimerInterrupt+0x40>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	099b      	lsrs	r3, r3, #6
 8003f68:	4a09      	ldr	r2, [pc, #36]	; (8003f90 <vPortSetupTimerInterrupt+0x44>)
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f6e:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <vPortSetupTimerInterrupt+0x34>)
 8003f70:	2207      	movs	r2, #7
 8003f72:	601a      	str	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	e000e010 	.word	0xe000e010
 8003f84:	e000e018 	.word	0xe000e018
 8003f88:	20000000 	.word	0x20000000
 8003f8c:	10624dd3 	.word	0x10624dd3
 8003f90:	e000e014 	.word	0xe000e014

08003f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003f94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003fa4 <vPortEnableVFP+0x10>
 8003f98:	6801      	ldr	r1, [r0, #0]
 8003f9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003f9e:	6001      	str	r1, [r0, #0]
 8003fa0:	4770      	bx	lr
 8003fa2:	0000      	.short	0x0000
 8003fa4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop

08003fac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003fb2:	f3ef 8305 	mrs	r3, IPSR
 8003fb6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	d914      	bls.n	8003fe8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003fbe:	4a17      	ldr	r2, [pc, #92]	; (800401c <vPortValidateInterruptPriority+0x70>)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003fc8:	4b15      	ldr	r3, [pc, #84]	; (8004020 <vPortValidateInterruptPriority+0x74>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	7afa      	ldrb	r2, [r7, #11]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d20a      	bcs.n	8003fe8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	607b      	str	r3, [r7, #4]
    }
 8003fe4:	bf00      	nop
 8003fe6:	e7fe      	b.n	8003fe6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003fe8:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <vPortValidateInterruptPriority+0x78>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <vPortValidateInterruptPriority+0x7c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d90a      	bls.n	800400e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	603b      	str	r3, [r7, #0]
    }
 800400a:	bf00      	nop
 800400c:	e7fe      	b.n	800400c <vPortValidateInterruptPriority+0x60>
    }
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	e000e3f0 	.word	0xe000e3f0
 8004020:	20000174 	.word	0x20000174
 8004024:	e000ed0c 	.word	0xe000ed0c
 8004028:	20000178 	.word	0x20000178

0800402c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	; 0x28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004038:	f7fe fcbe 	bl	80029b8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800403c:	4b65      	ldr	r3, [pc, #404]	; (80041d4 <pvPortMalloc+0x1a8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004044:	f000 f934 	bl	80042b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004048:	4b63      	ldr	r3, [pc, #396]	; (80041d8 <pvPortMalloc+0x1ac>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4013      	ands	r3, r2
 8004050:	2b00      	cmp	r3, #0
 8004052:	f040 80a7 	bne.w	80041a4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02d      	beq.n	80040b8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800405c:	2208      	movs	r2, #8
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	429a      	cmp	r2, r3
 8004066:	d227      	bcs.n	80040b8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004068:	2208      	movs	r2, #8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	2b00      	cmp	r3, #0
 8004078:	d021      	beq.n	80040be <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f023 0307 	bic.w	r3, r3, #7
 8004080:	3308      	adds	r3, #8
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	429a      	cmp	r2, r3
 8004086:	d214      	bcs.n	80040b2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f023 0307 	bic.w	r3, r3, #7
 800408e:	3308      	adds	r3, #8
 8004090:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	2b00      	cmp	r3, #0
 800409a:	d010      	beq.n	80040be <pvPortMalloc+0x92>
        __asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	617b      	str	r3, [r7, #20]
    }
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040b6:	e002      	b.n	80040be <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	e000      	b.n	80040c0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d06e      	beq.n	80041a4 <pvPortMalloc+0x178>
 80040c6:	4b45      	ldr	r3, [pc, #276]	; (80041dc <pvPortMalloc+0x1b0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d869      	bhi.n	80041a4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80040d0:	4b43      	ldr	r3, [pc, #268]	; (80041e0 <pvPortMalloc+0x1b4>)
 80040d2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80040d4:	4b42      	ldr	r3, [pc, #264]	; (80041e0 <pvPortMalloc+0x1b4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040da:	e004      	b.n	80040e6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d903      	bls.n	80040f8 <pvPortMalloc+0xcc>
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f1      	bne.n	80040dc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80040f8:	4b36      	ldr	r3, [pc, #216]	; (80041d4 <pvPortMalloc+0x1a8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fe:	429a      	cmp	r2, r3
 8004100:	d050      	beq.n	80041a4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2208      	movs	r2, #8
 8004108:	4413      	add	r3, r2
 800410a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	1ad2      	subs	r2, r2, r3
 800411c:	2308      	movs	r3, #8
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	429a      	cmp	r2, r3
 8004122:	d91f      	bls.n	8004164 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <pvPortMalloc+0x120>
        __asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	613b      	str	r3, [r7, #16]
    }
 8004148:	bf00      	nop
 800414a:	e7fe      	b.n	800414a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	1ad2      	subs	r2, r2, r3
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800415e:	69b8      	ldr	r0, [r7, #24]
 8004160:	f000 f908 	bl	8004374 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004164:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <pvPortMalloc+0x1b0>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	4a1b      	ldr	r2, [pc, #108]	; (80041dc <pvPortMalloc+0x1b0>)
 8004170:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004172:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <pvPortMalloc+0x1b0>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <pvPortMalloc+0x1b8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d203      	bcs.n	8004186 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800417e:	4b17      	ldr	r3, [pc, #92]	; (80041dc <pvPortMalloc+0x1b0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a18      	ldr	r2, [pc, #96]	; (80041e4 <pvPortMalloc+0x1b8>)
 8004184:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <pvPortMalloc+0x1ac>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	431a      	orrs	r2, r3
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800419a:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <pvPortMalloc+0x1bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3301      	adds	r3, #1
 80041a0:	4a11      	ldr	r2, [pc, #68]	; (80041e8 <pvPortMalloc+0x1bc>)
 80041a2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80041a4:	f7fe fc16 	bl	80029d4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <pvPortMalloc+0x19c>
        __asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	60fb      	str	r3, [r7, #12]
    }
 80041c4:	bf00      	nop
 80041c6:	e7fe      	b.n	80041c6 <pvPortMalloc+0x19a>
    return pvReturn;
 80041c8:	69fb      	ldr	r3, [r7, #28]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3728      	adds	r7, #40	; 0x28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20012d84 	.word	0x20012d84
 80041d8:	20012d98 	.word	0x20012d98
 80041dc:	20012d88 	.word	0x20012d88
 80041e0:	20012d7c 	.word	0x20012d7c
 80041e4:	20012d8c 	.word	0x20012d8c
 80041e8:	20012d90 	.word	0x20012d90

080041ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d04d      	beq.n	800429a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80041fe:	2308      	movs	r3, #8
 8004200:	425b      	negs	r3, r3
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4413      	add	r3, r2
 8004206:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <vPortFree+0xb8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <vPortFree+0x44>
        __asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	60fb      	str	r3, [r7, #12]
    }
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <vPortFree+0x62>
        __asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	60bb      	str	r3, [r7, #8]
    }
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <vPortFree+0xb8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4013      	ands	r3, r2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01e      	beq.n	800429a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d11a      	bne.n	800429a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <vPortFree+0xb8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	43db      	mvns	r3, r3
 800426e:	401a      	ands	r2, r3
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004274:	f7fe fba0 	bl	80029b8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <vPortFree+0xbc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4413      	add	r3, r2
 8004282:	4a09      	ldr	r2, [pc, #36]	; (80042a8 <vPortFree+0xbc>)
 8004284:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004286:	6938      	ldr	r0, [r7, #16]
 8004288:	f000 f874 	bl	8004374 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800428c:	4b07      	ldr	r3, [pc, #28]	; (80042ac <vPortFree+0xc0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3301      	adds	r3, #1
 8004292:	4a06      	ldr	r2, [pc, #24]	; (80042ac <vPortFree+0xc0>)
 8004294:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004296:	f7fe fb9d 	bl	80029d4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800429a:	bf00      	nop
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20012d98 	.word	0x20012d98
 80042a8:	20012d88 	.word	0x20012d88
 80042ac:	20012d94 	.word	0x20012d94

080042b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042b6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80042ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80042bc:	4b27      	ldr	r3, [pc, #156]	; (800435c <prvHeapInit+0xac>)
 80042be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00c      	beq.n	80042e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3307      	adds	r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0307 	bic.w	r3, r3, #7
 80042d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	4a1f      	ldr	r2, [pc, #124]	; (800435c <prvHeapInit+0xac>)
 80042e0:	4413      	add	r3, r2
 80042e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042e8:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <prvHeapInit+0xb0>)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80042ee:	4b1c      	ldr	r3, [pc, #112]	; (8004360 <prvHeapInit+0xb0>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	4413      	add	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80042fc:	2208      	movs	r2, #8
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0307 	bic.w	r3, r3, #7
 800430a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4a15      	ldr	r2, [pc, #84]	; (8004364 <prvHeapInit+0xb4>)
 8004310:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004312:	4b14      	ldr	r3, [pc, #80]	; (8004364 <prvHeapInit+0xb4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2200      	movs	r2, #0
 8004318:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <prvHeapInit+0xb4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	1ad2      	subs	r2, r2, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <prvHeapInit+0xb4>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <prvHeapInit+0xb8>)
 800433e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	4a09      	ldr	r2, [pc, #36]	; (800436c <prvHeapInit+0xbc>)
 8004346:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <prvHeapInit+0xc0>)
 800434a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800434e:	601a      	str	r2, [r3, #0]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	2000017c 	.word	0x2000017c
 8004360:	20012d7c 	.word	0x20012d7c
 8004364:	20012d84 	.word	0x20012d84
 8004368:	20012d8c 	.word	0x20012d8c
 800436c:	20012d88 	.word	0x20012d88
 8004370:	20012d98 	.word	0x20012d98

08004374 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800437c:	4b28      	ldr	r3, [pc, #160]	; (8004420 <prvInsertBlockIntoFreeList+0xac>)
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e002      	b.n	8004388 <prvInsertBlockIntoFreeList+0x14>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	429a      	cmp	r2, r3
 8004390:	d8f7      	bhi.n	8004382 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	4413      	add	r3, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d108      	bne.n	80043b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	441a      	add	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	441a      	add	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d118      	bne.n	80043fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b15      	ldr	r3, [pc, #84]	; (8004424 <prvInsertBlockIntoFreeList+0xb0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d00d      	beq.n	80043f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	441a      	add	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	e008      	b.n	8004404 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043f2:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <prvInsertBlockIntoFreeList+0xb0>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	e003      	b.n	8004404 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	d002      	beq.n	8004412 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20012d7c 	.word	0x20012d7c
 8004424:	20012d84 	.word	0x20012d84

08004428 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800442c:	4803      	ldr	r0, [pc, #12]	; (800443c <_cbSendSystemDesc+0x14>)
 800442e:	f001 fda5 	bl	8005f7c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004432:	4803      	ldr	r0, [pc, #12]	; (8004440 <_cbSendSystemDesc+0x18>)
 8004434:	f001 fda2 	bl	8005f7c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004438:	bf00      	nop
 800443a:	bd80      	pop	{r7, pc}
 800443c:	0800674c 	.word	0x0800674c
 8004440:	0800678c 	.word	0x0800678c

08004444 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004448:	4b06      	ldr	r3, [pc, #24]	; (8004464 <SEGGER_SYSVIEW_Conf+0x20>)
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <SEGGER_SYSVIEW_Conf+0x20>)
 800444e:	6819      	ldr	r1, [r3, #0]
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <SEGGER_SYSVIEW_Conf+0x24>)
 8004452:	4a06      	ldr	r2, [pc, #24]	; (800446c <SEGGER_SYSVIEW_Conf+0x28>)
 8004454:	f001 f910 	bl	8005678 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004458:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800445c:	f001 f950 	bl	8005700 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004460:	bf00      	nop
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000000 	.word	0x20000000
 8004468:	08004429 	.word	0x08004429
 800446c:	08006820 	.word	0x08006820

08004470 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004472:	b085      	sub	sp, #20
 8004474:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004476:	2300      	movs	r3, #0
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	e033      	b.n	80044e4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800447c:	491e      	ldr	r1, [pc, #120]	; (80044f8 <_cbSendTaskList+0x88>)
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	491a      	ldr	r1, [pc, #104]	; (80044f8 <_cbSendTaskList+0x88>)
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	3304      	adds	r3, #4
 800449c:	6819      	ldr	r1, [r3, #0]
 800449e:	4c16      	ldr	r4, [pc, #88]	; (80044f8 <_cbSendTaskList+0x88>)
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4423      	add	r3, r4
 80044ac:	3308      	adds	r3, #8
 80044ae:	681c      	ldr	r4, [r3, #0]
 80044b0:	4d11      	ldr	r5, [pc, #68]	; (80044f8 <_cbSendTaskList+0x88>)
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	442b      	add	r3, r5
 80044be:	330c      	adds	r3, #12
 80044c0:	681d      	ldr	r5, [r3, #0]
 80044c2:	4e0d      	ldr	r6, [pc, #52]	; (80044f8 <_cbSendTaskList+0x88>)
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4433      	add	r3, r6
 80044d0:	3310      	adds	r3, #16
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	462b      	mov	r3, r5
 80044d8:	4622      	mov	r2, r4
 80044da:	f000 f8b5 	bl	8004648 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3301      	adds	r3, #1
 80044e2:	607b      	str	r3, [r7, #4]
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <_cbSendTaskList+0x8c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d3c6      	bcc.n	800447c <_cbSendTaskList+0xc>
  }
}
 80044ee:	bf00      	nop
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044f8:	20012d9c 	.word	0x20012d9c
 80044fc:	20012e3c 	.word	0x20012e3c

08004500 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004500:	b5b0      	push	{r4, r5, r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004506:	f7fe fb75 	bl	8002bf4 <xTaskGetTickCountFromISR>
 800450a:	4603      	mov	r3, r0
 800450c:	461a      	mov	r2, r3
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004516:	e9d7 0100 	ldrd	r0, r1, [r7]
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	f04f 0400 	mov.w	r4, #0
 8004522:	f04f 0500 	mov.w	r5, #0
 8004526:	015d      	lsls	r5, r3, #5
 8004528:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800452c:	0154      	lsls	r4, r2, #5
 800452e:	4622      	mov	r2, r4
 8004530:	462b      	mov	r3, r5
 8004532:	1a12      	subs	r2, r2, r0
 8004534:	eb63 0301 	sbc.w	r3, r3, r1
 8004538:	f04f 0400 	mov.w	r4, #0
 800453c:	f04f 0500 	mov.w	r5, #0
 8004540:	009d      	lsls	r5, r3, #2
 8004542:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004546:	0094      	lsls	r4, r2, #2
 8004548:	4622      	mov	r2, r4
 800454a:	462b      	mov	r3, r5
 800454c:	1812      	adds	r2, r2, r0
 800454e:	eb41 0303 	adc.w	r3, r1, r3
 8004552:	f04f 0000 	mov.w	r0, #0
 8004556:	f04f 0100 	mov.w	r1, #0
 800455a:	00d9      	lsls	r1, r3, #3
 800455c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004560:	00d0      	lsls	r0, r2, #3
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800456a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800456e:	4610      	mov	r0, r2
 8004570:	4619      	mov	r1, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bdb0      	pop	{r4, r5, r7, pc}

08004578 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004586:	2205      	movs	r2, #5
 8004588:	492b      	ldr	r1, [pc, #172]	; (8004638 <SYSVIEW_AddTask+0xc0>)
 800458a:	68b8      	ldr	r0, [r7, #8]
 800458c:	f002 f888 	bl	80066a0 <memcmp>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d04b      	beq.n	800462e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004596:	4b29      	ldr	r3, [pc, #164]	; (800463c <SYSVIEW_AddTask+0xc4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b07      	cmp	r3, #7
 800459c:	d903      	bls.n	80045a6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800459e:	4828      	ldr	r0, [pc, #160]	; (8004640 <SYSVIEW_AddTask+0xc8>)
 80045a0:	f001 fffe 	bl	80065a0 <SEGGER_SYSVIEW_Warn>
    return;
 80045a4:	e044      	b.n	8004630 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80045a6:	4b25      	ldr	r3, [pc, #148]	; (800463c <SYSVIEW_AddTask+0xc4>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4926      	ldr	r1, [pc, #152]	; (8004644 <SYSVIEW_AddTask+0xcc>)
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80045ba:	4b20      	ldr	r3, [pc, #128]	; (800463c <SYSVIEW_AddTask+0xc4>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4921      	ldr	r1, [pc, #132]	; (8004644 <SYSVIEW_AddTask+0xcc>)
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	3304      	adds	r3, #4
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80045d0:	4b1a      	ldr	r3, [pc, #104]	; (800463c <SYSVIEW_AddTask+0xc4>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	491b      	ldr	r1, [pc, #108]	; (8004644 <SYSVIEW_AddTask+0xcc>)
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	3308      	adds	r3, #8
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80045e6:	4b15      	ldr	r3, [pc, #84]	; (800463c <SYSVIEW_AddTask+0xc4>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	4916      	ldr	r1, [pc, #88]	; (8004644 <SYSVIEW_AddTask+0xcc>)
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	330c      	adds	r3, #12
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80045fc:	4b0f      	ldr	r3, [pc, #60]	; (800463c <SYSVIEW_AddTask+0xc4>)
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	4910      	ldr	r1, [pc, #64]	; (8004644 <SYSVIEW_AddTask+0xcc>)
 8004602:	4613      	mov	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	3310      	adds	r3, #16
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <SYSVIEW_AddTask+0xc4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3301      	adds	r3, #1
 8004618:	4a08      	ldr	r2, [pc, #32]	; (800463c <SYSVIEW_AddTask+0xc4>)
 800461a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f80e 	bl	8004648 <SYSVIEW_SendTaskInfo>
 800462c:	e000      	b.n	8004630 <SYSVIEW_AddTask+0xb8>
    return;
 800462e:	bf00      	nop

}
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	0800679c 	.word	0x0800679c
 800463c:	20012e3c 	.word	0x20012e3c
 8004640:	080067a4 	.word	0x080067a4
 8004644:	20012d9c 	.word	0x20012d9c

08004648 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004648:	b580      	push	{r7, lr}
 800464a:	b08a      	sub	sp, #40	; 0x28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004656:	f107 0314 	add.w	r3, r7, #20
 800465a:	2214      	movs	r2, #20
 800465c:	2100      	movs	r1, #0
 800465e:	4618      	mov	r0, r3
 8004660:	f002 f83a 	bl	80066d8 <memset>
  TaskInfo.TaskID     = TaskID;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004678:	f107 0314 	add.w	r3, r7, #20
 800467c:	4618      	mov	r0, r3
 800467e:	f001 fb85 	bl	8005d8c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004682:	bf00      	nop
 8004684:	3728      	adds	r7, #40	; 0x28
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004692:	4b26      	ldr	r3, [pc, #152]	; (800472c <_DoInit+0xa0>)
 8004694:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004696:	22a8      	movs	r2, #168	; 0xa8
 8004698:	2100      	movs	r1, #0
 800469a:	6838      	ldr	r0, [r7, #0]
 800469c:	f002 f81c 	bl	80066d8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2203      	movs	r2, #3
 80046a4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2203      	movs	r2, #3
 80046aa:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	4a20      	ldr	r2, [pc, #128]	; (8004730 <_DoInit+0xa4>)
 80046b0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	4a1f      	ldr	r2, [pc, #124]	; (8004734 <_DoInit+0xa8>)
 80046b6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046be:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2200      	movs	r2, #0
 80046c4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2200      	movs	r2, #0
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2200      	movs	r2, #0
 80046d0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	4a16      	ldr	r2, [pc, #88]	; (8004730 <_DoInit+0xa4>)
 80046d6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	4a17      	ldr	r2, [pc, #92]	; (8004738 <_DoInit+0xac>)
 80046dc:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2210      	movs	r2, #16
 80046e2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2200      	movs	r2, #0
 80046e8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2200      	movs	r2, #0
 80046ee:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2200      	movs	r2, #0
 80046f4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80046f6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80046fa:	2300      	movs	r3, #0
 80046fc:	607b      	str	r3, [r7, #4]
 80046fe:	e00c      	b.n	800471a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f1c3 030f 	rsb	r3, r3, #15
 8004706:	4a0d      	ldr	r2, [pc, #52]	; (800473c <_DoInit+0xb0>)
 8004708:	5cd1      	ldrb	r1, [r2, r3]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4413      	add	r3, r2
 8004710:	460a      	mov	r2, r1
 8004712:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3301      	adds	r3, #1
 8004718:	607b      	str	r3, [r7, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b0f      	cmp	r3, #15
 800471e:	d9ef      	bls.n	8004700 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004720:	f3bf 8f5f 	dmb	sy
}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20014408 	.word	0x20014408
 8004730:	080067f4 	.word	0x080067f4
 8004734:	20012e40 	.word	0x20012e40
 8004738:	20013240 	.word	0x20013240
 800473c:	08006828 	.word	0x08006828

08004740 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004740:	b580      	push	{r7, lr}
 8004742:	b08c      	sub	sp, #48	; 0x30
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800474c:	4b3e      	ldr	r3, [pc, #248]	; (8004848 <SEGGER_RTT_ReadNoLock+0x108>)
 800474e:	623b      	str	r3, [r7, #32]
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <SEGGER_RTT_ReadNoLock+0x1e>
 800475a:	f7ff ff97 	bl	800468c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4613      	mov	r3, r2
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4413      	add	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	3360      	adds	r3, #96	; 0x60
 800476a:	4a37      	ldr	r2, [pc, #220]	; (8004848 <SEGGER_RTT_ReadNoLock+0x108>)
 800476c:	4413      	add	r3, r2
 800476e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004780:	2300      	movs	r3, #0
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	429a      	cmp	r2, r3
 800478a:	d92b      	bls.n	80047e4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4293      	cmp	r3, r2
 800479c:	bf28      	it	cs
 800479e:	4613      	movcs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	4413      	add	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	6939      	ldr	r1, [r7, #16]
 80047b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047b2:	f001 ff83 	bl	80066bc <memcpy>
    NumBytesRead += NumBytesRem;
 80047b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	4413      	add	r3, r2
 80047bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80047be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	4413      	add	r3, r2
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80047ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	4413      	add	r3, r2
 80047d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047dc:	429a      	cmp	r2, r3
 80047de:	d101      	bne.n	80047e4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80047e0:	2300      	movs	r3, #0
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4293      	cmp	r3, r2
 80047f2:	bf28      	it	cs
 80047f4:	4613      	movcs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d019      	beq.n	8004832 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	4413      	add	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	6939      	ldr	r1, [r7, #16]
 800480c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800480e:	f001 ff55 	bl	80066bc <memcpy>
    NumBytesRead += NumBytesRem;
 8004812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	4413      	add	r3, r2
 8004818:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800481a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	4413      	add	r3, r2
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800482a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	4413      	add	r3, r2
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800483c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004840:	4618      	mov	r0, r3
 8004842:	3730      	adds	r7, #48	; 0x30
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20014408 	.word	0x20014408

0800484c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800485a:	4b3d      	ldr	r3, [pc, #244]	; (8004950 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <SEGGER_RTT_AllocUpBuffer+0x20>
 8004868:	f7ff ff10 	bl	800468c <_DoInit>
  SEGGER_RTT_LOCK();
 800486c:	f3ef 8311 	mrs	r3, BASEPRI
 8004870:	f04f 0120 	mov.w	r1, #32
 8004874:	f381 8811 	msr	BASEPRI, r1
 8004878:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800487a:	4b35      	ldr	r3, [pc, #212]	; (8004950 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800487c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800487e:	2300      	movs	r3, #0
 8004880:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004882:	6939      	ldr	r1, [r7, #16]
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	4613      	mov	r3, r2
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	4413      	add	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	440b      	add	r3, r1
 8004892:	3304      	adds	r3, #4
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d008      	beq.n	80048ac <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	3301      	adds	r3, #1
 800489e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	dbeb      	blt.n	8004882 <SEGGER_RTT_AllocUpBuffer+0x36>
 80048aa:	e000      	b.n	80048ae <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80048ac:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	da3f      	bge.n	8004938 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80048b8:	6939      	ldr	r1, [r7, #16]
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	4613      	mov	r3, r2
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	4413      	add	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	440b      	add	r3, r1
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80048cc:	6939      	ldr	r1, [r7, #16]
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	4613      	mov	r3, r2
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	4413      	add	r3, r2
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	440b      	add	r3, r1
 80048dc:	3304      	adds	r3, #4
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80048e2:	6939      	ldr	r1, [r7, #16]
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	4613      	mov	r3, r2
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	4413      	add	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	440b      	add	r3, r1
 80048f0:	3320      	adds	r3, #32
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80048f6:	6939      	ldr	r1, [r7, #16]
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	4613      	mov	r3, r2
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	4413      	add	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	440b      	add	r3, r1
 8004904:	3328      	adds	r3, #40	; 0x28
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800490a:	6939      	ldr	r1, [r7, #16]
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	4613      	mov	r3, r2
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4413      	add	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	440b      	add	r3, r1
 8004918:	3324      	adds	r3, #36	; 0x24
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800491e:	6939      	ldr	r1, [r7, #16]
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	4613      	mov	r3, r2
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	4413      	add	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	440b      	add	r3, r1
 800492c:	332c      	adds	r3, #44	; 0x2c
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004932:	f3bf 8f5f 	dmb	sy
 8004936:	e002      	b.n	800493e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004938:	f04f 33ff 	mov.w	r3, #4294967295
 800493c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004944:	69fb      	ldr	r3, [r7, #28]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3720      	adds	r7, #32
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20014408 	.word	0x20014408

08004954 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	; 0x28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004962:	4b21      	ldr	r3, [pc, #132]	; (80049e8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004964:	623b      	str	r3, [r7, #32]
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004970:	f7ff fe8c 	bl	800468c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004974:	4b1c      	ldr	r3, [pc, #112]	; (80049e8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004976:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d82c      	bhi.n	80049d8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800497e:	f3ef 8311 	mrs	r3, BASEPRI
 8004982:	f04f 0120 	mov.w	r1, #32
 8004986:	f381 8811 	msr	BASEPRI, r1
 800498a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4613      	mov	r3, r2
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	4413      	add	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	3360      	adds	r3, #96	; 0x60
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	4413      	add	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00e      	beq.n	80049c2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2200      	movs	r2, #0
 80049ba:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2200      	movs	r2, #0
 80049c0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049c6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80049c8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
 80049d6:	e002      	b.n	80049de <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3728      	adds	r7, #40	; 0x28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20014408 	.word	0x20014408

080049ec <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00f      	beq.n	8004a22 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004a02:	e002      	b.n	8004a0a <_EncodeStr+0x1e>
      Len++;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	3301      	adds	r3, #1
 8004a08:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4413      	add	r3, r2
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f6      	bne.n	8004a04 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d901      	bls.n	8004a22 <_EncodeStr+0x36>
      Len = Limit;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	2bfe      	cmp	r3, #254	; 0xfe
 8004a26:	d806      	bhi.n	8004a36 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	60fa      	str	r2, [r7, #12]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e011      	b.n	8004a5a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	60fa      	str	r2, [r7, #12]
 8004a3c:	22ff      	movs	r2, #255	; 0xff
 8004a3e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	60fa      	str	r2, [r7, #12]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	0a19      	lsrs	r1, r3, #8
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	60fa      	str	r2, [r7, #12]
 8004a56:	b2ca      	uxtb	r2, r1
 8004a58:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004a5e:	e00a      	b.n	8004a76 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	1c53      	adds	r3, r2, #1
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1c59      	adds	r1, r3, #1
 8004a6a:	60f9      	str	r1, [r7, #12]
 8004a6c:	7812      	ldrb	r2, [r2, #0]
 8004a6e:	701a      	strb	r2, [r3, #0]
    n++;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	3301      	adds	r3, #1
 8004a74:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d3f0      	bcc.n	8004a60 <_EncodeStr+0x74>
  }
  return pPayload;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3307      	adds	r3, #7
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004aaa:	4b35      	ldr	r3, [pc, #212]	; (8004b80 <_HandleIncomingPacket+0xdc>)
 8004aac:	7e1b      	ldrb	r3, [r3, #24]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	1cfb      	adds	r3, r7, #3
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	f7ff fe43 	bl	8004740 <SEGGER_RTT_ReadNoLock>
 8004aba:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d052      	beq.n	8004b68 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	2b80      	cmp	r3, #128	; 0x80
 8004ac6:	d031      	beq.n	8004b2c <_HandleIncomingPacket+0x88>
 8004ac8:	2b80      	cmp	r3, #128	; 0x80
 8004aca:	dc40      	bgt.n	8004b4e <_HandleIncomingPacket+0xaa>
 8004acc:	2b07      	cmp	r3, #7
 8004ace:	dc15      	bgt.n	8004afc <_HandleIncomingPacket+0x58>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	dd3c      	ble.n	8004b4e <_HandleIncomingPacket+0xaa>
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	2b06      	cmp	r3, #6
 8004ad8:	d839      	bhi.n	8004b4e <_HandleIncomingPacket+0xaa>
 8004ada:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <_HandleIncomingPacket+0x3c>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004b03 	.word	0x08004b03
 8004ae4:	08004b09 	.word	0x08004b09
 8004ae8:	08004b0f 	.word	0x08004b0f
 8004aec:	08004b15 	.word	0x08004b15
 8004af0:	08004b1b 	.word	0x08004b1b
 8004af4:	08004b21 	.word	0x08004b21
 8004af8:	08004b27 	.word	0x08004b27
 8004afc:	2b7f      	cmp	r3, #127	; 0x7f
 8004afe:	d035      	beq.n	8004b6c <_HandleIncomingPacket+0xc8>
 8004b00:	e025      	b.n	8004b4e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004b02:	f000 ffc9 	bl	8005a98 <SEGGER_SYSVIEW_Start>
      break;
 8004b06:	e036      	b.n	8004b76 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004b08:	f001 f880 	bl	8005c0c <SEGGER_SYSVIEW_Stop>
      break;
 8004b0c:	e033      	b.n	8004b76 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004b0e:	f001 fa59 	bl	8005fc4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004b12:	e030      	b.n	8004b76 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004b14:	f001 fa1e 	bl	8005f54 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004b18:	e02d      	b.n	8004b76 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004b1a:	f001 f89d 	bl	8005c58 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004b1e:	e02a      	b.n	8004b76 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004b20:	f001 fcec 	bl	80064fc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004b24:	e027      	b.n	8004b76 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004b26:	f001 fccb 	bl	80064c0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004b2a:	e024      	b.n	8004b76 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004b2c:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <_HandleIncomingPacket+0xdc>)
 8004b2e:	7e1b      	ldrb	r3, [r3, #24]
 8004b30:	4618      	mov	r0, r3
 8004b32:	1cfb      	adds	r3, r7, #3
 8004b34:	2201      	movs	r2, #1
 8004b36:	4619      	mov	r1, r3
 8004b38:	f7ff fe02 	bl	8004740 <SEGGER_RTT_ReadNoLock>
 8004b3c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d015      	beq.n	8004b70 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f001 fc3a 	bl	80063c0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004b4c:	e010      	b.n	8004b70 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	b25b      	sxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	da0e      	bge.n	8004b74 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004b56:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <_HandleIncomingPacket+0xdc>)
 8004b58:	7e1b      	ldrb	r3, [r3, #24]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	1cfb      	adds	r3, r7, #3
 8004b5e:	2201      	movs	r2, #1
 8004b60:	4619      	mov	r1, r3
 8004b62:	f7ff fded 	bl	8004740 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004b66:	e005      	b.n	8004b74 <_HandleIncomingPacket+0xd0>
    }
  }
 8004b68:	bf00      	nop
 8004b6a:	e004      	b.n	8004b76 <_HandleIncomingPacket+0xd2>
      break;
 8004b6c:	bf00      	nop
 8004b6e:	e002      	b.n	8004b76 <_HandleIncomingPacket+0xd2>
      break;
 8004b70:	bf00      	nop
 8004b72:	e000      	b.n	8004b76 <_HandleIncomingPacket+0xd2>
      break;
 8004b74:	bf00      	nop
}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20014258 	.word	0x20014258

08004b84 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08c      	sub	sp, #48	; 0x30
 8004b88:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004b8e:	1d3b      	adds	r3, r7, #4
 8004b90:	3301      	adds	r3, #1
 8004b92:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b98:	4b31      	ldr	r3, [pc, #196]	; (8004c60 <_TrySendOverflowPacket+0xdc>)
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b9e:	e00b      	b.n	8004bb8 <_TrySendOverflowPacket+0x34>
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	1c59      	adds	r1, r3, #1
 8004ba8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004baa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	09db      	lsrs	r3, r3, #7
 8004bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	2b7f      	cmp	r3, #127	; 0x7f
 8004bbc:	d8f0      	bhi.n	8004ba0 <_TrySendOverflowPacket+0x1c>
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004bce:	4b25      	ldr	r3, [pc, #148]	; (8004c64 <_TrySendOverflowPacket+0xe0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004bd4:	4b22      	ldr	r3, [pc, #136]	; (8004c60 <_TrySendOverflowPacket+0xdc>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	623b      	str	r3, [r7, #32]
 8004be6:	e00b      	b.n	8004c00 <_TrySendOverflowPacket+0x7c>
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	1c59      	adds	r1, r3, #1
 8004bf0:	6279      	str	r1, [r7, #36]	; 0x24
 8004bf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	09db      	lsrs	r3, r3, #7
 8004bfe:	623b      	str	r3, [r7, #32]
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	2b7f      	cmp	r3, #127	; 0x7f
 8004c04:	d8f0      	bhi.n	8004be8 <_TrySendOverflowPacket+0x64>
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	627a      	str	r2, [r7, #36]	; 0x24
 8004c0c:	6a3a      	ldr	r2, [r7, #32]
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004c16:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <_TrySendOverflowPacket+0xdc>)
 8004c18:	785b      	ldrb	r3, [r3, #1]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	1d3b      	adds	r3, r7, #4
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	1d3b      	adds	r3, r7, #4
 8004c26:	4619      	mov	r1, r3
 8004c28:	f7fb fad2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004c36:	4a0a      	ldr	r2, [pc, #40]	; (8004c60 <_TrySendOverflowPacket+0xdc>)
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004c3c:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <_TrySendOverflowPacket+0xdc>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <_TrySendOverflowPacket+0xdc>)
 8004c46:	701a      	strb	r2, [r3, #0]
 8004c48:	e004      	b.n	8004c54 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004c4a:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <_TrySendOverflowPacket+0xdc>)
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	4a03      	ldr	r2, [pc, #12]	; (8004c60 <_TrySendOverflowPacket+0xdc>)
 8004c52:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004c54:	693b      	ldr	r3, [r7, #16]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3730      	adds	r7, #48	; 0x30
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20014258 	.word	0x20014258
 8004c64:	e0001004 	.word	0xe0001004

08004c68 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	; 0x28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004c74:	4b9a      	ldr	r3, [pc, #616]	; (8004ee0 <_SendPacket+0x278>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d010      	beq.n	8004c9e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004c7c:	4b98      	ldr	r3, [pc, #608]	; (8004ee0 <_SendPacket+0x278>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8129 	beq.w	8004ed8 <_SendPacket+0x270>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004c86:	4b96      	ldr	r3, [pc, #600]	; (8004ee0 <_SendPacket+0x278>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d109      	bne.n	8004ca2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004c8e:	f7ff ff79 	bl	8004b84 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004c92:	4b93      	ldr	r3, [pc, #588]	; (8004ee0 <_SendPacket+0x278>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	f040 8120 	bne.w	8004edc <_SendPacket+0x274>
      goto SendDone;
    }
  }
Send:
 8004c9c:	e001      	b.n	8004ca2 <_SendPacket+0x3a>
    goto Send;
 8004c9e:	bf00      	nop
 8004ca0:	e000      	b.n	8004ca4 <_SendPacket+0x3c>
Send:
 8004ca2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b1f      	cmp	r3, #31
 8004ca8:	d809      	bhi.n	8004cbe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004caa:	4b8d      	ldr	r3, [pc, #564]	; (8004ee0 <_SendPacket+0x278>)
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f040 8115 	bne.w	8004ee8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b17      	cmp	r3, #23
 8004cc2:	d807      	bhi.n	8004cd4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	701a      	strb	r2, [r3, #0]
 8004cd2:	e0c4      	b.n	8004e5e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	2b7f      	cmp	r3, #127	; 0x7f
 8004ce0:	d912      	bls.n	8004d08 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	09da      	lsrs	r2, r3, #7
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	3a01      	subs	r2, #1
 8004cfa:	60fa      	str	r2, [r7, #12]
 8004cfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	e006      	b.n	8004d16 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b7e      	cmp	r3, #126	; 0x7e
 8004d1a:	d807      	bhi.n	8004d2c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	e098      	b.n	8004e5e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d32:	d212      	bcs.n	8004d5a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	09da      	lsrs	r2, r3, #7
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	3a01      	subs	r2, #1
 8004d4c:	60fa      	str	r2, [r7, #12]
 8004d4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	e081      	b.n	8004e5e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d60:	d21d      	bcs.n	8004d9e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	0b9a      	lsrs	r2, r3, #14
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	09db      	lsrs	r3, r3, #7
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	3a01      	subs	r2, #1
 8004d7c:	60fa      	str	r2, [r7, #12]
 8004d7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	3a01      	subs	r2, #1
 8004d90:	60fa      	str	r2, [r7, #12]
 8004d92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	e05f      	b.n	8004e5e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004da4:	d228      	bcs.n	8004df8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	0d5a      	lsrs	r2, r3, #21
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	0b9b      	lsrs	r3, r3, #14
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	3a01      	subs	r2, #1
 8004dc0:	60fa      	str	r2, [r7, #12]
 8004dc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	09db      	lsrs	r3, r3, #7
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	3a01      	subs	r2, #1
 8004dd6:	60fa      	str	r2, [r7, #12]
 8004dd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	3a01      	subs	r2, #1
 8004dea:	60fa      	str	r2, [r7, #12]
 8004dec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e032      	b.n	8004e5e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	0f1a      	lsrs	r2, r3, #28
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	0d5b      	lsrs	r3, r3, #21
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	3a01      	subs	r2, #1
 8004e12:	60fa      	str	r2, [r7, #12]
 8004e14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	0b9b      	lsrs	r3, r3, #14
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	3a01      	subs	r2, #1
 8004e28:	60fa      	str	r2, [r7, #12]
 8004e2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	09db      	lsrs	r3, r3, #7
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	3a01      	subs	r2, #1
 8004e3e:	60fa      	str	r2, [r7, #12]
 8004e40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	3a01      	subs	r2, #1
 8004e52:	60fa      	str	r2, [r7, #12]
 8004e54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e5e:	4b21      	ldr	r3, [pc, #132]	; (8004ee4 <_SendPacket+0x27c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004e64:	4b1e      	ldr	r3, [pc, #120]	; (8004ee0 <_SendPacket+0x278>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	623b      	str	r3, [r7, #32]
 8004e76:	e00b      	b.n	8004e90 <_SendPacket+0x228>
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	1c59      	adds	r1, r3, #1
 8004e80:	6279      	str	r1, [r7, #36]	; 0x24
 8004e82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	09db      	lsrs	r3, r3, #7
 8004e8e:	623b      	str	r3, [r7, #32]
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	2b7f      	cmp	r3, #127	; 0x7f
 8004e94:	d8f0      	bhi.n	8004e78 <_SendPacket+0x210>
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	627a      	str	r2, [r7, #36]	; 0x24
 8004e9c:	6a3a      	ldr	r2, [r7, #32]
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004ea6:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <_SendPacket+0x278>)
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	68f9      	ldr	r1, [r7, #12]
 8004eb6:	f7fb f98b 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004eba:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004ec2:	4a07      	ldr	r2, [pc, #28]	; (8004ee0 <_SendPacket+0x278>)
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	60d3      	str	r3, [r2, #12]
 8004ec8:	e00f      	b.n	8004eea <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <_SendPacket+0x278>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <_SendPacket+0x278>)
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	e008      	b.n	8004eea <_SendPacket+0x282>
    goto SendDone;
 8004ed8:	bf00      	nop
 8004eda:	e006      	b.n	8004eea <_SendPacket+0x282>
      goto SendDone;
 8004edc:	bf00      	nop
 8004ede:	e004      	b.n	8004eea <_SendPacket+0x282>
 8004ee0:	20014258 	.word	0x20014258
 8004ee4:	e0001004 	.word	0xe0001004
      goto SendDone;
 8004ee8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004eea:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <_SendPacket+0x2d4>)
 8004eec:	7e1b      	ldrb	r3, [r3, #24]
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <_SendPacket+0x2d8>)
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	440b      	add	r3, r1
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4413      	add	r3, r2
 8004efc:	336c      	adds	r3, #108	; 0x6c
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <_SendPacket+0x2d4>)
 8004f02:	7e1b      	ldrb	r3, [r3, #24]
 8004f04:	4618      	mov	r0, r3
 8004f06:	490e      	ldr	r1, [pc, #56]	; (8004f40 <_SendPacket+0x2d8>)
 8004f08:	4603      	mov	r3, r0
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	4403      	add	r3, r0
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	440b      	add	r3, r1
 8004f12:	3370      	adds	r3, #112	; 0x70
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d00b      	beq.n	8004f32 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004f1a:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <_SendPacket+0x2d4>)
 8004f1c:	789b      	ldrb	r3, [r3, #2]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d107      	bne.n	8004f32 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004f22:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <_SendPacket+0x2d4>)
 8004f24:	2201      	movs	r2, #1
 8004f26:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004f28:	f7ff fdbc 	bl	8004aa4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <_SendPacket+0x2d4>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004f32:	bf00      	nop
 8004f34:	3728      	adds	r7, #40	; 0x28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20014258 	.word	0x20014258
 8004f40:	20014408 	.word	0x20014408

08004f44 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	; 0x28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	2b80      	cmp	r3, #128	; 0x80
 8004f5c:	d80a      	bhi.n	8004f74 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	1c59      	adds	r1, r3, #1
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6051      	str	r1, [r2, #4]
 8004f68:	78fa      	ldrb	r2, [r7, #3]
 8004f6a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b80      	cmp	r3, #128	; 0x80
 8004f7a:	d15a      	bne.n	8005032 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	623b      	str	r3, [r7, #32]
 8004f9c:	e00b      	b.n	8004fb6 <_StoreChar+0x72>
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	1c59      	adds	r1, r3, #1
 8004fa6:	6279      	str	r1, [r7, #36]	; 0x24
 8004fa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	09db      	lsrs	r3, r3, #7
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	2b7f      	cmp	r3, #127	; 0x7f
 8004fba:	d8f0      	bhi.n	8004f9e <_StoreChar+0x5a>
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	627a      	str	r2, [r7, #36]	; 0x24
 8004fc2:	6a3a      	ldr	r2, [r7, #32]
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	701a      	strb	r2, [r3, #0]
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61bb      	str	r3, [r7, #24]
 8004fd4:	e00b      	b.n	8004fee <_StoreChar+0xaa>
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	1c59      	adds	r1, r3, #1
 8004fde:	61f9      	str	r1, [r7, #28]
 8004fe0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	09db      	lsrs	r3, r3, #7
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff2:	d8f0      	bhi.n	8004fd6 <_StoreChar+0x92>
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	61fa      	str	r2, [r7, #28]
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	221a      	movs	r2, #26
 800500a:	6939      	ldr	r1, [r7, #16]
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff fe2b 	bl	8004c68 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fd38 	bl	8004a8c <_PreparePacket>
 800501c:	4602      	mov	r2, r0
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	611a      	str	r2, [r3, #16]
  }
}
 8005032:	bf00      	nop
 8005034:	3728      	adds	r7, #40	; 0x28
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	; 0x28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800504e:	2301      	movs	r3, #1
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005052:	2301      	movs	r3, #1
 8005054:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005056:	e007      	b.n	8005068 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005058:	6a3a      	ldr	r2, [r7, #32]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005060:	623b      	str	r3, [r7, #32]
    Width++;
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	3301      	adds	r3, #1
 8005066:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005068:	6a3a      	ldr	r2, [r7, #32]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	429a      	cmp	r2, r3
 800506e:	d2f3      	bcs.n	8005058 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	429a      	cmp	r2, r3
 8005076:	d901      	bls.n	800507c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d11f      	bne.n	80050c6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01c      	beq.n	80050c6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800508c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <_PrintUnsigned+0x66>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <_PrintUnsigned+0x66>
        c = '0';
 800509c:	2330      	movs	r3, #48	; 0x30
 800509e:	76fb      	strb	r3, [r7, #27]
 80050a0:	e001      	b.n	80050a6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80050a2:	2320      	movs	r3, #32
 80050a4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80050a6:	e007      	b.n	80050b8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	3b01      	subs	r3, #1
 80050ac:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80050ae:	7efb      	ldrb	r3, [r7, #27]
 80050b0:	4619      	mov	r1, r3
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7ff ff46 	bl	8004f44 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80050b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <_PrintUnsigned+0x8a>
 80050be:	69fa      	ldr	r2, [r7, #28]
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d3f0      	bcc.n	80050a8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d903      	bls.n	80050d4 <_PrintUnsigned+0x98>
      NumDigits--;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	603b      	str	r3, [r7, #0]
 80050d2:	e009      	b.n	80050e8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050dc:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d200      	bcs.n	80050e8 <_PrintUnsigned+0xac>
        break;
 80050e6:	e005      	b.n	80050f4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	fb02 f303 	mul.w	r3, r2, r3
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80050f2:	e7e8      	b.n	80050c6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fc:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005102:	fb02 f303 	mul.w	r3, r2, r3
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800510c:	4a15      	ldr	r2, [pc, #84]	; (8005164 <_PrintUnsigned+0x128>)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	4619      	mov	r1, r3
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff ff14 	bl	8004f44 <_StoreChar>
    Digit /= Base;
 800511c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	fbb2 f3f3 	udiv	r3, r2, r3
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1e3      	bne.n	80050f4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800512c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d011      	beq.n	800515a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00e      	beq.n	800515a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800513c:	e006      	b.n	800514c <_PrintUnsigned+0x110>
        FieldWidth--;
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	3b01      	subs	r3, #1
 8005142:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005144:	2120      	movs	r1, #32
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7ff fefc 	bl	8004f44 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <_PrintUnsigned+0x11e>
 8005152:	69fa      	ldr	r2, [r7, #28]
 8005154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005156:	429a      	cmp	r2, r3
 8005158:	d3f1      	bcc.n	800513e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800515a:	bf00      	nop
 800515c:	3728      	adds	r7, #40	; 0x28
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	08006848 	.word	0x08006848

08005168 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005168:	b580      	push	{r7, lr}
 800516a:	b088      	sub	sp, #32
 800516c:	af02      	add	r7, sp, #8
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	bfb8      	it	lt
 800517c:	425b      	neglt	r3, r3
 800517e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005180:	2301      	movs	r3, #1
 8005182:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005184:	e007      	b.n	8005196 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	fb92 f3f3 	sdiv	r3, r2, r3
 800518e:	613b      	str	r3, [r7, #16]
    Width++;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	3301      	adds	r3, #1
 8005194:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	429a      	cmp	r2, r3
 800519c:	daf3      	bge.n	8005186 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d901      	bls.n	80051aa <_PrintInt+0x42>
    Width = NumDigits;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <_PrintInt+0x5e>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	db04      	blt.n	80051c0 <_PrintInt+0x58>
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <_PrintInt+0x5e>
    FieldWidth--;
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <_PrintInt+0x6e>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d016      	beq.n	8005204 <_PrintInt+0x9c>
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d111      	bne.n	8005204 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00e      	beq.n	8005204 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051e6:	e006      	b.n	80051f6 <_PrintInt+0x8e>
        FieldWidth--;
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80051ee:	2120      	movs	r1, #32
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f7ff fea7 	bl	8004f44 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <_PrintInt+0x9c>
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	429a      	cmp	r2, r3
 8005202:	d3f1      	bcc.n	80051e8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	da07      	bge.n	800521a <_PrintInt+0xb2>
    v = -v;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	425b      	negs	r3, r3
 800520e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005210:	212d      	movs	r1, #45	; 0x2d
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f7ff fe96 	bl	8004f44 <_StoreChar>
 8005218:	e008      	b.n	800522c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005224:	212b      	movs	r1, #43	; 0x2b
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f7ff fe8c 	bl	8004f44 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d019      	beq.n	800526a <_PrintInt+0x102>
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d114      	bne.n	800526a <_PrintInt+0x102>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d111      	bne.n	800526a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00e      	beq.n	800526a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800524c:	e006      	b.n	800525c <_PrintInt+0xf4>
        FieldWidth--;
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	3b01      	subs	r3, #1
 8005252:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005254:	2130      	movs	r1, #48	; 0x30
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f7ff fe74 	bl	8004f44 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <_PrintInt+0x102>
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	429a      	cmp	r2, r3
 8005268:	d3f1      	bcc.n	800524e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f7ff fedf 	bl	800503c <_PrintUnsigned>
}
 800527e:	bf00      	nop
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005288:	b580      	push	{r7, lr}
 800528a:	b098      	sub	sp, #96	; 0x60
 800528c:	af02      	add	r7, sp, #8
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005294:	f3ef 8311 	mrs	r3, BASEPRI
 8005298:	f04f 0120 	mov.w	r1, #32
 800529c:	f381 8811 	msr	BASEPRI, r1
 80052a0:	633b      	str	r3, [r7, #48]	; 0x30
 80052a2:	48b7      	ldr	r0, [pc, #732]	; (8005580 <_VPrintTarget+0x2f8>)
 80052a4:	f7ff fbf2 	bl	8004a8c <_PreparePacket>
 80052a8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80052aa:	4bb5      	ldr	r3, [pc, #724]	; (8005580 <_VPrintTarget+0x2f8>)
 80052ac:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80052ae:	2300      	movs	r3, #0
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80052b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	3301      	adds	r3, #1
 80052ba:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80052ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 8183 	beq.w	80055de <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80052d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052dc:	2b25      	cmp	r3, #37	; 0x25
 80052de:	f040 8170 	bne.w	80055c2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80052e2:	2300      	movs	r3, #0
 80052e4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80052e6:	2301      	movs	r3, #1
 80052e8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80052f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052f6:	3b23      	subs	r3, #35	; 0x23
 80052f8:	2b0d      	cmp	r3, #13
 80052fa:	d83f      	bhi.n	800537c <_VPrintTarget+0xf4>
 80052fc:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <_VPrintTarget+0x7c>)
 80052fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005302:	bf00      	nop
 8005304:	0800536d 	.word	0x0800536d
 8005308:	0800537d 	.word	0x0800537d
 800530c:	0800537d 	.word	0x0800537d
 8005310:	0800537d 	.word	0x0800537d
 8005314:	0800537d 	.word	0x0800537d
 8005318:	0800537d 	.word	0x0800537d
 800531c:	0800537d 	.word	0x0800537d
 8005320:	0800537d 	.word	0x0800537d
 8005324:	0800535d 	.word	0x0800535d
 8005328:	0800537d 	.word	0x0800537d
 800532c:	0800533d 	.word	0x0800533d
 8005330:	0800537d 	.word	0x0800537d
 8005334:	0800537d 	.word	0x0800537d
 8005338:	0800534d 	.word	0x0800534d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800533c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	64bb      	str	r3, [r7, #72]	; 0x48
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3301      	adds	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	e01a      	b.n	8005382 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800534c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800534e:	f043 0302 	orr.w	r3, r3, #2
 8005352:	64bb      	str	r3, [r7, #72]	; 0x48
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3301      	adds	r3, #1
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	e012      	b.n	8005382 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800535c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800535e:	f043 0304 	orr.w	r3, r3, #4
 8005362:	64bb      	str	r3, [r7, #72]	; 0x48
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3301      	adds	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	e00a      	b.n	8005382 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800536c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800536e:	f043 0308 	orr.w	r3, r3, #8
 8005372:	64bb      	str	r3, [r7, #72]	; 0x48
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3301      	adds	r3, #1
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	e002      	b.n	8005382 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800537c:	2300      	movs	r3, #0
 800537e:	653b      	str	r3, [r7, #80]	; 0x50
 8005380:	bf00      	nop
        }
      } while (v);
 8005382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1b0      	bne.n	80052ea <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005388:	2300      	movs	r3, #0
 800538a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005394:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005398:	2b2f      	cmp	r3, #47	; 0x2f
 800539a:	d912      	bls.n	80053c2 <_VPrintTarget+0x13a>
 800539c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053a0:	2b39      	cmp	r3, #57	; 0x39
 80053a2:	d80e      	bhi.n	80053c2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3301      	adds	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80053aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	461a      	mov	r2, r3
 80053b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053ba:	4413      	add	r3, r2
 80053bc:	3b30      	subs	r3, #48	; 0x30
 80053be:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80053c0:	e7e4      	b.n	800538c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80053c2:	2300      	movs	r3, #0
 80053c4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80053ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053d2:	2b2e      	cmp	r3, #46	; 0x2e
 80053d4:	d11d      	bne.n	8005412 <_VPrintTarget+0x18a>
        sFormat++;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3301      	adds	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80053e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053e8:	2b2f      	cmp	r3, #47	; 0x2f
 80053ea:	d912      	bls.n	8005412 <_VPrintTarget+0x18a>
 80053ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053f0:	2b39      	cmp	r3, #57	; 0x39
 80053f2:	d80e      	bhi.n	8005412 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	3301      	adds	r3, #1
 80053f8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80053fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053fc:	4613      	mov	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	461a      	mov	r2, r3
 8005406:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800540a:	4413      	add	r3, r2
 800540c:	3b30      	subs	r3, #48	; 0x30
 800540e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005410:	e7e4      	b.n	80053dc <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800541a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800541e:	2b6c      	cmp	r3, #108	; 0x6c
 8005420:	d003      	beq.n	800542a <_VPrintTarget+0x1a2>
 8005422:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005426:	2b68      	cmp	r3, #104	; 0x68
 8005428:	d107      	bne.n	800543a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3301      	adds	r3, #1
 8005436:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005438:	e7ef      	b.n	800541a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800543a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800543e:	2b25      	cmp	r3, #37	; 0x25
 8005440:	f000 80b3 	beq.w	80055aa <_VPrintTarget+0x322>
 8005444:	2b25      	cmp	r3, #37	; 0x25
 8005446:	f2c0 80b7 	blt.w	80055b8 <_VPrintTarget+0x330>
 800544a:	2b78      	cmp	r3, #120	; 0x78
 800544c:	f300 80b4 	bgt.w	80055b8 <_VPrintTarget+0x330>
 8005450:	2b58      	cmp	r3, #88	; 0x58
 8005452:	f2c0 80b1 	blt.w	80055b8 <_VPrintTarget+0x330>
 8005456:	3b58      	subs	r3, #88	; 0x58
 8005458:	2b20      	cmp	r3, #32
 800545a:	f200 80ad 	bhi.w	80055b8 <_VPrintTarget+0x330>
 800545e:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <_VPrintTarget+0x1dc>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	0800555b 	.word	0x0800555b
 8005468:	080055b9 	.word	0x080055b9
 800546c:	080055b9 	.word	0x080055b9
 8005470:	080055b9 	.word	0x080055b9
 8005474:	080055b9 	.word	0x080055b9
 8005478:	080055b9 	.word	0x080055b9
 800547c:	080055b9 	.word	0x080055b9
 8005480:	080055b9 	.word	0x080055b9
 8005484:	080055b9 	.word	0x080055b9
 8005488:	080055b9 	.word	0x080055b9
 800548c:	080055b9 	.word	0x080055b9
 8005490:	080054e9 	.word	0x080054e9
 8005494:	0800550f 	.word	0x0800550f
 8005498:	080055b9 	.word	0x080055b9
 800549c:	080055b9 	.word	0x080055b9
 80054a0:	080055b9 	.word	0x080055b9
 80054a4:	080055b9 	.word	0x080055b9
 80054a8:	080055b9 	.word	0x080055b9
 80054ac:	080055b9 	.word	0x080055b9
 80054b0:	080055b9 	.word	0x080055b9
 80054b4:	080055b9 	.word	0x080055b9
 80054b8:	080055b9 	.word	0x080055b9
 80054bc:	080055b9 	.word	0x080055b9
 80054c0:	080055b9 	.word	0x080055b9
 80054c4:	08005585 	.word	0x08005585
 80054c8:	080055b9 	.word	0x080055b9
 80054cc:	080055b9 	.word	0x080055b9
 80054d0:	080055b9 	.word	0x080055b9
 80054d4:	080055b9 	.word	0x080055b9
 80054d8:	08005535 	.word	0x08005535
 80054dc:	080055b9 	.word	0x080055b9
 80054e0:	080055b9 	.word	0x080055b9
 80054e4:	0800555b 	.word	0x0800555b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	1d19      	adds	r1, r3, #4
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6011      	str	r1, [r2, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80054f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80054fc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005500:	f107 0314 	add.w	r3, r7, #20
 8005504:	4611      	mov	r1, r2
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff fd1c 	bl	8004f44 <_StoreChar>
        break;
 800550c:	e055      	b.n	80055ba <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	1d19      	adds	r1, r3, #4
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6011      	str	r1, [r2, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800551c:	f107 0014 	add.w	r0, r7, #20
 8005520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005522:	9301      	str	r3, [sp, #4]
 8005524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552a:	220a      	movs	r2, #10
 800552c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800552e:	f7ff fe1b 	bl	8005168 <_PrintInt>
        break;
 8005532:	e042      	b.n	80055ba <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	1d19      	adds	r1, r3, #4
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6011      	str	r1, [r2, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005542:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005544:	f107 0014 	add.w	r0, r7, #20
 8005548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005552:	220a      	movs	r2, #10
 8005554:	f7ff fd72 	bl	800503c <_PrintUnsigned>
        break;
 8005558:	e02f      	b.n	80055ba <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	1d19      	adds	r1, r3, #4
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6011      	str	r1, [r2, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005568:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800556a:	f107 0014 	add.w	r0, r7, #20
 800556e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005578:	2210      	movs	r2, #16
 800557a:	f7ff fd5f 	bl	800503c <_PrintUnsigned>
        break;
 800557e:	e01c      	b.n	80055ba <_VPrintTarget+0x332>
 8005580:	20014288 	.word	0x20014288
      case 'p':
        v = va_arg(*pParamList, int);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	1d19      	adds	r1, r3, #4
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6011      	str	r1, [r2, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005592:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005594:	f107 0014 	add.w	r0, r7, #20
 8005598:	2300      	movs	r3, #0
 800559a:	9301      	str	r3, [sp, #4]
 800559c:	2308      	movs	r3, #8
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	2308      	movs	r3, #8
 80055a2:	2210      	movs	r2, #16
 80055a4:	f7ff fd4a 	bl	800503c <_PrintUnsigned>
        break;
 80055a8:	e007      	b.n	80055ba <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80055aa:	f107 0314 	add.w	r3, r7, #20
 80055ae:	2125      	movs	r1, #37	; 0x25
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff fcc7 	bl	8004f44 <_StoreChar>
        break;
 80055b6:	e000      	b.n	80055ba <_VPrintTarget+0x332>
      default:
        break;
 80055b8:	bf00      	nop
      }
      sFormat++;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3301      	adds	r3, #1
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e007      	b.n	80055d2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80055c2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80055c6:	f107 0314 	add.w	r3, r7, #20
 80055ca:	4611      	mov	r1, r2
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff fcb9 	bl	8004f44 <_StoreChar>
    }
  } while (*sFormat);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f47f ae72 	bne.w	80052c0 <_VPrintTarget+0x38>
 80055dc:	e000      	b.n	80055e0 <_VPrintTarget+0x358>
      break;
 80055de:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d041      	beq.n	800566a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80055e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	643b      	str	r3, [r7, #64]	; 0x40
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055f6:	e00b      	b.n	8005610 <_VPrintTarget+0x388>
 80055f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055fe:	1c59      	adds	r1, r3, #1
 8005600:	6439      	str	r1, [r7, #64]	; 0x40
 8005602:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560c:	09db      	lsrs	r3, r3, #7
 800560e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005612:	2b7f      	cmp	r3, #127	; 0x7f
 8005614:	d8f0      	bhi.n	80055f8 <_VPrintTarget+0x370>
 8005616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	643a      	str	r2, [r7, #64]	; 0x40
 800561c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005624:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	63bb      	str	r3, [r7, #56]	; 0x38
 800562a:	2300      	movs	r3, #0
 800562c:	637b      	str	r3, [r7, #52]	; 0x34
 800562e:	e00b      	b.n	8005648 <_VPrintTarget+0x3c0>
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	b2da      	uxtb	r2, r3
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	1c59      	adds	r1, r3, #1
 8005638:	63b9      	str	r1, [r7, #56]	; 0x38
 800563a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	09db      	lsrs	r3, r3, #7
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
 8005648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564a:	2b7f      	cmp	r3, #127	; 0x7f
 800564c:	d8f0      	bhi.n	8005630 <_VPrintTarget+0x3a8>
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	63ba      	str	r2, [r7, #56]	; 0x38
 8005654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	69b9      	ldr	r1, [r7, #24]
 8005662:	221a      	movs	r2, #26
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff faff 	bl	8004c68 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005670:	bf00      	nop
 8005672:	3758      	adds	r7, #88	; 0x58
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005686:	2300      	movs	r3, #0
 8005688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800568c:	4917      	ldr	r1, [pc, #92]	; (80056ec <SEGGER_SYSVIEW_Init+0x74>)
 800568e:	4818      	ldr	r0, [pc, #96]	; (80056f0 <SEGGER_SYSVIEW_Init+0x78>)
 8005690:	f7ff f8dc 	bl	800484c <SEGGER_RTT_AllocUpBuffer>
 8005694:	4603      	mov	r3, r0
 8005696:	b2da      	uxtb	r2, r3
 8005698:	4b16      	ldr	r3, [pc, #88]	; (80056f4 <SEGGER_SYSVIEW_Init+0x7c>)
 800569a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800569c:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <SEGGER_SYSVIEW_Init+0x7c>)
 800569e:	785a      	ldrb	r2, [r3, #1]
 80056a0:	4b14      	ldr	r3, [pc, #80]	; (80056f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80056a2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80056a4:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80056a6:	7e1b      	ldrb	r3, [r3, #24]
 80056a8:	4618      	mov	r0, r3
 80056aa:	2300      	movs	r3, #0
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	2308      	movs	r3, #8
 80056b0:	4a11      	ldr	r2, [pc, #68]	; (80056f8 <SEGGER_SYSVIEW_Init+0x80>)
 80056b2:	490f      	ldr	r1, [pc, #60]	; (80056f0 <SEGGER_SYSVIEW_Init+0x78>)
 80056b4:	f7ff f94e 	bl	8004954 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80056b8:	4b0e      	ldr	r3, [pc, #56]	; (80056f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056be:	4b0f      	ldr	r3, [pc, #60]	; (80056fc <SEGGER_SYSVIEW_Init+0x84>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a0c      	ldr	r2, [pc, #48]	; (80056f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80056c4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80056c6:	4a0b      	ldr	r2, [pc, #44]	; (80056f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80056cc:	4a09      	ldr	r2, [pc, #36]	; (80056f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80056d2:	4a08      	ldr	r2, [pc, #32]	; (80056f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80056d8:	4a06      	ldr	r2, [pc, #24]	; (80056f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80056de:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <SEGGER_SYSVIEW_Init+0x7c>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80056e4:	bf00      	nop
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	20013250 	.word	0x20013250
 80056f0:	08006800 	.word	0x08006800
 80056f4:	20014258 	.word	0x20014258
 80056f8:	20014250 	.word	0x20014250
 80056fc:	e0001004 	.word	0xe0001004

08005700 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005708:	4a04      	ldr	r2, [pc, #16]	; (800571c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6113      	str	r3, [r2, #16]
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	20014258 	.word	0x20014258

08005720 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005728:	f3ef 8311 	mrs	r3, BASEPRI
 800572c:	f04f 0120 	mov.w	r1, #32
 8005730:	f381 8811 	msr	BASEPRI, r1
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	4808      	ldr	r0, [pc, #32]	; (8005758 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005738:	f7ff f9a8 	bl	8004a8c <_PreparePacket>
 800573c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	68b8      	ldr	r0, [r7, #8]
 8005744:	f7ff fa90 	bl	8004c68 <_SendPacket>
  RECORD_END();
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f383 8811 	msr	BASEPRI, r3
}
 800574e:	bf00      	nop
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20014288 	.word	0x20014288

0800575c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005766:	f3ef 8311 	mrs	r3, BASEPRI
 800576a:	f04f 0120 	mov.w	r1, #32
 800576e:	f381 8811 	msr	BASEPRI, r1
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	4816      	ldr	r0, [pc, #88]	; (80057d0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005776:	f7ff f989 	bl	8004a8c <_PreparePacket>
 800577a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	e00b      	b.n	80057a2 <SEGGER_SYSVIEW_RecordU32+0x46>
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	b2da      	uxtb	r2, r3
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	1c59      	adds	r1, r3, #1
 8005792:	61f9      	str	r1, [r7, #28]
 8005794:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	09db      	lsrs	r3, r3, #7
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	2b7f      	cmp	r3, #127	; 0x7f
 80057a6:	d8f0      	bhi.n	800578a <SEGGER_SYSVIEW_RecordU32+0x2e>
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	61fa      	str	r2, [r7, #28]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	701a      	strb	r2, [r3, #0]
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	68f9      	ldr	r1, [r7, #12]
 80057bc:	6938      	ldr	r0, [r7, #16]
 80057be:	f7ff fa53 	bl	8004c68 <_SendPacket>
  RECORD_END();
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f383 8811 	msr	BASEPRI, r3
}
 80057c8:	bf00      	nop
 80057ca:	3720      	adds	r7, #32
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20014288 	.word	0x20014288

080057d4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08c      	sub	sp, #48	; 0x30
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057e0:	f3ef 8311 	mrs	r3, BASEPRI
 80057e4:	f04f 0120 	mov.w	r1, #32
 80057e8:	f381 8811 	msr	BASEPRI, r1
 80057ec:	61fb      	str	r3, [r7, #28]
 80057ee:	4825      	ldr	r0, [pc, #148]	; (8005884 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80057f0:	f7ff f94c 	bl	8004a8c <_PreparePacket>
 80057f4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	62bb      	str	r3, [r7, #40]	; 0x28
 8005802:	e00b      	b.n	800581c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	b2da      	uxtb	r2, r3
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	1c59      	adds	r1, r3, #1
 800580c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800580e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	09db      	lsrs	r3, r3, #7
 800581a:	62bb      	str	r3, [r7, #40]	; 0x28
 800581c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581e:	2b7f      	cmp	r3, #127	; 0x7f
 8005820:	d8f0      	bhi.n	8005804 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005830:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	623b      	str	r3, [r7, #32]
 800583a:	e00b      	b.n	8005854 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	b2da      	uxtb	r2, r3
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	1c59      	adds	r1, r3, #1
 8005844:	6279      	str	r1, [r7, #36]	; 0x24
 8005846:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	09db      	lsrs	r3, r3, #7
 8005852:	623b      	str	r3, [r7, #32]
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	2b7f      	cmp	r3, #127	; 0x7f
 8005858:	d8f0      	bhi.n	800583c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	627a      	str	r2, [r7, #36]	; 0x24
 8005860:	6a3a      	ldr	r2, [r7, #32]
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	701a      	strb	r2, [r3, #0]
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	6979      	ldr	r1, [r7, #20]
 800586e:	69b8      	ldr	r0, [r7, #24]
 8005870:	f7ff f9fa 	bl	8004c68 <_SendPacket>
  RECORD_END();
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f383 8811 	msr	BASEPRI, r3
}
 800587a:	bf00      	nop
 800587c:	3730      	adds	r7, #48	; 0x30
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20014288 	.word	0x20014288

08005888 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b08e      	sub	sp, #56	; 0x38
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005896:	f3ef 8311 	mrs	r3, BASEPRI
 800589a:	f04f 0120 	mov.w	r1, #32
 800589e:	f381 8811 	msr	BASEPRI, r1
 80058a2:	61fb      	str	r3, [r7, #28]
 80058a4:	4832      	ldr	r0, [pc, #200]	; (8005970 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80058a6:	f7ff f8f1 	bl	8004a8c <_PreparePacket>
 80058aa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	637b      	str	r3, [r7, #52]	; 0x34
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	633b      	str	r3, [r7, #48]	; 0x30
 80058b8:	e00b      	b.n	80058d2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c0:	1c59      	adds	r1, r3, #1
 80058c2:	6379      	str	r1, [r7, #52]	; 0x34
 80058c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	09db      	lsrs	r3, r3, #7
 80058d0:	633b      	str	r3, [r7, #48]	; 0x30
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	2b7f      	cmp	r3, #127	; 0x7f
 80058d6:	d8f0      	bhi.n	80058ba <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80058d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	637a      	str	r2, [r7, #52]	; 0x34
 80058de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80058f0:	e00b      	b.n	800590a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f8:	1c59      	adds	r1, r3, #1
 80058fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80058fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	701a      	strb	r2, [r3, #0]
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	09db      	lsrs	r3, r3, #7
 8005908:	62bb      	str	r3, [r7, #40]	; 0x28
 800590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590c:	2b7f      	cmp	r3, #127	; 0x7f
 800590e:	d8f0      	bhi.n	80058f2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005918:	b2d2      	uxtb	r2, r2
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	623b      	str	r3, [r7, #32]
 8005928:	e00b      	b.n	8005942 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	b2da      	uxtb	r2, r3
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	1c59      	adds	r1, r3, #1
 8005932:	6279      	str	r1, [r7, #36]	; 0x24
 8005934:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005938:	b2d2      	uxtb	r2, r2
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	09db      	lsrs	r3, r3, #7
 8005940:	623b      	str	r3, [r7, #32]
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	2b7f      	cmp	r3, #127	; 0x7f
 8005946:	d8f0      	bhi.n	800592a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	627a      	str	r2, [r7, #36]	; 0x24
 800594e:	6a3a      	ldr	r2, [r7, #32]
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	6979      	ldr	r1, [r7, #20]
 800595c:	69b8      	ldr	r0, [r7, #24]
 800595e:	f7ff f983 	bl	8004c68 <_SendPacket>
  RECORD_END();
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	f383 8811 	msr	BASEPRI, r3
}
 8005968:	bf00      	nop
 800596a:	3738      	adds	r7, #56	; 0x38
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20014288 	.word	0x20014288

08005974 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b090      	sub	sp, #64	; 0x40
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005982:	f3ef 8311 	mrs	r3, BASEPRI
 8005986:	f04f 0120 	mov.w	r1, #32
 800598a:	f381 8811 	msr	BASEPRI, r1
 800598e:	61fb      	str	r3, [r7, #28]
 8005990:	4840      	ldr	r0, [pc, #256]	; (8005a94 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005992:	f7ff f87b 	bl	8004a8c <_PreparePacket>
 8005996:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80059a4:	e00b      	b.n	80059be <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ac:	1c59      	adds	r1, r3, #1
 80059ae:	63f9      	str	r1, [r7, #60]	; 0x3c
 80059b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ba:	09db      	lsrs	r3, r3, #7
 80059bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	2b7f      	cmp	r3, #127	; 0x7f
 80059c2:	d8f0      	bhi.n	80059a6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80059c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	637b      	str	r3, [r7, #52]	; 0x34
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	633b      	str	r3, [r7, #48]	; 0x30
 80059dc:	e00b      	b.n	80059f6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e4:	1c59      	adds	r1, r3, #1
 80059e6:	6379      	str	r1, [r7, #52]	; 0x34
 80059e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	09db      	lsrs	r3, r3, #7
 80059f4:	633b      	str	r3, [r7, #48]	; 0x30
 80059f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f8:	2b7f      	cmp	r3, #127	; 0x7f
 80059fa:	d8f0      	bhi.n	80059de <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80059fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	637a      	str	r2, [r7, #52]	; 0x34
 8005a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a14:	e00b      	b.n	8005a2e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	1c59      	adds	r1, r3, #1
 8005a1e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	09db      	lsrs	r3, r3, #7
 8005a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	2b7f      	cmp	r3, #127	; 0x7f
 8005a32:	d8f0      	bhi.n	8005a16 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24
 8005a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a4a:	623b      	str	r3, [r7, #32]
 8005a4c:	e00b      	b.n	8005a66 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	1c59      	adds	r1, r3, #1
 8005a56:	6279      	str	r1, [r7, #36]	; 0x24
 8005a58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	09db      	lsrs	r3, r3, #7
 8005a64:	623b      	str	r3, [r7, #32]
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	2b7f      	cmp	r3, #127	; 0x7f
 8005a6a:	d8f0      	bhi.n	8005a4e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	627a      	str	r2, [r7, #36]	; 0x24
 8005a72:	6a3a      	ldr	r2, [r7, #32]
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	6979      	ldr	r1, [r7, #20]
 8005a80:	69b8      	ldr	r0, [r7, #24]
 8005a82:	f7ff f8f1 	bl	8004c68 <_SendPacket>
  RECORD_END();
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f383 8811 	msr	BASEPRI, r3
}
 8005a8c:	bf00      	nop
 8005a8e:	3740      	adds	r7, #64	; 0x40
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20014288 	.word	0x20014288

08005a98 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08c      	sub	sp, #48	; 0x30
 8005a9c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005a9e:	4b58      	ldr	r3, [pc, #352]	; (8005c00 <SEGGER_SYSVIEW_Start+0x168>)
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005aa4:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa8:	f04f 0120 	mov.w	r1, #32
 8005aac:	f381 8811 	msr	BASEPRI, r1
 8005ab0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005ab2:	4b53      	ldr	r3, [pc, #332]	; (8005c00 <SEGGER_SYSVIEW_Start+0x168>)
 8005ab4:	785b      	ldrb	r3, [r3, #1]
 8005ab6:	220a      	movs	r2, #10
 8005ab8:	4952      	ldr	r1, [pc, #328]	; (8005c04 <SEGGER_SYSVIEW_Start+0x16c>)
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fa fb88 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005ac6:	200a      	movs	r0, #10
 8005ac8:	f7ff fe2a 	bl	8005720 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005acc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ad0:	f04f 0120 	mov.w	r1, #32
 8005ad4:	f381 8811 	msr	BASEPRI, r1
 8005ad8:	60bb      	str	r3, [r7, #8]
 8005ada:	484b      	ldr	r0, [pc, #300]	; (8005c08 <SEGGER_SYSVIEW_Start+0x170>)
 8005adc:	f7fe ffd6 	bl	8004a8c <_PreparePacket>
 8005ae0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aea:	4b45      	ldr	r3, [pc, #276]	; (8005c00 <SEGGER_SYSVIEW_Start+0x168>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af0:	e00b      	b.n	8005b0a <SEGGER_SYSVIEW_Start+0x72>
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	1c59      	adds	r1, r3, #1
 8005afa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005afc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	701a      	strb	r2, [r3, #0]
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	09db      	lsrs	r3, r3, #7
 8005b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b0e:	d8f0      	bhi.n	8005af2 <SEGGER_SYSVIEW_Start+0x5a>
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
 8005b24:	4b36      	ldr	r3, [pc, #216]	; (8005c00 <SEGGER_SYSVIEW_Start+0x168>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	623b      	str	r3, [r7, #32]
 8005b2a:	e00b      	b.n	8005b44 <SEGGER_SYSVIEW_Start+0xac>
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	1c59      	adds	r1, r3, #1
 8005b34:	6279      	str	r1, [r7, #36]	; 0x24
 8005b36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	09db      	lsrs	r3, r3, #7
 8005b42:	623b      	str	r3, [r7, #32]
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	2b7f      	cmp	r3, #127	; 0x7f
 8005b48:	d8f0      	bhi.n	8005b2c <SEGGER_SYSVIEW_Start+0x94>
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	627a      	str	r2, [r7, #36]	; 0x24
 8005b50:	6a3a      	ldr	r2, [r7, #32]
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	61fb      	str	r3, [r7, #28]
 8005b5e:	4b28      	ldr	r3, [pc, #160]	; (8005c00 <SEGGER_SYSVIEW_Start+0x168>)
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	e00b      	b.n	8005b7e <SEGGER_SYSVIEW_Start+0xe6>
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	1c59      	adds	r1, r3, #1
 8005b6e:	61f9      	str	r1, [r7, #28]
 8005b70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	09db      	lsrs	r3, r3, #7
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b7f      	cmp	r3, #127	; 0x7f
 8005b82:	d8f0      	bhi.n	8005b66 <SEGGER_SYSVIEW_Start+0xce>
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	61fa      	str	r2, [r7, #28]
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	701a      	strb	r2, [r3, #0]
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	2300      	movs	r3, #0
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	e00b      	b.n	8005bb6 <SEGGER_SYSVIEW_Start+0x11e>
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	1c59      	adds	r1, r3, #1
 8005ba6:	6179      	str	r1, [r7, #20]
 8005ba8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	09db      	lsrs	r3, r3, #7
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	2b7f      	cmp	r3, #127	; 0x7f
 8005bba:	d8f0      	bhi.n	8005b9e <SEGGER_SYSVIEW_Start+0x106>
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	617a      	str	r2, [r7, #20]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	b2d2      	uxtb	r2, r2
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005bcc:	2218      	movs	r2, #24
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff f849 	bl	8004c68 <_SendPacket>
      RECORD_END();
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005bdc:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <SEGGER_SYSVIEW_Start+0x168>)
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005be4:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <SEGGER_SYSVIEW_Start+0x168>)
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005bea:	f000 f9eb 	bl	8005fc4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005bee:	f000 f9b1 	bl	8005f54 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005bf2:	f000 fc83 	bl	80064fc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005bf6:	bf00      	nop
 8005bf8:	3730      	adds	r7, #48	; 0x30
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20014258 	.word	0x20014258
 8005c04:	0800683c 	.word	0x0800683c
 8005c08:	20014288 	.word	0x20014288

08005c0c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c12:	f3ef 8311 	mrs	r3, BASEPRI
 8005c16:	f04f 0120 	mov.w	r1, #32
 8005c1a:	f381 8811 	msr	BASEPRI, r1
 8005c1e:	607b      	str	r3, [r7, #4]
 8005c20:	480b      	ldr	r0, [pc, #44]	; (8005c50 <SEGGER_SYSVIEW_Stop+0x44>)
 8005c22:	f7fe ff33 	bl	8004a8c <_PreparePacket>
 8005c26:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005c28:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <SEGGER_SYSVIEW_Stop+0x48>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d007      	beq.n	8005c40 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005c30:	220b      	movs	r2, #11
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	6838      	ldr	r0, [r7, #0]
 8005c36:	f7ff f817 	bl	8004c68 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005c3a:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <SEGGER_SYSVIEW_Stop+0x48>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f383 8811 	msr	BASEPRI, r3
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20014288 	.word	0x20014288
 8005c54:	20014258 	.word	0x20014258

08005c58 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08c      	sub	sp, #48	; 0x30
 8005c5c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c5e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c62:	f04f 0120 	mov.w	r1, #32
 8005c66:	f381 8811 	msr	BASEPRI, r1
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	4845      	ldr	r0, [pc, #276]	; (8005d84 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005c6e:	f7fe ff0d 	bl	8004a8c <_PreparePacket>
 8005c72:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c7c:	4b42      	ldr	r3, [pc, #264]	; (8005d88 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c82:	e00b      	b.n	8005c9c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	1c59      	adds	r1, r3, #1
 8005c8c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	09db      	lsrs	r3, r3, #7
 8005c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005ca0:	d8f0      	bhi.n	8005c84 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb6:	4b34      	ldr	r3, [pc, #208]	; (8005d88 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	623b      	str	r3, [r7, #32]
 8005cbc:	e00b      	b.n	8005cd6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	1c59      	adds	r1, r3, #1
 8005cc6:	6279      	str	r1, [r7, #36]	; 0x24
 8005cc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	701a      	strb	r2, [r3, #0]
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	09db      	lsrs	r3, r3, #7
 8005cd4:	623b      	str	r3, [r7, #32]
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8005cda:	d8f0      	bhi.n	8005cbe <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	627a      	str	r2, [r7, #36]	; 0x24
 8005ce2:	6a3a      	ldr	r2, [r7, #32]
 8005ce4:	b2d2      	uxtb	r2, r2
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	4b25      	ldr	r3, [pc, #148]	; (8005d88 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	61bb      	str	r3, [r7, #24]
 8005cf6:	e00b      	b.n	8005d10 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	1c59      	adds	r1, r3, #1
 8005d00:	61f9      	str	r1, [r7, #28]
 8005d02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	09db      	lsrs	r3, r3, #7
 8005d0e:	61bb      	str	r3, [r7, #24]
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2b7f      	cmp	r3, #127	; 0x7f
 8005d14:	d8f0      	bhi.n	8005cf8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	61fa      	str	r2, [r7, #28]
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	e00b      	b.n	8005d48 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	1c59      	adds	r1, r3, #1
 8005d38:	6179      	str	r1, [r7, #20]
 8005d3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	09db      	lsrs	r3, r3, #7
 8005d46:	613b      	str	r3, [r7, #16]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d4c:	d8f0      	bhi.n	8005d30 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	617a      	str	r2, [r7, #20]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d5e:	2218      	movs	r2, #24
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	68b8      	ldr	r0, [r7, #8]
 8005d64:	f7fe ff80 	bl	8004c68 <_SendPacket>
  RECORD_END();
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d6e:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005d76:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	4798      	blx	r3
  }
}
 8005d7c:	bf00      	nop
 8005d7e:	3730      	adds	r7, #48	; 0x30
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20014288 	.word	0x20014288
 8005d88:	20014258 	.word	0x20014258

08005d8c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b092      	sub	sp, #72	; 0x48
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005d94:	f3ef 8311 	mrs	r3, BASEPRI
 8005d98:	f04f 0120 	mov.w	r1, #32
 8005d9c:	f381 8811 	msr	BASEPRI, r1
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	486a      	ldr	r0, [pc, #424]	; (8005f4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005da4:	f7fe fe72 	bl	8004a8c <_PreparePacket>
 8005da8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	647b      	str	r3, [r7, #68]	; 0x44
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	4b66      	ldr	r3, [pc, #408]	; (8005f50 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8005dbe:	e00b      	b.n	8005dd8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc6:	1c59      	adds	r1, r3, #1
 8005dc8:	6479      	str	r1, [r7, #68]	; 0x44
 8005dca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd4:	09db      	lsrs	r3, r3, #7
 8005dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8005dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dda:	2b7f      	cmp	r3, #127	; 0x7f
 8005ddc:	d8f0      	bhi.n	8005dc0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	647a      	str	r2, [r7, #68]	; 0x44
 8005de4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005df8:	e00b      	b.n	8005e12 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e00:	1c59      	adds	r1, r3, #1
 8005e02:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005e04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	09db      	lsrs	r3, r3, #7
 8005e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e14:	2b7f      	cmp	r3, #127	; 0x7f
 8005e16:	d8f0      	bhi.n	8005dfa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e26:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	4619      	mov	r1, r3
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f7fe fddb 	bl	80049ec <_EncodeStr>
 8005e36:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005e38:	2209      	movs	r2, #9
 8005e3a:	68f9      	ldr	r1, [r7, #12]
 8005e3c:	6938      	ldr	r0, [r7, #16]
 8005e3e:	f7fe ff13 	bl	8004c68 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	4b40      	ldr	r3, [pc, #256]	; (8005f50 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	633b      	str	r3, [r7, #48]	; 0x30
 8005e56:	e00b      	b.n	8005e70 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5e:	1c59      	adds	r1, r3, #1
 8005e60:	6379      	str	r1, [r7, #52]	; 0x34
 8005e62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	09db      	lsrs	r3, r3, #7
 8005e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e72:	2b7f      	cmp	r3, #127	; 0x7f
 8005e74:	d8f0      	bhi.n	8005e58 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	637a      	str	r2, [r7, #52]	; 0x34
 8005e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e90:	e00b      	b.n	8005eaa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e98:	1c59      	adds	r1, r3, #1
 8005e9a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	09db      	lsrs	r3, r3, #7
 8005ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	2b7f      	cmp	r3, #127	; 0x7f
 8005eae:	d8f0      	bhi.n	8005e92 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	623b      	str	r3, [r7, #32]
 8005eca:	e00b      	b.n	8005ee4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	1c59      	adds	r1, r3, #1
 8005ed4:	6279      	str	r1, [r7, #36]	; 0x24
 8005ed6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	09db      	lsrs	r3, r3, #7
 8005ee2:	623b      	str	r3, [r7, #32]
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee8:	d8f0      	bhi.n	8005ecc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	627a      	str	r2, [r7, #36]	; 0x24
 8005ef0:	6a3a      	ldr	r2, [r7, #32]
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	61fb      	str	r3, [r7, #28]
 8005efe:	2300      	movs	r3, #0
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	e00b      	b.n	8005f1c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	1c59      	adds	r1, r3, #1
 8005f0c:	61f9      	str	r1, [r7, #28]
 8005f0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	701a      	strb	r2, [r3, #0]
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	09db      	lsrs	r3, r3, #7
 8005f1a:	61bb      	str	r3, [r7, #24]
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f20:	d8f0      	bhi.n	8005f04 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	61fa      	str	r2, [r7, #28]
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005f32:	2215      	movs	r2, #21
 8005f34:	68f9      	ldr	r1, [r7, #12]
 8005f36:	6938      	ldr	r0, [r7, #16]
 8005f38:	f7fe fe96 	bl	8004c68 <_SendPacket>
  RECORD_END();
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f383 8811 	msr	BASEPRI, r3
}
 8005f42:	bf00      	nop
 8005f44:	3748      	adds	r7, #72	; 0x48
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20014288 	.word	0x20014288
 8005f50:	20014258 	.word	0x20014258

08005f54 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005f58:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d008      	beq.n	8005f72 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005f60:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005f6a:	4b03      	ldr	r3, [pc, #12]	; (8005f78 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	4798      	blx	r3
  }
}
 8005f72:	bf00      	nop
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20014258 	.word	0x20014258

08005f7c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f84:	f3ef 8311 	mrs	r3, BASEPRI
 8005f88:	f04f 0120 	mov.w	r1, #32
 8005f8c:	f381 8811 	msr	BASEPRI, r1
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	480b      	ldr	r0, [pc, #44]	; (8005fc0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005f94:	f7fe fd7a 	bl	8004a8c <_PreparePacket>
 8005f98:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f9a:	2280      	movs	r2, #128	; 0x80
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	6938      	ldr	r0, [r7, #16]
 8005fa0:	f7fe fd24 	bl	80049ec <_EncodeStr>
 8005fa4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005fa6:	220e      	movs	r2, #14
 8005fa8:	68f9      	ldr	r1, [r7, #12]
 8005faa:	6938      	ldr	r0, [r7, #16]
 8005fac:	f7fe fe5c 	bl	8004c68 <_SendPacket>
  RECORD_END();
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f383 8811 	msr	BASEPRI, r3
}
 8005fb6:	bf00      	nop
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20014288 	.word	0x20014288

08005fc4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005fc4:	b590      	push	{r4, r7, lr}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005fca:	4b15      	ldr	r3, [pc, #84]	; (8006020 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d01a      	beq.n	8006008 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005fd2:	4b13      	ldr	r3, [pc, #76]	; (8006020 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d015      	beq.n	8006008 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005fdc:	4b10      	ldr	r3, [pc, #64]	; (8006020 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4798      	blx	r3
 8005fe4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005fe8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005fea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fee:	f04f 0200 	mov.w	r2, #0
 8005ff2:	f04f 0300 	mov.w	r3, #0
 8005ff6:	000a      	movs	r2, r1
 8005ff8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	4621      	mov	r1, r4
 8006000:	200d      	movs	r0, #13
 8006002:	f7ff fbe7 	bl	80057d4 <SEGGER_SYSVIEW_RecordU32x2>
 8006006:	e006      	b.n	8006016 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006008:	4b06      	ldr	r3, [pc, #24]	; (8006024 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4619      	mov	r1, r3
 800600e:	200c      	movs	r0, #12
 8006010:	f7ff fba4 	bl	800575c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	bd90      	pop	{r4, r7, pc}
 800601e:	bf00      	nop
 8006020:	20014258 	.word	0x20014258
 8006024:	e0001004 	.word	0xe0001004

08006028 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800602e:	f3ef 8311 	mrs	r3, BASEPRI
 8006032:	f04f 0120 	mov.w	r1, #32
 8006036:	f381 8811 	msr	BASEPRI, r1
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	4819      	ldr	r0, [pc, #100]	; (80060a4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800603e:	f7fe fd25 	bl	8004a8c <_PreparePacket>
 8006042:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006048:	4b17      	ldr	r3, [pc, #92]	; (80060a8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006050:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	e00b      	b.n	8006074 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	b2da      	uxtb	r2, r3
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	1c59      	adds	r1, r3, #1
 8006064:	6179      	str	r1, [r7, #20]
 8006066:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	09db      	lsrs	r3, r3, #7
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	2b7f      	cmp	r3, #127	; 0x7f
 8006078:	d8f0      	bhi.n	800605c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	617a      	str	r2, [r7, #20]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800608a:	2202      	movs	r2, #2
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	68b8      	ldr	r0, [r7, #8]
 8006090:	f7fe fdea 	bl	8004c68 <_SendPacket>
  RECORD_END();
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f383 8811 	msr	BASEPRI, r3
}
 800609a:	bf00      	nop
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20014288 	.word	0x20014288
 80060a8:	e000ed04 	.word	0xe000ed04

080060ac <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060b2:	f3ef 8311 	mrs	r3, BASEPRI
 80060b6:	f04f 0120 	mov.w	r1, #32
 80060ba:	f381 8811 	msr	BASEPRI, r1
 80060be:	607b      	str	r3, [r7, #4]
 80060c0:	4807      	ldr	r0, [pc, #28]	; (80060e0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80060c2:	f7fe fce3 	bl	8004a8c <_PreparePacket>
 80060c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80060c8:	2203      	movs	r2, #3
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	6838      	ldr	r0, [r7, #0]
 80060ce:	f7fe fdcb 	bl	8004c68 <_SendPacket>
  RECORD_END();
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f383 8811 	msr	BASEPRI, r3
}
 80060d8:	bf00      	nop
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20014288 	.word	0x20014288

080060e4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060ea:	f3ef 8311 	mrs	r3, BASEPRI
 80060ee:	f04f 0120 	mov.w	r1, #32
 80060f2:	f381 8811 	msr	BASEPRI, r1
 80060f6:	607b      	str	r3, [r7, #4]
 80060f8:	4807      	ldr	r0, [pc, #28]	; (8006118 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80060fa:	f7fe fcc7 	bl	8004a8c <_PreparePacket>
 80060fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006100:	2212      	movs	r2, #18
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6838      	ldr	r0, [r7, #0]
 8006106:	f7fe fdaf 	bl	8004c68 <_SendPacket>
  RECORD_END();
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f383 8811 	msr	BASEPRI, r3
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	20014288 	.word	0x20014288

0800611c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006122:	f3ef 8311 	mrs	r3, BASEPRI
 8006126:	f04f 0120 	mov.w	r1, #32
 800612a:	f381 8811 	msr	BASEPRI, r1
 800612e:	607b      	str	r3, [r7, #4]
 8006130:	4807      	ldr	r0, [pc, #28]	; (8006150 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006132:	f7fe fcab 	bl	8004a8c <_PreparePacket>
 8006136:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006138:	2211      	movs	r2, #17
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6838      	ldr	r0, [r7, #0]
 800613e:	f7fe fd93 	bl	8004c68 <_SendPacket>
  RECORD_END();
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f383 8811 	msr	BASEPRI, r3
}
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20014288 	.word	0x20014288

08006154 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800615c:	f3ef 8311 	mrs	r3, BASEPRI
 8006160:	f04f 0120 	mov.w	r1, #32
 8006164:	f381 8811 	msr	BASEPRI, r1
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	4819      	ldr	r0, [pc, #100]	; (80061d0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800616c:	f7fe fc8e 	bl	8004a8c <_PreparePacket>
 8006170:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006176:	4b17      	ldr	r3, [pc, #92]	; (80061d4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	61fb      	str	r3, [r7, #28]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	61bb      	str	r3, [r7, #24]
 8006188:	e00b      	b.n	80061a2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	b2da      	uxtb	r2, r3
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	1c59      	adds	r1, r3, #1
 8006192:	61f9      	str	r1, [r7, #28]
 8006194:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006198:	b2d2      	uxtb	r2, r2
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	09db      	lsrs	r3, r3, #7
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2b7f      	cmp	r3, #127	; 0x7f
 80061a6:	d8f0      	bhi.n	800618a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	61fa      	str	r2, [r7, #28]
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80061b8:	2208      	movs	r2, #8
 80061ba:	68f9      	ldr	r1, [r7, #12]
 80061bc:	6938      	ldr	r0, [r7, #16]
 80061be:	f7fe fd53 	bl	8004c68 <_SendPacket>
  RECORD_END();
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f383 8811 	msr	BASEPRI, r3
}
 80061c8:	bf00      	nop
 80061ca:	3720      	adds	r7, #32
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20014288 	.word	0x20014288
 80061d4:	20014258 	.word	0x20014258

080061d8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061e0:	f3ef 8311 	mrs	r3, BASEPRI
 80061e4:	f04f 0120 	mov.w	r1, #32
 80061e8:	f381 8811 	msr	BASEPRI, r1
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	4819      	ldr	r0, [pc, #100]	; (8006254 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80061f0:	f7fe fc4c 	bl	8004a8c <_PreparePacket>
 80061f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061fa:	4b17      	ldr	r3, [pc, #92]	; (8006258 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	e00b      	b.n	8006226 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	b2da      	uxtb	r2, r3
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	1c59      	adds	r1, r3, #1
 8006216:	61f9      	str	r1, [r7, #28]
 8006218:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	09db      	lsrs	r3, r3, #7
 8006224:	61bb      	str	r3, [r7, #24]
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2b7f      	cmp	r3, #127	; 0x7f
 800622a:	d8f0      	bhi.n	800620e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	61fa      	str	r2, [r7, #28]
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800623c:	2204      	movs	r2, #4
 800623e:	68f9      	ldr	r1, [r7, #12]
 8006240:	6938      	ldr	r0, [r7, #16]
 8006242:	f7fe fd11 	bl	8004c68 <_SendPacket>
  RECORD_END();
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f383 8811 	msr	BASEPRI, r3
}
 800624c:	bf00      	nop
 800624e:	3720      	adds	r7, #32
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20014288 	.word	0x20014288
 8006258:	20014258 	.word	0x20014258

0800625c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800625c:	b580      	push	{r7, lr}
 800625e:	b088      	sub	sp, #32
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006264:	f3ef 8311 	mrs	r3, BASEPRI
 8006268:	f04f 0120 	mov.w	r1, #32
 800626c:	f381 8811 	msr	BASEPRI, r1
 8006270:	617b      	str	r3, [r7, #20]
 8006272:	4819      	ldr	r0, [pc, #100]	; (80062d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006274:	f7fe fc0a 	bl	8004a8c <_PreparePacket>
 8006278:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800627e:	4b17      	ldr	r3, [pc, #92]	; (80062dc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	61fb      	str	r3, [r7, #28]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	61bb      	str	r3, [r7, #24]
 8006290:	e00b      	b.n	80062aa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	b2da      	uxtb	r2, r3
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	1c59      	adds	r1, r3, #1
 800629a:	61f9      	str	r1, [r7, #28]
 800629c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	701a      	strb	r2, [r3, #0]
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	09db      	lsrs	r3, r3, #7
 80062a8:	61bb      	str	r3, [r7, #24]
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	2b7f      	cmp	r3, #127	; 0x7f
 80062ae:	d8f0      	bhi.n	8006292 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	61fa      	str	r2, [r7, #28]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80062c0:	2206      	movs	r2, #6
 80062c2:	68f9      	ldr	r1, [r7, #12]
 80062c4:	6938      	ldr	r0, [r7, #16]
 80062c6:	f7fe fccf 	bl	8004c68 <_SendPacket>
  RECORD_END();
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f383 8811 	msr	BASEPRI, r3
}
 80062d0:	bf00      	nop
 80062d2:	3720      	adds	r7, #32
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20014288 	.word	0x20014288
 80062dc:	20014258 	.word	0x20014258

080062e0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08a      	sub	sp, #40	; 0x28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80062ea:	f3ef 8311 	mrs	r3, BASEPRI
 80062ee:	f04f 0120 	mov.w	r1, #32
 80062f2:	f381 8811 	msr	BASEPRI, r1
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	4827      	ldr	r0, [pc, #156]	; (8006398 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80062fa:	f7fe fbc7 	bl	8004a8c <_PreparePacket>
 80062fe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006304:	4b25      	ldr	r3, [pc, #148]	; (800639c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	627b      	str	r3, [r7, #36]	; 0x24
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	623b      	str	r3, [r7, #32]
 8006316:	e00b      	b.n	8006330 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	b2da      	uxtb	r2, r3
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	1c59      	adds	r1, r3, #1
 8006320:	6279      	str	r1, [r7, #36]	; 0x24
 8006322:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	09db      	lsrs	r3, r3, #7
 800632e:	623b      	str	r3, [r7, #32]
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	2b7f      	cmp	r3, #127	; 0x7f
 8006334:	d8f0      	bhi.n	8006318 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	627a      	str	r2, [r7, #36]	; 0x24
 800633c:	6a3a      	ldr	r2, [r7, #32]
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	61fb      	str	r3, [r7, #28]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	e00b      	b.n	8006368 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	b2da      	uxtb	r2, r3
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	1c59      	adds	r1, r3, #1
 8006358:	61f9      	str	r1, [r7, #28]
 800635a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	09db      	lsrs	r3, r3, #7
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	2b7f      	cmp	r3, #127	; 0x7f
 800636c:	d8f0      	bhi.n	8006350 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	61fa      	str	r2, [r7, #28]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800637e:	2207      	movs	r2, #7
 8006380:	68f9      	ldr	r1, [r7, #12]
 8006382:	6938      	ldr	r0, [r7, #16]
 8006384:	f7fe fc70 	bl	8004c68 <_SendPacket>
  RECORD_END();
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f383 8811 	msr	BASEPRI, r3
}
 800638e:	bf00      	nop
 8006390:	3728      	adds	r7, #40	; 0x28
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20014288 	.word	0x20014288
 800639c:	20014258 	.word	0x20014258

080063a0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80063a8:	4b04      	ldr	r3, [pc, #16]	; (80063bc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	1ad3      	subs	r3, r2, r3
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	20014258 	.word	0x20014258

080063c0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08c      	sub	sp, #48	; 0x30
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	4603      	mov	r3, r0
 80063c8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80063ca:	4b3b      	ldr	r3, [pc, #236]	; (80064b8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d06d      	beq.n	80064ae <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80063d2:	4b39      	ldr	r3, [pc, #228]	; (80064b8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80063d8:	2300      	movs	r3, #0
 80063da:	62bb      	str	r3, [r7, #40]	; 0x28
 80063dc:	e008      	b.n	80063f0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80063de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80063ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ec:	3301      	adds	r3, #1
 80063ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f0:	79fb      	ldrb	r3, [r7, #7]
 80063f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d3f2      	bcc.n	80063de <SEGGER_SYSVIEW_SendModule+0x1e>
 80063f8:	e000      	b.n	80063fc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80063fa:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d055      	beq.n	80064ae <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006402:	f3ef 8311 	mrs	r3, BASEPRI
 8006406:	f04f 0120 	mov.w	r1, #32
 800640a:	f381 8811 	msr	BASEPRI, r1
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	482a      	ldr	r0, [pc, #168]	; (80064bc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006412:	f7fe fb3b 	bl	8004a8c <_PreparePacket>
 8006416:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	623b      	str	r3, [r7, #32]
 8006424:	e00b      	b.n	800643e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	b2da      	uxtb	r2, r3
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	1c59      	adds	r1, r3, #1
 800642e:	6279      	str	r1, [r7, #36]	; 0x24
 8006430:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	09db      	lsrs	r3, r3, #7
 800643c:	623b      	str	r3, [r7, #32]
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	2b7f      	cmp	r3, #127	; 0x7f
 8006442:	d8f0      	bhi.n	8006426 <SEGGER_SYSVIEW_SendModule+0x66>
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	627a      	str	r2, [r7, #36]	; 0x24
 800644a:	6a3a      	ldr	r2, [r7, #32]
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	61fb      	str	r3, [r7, #28]
 8006458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	61bb      	str	r3, [r7, #24]
 800645e:	e00b      	b.n	8006478 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	b2da      	uxtb	r2, r3
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	1c59      	adds	r1, r3, #1
 8006468:	61f9      	str	r1, [r7, #28]
 800646a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	09db      	lsrs	r3, r3, #7
 8006476:	61bb      	str	r3, [r7, #24]
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	2b7f      	cmp	r3, #127	; 0x7f
 800647c:	d8f0      	bhi.n	8006460 <SEGGER_SYSVIEW_SendModule+0xa0>
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	61fa      	str	r2, [r7, #28]
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2280      	movs	r2, #128	; 0x80
 8006494:	4619      	mov	r1, r3
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7fe faa8 	bl	80049ec <_EncodeStr>
 800649c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800649e:	2216      	movs	r2, #22
 80064a0:	68f9      	ldr	r1, [r7, #12]
 80064a2:	6938      	ldr	r0, [r7, #16]
 80064a4:	f7fe fbe0 	bl	8004c68 <_SendPacket>
      RECORD_END();
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80064ae:	bf00      	nop
 80064b0:	3730      	adds	r7, #48	; 0x30
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20014280 	.word	0x20014280
 80064bc:	20014288 	.word	0x20014288

080064c0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80064c6:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00f      	beq.n	80064ee <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80064ce:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f2      	bne.n	80064d4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20014280 	.word	0x20014280

080064fc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006502:	f3ef 8311 	mrs	r3, BASEPRI
 8006506:	f04f 0120 	mov.w	r1, #32
 800650a:	f381 8811 	msr	BASEPRI, r1
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	4817      	ldr	r0, [pc, #92]	; (8006570 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006512:	f7fe fabb 	bl	8004a8c <_PreparePacket>
 8006516:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	4b14      	ldr	r3, [pc, #80]	; (8006574 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	613b      	str	r3, [r7, #16]
 8006526:	e00b      	b.n	8006540 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	b2da      	uxtb	r2, r3
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	1c59      	adds	r1, r3, #1
 8006530:	6179      	str	r1, [r7, #20]
 8006532:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006536:	b2d2      	uxtb	r2, r2
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	09db      	lsrs	r3, r3, #7
 800653e:	613b      	str	r3, [r7, #16]
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2b7f      	cmp	r3, #127	; 0x7f
 8006544:	d8f0      	bhi.n	8006528 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	617a      	str	r2, [r7, #20]
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006556:	221b      	movs	r2, #27
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	68b8      	ldr	r0, [r7, #8]
 800655c:	f7fe fb84 	bl	8004c68 <_SendPacket>
  RECORD_END();
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f383 8811 	msr	BASEPRI, r3
}
 8006566:	bf00      	nop
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20014288 	.word	0x20014288
 8006574:	20014284 	.word	0x20014284

08006578 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006578:	b40f      	push	{r0, r1, r2, r3}
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006580:	f107 0314 	add.w	r3, r7, #20
 8006584:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006586:	1d3b      	adds	r3, r7, #4
 8006588:	461a      	mov	r2, r3
 800658a:	2100      	movs	r1, #0
 800658c:	6938      	ldr	r0, [r7, #16]
 800658e:	f7fe fe7b 	bl	8005288 <_VPrintTarget>
  va_end(ParamList);
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800659c:	b004      	add	sp, #16
 800659e:	4770      	bx	lr

080065a0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08a      	sub	sp, #40	; 0x28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065a8:	f3ef 8311 	mrs	r3, BASEPRI
 80065ac:	f04f 0120 	mov.w	r1, #32
 80065b0:	f381 8811 	msr	BASEPRI, r1
 80065b4:	617b      	str	r3, [r7, #20]
 80065b6:	4827      	ldr	r0, [pc, #156]	; (8006654 <SEGGER_SYSVIEW_Warn+0xb4>)
 80065b8:	f7fe fa68 	bl	8004a8c <_PreparePacket>
 80065bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065be:	2280      	movs	r2, #128	; 0x80
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	6938      	ldr	r0, [r7, #16]
 80065c4:	f7fe fa12 	bl	80049ec <_EncodeStr>
 80065c8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
 80065ce:	2301      	movs	r3, #1
 80065d0:	623b      	str	r3, [r7, #32]
 80065d2:	e00b      	b.n	80065ec <SEGGER_SYSVIEW_Warn+0x4c>
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	1c59      	adds	r1, r3, #1
 80065dc:	6279      	str	r1, [r7, #36]	; 0x24
 80065de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	09db      	lsrs	r3, r3, #7
 80065ea:	623b      	str	r3, [r7, #32]
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	2b7f      	cmp	r3, #127	; 0x7f
 80065f0:	d8f0      	bhi.n	80065d4 <SEGGER_SYSVIEW_Warn+0x34>
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	627a      	str	r2, [r7, #36]	; 0x24
 80065f8:	6a3a      	ldr	r2, [r7, #32]
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	61fb      	str	r3, [r7, #28]
 8006606:	2300      	movs	r3, #0
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	e00b      	b.n	8006624 <SEGGER_SYSVIEW_Warn+0x84>
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	b2da      	uxtb	r2, r3
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	1c59      	adds	r1, r3, #1
 8006614:	61f9      	str	r1, [r7, #28]
 8006616:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	09db      	lsrs	r3, r3, #7
 8006622:	61bb      	str	r3, [r7, #24]
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	2b7f      	cmp	r3, #127	; 0x7f
 8006628:	d8f0      	bhi.n	800660c <SEGGER_SYSVIEW_Warn+0x6c>
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	61fa      	str	r2, [r7, #28]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800663a:	221a      	movs	r2, #26
 800663c:	68f9      	ldr	r1, [r7, #12]
 800663e:	6938      	ldr	r0, [r7, #16]
 8006640:	f7fe fb12 	bl	8004c68 <_SendPacket>
  RECORD_END();
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f383 8811 	msr	BASEPRI, r3
}
 800664a:	bf00      	nop
 800664c:	3728      	adds	r7, #40	; 0x28
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20014288 	.word	0x20014288

08006658 <__libc_init_array>:
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	4d0d      	ldr	r5, [pc, #52]	; (8006690 <__libc_init_array+0x38>)
 800665c:	4c0d      	ldr	r4, [pc, #52]	; (8006694 <__libc_init_array+0x3c>)
 800665e:	1b64      	subs	r4, r4, r5
 8006660:	10a4      	asrs	r4, r4, #2
 8006662:	2600      	movs	r6, #0
 8006664:	42a6      	cmp	r6, r4
 8006666:	d109      	bne.n	800667c <__libc_init_array+0x24>
 8006668:	4d0b      	ldr	r5, [pc, #44]	; (8006698 <__libc_init_array+0x40>)
 800666a:	4c0c      	ldr	r4, [pc, #48]	; (800669c <__libc_init_array+0x44>)
 800666c:	f000 f83c 	bl	80066e8 <_init>
 8006670:	1b64      	subs	r4, r4, r5
 8006672:	10a4      	asrs	r4, r4, #2
 8006674:	2600      	movs	r6, #0
 8006676:	42a6      	cmp	r6, r4
 8006678:	d105      	bne.n	8006686 <__libc_init_array+0x2e>
 800667a:	bd70      	pop	{r4, r5, r6, pc}
 800667c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006680:	4798      	blx	r3
 8006682:	3601      	adds	r6, #1
 8006684:	e7ee      	b.n	8006664 <__libc_init_array+0xc>
 8006686:	f855 3b04 	ldr.w	r3, [r5], #4
 800668a:	4798      	blx	r3
 800668c:	3601      	adds	r6, #1
 800668e:	e7f2      	b.n	8006676 <__libc_init_array+0x1e>
 8006690:	08006860 	.word	0x08006860
 8006694:	08006860 	.word	0x08006860
 8006698:	08006860 	.word	0x08006860
 800669c:	08006864 	.word	0x08006864

080066a0 <memcmp>:
 80066a0:	b530      	push	{r4, r5, lr}
 80066a2:	3901      	subs	r1, #1
 80066a4:	2400      	movs	r4, #0
 80066a6:	42a2      	cmp	r2, r4
 80066a8:	d101      	bne.n	80066ae <memcmp+0xe>
 80066aa:	2000      	movs	r0, #0
 80066ac:	e005      	b.n	80066ba <memcmp+0x1a>
 80066ae:	5d03      	ldrb	r3, [r0, r4]
 80066b0:	3401      	adds	r4, #1
 80066b2:	5d0d      	ldrb	r5, [r1, r4]
 80066b4:	42ab      	cmp	r3, r5
 80066b6:	d0f6      	beq.n	80066a6 <memcmp+0x6>
 80066b8:	1b58      	subs	r0, r3, r5
 80066ba:	bd30      	pop	{r4, r5, pc}

080066bc <memcpy>:
 80066bc:	440a      	add	r2, r1
 80066be:	4291      	cmp	r1, r2
 80066c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80066c4:	d100      	bne.n	80066c8 <memcpy+0xc>
 80066c6:	4770      	bx	lr
 80066c8:	b510      	push	{r4, lr}
 80066ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066d2:	4291      	cmp	r1, r2
 80066d4:	d1f9      	bne.n	80066ca <memcpy+0xe>
 80066d6:	bd10      	pop	{r4, pc}

080066d8 <memset>:
 80066d8:	4402      	add	r2, r0
 80066da:	4603      	mov	r3, r0
 80066dc:	4293      	cmp	r3, r2
 80066de:	d100      	bne.n	80066e2 <memset+0xa>
 80066e0:	4770      	bx	lr
 80066e2:	f803 1b01 	strb.w	r1, [r3], #1
 80066e6:	e7f9      	b.n	80066dc <memset+0x4>

080066e8 <_init>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	bf00      	nop
 80066ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ee:	bc08      	pop	{r3}
 80066f0:	469e      	mov	lr, r3
 80066f2:	4770      	bx	lr

080066f4 <_fini>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	bf00      	nop
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr
