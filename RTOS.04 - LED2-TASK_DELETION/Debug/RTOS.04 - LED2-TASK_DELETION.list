
RTOS.04 - LED2-TASK_DELETION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006fa8  08006fa8  00016fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007140  08007140  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007140  08007140  00017140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007148  08007148  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007148  08007148  00017148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800714c  0800714c  0001714c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000144a0  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200144b4  200144b4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f90  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000313e  00000000  00000000  00038fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  0003c118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001178  00000000  00000000  0003d408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023728  00000000  00000000  0003e580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000154be  00000000  00000000  00061ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d76ab  00000000  00000000  00077166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014e811  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f2c  00000000  00000000  0014e864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f90 	.word	0x08006f90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006f90 	.word	0x08006f90

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001440c 	.word	0x2001440c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fb1d 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f897 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8f3 	bl	8000754 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //cyclic counter
  DWT_CTRL |= (1<<0);
 800056e:	4b3d      	ldr	r3, [pc, #244]	; (8000664 <main+0x108>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a3c      	ldr	r2, [pc, #240]	; (8000664 <main+0x108>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800057a:	f004 fafb 	bl	8004b74 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(task_green_handler, "LED_Green", 200, NULL, 3, &ledg_handle);
 800057e:	4b3a      	ldr	r3, [pc, #232]	; (8000668 <main+0x10c>)
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2303      	movs	r3, #3
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	22c8      	movs	r2, #200	; 0xc8
 800058a:	4938      	ldr	r1, [pc, #224]	; (800066c <main+0x110>)
 800058c:	4838      	ldr	r0, [pc, #224]	; (8000670 <main+0x114>)
 800058e:	f002 f90b 	bl	80027a8 <xTaskCreate>
 8000592:	4603      	mov	r3, r0
 8000594:	4a37      	ldr	r2, [pc, #220]	; (8000674 <main+0x118>)
 8000596:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000598:	4b36      	ldr	r3, [pc, #216]	; (8000674 <main+0x118>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d00a      	beq.n	80005b6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	f383 8811 	msr	BASEPRI, r3
 80005a8:	f3bf 8f6f 	isb	sy
 80005ac:	f3bf 8f4f 	dsb	sy
 80005b0:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b2:	bf00      	nop
 80005b4:	e7fe      	b.n	80005b4 <main+0x58>

  status = xTaskCreate(task_red_handler, "LED_Red", 200, NULL, 2, &ledr_handle);
 80005b6:	4b30      	ldr	r3, [pc, #192]	; (8000678 <main+0x11c>)
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2302      	movs	r3, #2
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	22c8      	movs	r2, #200	; 0xc8
 80005c2:	492e      	ldr	r1, [pc, #184]	; (800067c <main+0x120>)
 80005c4:	482e      	ldr	r0, [pc, #184]	; (8000680 <main+0x124>)
 80005c6:	f002 f8ef 	bl	80027a8 <xTaskCreate>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a29      	ldr	r2, [pc, #164]	; (8000674 <main+0x118>)
 80005ce:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80005d0:	4b28      	ldr	r3, [pc, #160]	; (8000674 <main+0x118>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00a      	beq.n	80005ee <main+0x92>
        __asm volatile
 80005d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005dc:	f383 8811 	msr	BASEPRI, r3
 80005e0:	f3bf 8f6f 	isb	sy
 80005e4:	f3bf 8f4f 	dsb	sy
 80005e8:	60bb      	str	r3, [r7, #8]
    }
 80005ea:	bf00      	nop
 80005ec:	e7fe      	b.n	80005ec <main+0x90>

  status = xTaskCreate(task_blue_handler, "LED_Blue", 200, NULL, 1, &ledb_handle);
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <main+0x128>)
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2301      	movs	r3, #1
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	22c8      	movs	r2, #200	; 0xc8
 80005fa:	4923      	ldr	r1, [pc, #140]	; (8000688 <main+0x12c>)
 80005fc:	4823      	ldr	r0, [pc, #140]	; (800068c <main+0x130>)
 80005fe:	f002 f8d3 	bl	80027a8 <xTaskCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <main+0x118>)
 8000606:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <main+0x118>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00a      	beq.n	8000626 <main+0xca>
        __asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	607b      	str	r3, [r7, #4]
    }
 8000622:	bf00      	nop
 8000624:	e7fe      	b.n	8000624 <main+0xc8>

  status = xTaskCreate(task_button_handler, "LED_Blue", 200, NULL, 4, &btn_handle);
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <main+0x134>)
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2304      	movs	r3, #4
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	22c8      	movs	r2, #200	; 0xc8
 8000632:	4915      	ldr	r1, [pc, #84]	; (8000688 <main+0x12c>)
 8000634:	4817      	ldr	r0, [pc, #92]	; (8000694 <main+0x138>)
 8000636:	f002 f8b7 	bl	80027a8 <xTaskCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <main+0x118>)
 800063e:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <main+0x118>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d00a      	beq.n	800065e <main+0x102>
        __asm volatile
 8000648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064c:	f383 8811 	msr	BASEPRI, r3
 8000650:	f3bf 8f6f 	isb	sy
 8000654:	f3bf 8f4f 	dsb	sy
 8000658:	603b      	str	r3, [r7, #0]
    }
 800065a:	bf00      	nop
 800065c:	e7fe      	b.n	800065c <main+0x100>

  //start freertos scheduler
  vTaskStartScheduler();
 800065e:	f002 fb23 	bl	8002ca8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000662:	e7fe      	b.n	8000662 <main+0x106>
 8000664:	e0001000 	.word	0xe0001000
 8000668:	20014370 	.word	0x20014370
 800066c:	08006fa8 	.word	0x08006fa8
 8000670:	080007f9 	.word	0x080007f9
 8000674:	2001437c 	.word	0x2001437c
 8000678:	20014368 	.word	0x20014368
 800067c:	08006fb4 	.word	0x08006fb4
 8000680:	08000871 	.word	0x08000871
 8000684:	20014378 	.word	0x20014378
 8000688:	08006fbc 	.word	0x08006fbc
 800068c:	080008e9 	.word	0x080008e9
 8000690:	20014374 	.word	0x20014374
 8000694:	08000969 	.word	0x08000969

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f006 fc6a 	bl	8006f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <SystemClock_Config+0xb4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xb4>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xb4>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <SystemClock_Config+0xb8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <SystemClock_Config+0xb8>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b19      	ldr	r3, [pc, #100]	; (8000750 <SystemClock_Config+0xb8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000700:	2300      	movs	r3, #0
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fd55 	bl	80011b8 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000714:	f000 f962 	bl	80009dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f000 ffb8 	bl	80016a8 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800073e:	f000 f94d 	bl	80009dc <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_GPIO_Init+0x98>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a1e      	ldr	r2, [pc, #120]	; (80007ec <MX_GPIO_Init+0x98>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_GPIO_Init+0x98>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_GPIO_Init+0x98>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <MX_GPIO_Init+0x98>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_GPIO_Init+0x98>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007a8:	4811      	ldr	r0, [pc, #68]	; (80007f0 <MX_GPIO_Init+0x9c>)
 80007aa:	f000 fcd1 	bl	8001150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ae:	2301      	movs	r3, #1
 80007b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4619      	mov	r1, r3
 80007c0:	480c      	ldr	r0, [pc, #48]	; (80007f4 <MX_GPIO_Init+0xa0>)
 80007c2:	f000 fb11 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007c6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_GPIO_Init+0x9c>)
 80007e0:	f000 fb02 	bl	8000de8 <HAL_GPIO_Init>

}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020c00 	.word	0x40020c00
 80007f4:	40020000 	.word	0x40020000

080007f8 <task_green_handler>:

/* USER CODE BEGIN 4 */
static void task_green_handler(void* parameters)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af02      	add	r7, sp, #8
 80007fe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling L G");
 8000800:	4815      	ldr	r0, [pc, #84]	; (8000858 <task_green_handler+0x60>)
 8000802:	f006 fb0d 	bl	8006e20 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, 12);
 8000806:	210c      	movs	r1, #12
 8000808:	4814      	ldr	r0, [pc, #80]	; (800085c <task_green_handler+0x64>)
 800080a:	f000 fcba 	bl	8001182 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 800080e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2300      	movs	r3, #0
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	2000      	movs	r0, #0
 800081c:	f002 fff6 	bl	800380c <xTaskGenericNotifyWait>
 8000820:	4603      	mov	r3, r0
 8000822:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <task_green_handler+0x68>)
 8000824:	6013      	str	r3, [r2, #0]
		if(status == pdTRUE)
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <task_green_handler+0x68>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d1e8      	bne.n	8000800 <task_green_handler+0x8>
		{
			vTaskSuspendAll();
 800082e:	f002 fa9d 	bl	8002d6c <vTaskSuspendAll>
			next_task_handle = ledr_handle;
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <task_green_handler+0x6c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <task_green_handler+0x70>)
 8000838:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 800083a:	f002 faa5 	bl	8002d88 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, 12,GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	210c      	movs	r1, #12
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <task_green_handler+0x64>)
 8000844:	f000 fc84 	bl	8001150 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleted L G");
 8000848:	4808      	ldr	r0, [pc, #32]	; (800086c <task_green_handler+0x74>)
 800084a:	f006 fae9 	bl	8006e20 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 800084e:	2000      	movs	r0, #0
 8000850:	f002 f944 	bl	8002adc <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling L G");
 8000854:	e7d4      	b.n	8000800 <task_green_handler+0x8>
 8000856:	bf00      	nop
 8000858:	08006fc8 	.word	0x08006fc8
 800085c:	40020c00 	.word	0x40020c00
 8000860:	2001437c 	.word	0x2001437c
 8000864:	20014368 	.word	0x20014368
 8000868:	2001436c 	.word	0x2001436c
 800086c:	08006fd8 	.word	0x08006fd8

08000870 <task_red_handler>:

	}
}

static void task_red_handler(void* parameters)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
 8000876:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling L R");
 8000878:	4815      	ldr	r0, [pc, #84]	; (80008d0 <task_red_handler+0x60>)
 800087a:	f006 fad1 	bl	8006e20 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, 13);
 800087e:	210d      	movs	r1, #13
 8000880:	4814      	ldr	r0, [pc, #80]	; (80008d4 <task_red_handler+0x64>)
 8000882:	f000 fc7e 	bl	8001182 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000886:	f44f 7348 	mov.w	r3, #800	; 0x320
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2300      	movs	r3, #0
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2000      	movs	r0, #0
 8000894:	f002 ffba 	bl	800380c <xTaskGenericNotifyWait>
 8000898:	4603      	mov	r3, r0
 800089a:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <task_red_handler+0x68>)
 800089c:	6013      	str	r3, [r2, #0]
		if(status == pdTRUE)
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <task_red_handler+0x68>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d1e8      	bne.n	8000878 <task_red_handler+0x8>
		{
			vTaskSuspendAll();
 80008a6:	f002 fa61 	bl	8002d6c <vTaskSuspendAll>
			next_task_handle = ledb_handle;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <task_red_handler+0x6c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <task_red_handler+0x70>)
 80008b0:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80008b2:	f002 fa69 	bl	8002d88 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, 14,GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	210e      	movs	r1, #14
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <task_red_handler+0x64>)
 80008bc:	f000 fc48 	bl	8001150 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleted L R");
 80008c0:	4808      	ldr	r0, [pc, #32]	; (80008e4 <task_red_handler+0x74>)
 80008c2:	f006 faad 	bl	8006e20 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f002 f908 	bl	8002adc <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling L R");
 80008cc:	e7d4      	b.n	8000878 <task_red_handler+0x8>
 80008ce:	bf00      	nop
 80008d0:	08006fe4 	.word	0x08006fe4
 80008d4:	40020c00 	.word	0x40020c00
 80008d8:	2001437c 	.word	0x2001437c
 80008dc:	20014378 	.word	0x20014378
 80008e0:	2001436c 	.word	0x2001436c
 80008e4:	08006ff4 	.word	0x08006ff4

080008e8 <task_blue_handler>:

	}
}

static void task_blue_handler(void* parameters)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling L B");
 80008f0:	4817      	ldr	r0, [pc, #92]	; (8000950 <task_blue_handler+0x68>)
 80008f2:	f006 fa95 	bl	8006e20 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, 14);
 80008f6:	210e      	movs	r1, #14
 80008f8:	4816      	ldr	r0, [pc, #88]	; (8000954 <task_blue_handler+0x6c>)
 80008fa:	f000 fc42 	bl	8001182 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 80008fe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2300      	movs	r3, #0
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2000      	movs	r0, #0
 800090c:	f002 ff7e 	bl	800380c <xTaskGenericNotifyWait>
 8000910:	4603      	mov	r3, r0
 8000912:	4a11      	ldr	r2, [pc, #68]	; (8000958 <task_blue_handler+0x70>)
 8000914:	6013      	str	r3, [r2, #0]

		if(status == pdTRUE)
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <task_blue_handler+0x70>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d1e8      	bne.n	80008f0 <task_blue_handler+0x8>
		{
			vTaskSuspendAll();
 800091e:	f002 fa25 	bl	8002d6c <vTaskSuspendAll>
			next_task_handle = NULL;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <task_blue_handler+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000928:	f002 fa2e 	bl	8002d88 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, 14,GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	210e      	movs	r1, #14
 8000930:	4808      	ldr	r0, [pc, #32]	; (8000954 <task_blue_handler+0x6c>)
 8000932:	f000 fc0d 	bl	8001150 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleted L B");
 8000936:	480a      	ldr	r0, [pc, #40]	; (8000960 <task_blue_handler+0x78>)
 8000938:	f006 fa72 	bl	8006e20 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(btn_handle);
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <task_blue_handler+0x7c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f002 f8cb 	bl	8002adc <vTaskDelete>
			vTaskDelete(NULL);
 8000946:	2000      	movs	r0, #0
 8000948:	f002 f8c8 	bl	8002adc <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling L B");
 800094c:	e7d0      	b.n	80008f0 <task_blue_handler+0x8>
 800094e:	bf00      	nop
 8000950:	08007000 	.word	0x08007000
 8000954:	40020c00 	.word	0x40020c00
 8000958:	2001437c 	.word	0x2001437c
 800095c:	2001436c 	.word	0x2001436c
 8000960:	08007010 	.word	0x08007010
 8000964:	20014374 	.word	0x20014374

08000968 <task_button_handler>:

	}
}

static void task_button_handler(void* parameters)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af02      	add	r7, sp, #8
 800096e:	6078      	str	r0, [r7, #4]

	uint8_t btn_read = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000978:	2101      	movs	r1, #1
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <task_button_handler+0x48>)
 800097c:	f000 fbd0 	bl	8001120 <HAL_GPIO_ReadPin>
 8000980:	4603      	mov	r3, r0
 8000982:	73bb      	strb	r3, [r7, #14]

			if(btn_read)
 8000984:	7bbb      	ldrb	r3, [r7, #14]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d00b      	beq.n	80009a2 <task_button_handler+0x3a>
			{
				if(!prev_read)
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d108      	bne.n	80009a2 <task_button_handler+0x3a>
					{
						xTaskNotify(next_task_handle,0,eNoAction);
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <task_button_handler+0x4c>)
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	2300      	movs	r3, #0
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2300      	movs	r3, #0
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	f002 ffbd 	bl	800391c <xTaskGenericNotify>
					}
			}
			prev_read = btn_read;
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(pdMS_TO_TICKS(10));
 80009a6:	200a      	movs	r0, #10
 80009a8:	f002 f946 	bl	8002c38 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80009ac:	e7e4      	b.n	8000978 <task_button_handler+0x10>
 80009ae:	bf00      	nop
 80009b0:	40020000 	.word	0x40020000
 80009b4:	2001436c 	.word	0x2001436c

080009b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d101      	bne.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ca:	f000 f90b 	bl	8000be4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40001000 	.word	0x40001000

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 8000a26:	f003 fcef 	bl	8004408 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	; 0x30
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	2036      	movs	r0, #54	; 0x36
 8000a4e:	f000 f9a1 	bl	8000d94 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a52:	2036      	movs	r0, #54	; 0x36
 8000a54:	f000 f9ba 	bl	8000dcc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <HAL_InitTick+0xa0>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a1d      	ldr	r2, [pc, #116]	; (8000ad8 <HAL_InitTick+0xa0>)
 8000a62:	f043 0310 	orr.w	r3, r3, #16
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <HAL_InitTick+0xa0>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f003 0310 	and.w	r3, r3, #16
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a74:	f107 0210 	add.w	r2, r7, #16
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 ffce 	bl	8001a20 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a84:	f000 ffb8 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8000a88:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8c:	4a13      	ldr	r2, [pc, #76]	; (8000adc <HAL_InitTick+0xa4>)
 8000a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a92:	0c9b      	lsrs	r3, r3, #18
 8000a94:	3b01      	subs	r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_InitTick+0xa8>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <HAL_InitTick+0xac>)
 8000a9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_InitTick+0xa8>)
 8000aa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <HAL_InitTick+0xa8>)
 8000aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aaa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_InitTick+0xa8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_InitTick+0xa8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ab8:	4809      	ldr	r0, [pc, #36]	; (8000ae0 <HAL_InitTick+0xa8>)
 8000aba:	f000 ffe3 	bl	8001a84 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d104      	bne.n	8000ace <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <HAL_InitTick+0xa8>)
 8000ac6:	f001 f837 	bl	8001b38 <HAL_TIM_Base_Start_IT>
 8000aca:	4603      	mov	r3, r0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3730      	adds	r7, #48	; 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	431bde83 	.word	0x431bde83
 8000ae0:	20014380 	.word	0x20014380
 8000ae4:	40001000 	.word	0x40001000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <TIM6_DAC_IRQHandler+0x10>)
 8000b1a:	f001 f87d 	bl	8001c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20014380 	.word	0x20014380

08000b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <SystemInit+0x20>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <SystemInit+0x20>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b52:	490e      	ldr	r1, [pc, #56]	; (8000b8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b54:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b68:	4c0b      	ldr	r4, [pc, #44]	; (8000b98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b76:	f7ff ffd7 	bl	8000b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f006 f9c1 	bl	8006f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7e:	f7ff fced 	bl	800055c <main>
  bx  lr    
 8000b82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b90:	08007150 	.word	0x08007150
  ldr r2, =_sbss
 8000b94:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b98:	200144b4 	.word	0x200144b4

08000b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <HAL_Init+0x40>)
 8000baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_Init+0x40>)
 8000bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_Init+0x40>)
 8000bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f8d8 	bl	8000d7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bce:	200f      	movs	r0, #15
 8000bd0:	f7ff ff32 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd4:	f7ff ff08 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023c00 	.word	0x40023c00

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	200143c8 	.word	0x200143c8

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200143c8 	.word	0x200143c8

08000c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <__NVIC_GetPriorityGrouping+0x18>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	f003 0307 	and.w	r3, r3, #7
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db0b      	blt.n	8000cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 021f 	and.w	r2, r3, #31
 8000ca0:	4907      	ldr	r1, [pc, #28]	; (8000cc0 <__NVIC_EnableIRQ+0x38>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	095b      	lsrs	r3, r3, #5
 8000ca8:	2001      	movs	r0, #1
 8000caa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ff4c 	bl	8000c24 <__NVIC_SetPriorityGrouping>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da6:	f7ff ff61 	bl	8000c6c <__NVIC_GetPriorityGrouping>
 8000daa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	6978      	ldr	r0, [r7, #20]
 8000db2:	f7ff ffb1 	bl	8000d18 <NVIC_EncodePriority>
 8000db6:	4602      	mov	r2, r0
 8000db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff80 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000dc4:	bf00      	nop
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff54 	bl	8000c88 <__NVIC_EnableIRQ>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	e16b      	b.n	80010dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	f040 815a 	bne.w	80010d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d005      	beq.n	8000e3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d130      	bne.n	8000e9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	68da      	ldr	r2, [r3, #12]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e70:	2201      	movs	r2, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	091b      	lsrs	r3, r3, #4
 8000e86:	f003 0201 	and.w	r2, r3, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d017      	beq.n	8000ed8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d123      	bne.n	8000f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	08da      	lsrs	r2, r3, #3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3208      	adds	r2, #8
 8000f26:	69b9      	ldr	r1, [r7, #24]
 8000f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0203 	and.w	r2, r3, #3
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 80b4 	beq.w	80010d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b60      	ldr	r3, [pc, #384]	; (80010f4 <HAL_GPIO_Init+0x30c>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a5f      	ldr	r2, [pc, #380]	; (80010f4 <HAL_GPIO_Init+0x30c>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b5d      	ldr	r3, [pc, #372]	; (80010f4 <HAL_GPIO_Init+0x30c>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8a:	4a5b      	ldr	r2, [pc, #364]	; (80010f8 <HAL_GPIO_Init+0x310>)
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a52      	ldr	r2, [pc, #328]	; (80010fc <HAL_GPIO_Init+0x314>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d02b      	beq.n	800100e <HAL_GPIO_Init+0x226>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a51      	ldr	r2, [pc, #324]	; (8001100 <HAL_GPIO_Init+0x318>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d025      	beq.n	800100a <HAL_GPIO_Init+0x222>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a50      	ldr	r2, [pc, #320]	; (8001104 <HAL_GPIO_Init+0x31c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d01f      	beq.n	8001006 <HAL_GPIO_Init+0x21e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4f      	ldr	r2, [pc, #316]	; (8001108 <HAL_GPIO_Init+0x320>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d019      	beq.n	8001002 <HAL_GPIO_Init+0x21a>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4e      	ldr	r2, [pc, #312]	; (800110c <HAL_GPIO_Init+0x324>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x216>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4d      	ldr	r2, [pc, #308]	; (8001110 <HAL_GPIO_Init+0x328>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x212>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4c      	ldr	r2, [pc, #304]	; (8001114 <HAL_GPIO_Init+0x32c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x20e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4b      	ldr	r2, [pc, #300]	; (8001118 <HAL_GPIO_Init+0x330>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x20a>
 8000fee:	2307      	movs	r3, #7
 8000ff0:	e00e      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	e00c      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	e00a      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8000ffa:	2305      	movs	r3, #5
 8000ffc:	e008      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8000ffe:	2304      	movs	r3, #4
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8001002:	2303      	movs	r3, #3
 8001004:	e004      	b.n	8001010 <HAL_GPIO_Init+0x228>
 8001006:	2302      	movs	r3, #2
 8001008:	e002      	b.n	8001010 <HAL_GPIO_Init+0x228>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x228>
 800100e:	2300      	movs	r3, #0
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	f002 0203 	and.w	r2, r2, #3
 8001016:	0092      	lsls	r2, r2, #2
 8001018:	4093      	lsls	r3, r2
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001020:	4935      	ldr	r1, [pc, #212]	; (80010f8 <HAL_GPIO_Init+0x310>)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102e:	4b3b      	ldr	r3, [pc, #236]	; (800111c <HAL_GPIO_Init+0x334>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001052:	4a32      	ldr	r2, [pc, #200]	; (800111c <HAL_GPIO_Init+0x334>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001058:	4b30      	ldr	r3, [pc, #192]	; (800111c <HAL_GPIO_Init+0x334>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800107c:	4a27      	ldr	r2, [pc, #156]	; (800111c <HAL_GPIO_Init+0x334>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <HAL_GPIO_Init+0x334>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a6:	4a1d      	ldr	r2, [pc, #116]	; (800111c <HAL_GPIO_Init+0x334>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_GPIO_Init+0x334>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d0:	4a12      	ldr	r2, [pc, #72]	; (800111c <HAL_GPIO_Init+0x334>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3301      	adds	r3, #1
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	f67f ae90 	bls.w	8000e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40013800 	.word	0x40013800
 80010fc:	40020000 	.word	0x40020000
 8001100:	40020400 	.word	0x40020400
 8001104:	40020800 	.word	0x40020800
 8001108:	40020c00 	.word	0x40020c00
 800110c:	40021000 	.word	0x40021000
 8001110:	40021400 	.word	0x40021400
 8001114:	40021800 	.word	0x40021800
 8001118:	40021c00 	.word	0x40021c00
 800111c:	40013c00 	.word	0x40013c00

08001120 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	4013      	ands	r3, r2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d002      	beq.n	800113e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e001      	b.n	8001142 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001142:	7bfb      	ldrb	r3, [r7, #15]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	4613      	mov	r3, r2
 800115e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001160:	787b      	ldrb	r3, [r7, #1]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800116c:	e003      	b.n	8001176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	041a      	lsls	r2, r3, #16
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	619a      	str	r2, [r3, #24]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001182:	b480      	push	{r7}
 8001184:	b085      	sub	sp, #20
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	460b      	mov	r3, r1
 800118c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001194:	887a      	ldrh	r2, [r7, #2]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4013      	ands	r3, r2
 800119a:	041a      	lsls	r2, r3, #16
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	43d9      	mvns	r1, r3
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	400b      	ands	r3, r1
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	619a      	str	r2, [r3, #24]
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e264      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d075      	beq.n	80012c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011d6:	4ba3      	ldr	r3, [pc, #652]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d00c      	beq.n	80011fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e2:	4ba0      	ldr	r3, [pc, #640]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d112      	bne.n	8001214 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ee:	4b9d      	ldr	r3, [pc, #628]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011fa:	d10b      	bne.n	8001214 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	4b99      	ldr	r3, [pc, #612]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d05b      	beq.n	80012c0 <HAL_RCC_OscConfig+0x108>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d157      	bne.n	80012c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e23f      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121c:	d106      	bne.n	800122c <HAL_RCC_OscConfig+0x74>
 800121e:	4b91      	ldr	r3, [pc, #580]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a90      	ldr	r2, [pc, #576]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e01d      	b.n	8001268 <HAL_RCC_OscConfig+0xb0>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0x98>
 8001236:	4b8b      	ldr	r3, [pc, #556]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a8a      	ldr	r2, [pc, #552]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 800123c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b88      	ldr	r3, [pc, #544]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a87      	ldr	r2, [pc, #540]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e00b      	b.n	8001268 <HAL_RCC_OscConfig+0xb0>
 8001250:	4b84      	ldr	r3, [pc, #528]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a83      	ldr	r2, [pc, #524]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 8001256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b81      	ldr	r3, [pc, #516]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a80      	ldr	r2, [pc, #512]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 8001262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d013      	beq.n	8001298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fccc 	bl	8000c0c <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fcc8 	bl	8000c0c <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	; 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e204      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	4b76      	ldr	r3, [pc, #472]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0xc0>
 8001296:	e014      	b.n	80012c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fcb8 	bl	8000c0c <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fcb4 	bl	8000c0c <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	; 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e1f0      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b2:	4b6c      	ldr	r3, [pc, #432]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0xe8>
 80012be:	e000      	b.n	80012c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d063      	beq.n	8001396 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ce:	4b65      	ldr	r3, [pc, #404]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00b      	beq.n	80012f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012da:	4b62      	ldr	r3, [pc, #392]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d11c      	bne.n	8001320 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e6:	4b5f      	ldr	r3, [pc, #380]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d116      	bne.n	8001320 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	4b5c      	ldr	r3, [pc, #368]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d005      	beq.n	800130a <HAL_RCC_OscConfig+0x152>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d001      	beq.n	800130a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e1c4      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130a:	4b56      	ldr	r3, [pc, #344]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4952      	ldr	r1, [pc, #328]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131e:	e03a      	b.n	8001396 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d020      	beq.n	800136a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001328:	4b4f      	ldr	r3, [pc, #316]	; (8001468 <HAL_RCC_OscConfig+0x2b0>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132e:	f7ff fc6d 	bl	8000c0c <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001336:	f7ff fc69 	bl	8000c0c <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e1a5      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001348:	4b46      	ldr	r3, [pc, #280]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001354:	4b43      	ldr	r3, [pc, #268]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4940      	ldr	r1, [pc, #256]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
 8001368:	e015      	b.n	8001396 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136a:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <HAL_RCC_OscConfig+0x2b0>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fc4c 	bl	8000c0c <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001378:	f7ff fc48 	bl	8000c0c <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e184      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138a:	4b36      	ldr	r3, [pc, #216]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d030      	beq.n	8001404 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d016      	beq.n	80013d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013aa:	4b30      	ldr	r3, [pc, #192]	; (800146c <HAL_RCC_OscConfig+0x2b4>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b0:	f7ff fc2c 	bl	8000c0c <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fc28 	bl	8000c0c <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e164      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0x200>
 80013d6:	e015      	b.n	8001404 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <HAL_RCC_OscConfig+0x2b4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff fc15 	bl	8000c0c <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e6:	f7ff fc11 	bl	8000c0c <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e14d      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f0      	bne.n	80013e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80a0 	beq.w	8001552 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10f      	bne.n	8001442 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800143e:	2301      	movs	r3, #1
 8001440:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_RCC_OscConfig+0x2b8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144a:	2b00      	cmp	r3, #0
 800144c:	d121      	bne.n	8001492 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <HAL_RCC_OscConfig+0x2b8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_RCC_OscConfig+0x2b8>)
 8001454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145a:	f7ff fbd7 	bl	8000c0c <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001460:	e011      	b.n	8001486 <HAL_RCC_OscConfig+0x2ce>
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	42470000 	.word	0x42470000
 800146c:	42470e80 	.word	0x42470e80
 8001470:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001474:	f7ff fbca 	bl	8000c0c <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e106      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001486:	4b85      	ldr	r3, [pc, #532]	; (800169c <HAL_RCC_OscConfig+0x4e4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d106      	bne.n	80014a8 <HAL_RCC_OscConfig+0x2f0>
 800149a:	4b81      	ldr	r3, [pc, #516]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149e:	4a80      	ldr	r2, [pc, #512]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6713      	str	r3, [r2, #112]	; 0x70
 80014a6:	e01c      	b.n	80014e2 <HAL_RCC_OscConfig+0x32a>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d10c      	bne.n	80014ca <HAL_RCC_OscConfig+0x312>
 80014b0:	4b7b      	ldr	r3, [pc, #492]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 80014b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b4:	4a7a      	ldr	r2, [pc, #488]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6713      	str	r3, [r2, #112]	; 0x70
 80014bc:	4b78      	ldr	r3, [pc, #480]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c0:	4a77      	ldr	r2, [pc, #476]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6713      	str	r3, [r2, #112]	; 0x70
 80014c8:	e00b      	b.n	80014e2 <HAL_RCC_OscConfig+0x32a>
 80014ca:	4b75      	ldr	r3, [pc, #468]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 80014cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ce:	4a74      	ldr	r2, [pc, #464]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6713      	str	r3, [r2, #112]	; 0x70
 80014d6:	4b72      	ldr	r3, [pc, #456]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	4a71      	ldr	r2, [pc, #452]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 80014dc:	f023 0304 	bic.w	r3, r3, #4
 80014e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d015      	beq.n	8001516 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ea:	f7ff fb8f 	bl	8000c0c <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f0:	e00a      	b.n	8001508 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f2:	f7ff fb8b 	bl	8000c0c <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001500:	4293      	cmp	r3, r2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e0c5      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001508:	4b65      	ldr	r3, [pc, #404]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0ee      	beq.n	80014f2 <HAL_RCC_OscConfig+0x33a>
 8001514:	e014      	b.n	8001540 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff fb79 	bl	8000c0c <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151c:	e00a      	b.n	8001534 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151e:	f7ff fb75 	bl	8000c0c <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	f241 3288 	movw	r2, #5000	; 0x1388
 800152c:	4293      	cmp	r3, r2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e0af      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1ee      	bne.n	800151e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d105      	bne.n	8001552 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001546:	4b56      	ldr	r3, [pc, #344]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a55      	ldr	r2, [pc, #340]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 800154c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 809b 	beq.w	8001692 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b08      	cmp	r3, #8
 8001566:	d05c      	beq.n	8001622 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d141      	bne.n	80015f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001570:	4b4c      	ldr	r3, [pc, #304]	; (80016a4 <HAL_RCC_OscConfig+0x4ec>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff fb49 	bl	8000c0c <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157e:	f7ff fb45 	bl	8000c0c <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e081      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001590:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69da      	ldr	r2, [r3, #28]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	019b      	lsls	r3, r3, #6
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	085b      	lsrs	r3, r3, #1
 80015b4:	3b01      	subs	r3, #1
 80015b6:	041b      	lsls	r3, r3, #16
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015be:	061b      	lsls	r3, r3, #24
 80015c0:	4937      	ldr	r1, [pc, #220]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c6:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <HAL_RCC_OscConfig+0x4ec>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fb1e 	bl	8000c0c <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d4:	f7ff fb1a 	bl	8000c0c <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e056      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x41c>
 80015f2:	e04e      	b.n	8001692 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f4:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <HAL_RCC_OscConfig+0x4ec>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff fb07 	bl	8000c0c <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001602:	f7ff fb03 	bl	8000c0c <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e03f      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f0      	bne.n	8001602 <HAL_RCC_OscConfig+0x44a>
 8001620:	e037      	b.n	8001692 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d101      	bne.n	800162e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e032      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_RCC_OscConfig+0x4e8>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d028      	beq.n	800168e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001646:	429a      	cmp	r2, r3
 8001648:	d121      	bne.n	800168e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001654:	429a      	cmp	r2, r3
 8001656:	d11a      	bne.n	800168e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800165e:	4013      	ands	r3, r2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001664:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001666:	4293      	cmp	r3, r2
 8001668:	d111      	bne.n	800168e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	085b      	lsrs	r3, r3, #1
 8001676:	3b01      	subs	r3, #1
 8001678:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800167a:	429a      	cmp	r2, r3
 800167c:	d107      	bne.n	800168e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800168a:	429a      	cmp	r2, r3
 800168c:	d001      	beq.n	8001692 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40007000 	.word	0x40007000
 80016a0:	40023800 	.word	0x40023800
 80016a4:	42470060 	.word	0x42470060

080016a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0cc      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016bc:	4b68      	ldr	r3, [pc, #416]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d90c      	bls.n	80016e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b65      	ldr	r3, [pc, #404]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b63      	ldr	r3, [pc, #396]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0b8      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d020      	beq.n	8001732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016fc:	4b59      	ldr	r3, [pc, #356]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4a58      	ldr	r2, [pc, #352]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001706:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001714:	4b53      	ldr	r3, [pc, #332]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a52      	ldr	r2, [pc, #328]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800171e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001720:	4b50      	ldr	r3, [pc, #320]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	494d      	ldr	r1, [pc, #308]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	4313      	orrs	r3, r2
 8001730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d044      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d107      	bne.n	8001756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	4b47      	ldr	r3, [pc, #284]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d119      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e07f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d003      	beq.n	8001766 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001762:	2b03      	cmp	r3, #3
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001766:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001776:	4b3b      	ldr	r3, [pc, #236]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e067      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001786:	4b37      	ldr	r3, [pc, #220]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f023 0203 	bic.w	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4934      	ldr	r1, [pc, #208]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	4313      	orrs	r3, r2
 8001796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001798:	f7ff fa38 	bl	8000c0c <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a0:	f7ff fa34 	bl	8000c0c <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e04f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 020c 	and.w	r2, r3, #12
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d1eb      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c8:	4b25      	ldr	r3, [pc, #148]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d20c      	bcs.n	80017f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e032      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4916      	ldr	r1, [pc, #88]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	490e      	ldr	r1, [pc, #56]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800182e:	f000 f821 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8001832:	4602      	mov	r2, r0
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	490a      	ldr	r1, [pc, #40]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	5ccb      	ldrb	r3, [r1, r3]
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_RCC_ClockConfig+0x1c8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff f8f2 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023c00 	.word	0x40023c00
 8001864:	40023800 	.word	0x40023800
 8001868:	080070f0 	.word	0x080070f0
 800186c:	20000000 	.word	0x20000000
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001874:	b5b0      	push	{r4, r5, r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800187a:	2100      	movs	r1, #0
 800187c:	6079      	str	r1, [r7, #4]
 800187e:	2100      	movs	r1, #0
 8001880:	60f9      	str	r1, [r7, #12]
 8001882:	2100      	movs	r1, #0
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001886:	2100      	movs	r1, #0
 8001888:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800188a:	4952      	ldr	r1, [pc, #328]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x160>)
 800188c:	6889      	ldr	r1, [r1, #8]
 800188e:	f001 010c 	and.w	r1, r1, #12
 8001892:	2908      	cmp	r1, #8
 8001894:	d00d      	beq.n	80018b2 <HAL_RCC_GetSysClockFreq+0x3e>
 8001896:	2908      	cmp	r1, #8
 8001898:	f200 8094 	bhi.w	80019c4 <HAL_RCC_GetSysClockFreq+0x150>
 800189c:	2900      	cmp	r1, #0
 800189e:	d002      	beq.n	80018a6 <HAL_RCC_GetSysClockFreq+0x32>
 80018a0:	2904      	cmp	r1, #4
 80018a2:	d003      	beq.n	80018ac <HAL_RCC_GetSysClockFreq+0x38>
 80018a4:	e08e      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a6:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80018a8:	60bb      	str	r3, [r7, #8]
       break;
 80018aa:	e08e      	b.n	80019ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ac:	4b4b      	ldr	r3, [pc, #300]	; (80019dc <HAL_RCC_GetSysClockFreq+0x168>)
 80018ae:	60bb      	str	r3, [r7, #8]
      break;
 80018b0:	e08b      	b.n	80019ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b2:	4948      	ldr	r1, [pc, #288]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80018b4:	6849      	ldr	r1, [r1, #4]
 80018b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80018ba:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018bc:	4945      	ldr	r1, [pc, #276]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80018be:	6849      	ldr	r1, [r1, #4]
 80018c0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80018c4:	2900      	cmp	r1, #0
 80018c6:	d024      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c8:	4942      	ldr	r1, [pc, #264]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80018ca:	6849      	ldr	r1, [r1, #4]
 80018cc:	0989      	lsrs	r1, r1, #6
 80018ce:	4608      	mov	r0, r1
 80018d0:	f04f 0100 	mov.w	r1, #0
 80018d4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80018d8:	f04f 0500 	mov.w	r5, #0
 80018dc:	ea00 0204 	and.w	r2, r0, r4
 80018e0:	ea01 0305 	and.w	r3, r1, r5
 80018e4:	493d      	ldr	r1, [pc, #244]	; (80019dc <HAL_RCC_GetSysClockFreq+0x168>)
 80018e6:	fb01 f003 	mul.w	r0, r1, r3
 80018ea:	2100      	movs	r1, #0
 80018ec:	fb01 f102 	mul.w	r1, r1, r2
 80018f0:	1844      	adds	r4, r0, r1
 80018f2:	493a      	ldr	r1, [pc, #232]	; (80019dc <HAL_RCC_GetSysClockFreq+0x168>)
 80018f4:	fba2 0101 	umull	r0, r1, r2, r1
 80018f8:	1863      	adds	r3, r4, r1
 80018fa:	4619      	mov	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	461a      	mov	r2, r3
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	f7fe fcae 	bl	8000264 <__aeabi_uldivmod>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4613      	mov	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e04a      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001912:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	099b      	lsrs	r3, r3, #6
 8001918:	461a      	mov	r2, r3
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001922:	f04f 0100 	mov.w	r1, #0
 8001926:	ea02 0400 	and.w	r4, r2, r0
 800192a:	ea03 0501 	and.w	r5, r3, r1
 800192e:	4620      	mov	r0, r4
 8001930:	4629      	mov	r1, r5
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	014b      	lsls	r3, r1, #5
 800193c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001940:	0142      	lsls	r2, r0, #5
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	1b00      	subs	r0, r0, r4
 8001948:	eb61 0105 	sbc.w	r1, r1, r5
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	018b      	lsls	r3, r1, #6
 8001956:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800195a:	0182      	lsls	r2, r0, #6
 800195c:	1a12      	subs	r2, r2, r0
 800195e:	eb63 0301 	sbc.w	r3, r3, r1
 8001962:	f04f 0000 	mov.w	r0, #0
 8001966:	f04f 0100 	mov.w	r1, #0
 800196a:	00d9      	lsls	r1, r3, #3
 800196c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001970:	00d0      	lsls	r0, r2, #3
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	1912      	adds	r2, r2, r4
 8001978:	eb45 0303 	adc.w	r3, r5, r3
 800197c:	f04f 0000 	mov.w	r0, #0
 8001980:	f04f 0100 	mov.w	r1, #0
 8001984:	0299      	lsls	r1, r3, #10
 8001986:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800198a:	0290      	lsls	r0, r2, #10
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	461a      	mov	r2, r3
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	f7fe fc62 	bl	8000264 <__aeabi_uldivmod>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4613      	mov	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	0c1b      	lsrs	r3, r3, #16
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	3301      	adds	r3, #1
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c0:	60bb      	str	r3, [r7, #8]
      break;
 80019c2:	e002      	b.n	80019ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80019c6:	60bb      	str	r3, [r7, #8]
      break;
 80019c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ca:	68bb      	ldr	r3, [r7, #8]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bdb0      	pop	{r4, r5, r7, pc}
 80019d4:	40023800 	.word	0x40023800
 80019d8:	00f42400 	.word	0x00f42400
 80019dc:	017d7840 	.word	0x017d7840

080019e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000000 	.word	0x20000000

080019f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019fc:	f7ff fff0 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	0a9b      	lsrs	r3, r3, #10
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	4903      	ldr	r1, [pc, #12]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	08007100 	.word	0x08007100

08001a20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0203 	and.w	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	08db      	lsrs	r3, r3, #3
 8001a5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_RCC_GetClockConfig+0x60>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0207 	and.w	r2, r3, #7
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	601a      	str	r2, [r3, #0]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40023c00 	.word	0x40023c00

08001a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e041      	b.n	8001b1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f839 	bl	8001b22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	f000 f9d8 	bl	8001e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d001      	beq.n	8001b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e04e      	b.n	8001bee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a23      	ldr	r2, [pc, #140]	; (8001bfc <HAL_TIM_Base_Start_IT+0xc4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d022      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7a:	d01d      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d018      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d013      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00e      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d009      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <HAL_TIM_Base_Start_IT+0xd8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d004      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x80>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a18      	ldr	r2, [pc, #96]	; (8001c14 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d111      	bne.n	8001bdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d010      	beq.n	8001bec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bda:	e007      	b.n	8001bec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40010000 	.word	0x40010000
 8001c00:	40000400 	.word	0x40000400
 8001c04:	40000800 	.word	0x40000800
 8001c08:	40000c00 	.word	0x40000c00
 8001c0c:	40010400 	.word	0x40010400
 8001c10:	40014000 	.word	0x40014000
 8001c14:	40001800 	.word	0x40001800

08001c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d122      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d11b      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0202 	mvn.w	r2, #2
 8001c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f8ee 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
 8001c60:	e005      	b.n	8001c6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f8e0 	bl	8001e28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f8f1 	bl	8001e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d122      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d11b      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0204 	mvn.w	r2, #4
 8001c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8c4 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8b6 	bl	8001e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f8c7 	bl	8001e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d122      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d11b      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0208 	mvn.w	r2, #8
 8001cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f89a 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
 8001d08:	e005      	b.n	8001d16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f88c 	bl	8001e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f89d 	bl	8001e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	d122      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b10      	cmp	r3, #16
 8001d36:	d11b      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0210 	mvn.w	r2, #16
 8001d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2208      	movs	r2, #8
 8001d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f870 	bl	8001e3c <HAL_TIM_IC_CaptureCallback>
 8001d5c:	e005      	b.n	8001d6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f862 	bl	8001e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f873 	bl	8001e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d10e      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d107      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0201 	mvn.w	r2, #1
 8001d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7fe fe0e 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da6:	2b80      	cmp	r3, #128	; 0x80
 8001da8:	d10e      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db4:	2b80      	cmp	r3, #128	; 0x80
 8001db6:	d107      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f902 	bl	8001fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd2:	2b40      	cmp	r3, #64	; 0x40
 8001dd4:	d10e      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de0:	2b40      	cmp	r3, #64	; 0x40
 8001de2:	d107      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f838 	bl	8001e64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	d10e      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0320 	and.w	r3, r3, #32
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d107      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0220 	mvn.w	r2, #32
 8001e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8cc 	bl	8001fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a40      	ldr	r2, [pc, #256]	; (8001f8c <TIM_Base_SetConfig+0x114>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d013      	beq.n	8001eb8 <TIM_Base_SetConfig+0x40>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e96:	d00f      	beq.n	8001eb8 <TIM_Base_SetConfig+0x40>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a3d      	ldr	r2, [pc, #244]	; (8001f90 <TIM_Base_SetConfig+0x118>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d00b      	beq.n	8001eb8 <TIM_Base_SetConfig+0x40>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a3c      	ldr	r2, [pc, #240]	; (8001f94 <TIM_Base_SetConfig+0x11c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d007      	beq.n	8001eb8 <TIM_Base_SetConfig+0x40>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a3b      	ldr	r2, [pc, #236]	; (8001f98 <TIM_Base_SetConfig+0x120>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <TIM_Base_SetConfig+0x40>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a3a      	ldr	r2, [pc, #232]	; (8001f9c <TIM_Base_SetConfig+0x124>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d108      	bne.n	8001eca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a2f      	ldr	r2, [pc, #188]	; (8001f8c <TIM_Base_SetConfig+0x114>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d02b      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed8:	d027      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a2c      	ldr	r2, [pc, #176]	; (8001f90 <TIM_Base_SetConfig+0x118>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d023      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a2b      	ldr	r2, [pc, #172]	; (8001f94 <TIM_Base_SetConfig+0x11c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d01f      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a2a      	ldr	r2, [pc, #168]	; (8001f98 <TIM_Base_SetConfig+0x120>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01b      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a29      	ldr	r2, [pc, #164]	; (8001f9c <TIM_Base_SetConfig+0x124>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d017      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a28      	ldr	r2, [pc, #160]	; (8001fa0 <TIM_Base_SetConfig+0x128>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a27      	ldr	r2, [pc, #156]	; (8001fa4 <TIM_Base_SetConfig+0x12c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00f      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a26      	ldr	r2, [pc, #152]	; (8001fa8 <TIM_Base_SetConfig+0x130>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00b      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a25      	ldr	r2, [pc, #148]	; (8001fac <TIM_Base_SetConfig+0x134>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a24      	ldr	r2, [pc, #144]	; (8001fb0 <TIM_Base_SetConfig+0x138>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d003      	beq.n	8001f2a <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a23      	ldr	r2, [pc, #140]	; (8001fb4 <TIM_Base_SetConfig+0x13c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d108      	bne.n	8001f3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <TIM_Base_SetConfig+0x114>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d003      	beq.n	8001f70 <TIM_Base_SetConfig+0xf8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a0c      	ldr	r2, [pc, #48]	; (8001f9c <TIM_Base_SetConfig+0x124>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d103      	bne.n	8001f78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	615a      	str	r2, [r3, #20]
}
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	40000400 	.word	0x40000400
 8001f94:	40000800 	.word	0x40000800
 8001f98:	40000c00 	.word	0x40000c00
 8001f9c:	40010400 	.word	0x40010400
 8001fa0:	40014000 	.word	0x40014000
 8001fa4:	40014400 	.word	0x40014400
 8001fa8:	40014800 	.word	0x40014800
 8001fac:	40001800 	.word	0x40001800
 8001fb0:	40001c00 	.word	0x40001c00
 8001fb4:	40002000 	.word	0x40002000

08001fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f103 0208 	add.w	r2, r3, #8
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f103 0208 	add.w	r2, r3, #8
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f103 0208 	add.w	r2, r3, #8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	601a      	str	r2, [r3, #0]
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002082:	b480      	push	{r7}
 8002084:	b085      	sub	sp, #20
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d103      	bne.n	80020a2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	e00c      	b.n	80020bc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3308      	adds	r3, #8
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e002      	b.n	80020b0 <vListInsert+0x2e>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d2f6      	bcs.n	80020aa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	601a      	str	r2, [r3, #0]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6892      	ldr	r2, [r2, #8]
 800210a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6852      	ldr	r2, [r2, #4]
 8002114:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	d103      	bne.n	8002128 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	1e5a      	subs	r2, r3, #1
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002152:	2301      	movs	r3, #1
 8002154:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10a      	bne.n	8002176 <xQueueGenericReset+0x2e>
        __asm volatile
 8002160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002164:	f383 8811 	msr	BASEPRI, r3
 8002168:	f3bf 8f6f 	isb	sy
 800216c:	f3bf 8f4f 	dsb	sy
 8002170:	60fb      	str	r3, [r7, #12]
    }
 8002172:	bf00      	nop
 8002174:	e7fe      	b.n	8002174 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d05d      	beq.n	8002238 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002180:	2b00      	cmp	r3, #0
 8002182:	d059      	beq.n	8002238 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218c:	2100      	movs	r1, #0
 800218e:	fba3 2302 	umull	r2, r3, r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d000      	beq.n	8002198 <xQueueGenericReset+0x50>
 8002196:	2101      	movs	r1, #1
 8002198:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800219a:	2b00      	cmp	r3, #0
 800219c:	d14c      	bne.n	8002238 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800219e:	f002 f9b1 	bl	8004504 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021aa:	6939      	ldr	r1, [r7, #16]
 80021ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021ae:	fb01 f303 	mul.w	r3, r1, r3
 80021b2:	441a      	add	r2, r3
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	2200      	movs	r2, #0
 80021bc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	3b01      	subs	r3, #1
 80021d0:	6939      	ldr	r1, [r7, #16]
 80021d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	441a      	add	r2, r3
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	22ff      	movs	r2, #255	; 0xff
 80021e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	22ff      	movs	r2, #255	; 0xff
 80021ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d114      	bne.n	800221e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01a      	beq.n	8002232 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	3310      	adds	r3, #16
 8002200:	4618      	mov	r0, r3
 8002202:	f001 f8d3 	bl	80033ac <xTaskRemoveFromEventList>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d012      	beq.n	8002232 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800220c:	4b15      	ldr	r3, [pc, #84]	; (8002264 <xQueueGenericReset+0x11c>)
 800220e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	f3bf 8f4f 	dsb	sy
 8002218:	f3bf 8f6f 	isb	sy
 800221c:	e009      	b.n	8002232 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	3310      	adds	r3, #16
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fedc 	bl	8001fe0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	3324      	adds	r3, #36	; 0x24
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fed7 	bl	8001fe0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002232:	f002 f997 	bl	8004564 <vPortExitCritical>
 8002236:	e001      	b.n	800223c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10a      	bne.n	8002258 <xQueueGenericReset+0x110>
        __asm volatile
 8002242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002246:	f383 8811 	msr	BASEPRI, r3
 800224a:	f3bf 8f6f 	isb	sy
 800224e:	f3bf 8f4f 	dsb	sy
 8002252:	60bb      	str	r3, [r7, #8]
    }
 8002254:	bf00      	nop
 8002256:	e7fe      	b.n	8002256 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002258:	697b      	ldr	r3, [r7, #20]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	e000ed04 	.word	0xe000ed04

08002268 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	4613      	mov	r3, r2
 8002274:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d02e      	beq.n	80022de <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002280:	2100      	movs	r1, #0
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	fba3 2302 	umull	r2, r3, r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d000      	beq.n	8002290 <xQueueGenericCreate+0x28>
 800228e:	2101      	movs	r1, #1
 8002290:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002292:	2b00      	cmp	r3, #0
 8002294:	d123      	bne.n	80022de <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800229e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80022a2:	d81c      	bhi.n	80022de <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	3350      	adds	r3, #80	; 0x50
 80022b2:	4618      	mov	r0, r3
 80022b4:	f002 fa52 	bl	800475c <pvPortMalloc>
 80022b8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01c      	beq.n	80022fa <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3350      	adds	r3, #80	; 0x50
 80022c8:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022ca:	79fa      	ldrb	r2, [r7, #7]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	4613      	mov	r3, r2
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f814 	bl	8002304 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80022dc:	e00d      	b.n	80022fa <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10a      	bne.n	80022fa <xQueueGenericCreate+0x92>
        __asm volatile
 80022e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e8:	f383 8811 	msr	BASEPRI, r3
 80022ec:	f3bf 8f6f 	isb	sy
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	613b      	str	r3, [r7, #16]
    }
 80022f6:	bf00      	nop
 80022f8:	e7fe      	b.n	80022f8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80022fa:	69fb      	ldr	r3, [r7, #28]
    }
 80022fc:	4618      	mov	r0, r3
 80022fe:	3720      	adds	r7, #32
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d103      	bne.n	8002320 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e002      	b.n	8002326 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002332:	2101      	movs	r1, #1
 8002334:	69b8      	ldr	r0, [r7, #24]
 8002336:	f7ff ff07 	bl	8002148 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	68f9      	ldr	r1, [r7, #12]
 8002348:	2073      	movs	r0, #115	; 0x73
 800234a:	f003 fef1 	bl	8006130 <SEGGER_SYSVIEW_RecordU32x3>
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b08f      	sub	sp, #60	; 0x3c
 800235c:	af02      	add	r7, sp, #8
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002364:	2300      	movs	r3, #0
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10a      	bne.n	8002388 <xQueueReceive+0x30>
        __asm volatile
 8002372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002376:	f383 8811 	msr	BASEPRI, r3
 800237a:	f3bf 8f6f 	isb	sy
 800237e:	f3bf 8f4f 	dsb	sy
 8002382:	623b      	str	r3, [r7, #32]
    }
 8002384:	bf00      	nop
 8002386:	e7fe      	b.n	8002386 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <xQueueReceive+0x3e>
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <xQueueReceive+0x42>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <xQueueReceive+0x44>
 800239a:	2300      	movs	r3, #0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <xQueueReceive+0x5e>
        __asm volatile
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	61fb      	str	r3, [r7, #28]
    }
 80023b2:	bf00      	nop
 80023b4:	e7fe      	b.n	80023b4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023b6:	f001 fa0b 	bl	80037d0 <xTaskGetSchedulerState>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <xQueueReceive+0x6e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <xQueueReceive+0x72>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <xQueueReceive+0x74>
 80023ca:	2300      	movs	r3, #0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10a      	bne.n	80023e6 <xQueueReceive+0x8e>
        __asm volatile
 80023d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	61bb      	str	r3, [r7, #24]
    }
 80023e2:	bf00      	nop
 80023e4:	e7fe      	b.n	80023e4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80023e6:	f002 f88d 	bl	8004504 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d02f      	beq.n	8002456 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023f6:	68b9      	ldr	r1, [r7, #8]
 80023f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023fa:	f000 f8bd 	bl	8002578 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80023fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002400:	4618      	mov	r0, r3
 8002402:	f004 fc21 	bl	8006c48 <SEGGER_SYSVIEW_ShrinkId>
 8002406:	4604      	mov	r4, r0
 8002408:	2000      	movs	r0, #0
 800240a:	f004 fc1d 	bl	8006c48 <SEGGER_SYSVIEW_ShrinkId>
 800240e:	4602      	mov	r2, r0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2101      	movs	r1, #1
 8002414:	9100      	str	r1, [sp, #0]
 8002416:	4621      	mov	r1, r4
 8002418:	205c      	movs	r0, #92	; 0x5c
 800241a:	f003 feff 	bl	800621c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	1e5a      	subs	r2, r3, #1
 8002422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002424:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00f      	beq.n	800244e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002430:	3310      	adds	r3, #16
 8002432:	4618      	mov	r0, r3
 8002434:	f000 ffba 	bl	80033ac <xTaskRemoveFromEventList>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800243e:	4b4d      	ldr	r3, [pc, #308]	; (8002574 <xQueueReceive+0x21c>)
 8002440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800244e:	f002 f889 	bl	8004564 <vPortExitCritical>
                return pdPASS;
 8002452:	2301      	movs	r3, #1
 8002454:	e08a      	b.n	800256c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d113      	bne.n	8002484 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800245c:	f002 f882 	bl	8004564 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	4618      	mov	r0, r3
 8002464:	f004 fbf0 	bl	8006c48 <SEGGER_SYSVIEW_ShrinkId>
 8002468:	4604      	mov	r4, r0
 800246a:	2000      	movs	r0, #0
 800246c:	f004 fbec 	bl	8006c48 <SEGGER_SYSVIEW_ShrinkId>
 8002470:	4602      	mov	r2, r0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2101      	movs	r1, #1
 8002476:	9100      	str	r1, [sp, #0]
 8002478:	4621      	mov	r1, r4
 800247a:	205c      	movs	r0, #92	; 0x5c
 800247c:	f003 fece 	bl	800621c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002480:	2300      	movs	r3, #0
 8002482:	e073      	b.n	800256c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800248a:	f107 0310 	add.w	r3, r7, #16
 800248e:	4618      	mov	r0, r3
 8002490:	f001 f864 	bl	800355c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002494:	2301      	movs	r3, #1
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002498:	f002 f864 	bl	8004564 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800249c:	f000 fc66 	bl	8002d6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80024a0:	f002 f830 	bl	8004504 <vPortEnterCritical>
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024aa:	b25b      	sxtb	r3, r3
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d103      	bne.n	80024ba <xQueueReceive+0x162>
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024c0:	b25b      	sxtb	r3, r3
 80024c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c6:	d103      	bne.n	80024d0 <xQueueReceive+0x178>
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024d0:	f002 f848 	bl	8004564 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024d4:	1d3a      	adds	r2, r7, #4
 80024d6:	f107 0310 	add.w	r3, r7, #16
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f001 f853 	bl	8003588 <xTaskCheckForTimeOut>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d124      	bne.n	8002532 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024ea:	f000 f8bd 	bl	8002668 <prvIsQueueEmpty>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d018      	beq.n	8002526 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	3324      	adds	r3, #36	; 0x24
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fee9 	bl	80032d4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002504:	f000 f85e 	bl	80025c4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002508:	f000 fc3e 	bl	8002d88 <xTaskResumeAll>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	f47f af69 	bne.w	80023e6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002514:	4b17      	ldr	r3, [pc, #92]	; (8002574 <xQueueReceive+0x21c>)
 8002516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	e75f      	b.n	80023e6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002528:	f000 f84c 	bl	80025c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800252c:	f000 fc2c 	bl	8002d88 <xTaskResumeAll>
 8002530:	e759      	b.n	80023e6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002534:	f000 f846 	bl	80025c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002538:	f000 fc26 	bl	8002d88 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800253c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800253e:	f000 f893 	bl	8002668 <prvIsQueueEmpty>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	f43f af4e 	beq.w	80023e6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254c:	4618      	mov	r0, r3
 800254e:	f004 fb7b 	bl	8006c48 <SEGGER_SYSVIEW_ShrinkId>
 8002552:	4604      	mov	r4, r0
 8002554:	2000      	movs	r0, #0
 8002556:	f004 fb77 	bl	8006c48 <SEGGER_SYSVIEW_ShrinkId>
 800255a:	4602      	mov	r2, r0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2101      	movs	r1, #1
 8002560:	9100      	str	r1, [sp, #0]
 8002562:	4621      	mov	r1, r4
 8002564:	205c      	movs	r0, #92	; 0x5c
 8002566:	f003 fe59 	bl	800621c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800256a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800256c:	4618      	mov	r0, r3
 800256e:	3734      	adds	r7, #52	; 0x34
 8002570:	46bd      	mov	sp, r7
 8002572:	bd90      	pop	{r4, r7, pc}
 8002574:	e000ed04 	.word	0xe000ed04

08002578 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d018      	beq.n	80025bc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	441a      	add	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d303      	bcc.n	80025ac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68d9      	ldr	r1, [r3, #12]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	461a      	mov	r2, r3
 80025b6:	6838      	ldr	r0, [r7, #0]
 80025b8:	f004 fcd4 	bl	8006f64 <memcpy>
    }
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80025cc:	f001 ff9a 	bl	8004504 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025d6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025d8:	e011      	b.n	80025fe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d012      	beq.n	8002608 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3324      	adds	r3, #36	; 0x24
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fee0 	bl	80033ac <xTaskRemoveFromEventList>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80025f2:	f001 f82f 	bl	8003654 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002602:	2b00      	cmp	r3, #0
 8002604:	dce9      	bgt.n	80025da <prvUnlockQueue+0x16>
 8002606:	e000      	b.n	800260a <prvUnlockQueue+0x46>
                        break;
 8002608:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	22ff      	movs	r2, #255	; 0xff
 800260e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002612:	f001 ffa7 	bl	8004564 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002616:	f001 ff75 	bl	8004504 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002620:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002622:	e011      	b.n	8002648 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d012      	beq.n	8002652 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3310      	adds	r3, #16
 8002630:	4618      	mov	r0, r3
 8002632:	f000 febb 	bl	80033ac <xTaskRemoveFromEventList>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800263c:	f001 f80a 	bl	8003654 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002640:	7bbb      	ldrb	r3, [r7, #14]
 8002642:	3b01      	subs	r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800264c:	2b00      	cmp	r3, #0
 800264e:	dce9      	bgt.n	8002624 <prvUnlockQueue+0x60>
 8002650:	e000      	b.n	8002654 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002652:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	22ff      	movs	r2, #255	; 0xff
 8002658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800265c:	f001 ff82 	bl	8004564 <vPortExitCritical>
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002670:	f001 ff48 	bl	8004504 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800267c:	2301      	movs	r3, #1
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	e001      	b.n	8002686 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002686:	f001 ff6d 	bl	8004564 <vPortExitCritical>

    return xReturn;
 800268a:	68fb      	ldr	r3, [r7, #12]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <vQueueAddToRegistry+0x26>
        __asm volatile
 80026a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	60fb      	str	r3, [r7, #12]
    }
 80026b6:	bf00      	nop
 80026b8:	e7fe      	b.n	80026b8 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d024      	beq.n	800270e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	e01e      	b.n	8002708 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80026ca:	4a1c      	ldr	r2, [pc, #112]	; (800273c <vQueueAddToRegistry+0xa8>)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d105      	bne.n	80026e6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4a17      	ldr	r2, [pc, #92]	; (800273c <vQueueAddToRegistry+0xa8>)
 80026e0:	4413      	add	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
                    break;
 80026e4:	e013      	b.n	800270e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10a      	bne.n	8002702 <vQueueAddToRegistry+0x6e>
 80026ec:	4a13      	ldr	r2, [pc, #76]	; (800273c <vQueueAddToRegistry+0xa8>)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d104      	bne.n	8002702 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4a0f      	ldr	r2, [pc, #60]	; (800273c <vQueueAddToRegistry+0xa8>)
 80026fe:	4413      	add	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3301      	adds	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b07      	cmp	r3, #7
 800270c:	d9dd      	bls.n	80026ca <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00f      	beq.n	8002734 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4618      	mov	r0, r3
 8002724:	f004 fa90 	bl	8006c48 <SEGGER_SYSVIEW_ShrinkId>
 8002728:	4601      	mov	r1, r0
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	2071      	movs	r0, #113	; 0x71
 8002730:	f003 fca4 	bl	800607c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002734:	bf00      	nop
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	200143cc 	.word	0x200143cc

08002740 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002750:	f001 fed8 	bl	8004504 <vPortEnterCritical>
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800275a:	b25b      	sxtb	r3, r3
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d103      	bne.n	800276a <vQueueWaitForMessageRestricted+0x2a>
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002770:	b25b      	sxtb	r3, r3
 8002772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002776:	d103      	bne.n	8002780 <vQueueWaitForMessageRestricted+0x40>
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002780:	f001 fef0 	bl	8004564 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	2b00      	cmp	r3, #0
 800278a:	d106      	bne.n	800279a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	3324      	adds	r3, #36	; 0x24
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fdc1 	bl	800331c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800279a:	6978      	ldr	r0, [r7, #20]
 800279c:	f7ff ff12 	bl	80025c4 <prvUnlockQueue>
    }
 80027a0:	bf00      	nop
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08c      	sub	sp, #48	; 0x30
 80027ac:	af04      	add	r7, sp, #16
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	4613      	mov	r3, r2
 80027b6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027b8:	88fb      	ldrh	r3, [r7, #6]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4618      	mov	r0, r3
 80027be:	f001 ffcd 	bl	800475c <pvPortMalloc>
 80027c2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00e      	beq.n	80027e8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027ca:	2058      	movs	r0, #88	; 0x58
 80027cc:	f001 ffc6 	bl	800475c <pvPortMalloc>
 80027d0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
 80027de:	e005      	b.n	80027ec <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80027e0:	6978      	ldr	r0, [r7, #20]
 80027e2:	f002 f89b 	bl	800491c <vPortFree>
 80027e6:	e001      	b.n	80027ec <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d013      	beq.n	800281a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027f2:	88fa      	ldrh	r2, [r7, #6]
 80027f4:	2300      	movs	r3, #0
 80027f6:	9303      	str	r3, [sp, #12]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	9302      	str	r3, [sp, #8]
 80027fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f80e 	bl	800282a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800280e:	69f8      	ldr	r0, [r7, #28]
 8002810:	f000 f8b0 	bl	8002974 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002814:	2301      	movs	r3, #1
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	e002      	b.n	8002820 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002820:	69bb      	ldr	r3, [r7, #24]
    }
 8002822:	4618      	mov	r0, r3
 8002824:	3720      	adds	r7, #32
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b088      	sub	sp, #32
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	461a      	mov	r2, r3
 8002842:	21a5      	movs	r1, #165	; 0xa5
 8002844:	f004 fb9c 	bl	8006f80 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002852:	3b01      	subs	r3, #1
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	f023 0307 	bic.w	r3, r3, #7
 8002860:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <prvInitialiseNewTask+0x58>
        __asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	617b      	str	r3, [r7, #20]
    }
 800287e:	bf00      	nop
 8002880:	e7fe      	b.n	8002880 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01f      	beq.n	80028c8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002888:	2300      	movs	r3, #0
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	e012      	b.n	80028b4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	7819      	ldrb	r1, [r3, #0]
 8002896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	3334      	adds	r3, #52	; 0x34
 800289e:	460a      	mov	r2, r1
 80028a0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	4413      	add	r3, r2
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d006      	beq.n	80028bc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3301      	adds	r3, #1
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b09      	cmp	r3, #9
 80028b8:	d9e9      	bls.n	800288e <prvInitialiseNewTask+0x64>
 80028ba:	e000      	b.n	80028be <prvInitialiseNewTask+0x94>
            {
                break;
 80028bc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028c6:	e003      	b.n	80028d0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d90a      	bls.n	80028ec <prvInitialiseNewTask+0xc2>
        __asm volatile
 80028d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	613b      	str	r3, [r7, #16]
    }
 80028e8:	bf00      	nop
 80028ea:	e7fe      	b.n	80028ea <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d901      	bls.n	80028f6 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028f2:	2304      	movs	r3, #4
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028fa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80028fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002900:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	2200      	movs	r2, #0
 8002906:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	3304      	adds	r3, #4
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fb87 	bl	8002020 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002914:	3318      	adds	r3, #24
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fb82 	bl	8002020 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002920:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	f1c3 0205 	rsb	r2, r3, #5
 8002928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002930:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	3350      	adds	r3, #80	; 0x50
 8002936:	2204      	movs	r2, #4
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f004 fb20 	bl	8006f80 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002942:	3354      	adds	r3, #84	; 0x54
 8002944:	2201      	movs	r2, #1
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f004 fb19 	bl	8006f80 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	68f9      	ldr	r1, [r7, #12]
 8002952:	69b8      	ldr	r0, [r7, #24]
 8002954:	f001 fc26 	bl	80041a4 <pxPortInitialiseStack>
 8002958:	4602      	mov	r2, r0
 800295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002968:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800296a:	bf00      	nop
 800296c:	3720      	adds	r7, #32
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002974:	b5b0      	push	{r4, r5, r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af02      	add	r7, sp, #8
 800297a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800297c:	f001 fdc2 	bl	8004504 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002980:	4b4f      	ldr	r3, [pc, #316]	; (8002ac0 <prvAddNewTaskToReadyList+0x14c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3301      	adds	r3, #1
 8002986:	4a4e      	ldr	r2, [pc, #312]	; (8002ac0 <prvAddNewTaskToReadyList+0x14c>)
 8002988:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800298a:	4b4e      	ldr	r3, [pc, #312]	; (8002ac4 <prvAddNewTaskToReadyList+0x150>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002992:	4a4c      	ldr	r2, [pc, #304]	; (8002ac4 <prvAddNewTaskToReadyList+0x150>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002998:	4b49      	ldr	r3, [pc, #292]	; (8002ac0 <prvAddNewTaskToReadyList+0x14c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d110      	bne.n	80029c2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80029a0:	f000 fe7c 	bl	800369c <prvInitialiseTaskLists>
 80029a4:	e00d      	b.n	80029c2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80029a6:	4b48      	ldr	r3, [pc, #288]	; (8002ac8 <prvAddNewTaskToReadyList+0x154>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029ae:	4b45      	ldr	r3, [pc, #276]	; (8002ac4 <prvAddNewTaskToReadyList+0x150>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d802      	bhi.n	80029c2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80029bc:	4a41      	ldr	r2, [pc, #260]	; (8002ac4 <prvAddNewTaskToReadyList+0x150>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80029c2:	4b42      	ldr	r3, [pc, #264]	; (8002acc <prvAddNewTaskToReadyList+0x158>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3301      	adds	r3, #1
 80029c8:	4a40      	ldr	r2, [pc, #256]	; (8002acc <prvAddNewTaskToReadyList+0x158>)
 80029ca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029cc:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <prvAddNewTaskToReadyList+0x158>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d016      	beq.n	8002a08 <prvAddNewTaskToReadyList+0x94>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4618      	mov	r0, r3
 80029de:	f004 f80d 	bl	80069fc <SEGGER_SYSVIEW_OnTaskCreate>
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	461d      	mov	r5, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	461c      	mov	r4, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	1ae3      	subs	r3, r4, r3
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	462b      	mov	r3, r5
 8002a04:	f002 f950 	bl	8004ca8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f004 f87a 	bl	8006b04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	2201      	movs	r2, #1
 8002a16:	409a      	lsls	r2, r3
 8002a18:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <prvAddNewTaskToReadyList+0x15c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	4a2c      	ldr	r2, [pc, #176]	; (8002ad0 <prvAddNewTaskToReadyList+0x15c>)
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a26:	492b      	ldr	r1, [pc, #172]	; (8002ad4 <prvAddNewTaskToReadyList+0x160>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3304      	adds	r3, #4
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	3204      	adds	r2, #4
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	1d1a      	adds	r2, r3, #4
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <prvAddNewTaskToReadyList+0x160>)
 8002a66:	441a      	add	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	615a      	str	r2, [r3, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a70:	4918      	ldr	r1, [pc, #96]	; (8002ad4 <prvAddNewTaskToReadyList+0x160>)
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	1c59      	adds	r1, r3, #1
 8002a80:	4814      	ldr	r0, [pc, #80]	; (8002ad4 <prvAddNewTaskToReadyList+0x160>)
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4403      	add	r3, r0
 8002a8c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002a8e:	f001 fd69 	bl	8004564 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <prvAddNewTaskToReadyList+0x154>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00e      	beq.n	8002ab8 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <prvAddNewTaskToReadyList+0x150>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d207      	bcs.n	8002ab8 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <prvAddNewTaskToReadyList+0x164>)
 8002aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bdb0      	pop	{r4, r5, r7, pc}
 8002ac0:	20000108 	.word	0x20000108
 8002ac4:	20000030 	.word	0x20000030
 8002ac8:	20000114 	.word	0x20000114
 8002acc:	20000124 	.word	0x20000124
 8002ad0:	20000110 	.word	0x20000110
 8002ad4:	20000034 	.word	0x20000034
 8002ad8:	e000ed04 	.word	0xe000ed04

08002adc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002ae4:	f001 fd0e 	bl	8004504 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d102      	bne.n	8002af4 <vTaskDelete+0x18>
 8002aee:	4b48      	ldr	r3, [pc, #288]	; (8002c10 <vTaskDelete+0x134>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	e000      	b.n	8002af6 <vTaskDelete+0x1a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	3304      	adds	r3, #4
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff faf9 	bl	80020f4 <uxListRemove>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d115      	bne.n	8002b34 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0c:	4941      	ldr	r1, [pc, #260]	; (8002c14 <vTaskDelete+0x138>)
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10a      	bne.n	8002b34 <vTaskDelete+0x58>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	2201      	movs	r2, #1
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43da      	mvns	r2, r3
 8002b2a:	4b3b      	ldr	r3, [pc, #236]	; (8002c18 <vTaskDelete+0x13c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	4a39      	ldr	r2, [pc, #228]	; (8002c18 <vTaskDelete+0x13c>)
 8002b32:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d004      	beq.n	8002b46 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3318      	adds	r3, #24
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fad7 	bl	80020f4 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002b46:	4b35      	ldr	r3, [pc, #212]	; (8002c1c <vTaskDelete+0x140>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	4a33      	ldr	r2, [pc, #204]	; (8002c1c <vTaskDelete+0x140>)
 8002b4e:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002b50:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <vTaskDelete+0x134>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d118      	bne.n	8002b8c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	4619      	mov	r1, r3
 8002b60:	482f      	ldr	r0, [pc, #188]	; (8002c20 <vTaskDelete+0x144>)
 8002b62:	f7ff fa6a 	bl	800203a <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002b66:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <vTaskDelete+0x148>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	4a2d      	ldr	r2, [pc, #180]	; (8002c24 <vTaskDelete+0x148>)
 8002b6e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f004 f868 	bl	8006c48 <SEGGER_SYSVIEW_ShrinkId>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	2022      	movs	r0, #34	; 0x22
 8002b7e:	f003 fa41 	bl	8006004 <SEGGER_SYSVIEW_RecordU32>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f002 f8f7 	bl	8004d78 <SYSVIEW_DeleteTask>
 8002b8a:	e013      	b.n	8002bb4 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002b8c:	4b26      	ldr	r3, [pc, #152]	; (8002c28 <vTaskDelete+0x14c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	4a25      	ldr	r2, [pc, #148]	; (8002c28 <vTaskDelete+0x14c>)
 8002b94:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f004 f855 	bl	8006c48 <SEGGER_SYSVIEW_ShrinkId>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	2022      	movs	r0, #34	; 0x22
 8002ba4:	f003 fa2e 	bl	8006004 <SEGGER_SYSVIEW_RecordU32>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f002 f8e4 	bl	8004d78 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002bb0:	f000 fdf2 	bl	8003798 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002bb4:	f001 fcd6 	bl	8004564 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002bb8:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <vTaskDelete+0x134>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d002      	beq.n	8002bc8 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 fdd8 	bl	8003778 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002bc8:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <vTaskDelete+0x150>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01b      	beq.n	8002c08 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <vTaskDelete+0x134>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d116      	bne.n	8002c08 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002bda:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <vTaskDelete+0x154>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <vTaskDelete+0x11c>
        __asm volatile
 8002be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be6:	f383 8811 	msr	BASEPRI, r3
 8002bea:	f3bf 8f6f 	isb	sy
 8002bee:	f3bf 8f4f 	dsb	sy
 8002bf2:	60bb      	str	r3, [r7, #8]
    }
 8002bf4:	bf00      	nop
 8002bf6:	e7fe      	b.n	8002bf6 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <vTaskDelete+0x158>)
 8002bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000030 	.word	0x20000030
 8002c14:	20000034 	.word	0x20000034
 8002c18:	20000110 	.word	0x20000110
 8002c1c:	20000124 	.word	0x20000124
 8002c20:	200000dc 	.word	0x200000dc
 8002c24:	200000f0 	.word	0x200000f0
 8002c28:	20000108 	.word	0x20000108
 8002c2c:	20000114 	.word	0x20000114
 8002c30:	20000130 	.word	0x20000130
 8002c34:	e000ed04 	.word	0xe000ed04

08002c38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01b      	beq.n	8002c82 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <vTaskDelay+0x68>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <vTaskDelay+0x30>
        __asm volatile
 8002c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	60bb      	str	r3, [r7, #8]
    }
 8002c64:	bf00      	nop
 8002c66:	e7fe      	b.n	8002c66 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002c68:	f000 f880 	bl	8002d6c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	2023      	movs	r0, #35	; 0x23
 8002c70:	f003 f9c8 	bl	8006004 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c74:	2100      	movs	r1, #0
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 ff84 	bl	8003b84 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002c7c:	f000 f884 	bl	8002d88 <xTaskResumeAll>
 8002c80:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d107      	bne.n	8002c98 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <vTaskDelay+0x6c>)
 8002c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000130 	.word	0x20000130
 8002ca4:	e000ed04 	.word	0xe000ed04

08002ca8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002cae:	4b27      	ldr	r3, [pc, #156]	; (8002d4c <vTaskStartScheduler+0xa4>)
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2282      	movs	r2, #130	; 0x82
 8002cba:	4925      	ldr	r1, [pc, #148]	; (8002d50 <vTaskStartScheduler+0xa8>)
 8002cbc:	4825      	ldr	r0, [pc, #148]	; (8002d54 <vTaskStartScheduler+0xac>)
 8002cbe:	f7ff fd73 	bl	80027a8 <xTaskCreate>
 8002cc2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d102      	bne.n	8002cd0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002cca:	f000 ffe7 	bl	8003c9c <xTimerCreateTimerTask>
 8002cce:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d124      	bne.n	8002d20 <vTaskStartScheduler+0x78>
        __asm volatile
 8002cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cda:	f383 8811 	msr	BASEPRI, r3
 8002cde:	f3bf 8f6f 	isb	sy
 8002ce2:	f3bf 8f4f 	dsb	sy
 8002ce6:	60bb      	str	r3, [r7, #8]
    }
 8002ce8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002cea:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <vTaskStartScheduler+0xb0>)
 8002cec:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <vTaskStartScheduler+0xb4>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <vTaskStartScheduler+0xb8>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002cfe:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <vTaskStartScheduler+0xbc>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <vTaskStartScheduler+0xa4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d102      	bne.n	8002d10 <vTaskStartScheduler+0x68>
 8002d0a:	f003 fe5b 	bl	80069c4 <SEGGER_SYSVIEW_OnIdle>
 8002d0e:	e004      	b.n	8002d1a <vTaskStartScheduler+0x72>
 8002d10:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <vTaskStartScheduler+0xbc>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f003 feb3 	bl	8006a80 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002d1a:	f001 fad3 	bl	80042c4 <xPortStartScheduler>
 8002d1e:	e00e      	b.n	8002d3e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d26:	d10a      	bne.n	8002d3e <vTaskStartScheduler+0x96>
        __asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	607b      	str	r3, [r7, #4]
    }
 8002d3a:	bf00      	nop
 8002d3c:	e7fe      	b.n	8002d3c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <vTaskStartScheduler+0xc0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
}
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	2000012c 	.word	0x2000012c
 8002d50:	0800701c 	.word	0x0800701c
 8002d54:	0800366d 	.word	0x0800366d
 8002d58:	20000128 	.word	0x20000128
 8002d5c:	20000114 	.word	0x20000114
 8002d60:	2000010c 	.word	0x2000010c
 8002d64:	20000030 	.word	0x20000030
 8002d68:	2000000c 	.word	0x2000000c

08002d6c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <vTaskSuspendAll+0x18>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	4a03      	ldr	r2, [pc, #12]	; (8002d84 <vTaskSuspendAll+0x18>)
 8002d78:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	20000130 	.word	0x20000130

08002d88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d96:	4b73      	ldr	r3, [pc, #460]	; (8002f64 <xTaskResumeAll+0x1dc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10a      	bne.n	8002db4 <xTaskResumeAll+0x2c>
        __asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	607b      	str	r3, [r7, #4]
    }
 8002db0:	bf00      	nop
 8002db2:	e7fe      	b.n	8002db2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002db4:	f001 fba6 	bl	8004504 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002db8:	4b6a      	ldr	r3, [pc, #424]	; (8002f64 <xTaskResumeAll+0x1dc>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	4a69      	ldr	r2, [pc, #420]	; (8002f64 <xTaskResumeAll+0x1dc>)
 8002dc0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dc2:	4b68      	ldr	r3, [pc, #416]	; (8002f64 <xTaskResumeAll+0x1dc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f040 80c4 	bne.w	8002f54 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002dcc:	4b66      	ldr	r3, [pc, #408]	; (8002f68 <xTaskResumeAll+0x1e0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80bf 	beq.w	8002f54 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dd6:	e08e      	b.n	8002ef6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dd8:	4b64      	ldr	r3, [pc, #400]	; (8002f6c <xTaskResumeAll+0x1e4>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	6a12      	ldr	r2, [r2, #32]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	69d2      	ldr	r2, [r2, #28]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3318      	adds	r3, #24
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d103      	bne.n	8002e0e <xTaskResumeAll+0x86>
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	6a1a      	ldr	r2, [r3, #32]
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	2200      	movs	r2, #0
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	1e5a      	subs	r2, r3, #1
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	68d2      	ldr	r2, [r2, #12]
 8002e2c:	609a      	str	r2, [r3, #8]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	6892      	ldr	r2, [r2, #8]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d103      	bne.n	8002e4c <xTaskResumeAll+0xc4>
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	615a      	str	r2, [r3, #20]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	1e5a      	subs	r2, r3, #1
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 fe50 	bl	8006b04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	2201      	movs	r2, #1
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	4b40      	ldr	r3, [pc, #256]	; (8002f70 <xTaskResumeAll+0x1e8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	4a3f      	ldr	r2, [pc, #252]	; (8002f70 <xTaskResumeAll+0x1e8>)
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7a:	493e      	ldr	r1, [pc, #248]	; (8002f74 <xTaskResumeAll+0x1ec>)
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	3304      	adds	r3, #4
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	3204      	adds	r2, #4
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	1d1a      	adds	r2, r3, #4
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4a2e      	ldr	r2, [pc, #184]	; (8002f74 <xTaskResumeAll+0x1ec>)
 8002eba:	441a      	add	r2, r3
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	615a      	str	r2, [r3, #20]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec4:	492b      	ldr	r1, [pc, #172]	; (8002f74 <xTaskResumeAll+0x1ec>)
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	1c59      	adds	r1, r3, #1
 8002ed4:	4827      	ldr	r0, [pc, #156]	; (8002f74 <xTaskResumeAll+0x1ec>)
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4403      	add	r3, r0
 8002ee0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee6:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <xTaskResumeAll+0x1f0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d302      	bcc.n	8002ef6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002ef0:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <xTaskResumeAll+0x1f4>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ef6:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <xTaskResumeAll+0x1e4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f47f af6c 	bne.w	8002dd8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002f06:	f000 fc47 	bl	8003798 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <xTaskResumeAll+0x1f8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d010      	beq.n	8002f38 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002f16:	f000 f859 	bl	8002fcc <xTaskIncrementTick>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002f20:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <xTaskResumeAll+0x1f4>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f1      	bne.n	8002f16 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002f32:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <xTaskResumeAll+0x1f8>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002f38:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <xTaskResumeAll+0x1f4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d009      	beq.n	8002f54 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002f40:	2301      	movs	r3, #1
 8002f42:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <xTaskResumeAll+0x1fc>)
 8002f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f54:	f001 fb06 	bl	8004564 <vPortExitCritical>

    return xAlreadyYielded;
 8002f58:	69bb      	ldr	r3, [r7, #24]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000130 	.word	0x20000130
 8002f68:	20000108 	.word	0x20000108
 8002f6c:	200000c8 	.word	0x200000c8
 8002f70:	20000110 	.word	0x20000110
 8002f74:	20000034 	.word	0x20000034
 8002f78:	20000030 	.word	0x20000030
 8002f7c:	2000011c 	.word	0x2000011c
 8002f80:	20000118 	.word	0x20000118
 8002f84:	e000ed04 	.word	0xe000ed04

08002f88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002f8e:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <xTaskGetTickCount+0x1c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002f94:	687b      	ldr	r3, [r7, #4]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	2000010c 	.word	0x2000010c

08002fa8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fae:	f001 fb95 	bl	80046dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002fb6:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <xTaskGetTickCountFromISR+0x20>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002fbc:	683b      	ldr	r3, [r7, #0]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	2000010c 	.word	0x2000010c

08002fcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fd6:	4b7f      	ldr	r3, [pc, #508]	; (80031d4 <xTaskIncrementTick+0x208>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 80f0 	bne.w	80031c0 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fe0:	4b7d      	ldr	r3, [pc, #500]	; (80031d8 <xTaskIncrementTick+0x20c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002fe8:	4a7b      	ldr	r2, [pc, #492]	; (80031d8 <xTaskIncrementTick+0x20c>)
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d120      	bne.n	8003036 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ff4:	4b79      	ldr	r3, [pc, #484]	; (80031dc <xTaskIncrementTick+0x210>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <xTaskIncrementTick+0x48>
        __asm volatile
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	607b      	str	r3, [r7, #4]
    }
 8003010:	bf00      	nop
 8003012:	e7fe      	b.n	8003012 <xTaskIncrementTick+0x46>
 8003014:	4b71      	ldr	r3, [pc, #452]	; (80031dc <xTaskIncrementTick+0x210>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	4b71      	ldr	r3, [pc, #452]	; (80031e0 <xTaskIncrementTick+0x214>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a6f      	ldr	r2, [pc, #444]	; (80031dc <xTaskIncrementTick+0x210>)
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4a6f      	ldr	r2, [pc, #444]	; (80031e0 <xTaskIncrementTick+0x214>)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	4b6e      	ldr	r3, [pc, #440]	; (80031e4 <xTaskIncrementTick+0x218>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3301      	adds	r3, #1
 800302e:	4a6d      	ldr	r2, [pc, #436]	; (80031e4 <xTaskIncrementTick+0x218>)
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	f000 fbb1 	bl	8003798 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003036:	4b6c      	ldr	r3, [pc, #432]	; (80031e8 <xTaskIncrementTick+0x21c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6a3a      	ldr	r2, [r7, #32]
 800303c:	429a      	cmp	r2, r3
 800303e:	f0c0 80aa 	bcc.w	8003196 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003042:	4b66      	ldr	r3, [pc, #408]	; (80031dc <xTaskIncrementTick+0x210>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d104      	bne.n	8003056 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800304c:	4b66      	ldr	r3, [pc, #408]	; (80031e8 <xTaskIncrementTick+0x21c>)
 800304e:	f04f 32ff 	mov.w	r2, #4294967295
 8003052:	601a      	str	r2, [r3, #0]
                    break;
 8003054:	e09f      	b.n	8003196 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003056:	4b61      	ldr	r3, [pc, #388]	; (80031dc <xTaskIncrementTick+0x210>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003066:	6a3a      	ldr	r2, [r7, #32]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	429a      	cmp	r2, r3
 800306c:	d203      	bcs.n	8003076 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800306e:	4a5e      	ldr	r2, [pc, #376]	; (80031e8 <xTaskIncrementTick+0x21c>)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003074:	e08f      	b.n	8003196 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	68d2      	ldr	r2, [r2, #12]
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	6892      	ldr	r2, [r2, #8]
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	3304      	adds	r3, #4
 8003098:	429a      	cmp	r2, r3
 800309a:	d103      	bne.n	80030a4 <xTaskIncrementTick+0xd8>
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	605a      	str	r2, [r3, #4]
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2200      	movs	r2, #0
 80030a8:	615a      	str	r2, [r3, #20]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	1e5a      	subs	r2, r3, #1
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d01e      	beq.n	80030fa <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	6a12      	ldr	r2, [r2, #32]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	69d2      	ldr	r2, [r2, #28]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	3318      	adds	r3, #24
 80030de:	429a      	cmp	r2, r3
 80030e0:	d103      	bne.n	80030ea <xTaskIncrementTick+0x11e>
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	6a1a      	ldr	r2, [r3, #32]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2200      	movs	r2, #0
 80030ee:	629a      	str	r2, [r3, #40]	; 0x28
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	1e5a      	subs	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 fd01 	bl	8006b04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	2201      	movs	r2, #1
 8003108:	409a      	lsls	r2, r3
 800310a:	4b38      	ldr	r3, [pc, #224]	; (80031ec <xTaskIncrementTick+0x220>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	4a36      	ldr	r2, [pc, #216]	; (80031ec <xTaskIncrementTick+0x220>)
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003118:	4935      	ldr	r1, [pc, #212]	; (80031f0 <xTaskIncrementTick+0x224>)
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	3304      	adds	r3, #4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	60da      	str	r2, [r3, #12]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	3204      	adds	r2, #4
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	1d1a      	adds	r2, r3, #4
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	609a      	str	r2, [r3, #8]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4a26      	ldr	r2, [pc, #152]	; (80031f0 <xTaskIncrementTick+0x224>)
 8003158:	441a      	add	r2, r3
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	615a      	str	r2, [r3, #20]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003162:	4923      	ldr	r1, [pc, #140]	; (80031f0 <xTaskIncrementTick+0x224>)
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	1c59      	adds	r1, r3, #1
 8003172:	481f      	ldr	r0, [pc, #124]	; (80031f0 <xTaskIncrementTick+0x224>)
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4403      	add	r3, r0
 800317e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003184:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <xTaskIncrementTick+0x228>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	429a      	cmp	r2, r3
 800318c:	f4ff af59 	bcc.w	8003042 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003190:	2301      	movs	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003194:	e755      	b.n	8003042 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003196:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <xTaskIncrementTick+0x228>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319c:	4914      	ldr	r1, [pc, #80]	; (80031f0 <xTaskIncrementTick+0x224>)
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d901      	bls.n	80031b2 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 80031ae:	2301      	movs	r3, #1
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <xTaskIncrementTick+0x22c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 80031ba:	2301      	movs	r3, #1
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
 80031be:	e004      	b.n	80031ca <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80031c0:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <xTaskIncrementTick+0x230>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	4a0d      	ldr	r2, [pc, #52]	; (80031fc <xTaskIncrementTick+0x230>)
 80031c8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3728      	adds	r7, #40	; 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000130 	.word	0x20000130
 80031d8:	2000010c 	.word	0x2000010c
 80031dc:	200000c0 	.word	0x200000c0
 80031e0:	200000c4 	.word	0x200000c4
 80031e4:	20000120 	.word	0x20000120
 80031e8:	20000128 	.word	0x20000128
 80031ec:	20000110 	.word	0x20000110
 80031f0:	20000034 	.word	0x20000034
 80031f4:	20000030 	.word	0x20000030
 80031f8:	2000011c 	.word	0x2000011c
 80031fc:	20000118 	.word	0x20000118

08003200 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003206:	4b2d      	ldr	r3, [pc, #180]	; (80032bc <vTaskSwitchContext+0xbc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800320e:	4b2c      	ldr	r3, [pc, #176]	; (80032c0 <vTaskSwitchContext+0xc0>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003214:	e04d      	b.n	80032b2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003216:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <vTaskSwitchContext+0xc0>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800321c:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <vTaskSwitchContext+0xc4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	fab3 f383 	clz	r3, r3
 8003228:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800322a:	7afb      	ldrb	r3, [r7, #11]
 800322c:	f1c3 031f 	rsb	r3, r3, #31
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	4925      	ldr	r1, [pc, #148]	; (80032c8 <vTaskSwitchContext+0xc8>)
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10a      	bne.n	800325c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	607b      	str	r3, [r7, #4]
    }
 8003258:	bf00      	nop
 800325a:	e7fe      	b.n	800325a <vTaskSwitchContext+0x5a>
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4a18      	ldr	r2, [pc, #96]	; (80032c8 <vTaskSwitchContext+0xc8>)
 8003268:	4413      	add	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	3308      	adds	r3, #8
 800327e:	429a      	cmp	r2, r3
 8003280:	d104      	bne.n	800328c <vTaskSwitchContext+0x8c>
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	605a      	str	r2, [r3, #4]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	4a0e      	ldr	r2, [pc, #56]	; (80032cc <vTaskSwitchContext+0xcc>)
 8003294:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003296:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <vTaskSwitchContext+0xcc>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <vTaskSwitchContext+0xd0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d102      	bne.n	80032a8 <vTaskSwitchContext+0xa8>
 80032a2:	f003 fb8f 	bl	80069c4 <SEGGER_SYSVIEW_OnIdle>
}
 80032a6:	e004      	b.n	80032b2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80032a8:	4b08      	ldr	r3, [pc, #32]	; (80032cc <vTaskSwitchContext+0xcc>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f003 fbe7 	bl	8006a80 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80032b2:	bf00      	nop
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000130 	.word	0x20000130
 80032c0:	2000011c 	.word	0x2000011c
 80032c4:	20000110 	.word	0x20000110
 80032c8:	20000034 	.word	0x20000034
 80032cc:	20000030 	.word	0x20000030
 80032d0:	2000012c 	.word	0x2000012c

080032d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80032e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	60fb      	str	r3, [r7, #12]
    }
 80032f6:	bf00      	nop
 80032f8:	e7fe      	b.n	80032f8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032fa:	4b07      	ldr	r3, [pc, #28]	; (8003318 <vTaskPlaceOnEventList+0x44>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3318      	adds	r3, #24
 8003300:	4619      	mov	r1, r3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fe febd 	bl	8002082 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003308:	2101      	movs	r1, #1
 800330a:	6838      	ldr	r0, [r7, #0]
 800330c:	f000 fc3a 	bl	8003b84 <prvAddCurrentTaskToDelayedList>
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000030 	.word	0x20000030

0800331c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800332e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003332:	f383 8811 	msr	BASEPRI, r3
 8003336:	f3bf 8f6f 	isb	sy
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	613b      	str	r3, [r7, #16]
    }
 8003340:	bf00      	nop
 8003342:	e7fe      	b.n	8003342 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	61da      	str	r2, [r3, #28]
 8003352:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	6892      	ldr	r2, [r2, #8]
 800335a:	621a      	str	r2, [r3, #32]
 800335c:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	3218      	adds	r2, #24
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f103 0218 	add.w	r2, r3, #24
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	629a      	str	r2, [r3, #40]	; 0x28
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800338c:	f04f 33ff 	mov.w	r3, #4294967295
 8003390:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003392:	2024      	movs	r0, #36	; 0x24
 8003394:	f002 fe18 	bl	8005fc8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	68b8      	ldr	r0, [r7, #8]
 800339c:	f000 fbf2 	bl	8003b84 <prvAddCurrentTaskToDelayedList>
    }
 80033a0:	bf00      	nop
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000030 	.word	0x20000030

080033ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	; 0x28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10a      	bne.n	80033d8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80033c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	60fb      	str	r3, [r7, #12]
    }
 80033d4:	bf00      	nop
 80033d6:	e7fe      	b.n	80033d6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	6a3a      	ldr	r2, [r7, #32]
 80033e4:	6a12      	ldr	r2, [r2, #32]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	6a3a      	ldr	r2, [r7, #32]
 80033ee:	69d2      	ldr	r2, [r2, #28]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	3318      	adds	r3, #24
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d103      	bne.n	8003406 <xTaskRemoveFromEventList+0x5a>
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	6a1a      	ldr	r2, [r3, #32]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	2200      	movs	r2, #0
 800340a:	629a      	str	r2, [r3, #40]	; 0x28
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	1e5a      	subs	r2, r3, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003416:	4b4b      	ldr	r3, [pc, #300]	; (8003544 <xTaskRemoveFromEventList+0x198>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d162      	bne.n	80034e4 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	6a3a      	ldr	r2, [r7, #32]
 800342a:	68d2      	ldr	r2, [r2, #12]
 800342c:	609a      	str	r2, [r3, #8]
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	6a3a      	ldr	r2, [r7, #32]
 8003434:	6892      	ldr	r2, [r2, #8]
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	3304      	adds	r3, #4
 8003440:	429a      	cmp	r2, r3
 8003442:	d103      	bne.n	800344c <xTaskRemoveFromEventList+0xa0>
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	605a      	str	r2, [r3, #4]
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	2200      	movs	r2, #0
 8003450:	615a      	str	r2, [r3, #20]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	1e5a      	subs	r2, r3, #1
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	4618      	mov	r0, r3
 8003460:	f003 fb50 	bl	8006b04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	2201      	movs	r2, #1
 800346a:	409a      	lsls	r2, r3
 800346c:	4b36      	ldr	r3, [pc, #216]	; (8003548 <xTaskRemoveFromEventList+0x19c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4313      	orrs	r3, r2
 8003472:	4a35      	ldr	r2, [pc, #212]	; (8003548 <xTaskRemoveFromEventList+0x19c>)
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347a:	4934      	ldr	r1, [pc, #208]	; (800354c <xTaskRemoveFromEventList+0x1a0>)
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	3304      	adds	r3, #4
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	609a      	str	r2, [r3, #8]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	6a3a      	ldr	r2, [r7, #32]
 80034a0:	3204      	adds	r2, #4
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	1d1a      	adds	r2, r3, #4
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4a24      	ldr	r2, [pc, #144]	; (800354c <xTaskRemoveFromEventList+0x1a0>)
 80034ba:	441a      	add	r2, r3
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	615a      	str	r2, [r3, #20]
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c4:	4921      	ldr	r1, [pc, #132]	; (800354c <xTaskRemoveFromEventList+0x1a0>)
 80034c6:	4613      	mov	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	1c59      	adds	r1, r3, #1
 80034d4:	481d      	ldr	r0, [pc, #116]	; (800354c <xTaskRemoveFromEventList+0x1a0>)
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4403      	add	r3, r0
 80034e0:	6019      	str	r1, [r3, #0]
 80034e2:	e01b      	b.n	800351c <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034e4:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <xTaskRemoveFromEventList+0x1a4>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	61da      	str	r2, [r3, #28]
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	621a      	str	r2, [r3, #32]
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	6a3a      	ldr	r2, [r7, #32]
 80034fe:	3218      	adds	r2, #24
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f103 0218 	add.w	r2, r3, #24
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	4a10      	ldr	r2, [pc, #64]	; (8003550 <xTaskRemoveFromEventList+0x1a4>)
 8003510:	629a      	str	r2, [r3, #40]	; 0x28
 8003512:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <xTaskRemoveFromEventList+0x1a4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <xTaskRemoveFromEventList+0x1a4>)
 800351a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <xTaskRemoveFromEventList+0x1a8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	429a      	cmp	r2, r3
 8003528:	d905      	bls.n	8003536 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800352a:	2301      	movs	r3, #1
 800352c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <xTaskRemoveFromEventList+0x1ac>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e001      	b.n	800353a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003536:	2300      	movs	r3, #0
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800353c:	4618      	mov	r0, r3
 800353e:	3728      	adds	r7, #40	; 0x28
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000130 	.word	0x20000130
 8003548:	20000110 	.word	0x20000110
 800354c:	20000034 	.word	0x20000034
 8003550:	200000c8 	.word	0x200000c8
 8003554:	20000030 	.word	0x20000030
 8003558:	2000011c 	.word	0x2000011c

0800355c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <vTaskInternalSetTimeOutState+0x24>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <vTaskInternalSetTimeOutState+0x28>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	605a      	str	r2, [r3, #4]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	20000120 	.word	0x20000120
 8003584:	2000010c 	.word	0x2000010c

08003588 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	613b      	str	r3, [r7, #16]
    }
 80035aa:	bf00      	nop
 80035ac:	e7fe      	b.n	80035ac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	60fb      	str	r3, [r7, #12]
    }
 80035c6:	bf00      	nop
 80035c8:	e7fe      	b.n	80035c8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80035ca:	f000 ff9b 	bl	8004504 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80035ce:	4b1f      	ldr	r3, [pc, #124]	; (800364c <xTaskCheckForTimeOut+0xc4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d102      	bne.n	80035ee <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	e026      	b.n	800363c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4b17      	ldr	r3, [pc, #92]	; (8003650 <xTaskCheckForTimeOut+0xc8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d00a      	beq.n	8003610 <xTaskCheckForTimeOut+0x88>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	429a      	cmp	r2, r3
 8003602:	d305      	bcc.n	8003610 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003604:	2301      	movs	r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e015      	b.n	800363c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	429a      	cmp	r2, r3
 8003618:	d20b      	bcs.n	8003632 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	1ad2      	subs	r2, r2, r3
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ff98 	bl	800355c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	e004      	b.n	800363c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003638:	2301      	movs	r3, #1
 800363a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800363c:	f000 ff92 	bl	8004564 <vPortExitCritical>

    return xReturn;
 8003640:	69fb      	ldr	r3, [r7, #28]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	2000010c 	.word	0x2000010c
 8003650:	20000120 	.word	0x20000120

08003654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <vTaskMissedYield+0x14>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]
}
 800365e:	bf00      	nop
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	2000011c 	.word	0x2000011c

0800366c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003674:	f000 f852 	bl	800371c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <prvIdleTask+0x28>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d9f9      	bls.n	8003674 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <prvIdleTask+0x2c>)
 8003682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003690:	e7f0      	b.n	8003674 <prvIdleTask+0x8>
 8003692:	bf00      	nop
 8003694:	20000034 	.word	0x20000034
 8003698:	e000ed04 	.word	0xe000ed04

0800369c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	e00c      	b.n	80036c2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4a12      	ldr	r2, [pc, #72]	; (80036fc <prvInitialiseTaskLists+0x60>)
 80036b4:	4413      	add	r3, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe fc92 	bl	8001fe0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3301      	adds	r3, #1
 80036c0:	607b      	str	r3, [r7, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d9ef      	bls.n	80036a8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80036c8:	480d      	ldr	r0, [pc, #52]	; (8003700 <prvInitialiseTaskLists+0x64>)
 80036ca:	f7fe fc89 	bl	8001fe0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80036ce:	480d      	ldr	r0, [pc, #52]	; (8003704 <prvInitialiseTaskLists+0x68>)
 80036d0:	f7fe fc86 	bl	8001fe0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80036d4:	480c      	ldr	r0, [pc, #48]	; (8003708 <prvInitialiseTaskLists+0x6c>)
 80036d6:	f7fe fc83 	bl	8001fe0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80036da:	480c      	ldr	r0, [pc, #48]	; (800370c <prvInitialiseTaskLists+0x70>)
 80036dc:	f7fe fc80 	bl	8001fe0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80036e0:	480b      	ldr	r0, [pc, #44]	; (8003710 <prvInitialiseTaskLists+0x74>)
 80036e2:	f7fe fc7d 	bl	8001fe0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <prvInitialiseTaskLists+0x78>)
 80036e8:	4a05      	ldr	r2, [pc, #20]	; (8003700 <prvInitialiseTaskLists+0x64>)
 80036ea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <prvInitialiseTaskLists+0x7c>)
 80036ee:	4a05      	ldr	r2, [pc, #20]	; (8003704 <prvInitialiseTaskLists+0x68>)
 80036f0:	601a      	str	r2, [r3, #0]
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000034 	.word	0x20000034
 8003700:	20000098 	.word	0x20000098
 8003704:	200000ac 	.word	0x200000ac
 8003708:	200000c8 	.word	0x200000c8
 800370c:	200000dc 	.word	0x200000dc
 8003710:	200000f4 	.word	0x200000f4
 8003714:	200000c0 	.word	0x200000c0
 8003718:	200000c4 	.word	0x200000c4

0800371c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003722:	e019      	b.n	8003758 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003724:	f000 feee 	bl	8004504 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003728:	4b10      	ldr	r3, [pc, #64]	; (800376c <prvCheckTasksWaitingTermination+0x50>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3304      	adds	r3, #4
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe fcdd 	bl	80020f4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800373a:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <prvCheckTasksWaitingTermination+0x54>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3b01      	subs	r3, #1
 8003740:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <prvCheckTasksWaitingTermination+0x54>)
 8003742:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <prvCheckTasksWaitingTermination+0x58>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3b01      	subs	r3, #1
 800374a:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <prvCheckTasksWaitingTermination+0x58>)
 800374c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800374e:	f000 ff09 	bl	8004564 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f810 	bl	8003778 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <prvCheckTasksWaitingTermination+0x58>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e1      	bne.n	8003724 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	200000dc 	.word	0x200000dc
 8003770:	20000108 	.word	0x20000108
 8003774:	200000f0 	.word	0x200000f0

08003778 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	4618      	mov	r0, r3
 8003786:	f001 f8c9 	bl	800491c <vPortFree>
                vPortFree( pxTCB );
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f001 f8c6 	bl	800491c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <prvResetNextTaskUnblockTime+0x30>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d104      	bne.n	80037b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <prvResetNextTaskUnblockTime+0x34>)
 80037a8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80037ae:	e005      	b.n	80037bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <prvResetNextTaskUnblockTime+0x30>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a04      	ldr	r2, [pc, #16]	; (80037cc <prvResetNextTaskUnblockTime+0x34>)
 80037ba:	6013      	str	r3, [r2, #0]
}
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	200000c0 	.word	0x200000c0
 80037cc:	20000128 	.word	0x20000128

080037d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <xTaskGetSchedulerState+0x34>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d102      	bne.n	80037e4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80037de:	2301      	movs	r3, #1
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	e008      	b.n	80037f6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037e4:	4b08      	ldr	r3, [pc, #32]	; (8003808 <xTaskGetSchedulerState+0x38>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d102      	bne.n	80037f2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80037ec:	2302      	movs	r3, #2
 80037ee:	607b      	str	r3, [r7, #4]
 80037f0:	e001      	b.n	80037f6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80037f2:	2300      	movs	r3, #0
 80037f4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80037f6:	687b      	ldr	r3, [r7, #4]
    }
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	20000114 	.word	0x20000114
 8003808:	20000130 	.word	0x20000130

0800380c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	613b      	str	r3, [r7, #16]
    }
 8003832:	bf00      	nop
 8003834:	e7fe      	b.n	8003834 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003836:	f000 fe65 	bl	8004504 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800383a:	4b36      	ldr	r3, [pc, #216]	; (8003914 <xTaskGenericNotifyWait+0x108>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4413      	add	r3, r2
 8003842:	3354      	adds	r3, #84	; 0x54
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d022      	beq.n	8003892 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800384c:	4b31      	ldr	r3, [pc, #196]	; (8003914 <xTaskGenericNotifyWait+0x108>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	3214      	adds	r2, #20
 8003854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	43d2      	mvns	r2, r2
 800385c:	4011      	ands	r1, r2
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	3214      	adds	r2, #20
 8003862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003866:	4b2b      	ldr	r3, [pc, #172]	; (8003914 <xTaskGenericNotifyWait+0x108>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	3354      	adds	r3, #84	; 0x54
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800387a:	2101      	movs	r1, #1
 800387c:	6a38      	ldr	r0, [r7, #32]
 800387e:	f000 f981 	bl	8003b84 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003882:	4b25      	ldr	r3, [pc, #148]	; (8003918 <xTaskGenericNotifyWait+0x10c>)
 8003884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003892:	f000 fe67 	bl	8004564 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003896:	f000 fe35 	bl	8004504 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	4613      	mov	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	2040      	movs	r0, #64	; 0x40
 80038a8:	f002 fcb8 	bl	800621c <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80038b2:	4b18      	ldr	r3, [pc, #96]	; (8003914 <xTaskGenericNotifyWait+0x108>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	3214      	adds	r2, #20
 80038ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80038c2:	4b14      	ldr	r3, [pc, #80]	; (8003914 <xTaskGenericNotifyWait+0x108>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4413      	add	r3, r2
 80038ca:	3354      	adds	r3, #84	; 0x54
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d002      	beq.n	80038da <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e00e      	b.n	80038f8 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80038da:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <xTaskGenericNotifyWait+0x108>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	3214      	adds	r2, #20
 80038e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	43d2      	mvns	r2, r2
 80038ea:	4011      	ands	r1, r2
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	3214      	adds	r2, #20
 80038f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80038f4:	2301      	movs	r3, #1
 80038f6:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <xTaskGenericNotifyWait+0x108>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	3354      	adds	r3, #84	; 0x54
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003906:	f000 fe2d 	bl	8004564 <vPortExitCritical>

        return xReturn;
 800390a:	697b      	ldr	r3, [r7, #20]
    }
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20000030 	.word	0x20000030
 8003918:	e000ed04 	.word	0xe000ed04

0800391c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800391c:	b580      	push	{r7, lr}
 800391e:	b090      	sub	sp, #64	; 0x40
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800392a:	2301      	movs	r3, #1
 800392c:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <xTaskGenericNotify+0x2e>
        __asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	623b      	str	r3, [r7, #32]
    }
 8003946:	bf00      	nop
 8003948:	e7fe      	b.n	8003948 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <xTaskGenericNotify+0x4a>
        __asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	61fb      	str	r3, [r7, #28]
    }
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 800396a:	f000 fdcb 	bl	8004504 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800396e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d006      	beq.n	8003982 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	3214      	adds	r2, #20
 800397a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800397e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003980:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4413      	add	r3, r2
 8003988:	3354      	adds	r3, #84	; 0x54
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4413      	add	r3, r2
 8003996:	3354      	adds	r3, #84	; 0x54
 8003998:	2202      	movs	r2, #2
 800399a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d83b      	bhi.n	8003a1a <xTaskGenericNotify+0xfe>
 80039a2:	a201      	add	r2, pc, #4	; (adr r2, 80039a8 <xTaskGenericNotify+0x8c>)
 80039a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a8:	08003a39 	.word	0x08003a39
 80039ac:	080039bd 	.word	0x080039bd
 80039b0:	080039d9 	.word	0x080039d9
 80039b4:	080039f1 	.word	0x080039f1
 80039b8:	080039ff 	.word	0x080039ff
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	3214      	adds	r2, #20
 80039c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	ea42 0103 	orr.w	r1, r2, r3
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	3214      	adds	r2, #20
 80039d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80039d6:	e032      	b.n	8003a3e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	3214      	adds	r2, #20
 80039de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e2:	1c59      	adds	r1, r3, #1
 80039e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	3214      	adds	r2, #20
 80039ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80039ee:	e026      	b.n	8003a3e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80039f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	3214      	adds	r2, #20
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80039fc:	e01f      	b.n	8003a3e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80039fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d006      	beq.n	8003a14 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	3214      	adds	r2, #20
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003a12:	e014      	b.n	8003a3e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8003a18:	e011      	b.n	8003a3e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003a1a:	4b55      	ldr	r3, [pc, #340]	; (8003b70 <xTaskGenericNotify+0x254>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00c      	beq.n	8003a3c <xTaskGenericNotify+0x120>
        __asm volatile
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	61bb      	str	r3, [r7, #24]
    }
 8003a34:	bf00      	nop
 8003a36:	e7fe      	b.n	8003a36 <xTaskGenericNotify+0x11a>
                    break;
 8003a38:	bf00      	nop
 8003a3a:	e000      	b.n	8003a3e <xTaskGenericNotify+0x122>

                    break;
 8003a3c:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	4618      	mov	r0, r3
 8003a42:	f003 f901 	bl	8006c48 <SEGGER_SYSVIEW_ShrinkId>
 8003a46:	4601      	mov	r1, r0
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	203e      	movs	r0, #62	; 0x3e
 8003a54:	f002 fbe2 	bl	800621c <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003a58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d17f      	bne.n	8003b60 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6c:	68d2      	ldr	r2, [r2, #12]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a76:	6892      	ldr	r2, [r2, #8]
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	3304      	adds	r3, #4
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d103      	bne.n	8003a8e <xTaskGenericNotify+0x172>
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	2200      	movs	r2, #0
 8003a92:	615a      	str	r2, [r3, #20]
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	1e5a      	subs	r2, r3, #1
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f003 f82f 	bl	8006b04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	2201      	movs	r2, #1
 8003aac:	409a      	lsls	r2, r3
 8003aae:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <xTaskGenericNotify+0x258>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	4a2f      	ldr	r2, [pc, #188]	; (8003b74 <xTaskGenericNotify+0x258>)
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abc:	492e      	ldr	r1, [pc, #184]	; (8003b78 <xTaskGenericNotify+0x25c>)
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3304      	adds	r3, #4
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	60da      	str	r2, [r3, #12]
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ae2:	3204      	adds	r2, #4
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	1d1a      	adds	r2, r3, #4
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af2:	4613      	mov	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4a1f      	ldr	r2, [pc, #124]	; (8003b78 <xTaskGenericNotify+0x25c>)
 8003afc:	441a      	add	r2, r3
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	615a      	str	r2, [r3, #20]
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b06:	491c      	ldr	r1, [pc, #112]	; (8003b78 <xTaskGenericNotify+0x25c>)
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	1c59      	adds	r1, r3, #1
 8003b16:	4818      	ldr	r0, [pc, #96]	; (8003b78 <xTaskGenericNotify+0x25c>)
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4403      	add	r3, r0
 8003b22:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <xTaskGenericNotify+0x226>
        __asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	617b      	str	r3, [r7, #20]
    }
 8003b3e:	bf00      	nop
 8003b40:	e7fe      	b.n	8003b40 <xTaskGenericNotify+0x224>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b46:	4b0d      	ldr	r3, [pc, #52]	; (8003b7c <xTaskGenericNotify+0x260>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d907      	bls.n	8003b60 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <xTaskGenericNotify+0x264>)
 8003b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b60:	f000 fd00 	bl	8004564 <vPortExitCritical>

        return xReturn;
 8003b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003b66:	4618      	mov	r0, r3
 8003b68:	3738      	adds	r7, #56	; 0x38
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000010c 	.word	0x2000010c
 8003b74:	20000110 	.word	0x20000110
 8003b78:	20000034 	.word	0x20000034
 8003b7c:	20000030 	.word	0x20000030
 8003b80:	e000ed04 	.word	0xe000ed04

08003b84 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b8e:	4b3c      	ldr	r3, [pc, #240]	; (8003c80 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b94:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <prvAddCurrentTaskToDelayedList+0x100>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe faaa 	bl	80020f4 <uxListRemove>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10b      	bne.n	8003bbe <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ba6:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <prvAddCurrentTaskToDelayedList+0x100>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	2201      	movs	r2, #1
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43da      	mvns	r2, r3
 8003bb4:	4b34      	ldr	r3, [pc, #208]	; (8003c88 <prvAddCurrentTaskToDelayedList+0x104>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	4a33      	ldr	r2, [pc, #204]	; (8003c88 <prvAddCurrentTaskToDelayedList+0x104>)
 8003bbc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d124      	bne.n	8003c10 <prvAddCurrentTaskToDelayedList+0x8c>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d021      	beq.n	8003c10 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bcc:	4b2f      	ldr	r3, [pc, #188]	; (8003c8c <prvAddCurrentTaskToDelayedList+0x108>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	4b2c      	ldr	r3, [pc, #176]	; (8003c84 <prvAddCurrentTaskToDelayedList+0x100>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	609a      	str	r2, [r3, #8]
 8003bda:	4b2a      	ldr	r3, [pc, #168]	; (8003c84 <prvAddCurrentTaskToDelayedList+0x100>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	6892      	ldr	r2, [r2, #8]
 8003be2:	60da      	str	r2, [r3, #12]
 8003be4:	4b27      	ldr	r3, [pc, #156]	; (8003c84 <prvAddCurrentTaskToDelayedList+0x100>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	3204      	adds	r2, #4
 8003bee:	605a      	str	r2, [r3, #4]
 8003bf0:	4b24      	ldr	r3, [pc, #144]	; (8003c84 <prvAddCurrentTaskToDelayedList+0x100>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	1d1a      	adds	r2, r3, #4
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	609a      	str	r2, [r3, #8]
 8003bfa:	4b22      	ldr	r3, [pc, #136]	; (8003c84 <prvAddCurrentTaskToDelayedList+0x100>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a23      	ldr	r2, [pc, #140]	; (8003c8c <prvAddCurrentTaskToDelayedList+0x108>)
 8003c00:	615a      	str	r2, [r3, #20]
 8003c02:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <prvAddCurrentTaskToDelayedList+0x108>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3301      	adds	r3, #1
 8003c08:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <prvAddCurrentTaskToDelayedList+0x108>)
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003c0e:	e032      	b.n	8003c76 <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c18:	4b1a      	ldr	r3, [pc, #104]	; (8003c84 <prvAddCurrentTaskToDelayedList+0x100>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d20f      	bcs.n	8003c48 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003c28:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <prvAddCurrentTaskToDelayedList+0x100>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2104      	movs	r1, #4
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f002 ffaa 	bl	8006b88 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c34:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <prvAddCurrentTaskToDelayedList+0x100>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4610      	mov	r0, r2
 8003c42:	f7fe fa1e 	bl	8002082 <vListInsert>
}
 8003c46:	e016      	b.n	8003c76 <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003c48:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <prvAddCurrentTaskToDelayedList+0x100>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2104      	movs	r1, #4
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f002 ff9a 	bl	8006b88 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c54:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <prvAddCurrentTaskToDelayedList+0x110>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <prvAddCurrentTaskToDelayedList+0x100>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4610      	mov	r0, r2
 8003c62:	f7fe fa0e 	bl	8002082 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <prvAddCurrentTaskToDelayedList+0x114>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d202      	bcs.n	8003c76 <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8003c70:	4a09      	ldr	r2, [pc, #36]	; (8003c98 <prvAddCurrentTaskToDelayedList+0x114>)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6013      	str	r3, [r2, #0]
}
 8003c76:	bf00      	nop
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	2000010c 	.word	0x2000010c
 8003c84:	20000030 	.word	0x20000030
 8003c88:	20000110 	.word	0x20000110
 8003c8c:	200000f4 	.word	0x200000f4
 8003c90:	200000c4 	.word	0x200000c4
 8003c94:	200000c0 	.word	0x200000c0
 8003c98:	20000128 	.word	0x20000128

08003c9c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003ca6:	f000 fa47 	bl	8004138 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003caa:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <xTimerCreateTimerTask+0x54>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003cb2:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <xTimerCreateTimerTask+0x58>)
 8003cb4:	9301      	str	r3, [sp, #4]
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cc0:	490d      	ldr	r1, [pc, #52]	; (8003cf8 <xTimerCreateTimerTask+0x5c>)
 8003cc2:	480e      	ldr	r0, [pc, #56]	; (8003cfc <xTimerCreateTimerTask+0x60>)
 8003cc4:	f7fe fd70 	bl	80027a8 <xTaskCreate>
 8003cc8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10a      	bne.n	8003ce6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	603b      	str	r3, [r7, #0]
    }
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003ce6:	687b      	ldr	r3, [r7, #4]
    }
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000164 	.word	0x20000164
 8003cf4:	20000168 	.word	0x20000168
 8003cf8:	08007024 	.word	0x08007024
 8003cfc:	08003da5 	.word	0x08003da5

08003d00 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003d0c:	e008      	b.n	8003d20 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	4413      	add	r3, r2
 8003d16:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	699a      	ldr	r2, [r3, #24]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	18d1      	adds	r1, r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f8dd 	bl	8003eec <prvInsertTimerInActiveList>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1ea      	bne.n	8003d0e <prvReloadTimer+0xe>
        }
    }
 8003d38:	bf00      	nop
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d4e:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <prvProcessExpiredTimer+0x5c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe f9c9 	bl	80020f4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f7ff ffc3 	bl	8003d00 <prvReloadTimer>
 8003d7a:	e008      	b.n	8003d8e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d82:	f023 0301 	bic.w	r3, r3, #1
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	4798      	blx	r3
    }
 8003d96:	bf00      	nop
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	2000015c 	.word	0x2000015c

08003da4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003dac:	f107 0308 	add.w	r3, r7, #8
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 f857 	bl	8003e64 <prvGetNextExpireTime>
 8003db6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4619      	mov	r1, r3
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f803 	bl	8003dc8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003dc2:	f000 f8d5 	bl	8003f70 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003dc6:	e7f1      	b.n	8003dac <prvTimerTask+0x8>

08003dc8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003dd2:	f7fe ffcb 	bl	8002d6c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dd6:	f107 0308 	add.w	r3, r7, #8
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f866 	bl	8003eac <prvSampleTimeNow>
 8003de0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d130      	bne.n	8003e4a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <prvProcessTimerOrBlockTask+0x3c>
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d806      	bhi.n	8003e04 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003df6:	f7fe ffc7 	bl	8002d88 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003dfa:	68f9      	ldr	r1, [r7, #12]
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ffa1 	bl	8003d44 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e02:	e024      	b.n	8003e4e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d008      	beq.n	8003e1c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e0a:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <prvProcessTimerOrBlockTask+0x90>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <prvProcessTimerOrBlockTask+0x50>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <prvProcessTimerOrBlockTask+0x52>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e1c:	4b0f      	ldr	r3, [pc, #60]	; (8003e5c <prvProcessTimerOrBlockTask+0x94>)
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f7fe fc89 	bl	8002740 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003e2e:	f7fe ffab 	bl	8002d88 <xTaskResumeAll>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003e38:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <prvProcessTimerOrBlockTask+0x98>)
 8003e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	f3bf 8f6f 	isb	sy
    }
 8003e48:	e001      	b.n	8003e4e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003e4a:	f7fe ff9d 	bl	8002d88 <xTaskResumeAll>
    }
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000160 	.word	0x20000160
 8003e5c:	20000164 	.word	0x20000164
 8003e60:	e000ed04 	.word	0xe000ed04

08003e64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <prvGetNextExpireTime+0x44>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <prvGetNextExpireTime+0x16>
 8003e76:	2201      	movs	r2, #1
 8003e78:	e000      	b.n	8003e7c <prvGetNextExpireTime+0x18>
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d105      	bne.n	8003e94 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e88:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <prvGetNextExpireTime+0x44>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	e001      	b.n	8003e98 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e98:	68fb      	ldr	r3, [r7, #12]
    }
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	2000015c 	.word	0x2000015c

08003eac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003eb4:	f7ff f868 	bl	8002f88 <xTaskGetTickCount>
 8003eb8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <prvSampleTimeNow+0x3c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d205      	bcs.n	8003ed0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ec4:	f000 f912 	bl	80040ec <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e002      	b.n	8003ed6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003ed6:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <prvSampleTimeNow+0x3c>)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003edc:	68fb      	ldr	r3, [r7, #12]
    }
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	2000016c 	.word	0x2000016c

08003eec <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d812      	bhi.n	8003f38 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	1ad2      	subs	r2, r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d302      	bcc.n	8003f26 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e01b      	b.n	8003f5e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <prvInsertTimerInActiveList+0x7c>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4610      	mov	r0, r2
 8003f32:	f7fe f8a6 	bl	8002082 <vListInsert>
 8003f36:	e012      	b.n	8003f5e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d206      	bcs.n	8003f4e <prvInsertTimerInActiveList+0x62>
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d302      	bcc.n	8003f4e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	e007      	b.n	8003f5e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f4e:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <prvInsertTimerInActiveList+0x80>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f7fe f892 	bl	8002082 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f5e:	697b      	ldr	r3, [r7, #20]
    }
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000160 	.word	0x20000160
 8003f6c:	2000015c 	.word	0x2000015c

08003f70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f76:	e0a6      	b.n	80040c6 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f2c0 80a2 	blt.w	80040c4 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d004      	beq.n	8003f96 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe f8af 	bl	80020f4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f96:	1d3b      	adds	r3, r7, #4
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ff87 	bl	8003eac <prvSampleTimeNow>
 8003f9e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	f200 808e 	bhi.w	80040c6 <prvProcessReceivedCommands+0x156>
 8003faa:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <prvProcessReceivedCommands+0x40>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	08003fd5 	.word	0x08003fd5
 8003fb4:	08003fd5 	.word	0x08003fd5
 8003fb8:	0800403d 	.word	0x0800403d
 8003fbc:	08004051 	.word	0x08004051
 8003fc0:	0800409b 	.word	0x0800409b
 8003fc4:	08003fd5 	.word	0x08003fd5
 8003fc8:	08003fd5 	.word	0x08003fd5
 8003fcc:	0800403d 	.word	0x0800403d
 8003fd0:	08004051 	.word	0x08004051
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	18d1      	adds	r1, r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	69f8      	ldr	r0, [r7, #28]
 8003ff4:	f7ff ff7a 	bl	8003eec <prvInsertTimerInActiveList>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d063      	beq.n	80040c6 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d009      	beq.n	8004020 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	4413      	add	r3, r2
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4619      	mov	r1, r3
 8004018:	69f8      	ldr	r0, [r7, #28]
 800401a:	f7ff fe71 	bl	8003d00 <prvReloadTimer>
 800401e:	e008      	b.n	8004032 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	b2da      	uxtb	r2, r3
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	69f8      	ldr	r0, [r7, #28]
 8004038:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800403a:	e044      	b.n	80040c6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	b2da      	uxtb	r2, r3
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800404e:	e03a      	b.n	80040c6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	b2da      	uxtb	r2, r3
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10a      	bne.n	8004086 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	617b      	str	r3, [r7, #20]
    }
 8004082:	bf00      	nop
 8004084:	e7fe      	b.n	8004084 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	18d1      	adds	r1, r2, r3
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	69f8      	ldr	r0, [r7, #28]
 8004094:	f7ff ff2a 	bl	8003eec <prvInsertTimerInActiveList>
                        break;
 8004098:	e015      	b.n	80040c6 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d103      	bne.n	80040b0 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 80040a8:	69f8      	ldr	r0, [r7, #28]
 80040aa:	f000 fc37 	bl	800491c <vPortFree>
 80040ae:	e00a      	b.n	80040c6 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040b6:	f023 0301 	bic.w	r3, r3, #1
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80040c2:	e000      	b.n	80040c6 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80040c4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <prvProcessReceivedCommands+0x178>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f107 0108 	add.w	r1, r7, #8
 80040ce:	2200      	movs	r2, #0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe f941 	bl	8002358 <xQueueReceive>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f47f af4d 	bne.w	8003f78 <prvProcessReceivedCommands+0x8>
        }
    }
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000164 	.word	0x20000164

080040ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040f2:	e009      	b.n	8004108 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <prvSwitchTimerLists+0x44>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80040fe:	f04f 31ff 	mov.w	r1, #4294967295
 8004102:	6838      	ldr	r0, [r7, #0]
 8004104:	f7ff fe1e 	bl	8003d44 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004108:	4b09      	ldr	r3, [pc, #36]	; (8004130 <prvSwitchTimerLists+0x44>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <prvSwitchTimerLists+0x44>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004118:	4b06      	ldr	r3, [pc, #24]	; (8004134 <prvSwitchTimerLists+0x48>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a04      	ldr	r2, [pc, #16]	; (8004130 <prvSwitchTimerLists+0x44>)
 800411e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004120:	4a04      	ldr	r2, [pc, #16]	; (8004134 <prvSwitchTimerLists+0x48>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6013      	str	r3, [r2, #0]
    }
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	2000015c 	.word	0x2000015c
 8004134:	20000160 	.word	0x20000160

08004138 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800413c:	f000 f9e2 	bl	8004504 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004140:	4b12      	ldr	r3, [pc, #72]	; (800418c <prvCheckForValidListAndQueue+0x54>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d11d      	bne.n	8004184 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004148:	4811      	ldr	r0, [pc, #68]	; (8004190 <prvCheckForValidListAndQueue+0x58>)
 800414a:	f7fd ff49 	bl	8001fe0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800414e:	4811      	ldr	r0, [pc, #68]	; (8004194 <prvCheckForValidListAndQueue+0x5c>)
 8004150:	f7fd ff46 	bl	8001fe0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004154:	4b10      	ldr	r3, [pc, #64]	; (8004198 <prvCheckForValidListAndQueue+0x60>)
 8004156:	4a0e      	ldr	r2, [pc, #56]	; (8004190 <prvCheckForValidListAndQueue+0x58>)
 8004158:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800415a:	4b10      	ldr	r3, [pc, #64]	; (800419c <prvCheckForValidListAndQueue+0x64>)
 800415c:	4a0d      	ldr	r2, [pc, #52]	; (8004194 <prvCheckForValidListAndQueue+0x5c>)
 800415e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004160:	2200      	movs	r2, #0
 8004162:	210c      	movs	r1, #12
 8004164:	200a      	movs	r0, #10
 8004166:	f7fe f87f 	bl	8002268 <xQueueGenericCreate>
 800416a:	4603      	mov	r3, r0
 800416c:	4a07      	ldr	r2, [pc, #28]	; (800418c <prvCheckForValidListAndQueue+0x54>)
 800416e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <prvCheckForValidListAndQueue+0x54>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004178:	4b04      	ldr	r3, [pc, #16]	; (800418c <prvCheckForValidListAndQueue+0x54>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4908      	ldr	r1, [pc, #32]	; (80041a0 <prvCheckForValidListAndQueue+0x68>)
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe fa88 	bl	8002694 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004184:	f000 f9ee 	bl	8004564 <vPortExitCritical>
    }
 8004188:	bf00      	nop
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000164 	.word	0x20000164
 8004190:	20000134 	.word	0x20000134
 8004194:	20000148 	.word	0x20000148
 8004198:	2000015c 	.word	0x2000015c
 800419c:	20000160 	.word	0x20000160
 80041a0:	0800702c 	.word	0x0800702c

080041a4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3b04      	subs	r3, #4
 80041b4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3b04      	subs	r3, #4
 80041c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f023 0201 	bic.w	r2, r3, #1
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3b04      	subs	r3, #4
 80041d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041d4:	4a0c      	ldr	r2, [pc, #48]	; (8004208 <pxPortInitialiseStack+0x64>)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3b14      	subs	r3, #20
 80041de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3b04      	subs	r3, #4
 80041ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f06f 0202 	mvn.w	r2, #2
 80041f2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3b20      	subs	r3, #32
 80041f8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80041fa:	68fb      	ldr	r3, [r7, #12]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	0800420d 	.word	0x0800420d

0800420c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004216:	4b12      	ldr	r3, [pc, #72]	; (8004260 <prvTaskExitError+0x54>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421e:	d00a      	beq.n	8004236 <prvTaskExitError+0x2a>
        __asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	60fb      	str	r3, [r7, #12]
    }
 8004232:	bf00      	nop
 8004234:	e7fe      	b.n	8004234 <prvTaskExitError+0x28>
        __asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	60bb      	str	r3, [r7, #8]
    }
 8004248:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800424a:	bf00      	nop
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0fc      	beq.n	800424c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004252:	bf00      	nop
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	20000010 	.word	0x20000010
	...

08004270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004270:	4b07      	ldr	r3, [pc, #28]	; (8004290 <pxCurrentTCBConst2>)
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	6808      	ldr	r0, [r1, #0]
 8004276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427a:	f380 8809 	msr	PSP, r0
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f380 8811 	msr	BASEPRI, r0
 800428a:	4770      	bx	lr
 800428c:	f3af 8000 	nop.w

08004290 <pxCurrentTCBConst2>:
 8004290:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop

08004298 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004298:	4808      	ldr	r0, [pc, #32]	; (80042bc <prvPortStartFirstTask+0x24>)
 800429a:	6800      	ldr	r0, [r0, #0]
 800429c:	6800      	ldr	r0, [r0, #0]
 800429e:	f380 8808 	msr	MSP, r0
 80042a2:	f04f 0000 	mov.w	r0, #0
 80042a6:	f380 8814 	msr	CONTROL, r0
 80042aa:	b662      	cpsie	i
 80042ac:	b661      	cpsie	f
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	df00      	svc	0
 80042b8:	bf00      	nop
 80042ba:	0000      	.short	0x0000
 80042bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop

080042c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042ca:	4b46      	ldr	r3, [pc, #280]	; (80043e4 <xPortStartScheduler+0x120>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a46      	ldr	r2, [pc, #280]	; (80043e8 <xPortStartScheduler+0x124>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d10a      	bne.n	80042ea <xPortStartScheduler+0x26>
        __asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	613b      	str	r3, [r7, #16]
    }
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042ea:	4b3e      	ldr	r3, [pc, #248]	; (80043e4 <xPortStartScheduler+0x120>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a3f      	ldr	r2, [pc, #252]	; (80043ec <xPortStartScheduler+0x128>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d10a      	bne.n	800430a <xPortStartScheduler+0x46>
        __asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	60fb      	str	r3, [r7, #12]
    }
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800430a:	4b39      	ldr	r3, [pc, #228]	; (80043f0 <xPortStartScheduler+0x12c>)
 800430c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	22ff      	movs	r2, #255	; 0xff
 800431a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800432c:	b2da      	uxtb	r2, r3
 800432e:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <xPortStartScheduler+0x130>)
 8004330:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004332:	4b31      	ldr	r3, [pc, #196]	; (80043f8 <xPortStartScheduler+0x134>)
 8004334:	2207      	movs	r2, #7
 8004336:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004338:	e009      	b.n	800434e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800433a:	4b2f      	ldr	r3, [pc, #188]	; (80043f8 <xPortStartScheduler+0x134>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3b01      	subs	r3, #1
 8004340:	4a2d      	ldr	r2, [pc, #180]	; (80043f8 <xPortStartScheduler+0x134>)
 8004342:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	b2db      	uxtb	r3, r3
 800434c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004356:	2b80      	cmp	r3, #128	; 0x80
 8004358:	d0ef      	beq.n	800433a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800435a:	4b27      	ldr	r3, [pc, #156]	; (80043f8 <xPortStartScheduler+0x134>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f1c3 0307 	rsb	r3, r3, #7
 8004362:	2b04      	cmp	r3, #4
 8004364:	d00a      	beq.n	800437c <xPortStartScheduler+0xb8>
        __asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	60bb      	str	r3, [r7, #8]
    }
 8004378:	bf00      	nop
 800437a:	e7fe      	b.n	800437a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800437c:	4b1e      	ldr	r3, [pc, #120]	; (80043f8 <xPortStartScheduler+0x134>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <xPortStartScheduler+0x134>)
 8004384:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004386:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <xPortStartScheduler+0x134>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800438e:	4a1a      	ldr	r2, [pc, #104]	; (80043f8 <xPortStartScheduler+0x134>)
 8004390:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800439a:	4b18      	ldr	r3, [pc, #96]	; (80043fc <xPortStartScheduler+0x138>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a17      	ldr	r2, [pc, #92]	; (80043fc <xPortStartScheduler+0x138>)
 80043a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80043a6:	4b15      	ldr	r3, [pc, #84]	; (80043fc <xPortStartScheduler+0x138>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a14      	ldr	r2, [pc, #80]	; (80043fc <xPortStartScheduler+0x138>)
 80043ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80043b2:	f000 f963 	bl	800467c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80043b6:	4b12      	ldr	r3, [pc, #72]	; (8004400 <xPortStartScheduler+0x13c>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80043bc:	f000 f982 	bl	80046c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043c0:	4b10      	ldr	r3, [pc, #64]	; (8004404 <xPortStartScheduler+0x140>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a0f      	ldr	r2, [pc, #60]	; (8004404 <xPortStartScheduler+0x140>)
 80043c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80043cc:	f7ff ff64 	bl	8004298 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80043d0:	f7fe ff16 	bl	8003200 <vTaskSwitchContext>
    prvTaskExitError();
 80043d4:	f7ff ff1a 	bl	800420c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	e000ed00 	.word	0xe000ed00
 80043e8:	410fc271 	.word	0x410fc271
 80043ec:	410fc270 	.word	0x410fc270
 80043f0:	e000e400 	.word	0xe000e400
 80043f4:	20000170 	.word	0x20000170
 80043f8:	20000174 	.word	0x20000174
 80043fc:	e000ed20 	.word	0xe000ed20
 8004400:	20000010 	.word	0x20000010
 8004404:	e000ef34 	.word	0xe000ef34

08004408 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800440e:	4b37      	ldr	r3, [pc, #220]	; (80044ec <vInitPrioGroupValue+0xe4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a37      	ldr	r2, [pc, #220]	; (80044f0 <vInitPrioGroupValue+0xe8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d10a      	bne.n	800442e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	613b      	str	r3, [r7, #16]
    }
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800442e:	4b2f      	ldr	r3, [pc, #188]	; (80044ec <vInitPrioGroupValue+0xe4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a30      	ldr	r2, [pc, #192]	; (80044f4 <vInitPrioGroupValue+0xec>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d10a      	bne.n	800444e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	60fb      	str	r3, [r7, #12]
    }
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800444e:	4b2a      	ldr	r3, [pc, #168]	; (80044f8 <vInitPrioGroupValue+0xf0>)
 8004450:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	22ff      	movs	r2, #255	; 0xff
 800445e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004470:	b2da      	uxtb	r2, r3
 8004472:	4b22      	ldr	r3, [pc, #136]	; (80044fc <vInitPrioGroupValue+0xf4>)
 8004474:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004476:	4b22      	ldr	r3, [pc, #136]	; (8004500 <vInitPrioGroupValue+0xf8>)
 8004478:	2207      	movs	r2, #7
 800447a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800447c:	e009      	b.n	8004492 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800447e:	4b20      	ldr	r3, [pc, #128]	; (8004500 <vInitPrioGroupValue+0xf8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3b01      	subs	r3, #1
 8004484:	4a1e      	ldr	r2, [pc, #120]	; (8004500 <vInitPrioGroupValue+0xf8>)
 8004486:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	b2db      	uxtb	r3, r3
 8004490:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449a:	2b80      	cmp	r3, #128	; 0x80
 800449c:	d0ef      	beq.n	800447e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800449e:	4b18      	ldr	r3, [pc, #96]	; (8004500 <vInitPrioGroupValue+0xf8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f1c3 0307 	rsb	r3, r3, #7
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d00a      	beq.n	80044c0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	60bb      	str	r3, [r7, #8]
    }
 80044bc:	bf00      	nop
 80044be:	e7fe      	b.n	80044be <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044c0:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <vInitPrioGroupValue+0xf8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	4a0e      	ldr	r2, [pc, #56]	; (8004500 <vInitPrioGroupValue+0xf8>)
 80044c8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044ca:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <vInitPrioGroupValue+0xf8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044d2:	4a0b      	ldr	r2, [pc, #44]	; (8004500 <vInitPrioGroupValue+0xf8>)
 80044d4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80044de:	bf00      	nop
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	e000ed00 	.word	0xe000ed00
 80044f0:	410fc271 	.word	0x410fc271
 80044f4:	410fc270 	.word	0x410fc270
 80044f8:	e000e400 	.word	0xe000e400
 80044fc:	20000170 	.word	0x20000170
 8004500:	20000174 	.word	0x20000174

08004504 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
        __asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	607b      	str	r3, [r7, #4]
    }
 800451c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800451e:	4b0f      	ldr	r3, [pc, #60]	; (800455c <vPortEnterCritical+0x58>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	4a0d      	ldr	r2, [pc, #52]	; (800455c <vPortEnterCritical+0x58>)
 8004526:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004528:	4b0c      	ldr	r3, [pc, #48]	; (800455c <vPortEnterCritical+0x58>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d10f      	bne.n	8004550 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <vPortEnterCritical+0x5c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <vPortEnterCritical+0x4c>
        __asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	603b      	str	r3, [r7, #0]
    }
 800454c:	bf00      	nop
 800454e:	e7fe      	b.n	800454e <vPortEnterCritical+0x4a>
    }
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	20000010 	.word	0x20000010
 8004560:	e000ed04 	.word	0xe000ed04

08004564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800456a:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <vPortExitCritical+0x50>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10a      	bne.n	8004588 <vPortExitCritical+0x24>
        __asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	607b      	str	r3, [r7, #4]
    }
 8004584:	bf00      	nop
 8004586:	e7fe      	b.n	8004586 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004588:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <vPortExitCritical+0x50>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3b01      	subs	r3, #1
 800458e:	4a09      	ldr	r2, [pc, #36]	; (80045b4 <vPortExitCritical+0x50>)
 8004590:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004592:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <vPortExitCritical+0x50>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d105      	bne.n	80045a6 <vPortExitCritical+0x42>
 800459a:	2300      	movs	r3, #0
 800459c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80045a4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	20000010 	.word	0x20000010
	...

080045c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80045c0:	f3ef 8009 	mrs	r0, PSP
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	4b15      	ldr	r3, [pc, #84]	; (8004620 <pxCurrentTCBConst>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	f01e 0f10 	tst.w	lr, #16
 80045d0:	bf08      	it	eq
 80045d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045da:	6010      	str	r0, [r2, #0]
 80045dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045e4:	f380 8811 	msr	BASEPRI, r0
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f7fe fe06 	bl	8003200 <vTaskSwitchContext>
 80045f4:	f04f 0000 	mov.w	r0, #0
 80045f8:	f380 8811 	msr	BASEPRI, r0
 80045fc:	bc09      	pop	{r0, r3}
 80045fe:	6819      	ldr	r1, [r3, #0]
 8004600:	6808      	ldr	r0, [r1, #0]
 8004602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004606:	f01e 0f10 	tst.w	lr, #16
 800460a:	bf08      	it	eq
 800460c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004610:	f380 8809 	msr	PSP, r0
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	f3af 8000 	nop.w

08004620 <pxCurrentTCBConst>:
 8004620:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004624:	bf00      	nop
 8004626:	bf00      	nop

08004628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
        __asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	607b      	str	r3, [r7, #4]
    }
 8004640:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004642:	f002 f945 	bl	80068d0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004646:	f7fe fcc1 	bl	8002fcc <xTaskIncrementTick>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d006      	beq.n	800465e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004650:	f002 f99c 	bl	800698c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004654:	4b08      	ldr	r3, [pc, #32]	; (8004678 <SysTick_Handler+0x50>)
 8004656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	e001      	b.n	8004662 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800465e:	f002 f979 	bl	8006954 <SEGGER_SYSVIEW_RecordExitISR>
 8004662:	2300      	movs	r3, #0
 8004664:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	f383 8811 	msr	BASEPRI, r3
    }
 800466c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	e000ed04 	.word	0xe000ed04

0800467c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <vPortSetupTimerInterrupt+0x34>)
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <vPortSetupTimerInterrupt+0x38>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <vPortSetupTimerInterrupt+0x3c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <vPortSetupTimerInterrupt+0x40>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	099b      	lsrs	r3, r3, #6
 8004698:	4a09      	ldr	r2, [pc, #36]	; (80046c0 <vPortSetupTimerInterrupt+0x44>)
 800469a:	3b01      	subs	r3, #1
 800469c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800469e:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <vPortSetupTimerInterrupt+0x34>)
 80046a0:	2207      	movs	r2, #7
 80046a2:	601a      	str	r2, [r3, #0]
}
 80046a4:	bf00      	nop
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	e000e010 	.word	0xe000e010
 80046b4:	e000e018 	.word	0xe000e018
 80046b8:	20000000 	.word	0x20000000
 80046bc:	10624dd3 	.word	0x10624dd3
 80046c0:	e000e014 	.word	0xe000e014

080046c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80046c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046d4 <vPortEnableVFP+0x10>
 80046c8:	6801      	ldr	r1, [r0, #0]
 80046ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046ce:	6001      	str	r1, [r0, #0]
 80046d0:	4770      	bx	lr
 80046d2:	0000      	.short	0x0000
 80046d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80046d8:	bf00      	nop
 80046da:	bf00      	nop

080046dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80046e2:	f3ef 8305 	mrs	r3, IPSR
 80046e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b0f      	cmp	r3, #15
 80046ec:	d914      	bls.n	8004718 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046ee:	4a17      	ldr	r2, [pc, #92]	; (800474c <vPortValidateInterruptPriority+0x70>)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80046f8:	4b15      	ldr	r3, [pc, #84]	; (8004750 <vPortValidateInterruptPriority+0x74>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	7afa      	ldrb	r2, [r7, #11]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d20a      	bcs.n	8004718 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	607b      	str	r3, [r7, #4]
    }
 8004714:	bf00      	nop
 8004716:	e7fe      	b.n	8004716 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004718:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <vPortValidateInterruptPriority+0x78>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004720:	4b0d      	ldr	r3, [pc, #52]	; (8004758 <vPortValidateInterruptPriority+0x7c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d90a      	bls.n	800473e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	603b      	str	r3, [r7, #0]
    }
 800473a:	bf00      	nop
 800473c:	e7fe      	b.n	800473c <vPortValidateInterruptPriority+0x60>
    }
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	e000e3f0 	.word	0xe000e3f0
 8004750:	20000170 	.word	0x20000170
 8004754:	e000ed0c 	.word	0xe000ed0c
 8004758:	20000174 	.word	0x20000174

0800475c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	; 0x28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004764:	2300      	movs	r3, #0
 8004766:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004768:	f7fe fb00 	bl	8002d6c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800476c:	4b65      	ldr	r3, [pc, #404]	; (8004904 <pvPortMalloc+0x1a8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004774:	f000 f934 	bl	80049e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004778:	4b63      	ldr	r3, [pc, #396]	; (8004908 <pvPortMalloc+0x1ac>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	f040 80a7 	bne.w	80048d4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d02d      	beq.n	80047e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800478c:	2208      	movs	r2, #8
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	d227      	bcs.n	80047e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004798:	2208      	movs	r2, #8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4413      	add	r3, r2
 800479e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d021      	beq.n	80047ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f023 0307 	bic.w	r3, r3, #7
 80047b0:	3308      	adds	r3, #8
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d214      	bcs.n	80047e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f023 0307 	bic.w	r3, r3, #7
 80047be:	3308      	adds	r3, #8
 80047c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d010      	beq.n	80047ee <pvPortMalloc+0x92>
        __asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	617b      	str	r3, [r7, #20]
    }
 80047de:	bf00      	nop
 80047e0:	e7fe      	b.n	80047e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80047e2:	2300      	movs	r3, #0
 80047e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047e6:	e002      	b.n	80047ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	e000      	b.n	80047f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d06e      	beq.n	80048d4 <pvPortMalloc+0x178>
 80047f6:	4b45      	ldr	r3, [pc, #276]	; (800490c <pvPortMalloc+0x1b0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d869      	bhi.n	80048d4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004800:	4b43      	ldr	r3, [pc, #268]	; (8004910 <pvPortMalloc+0x1b4>)
 8004802:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004804:	4b42      	ldr	r3, [pc, #264]	; (8004910 <pvPortMalloc+0x1b4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800480a:	e004      	b.n	8004816 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	429a      	cmp	r2, r3
 800481e:	d903      	bls.n	8004828 <pvPortMalloc+0xcc>
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f1      	bne.n	800480c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004828:	4b36      	ldr	r3, [pc, #216]	; (8004904 <pvPortMalloc+0x1a8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482e:	429a      	cmp	r2, r3
 8004830:	d050      	beq.n	80048d4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2208      	movs	r2, #8
 8004838:	4413      	add	r3, r2
 800483a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	1ad2      	subs	r2, r2, r3
 800484c:	2308      	movs	r3, #8
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	429a      	cmp	r2, r3
 8004852:	d91f      	bls.n	8004894 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4413      	add	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <pvPortMalloc+0x120>
        __asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	613b      	str	r3, [r7, #16]
    }
 8004878:	bf00      	nop
 800487a:	e7fe      	b.n	800487a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	1ad2      	subs	r2, r2, r3
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800488e:	69b8      	ldr	r0, [r7, #24]
 8004890:	f000 f908 	bl	8004aa4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004894:	4b1d      	ldr	r3, [pc, #116]	; (800490c <pvPortMalloc+0x1b0>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	4a1b      	ldr	r2, [pc, #108]	; (800490c <pvPortMalloc+0x1b0>)
 80048a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048a2:	4b1a      	ldr	r3, [pc, #104]	; (800490c <pvPortMalloc+0x1b0>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	4b1b      	ldr	r3, [pc, #108]	; (8004914 <pvPortMalloc+0x1b8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d203      	bcs.n	80048b6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048ae:	4b17      	ldr	r3, [pc, #92]	; (800490c <pvPortMalloc+0x1b0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a18      	ldr	r2, [pc, #96]	; (8004914 <pvPortMalloc+0x1b8>)
 80048b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	4b13      	ldr	r3, [pc, #76]	; (8004908 <pvPortMalloc+0x1ac>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	431a      	orrs	r2, r3
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80048ca:	4b13      	ldr	r3, [pc, #76]	; (8004918 <pvPortMalloc+0x1bc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3301      	adds	r3, #1
 80048d0:	4a11      	ldr	r2, [pc, #68]	; (8004918 <pvPortMalloc+0x1bc>)
 80048d2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80048d4:	f7fe fa58 	bl	8002d88 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <pvPortMalloc+0x19c>
        __asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	60fb      	str	r3, [r7, #12]
    }
 80048f4:	bf00      	nop
 80048f6:	e7fe      	b.n	80048f6 <pvPortMalloc+0x19a>
    return pvReturn;
 80048f8:	69fb      	ldr	r3, [r7, #28]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3728      	adds	r7, #40	; 0x28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20012d80 	.word	0x20012d80
 8004908:	20012d94 	.word	0x20012d94
 800490c:	20012d84 	.word	0x20012d84
 8004910:	20012d78 	.word	0x20012d78
 8004914:	20012d88 	.word	0x20012d88
 8004918:	20012d8c 	.word	0x20012d8c

0800491c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d04d      	beq.n	80049ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800492e:	2308      	movs	r3, #8
 8004930:	425b      	negs	r3, r3
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4413      	add	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <vPortFree+0xb8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4013      	ands	r3, r2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10a      	bne.n	8004960 <vPortFree+0x44>
        __asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	60fb      	str	r3, [r7, #12]
    }
 800495c:	bf00      	nop
 800495e:	e7fe      	b.n	800495e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <vPortFree+0x62>
        __asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	60bb      	str	r3, [r7, #8]
    }
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <vPortFree+0xb8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4013      	ands	r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01e      	beq.n	80049ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d11a      	bne.n	80049ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <vPortFree+0xb8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	43db      	mvns	r3, r3
 800499e:	401a      	ands	r2, r3
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80049a4:	f7fe f9e2 	bl	8002d6c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <vPortFree+0xbc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4413      	add	r3, r2
 80049b2:	4a09      	ldr	r2, [pc, #36]	; (80049d8 <vPortFree+0xbc>)
 80049b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049b6:	6938      	ldr	r0, [r7, #16]
 80049b8:	f000 f874 	bl	8004aa4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80049bc:	4b07      	ldr	r3, [pc, #28]	; (80049dc <vPortFree+0xc0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3301      	adds	r3, #1
 80049c2:	4a06      	ldr	r2, [pc, #24]	; (80049dc <vPortFree+0xc0>)
 80049c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80049c6:	f7fe f9df 	bl	8002d88 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80049ca:	bf00      	nop
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20012d94 	.word	0x20012d94
 80049d8:	20012d84 	.word	0x20012d84
 80049dc:	20012d90 	.word	0x20012d90

080049e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80049ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80049ec:	4b27      	ldr	r3, [pc, #156]	; (8004a8c <prvHeapInit+0xac>)
 80049ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00c      	beq.n	8004a14 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3307      	adds	r3, #7
 80049fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0307 	bic.w	r3, r3, #7
 8004a06:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	4a1f      	ldr	r2, [pc, #124]	; (8004a8c <prvHeapInit+0xac>)
 8004a10:	4413      	add	r3, r2
 8004a12:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a18:	4a1d      	ldr	r2, [pc, #116]	; (8004a90 <prvHeapInit+0xb0>)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004a1e:	4b1c      	ldr	r3, [pc, #112]	; (8004a90 <prvHeapInit+0xb0>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	4413      	add	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004a2c:	2208      	movs	r2, #8
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1a9b      	subs	r3, r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0307 	bic.w	r3, r3, #7
 8004a3a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4a15      	ldr	r2, [pc, #84]	; (8004a94 <prvHeapInit+0xb4>)
 8004a40:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004a42:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <prvHeapInit+0xb4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2200      	movs	r2, #0
 8004a48:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004a4a:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <prvHeapInit+0xb4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	1ad2      	subs	r2, r2, r3
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a60:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <prvHeapInit+0xb4>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <prvHeapInit+0xb8>)
 8004a6e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <prvHeapInit+0xbc>)
 8004a76:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a78:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <prvHeapInit+0xc0>)
 8004a7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a7e:	601a      	str	r2, [r3, #0]
}
 8004a80:	bf00      	nop
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	20000178 	.word	0x20000178
 8004a90:	20012d78 	.word	0x20012d78
 8004a94:	20012d80 	.word	0x20012d80
 8004a98:	20012d88 	.word	0x20012d88
 8004a9c:	20012d84 	.word	0x20012d84
 8004aa0:	20012d94 	.word	0x20012d94

08004aa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004aac:	4b28      	ldr	r3, [pc, #160]	; (8004b50 <prvInsertBlockIntoFreeList+0xac>)
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	e002      	b.n	8004ab8 <prvInsertBlockIntoFreeList+0x14>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d8f7      	bhi.n	8004ab2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	4413      	add	r3, r2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d108      	bne.n	8004ae6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	441a      	add	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	441a      	add	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d118      	bne.n	8004b2c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <prvInsertBlockIntoFreeList+0xb0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d00d      	beq.n	8004b22 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	441a      	add	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	e008      	b.n	8004b34 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b22:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <prvInsertBlockIntoFreeList+0xb0>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	e003      	b.n	8004b34 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d002      	beq.n	8004b42 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b42:	bf00      	nop
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	20012d78 	.word	0x20012d78
 8004b54:	20012d80 	.word	0x20012d80

08004b58 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004b5c:	4803      	ldr	r0, [pc, #12]	; (8004b6c <_cbSendSystemDesc+0x14>)
 8004b5e:	f001 fe61 	bl	8006824 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004b62:	4803      	ldr	r0, [pc, #12]	; (8004b70 <_cbSendSystemDesc+0x18>)
 8004b64:	f001 fe5e 	bl	8006824 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004b68:	bf00      	nop
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	08007034 	.word	0x08007034
 8004b70:	08007074 	.word	0x08007074

08004b74 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b7e:	6819      	ldr	r1, [r3, #0]
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <SEGGER_SYSVIEW_Conf+0x24>)
 8004b82:	4a06      	ldr	r2, [pc, #24]	; (8004b9c <SEGGER_SYSVIEW_Conf+0x28>)
 8004b84:	f001 f9cc 	bl	8005f20 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004b88:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004b8c:	f001 fa0c 	bl	8005fa8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004b90:	bf00      	nop
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	20000000 	.word	0x20000000
 8004b98:	08004b59 	.word	0x08004b59
 8004b9c:	08007108 	.word	0x08007108

08004ba0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	607b      	str	r3, [r7, #4]
 8004baa:	e033      	b.n	8004c14 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004bac:	491e      	ldr	r1, [pc, #120]	; (8004c28 <_cbSendTaskList+0x88>)
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	491a      	ldr	r1, [pc, #104]	; (8004c28 <_cbSendTaskList+0x88>)
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	3304      	adds	r3, #4
 8004bcc:	6819      	ldr	r1, [r3, #0]
 8004bce:	4c16      	ldr	r4, [pc, #88]	; (8004c28 <_cbSendTaskList+0x88>)
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4423      	add	r3, r4
 8004bdc:	3308      	adds	r3, #8
 8004bde:	681c      	ldr	r4, [r3, #0]
 8004be0:	4d11      	ldr	r5, [pc, #68]	; (8004c28 <_cbSendTaskList+0x88>)
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	442b      	add	r3, r5
 8004bee:	330c      	adds	r3, #12
 8004bf0:	681d      	ldr	r5, [r3, #0]
 8004bf2:	4e0d      	ldr	r6, [pc, #52]	; (8004c28 <_cbSendTaskList+0x88>)
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4433      	add	r3, r6
 8004c00:	3310      	adds	r3, #16
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	462b      	mov	r3, r5
 8004c08:	4622      	mov	r2, r4
 8004c0a:	f000 f971 	bl	8004ef0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3301      	adds	r3, #1
 8004c12:	607b      	str	r3, [r7, #4]
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <_cbSendTaskList+0x8c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d3c6      	bcc.n	8004bac <_cbSendTaskList+0xc>
  }
}
 8004c1e:	bf00      	nop
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c28:	20012d98 	.word	0x20012d98
 8004c2c:	20012e38 	.word	0x20012e38

08004c30 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004c30:	b5b0      	push	{r4, r5, r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004c36:	f7fe f9b7 	bl	8002fa8 <xTaskGetTickCountFromISR>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004c46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	f04f 0400 	mov.w	r4, #0
 8004c52:	f04f 0500 	mov.w	r5, #0
 8004c56:	015d      	lsls	r5, r3, #5
 8004c58:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004c5c:	0154      	lsls	r4, r2, #5
 8004c5e:	4622      	mov	r2, r4
 8004c60:	462b      	mov	r3, r5
 8004c62:	1a12      	subs	r2, r2, r0
 8004c64:	eb63 0301 	sbc.w	r3, r3, r1
 8004c68:	f04f 0400 	mov.w	r4, #0
 8004c6c:	f04f 0500 	mov.w	r5, #0
 8004c70:	009d      	lsls	r5, r3, #2
 8004c72:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004c76:	0094      	lsls	r4, r2, #2
 8004c78:	4622      	mov	r2, r4
 8004c7a:	462b      	mov	r3, r5
 8004c7c:	1812      	adds	r2, r2, r0
 8004c7e:	eb41 0303 	adc.w	r3, r1, r3
 8004c82:	f04f 0000 	mov.w	r0, #0
 8004c86:	f04f 0100 	mov.w	r1, #0
 8004c8a:	00d9      	lsls	r1, r3, #3
 8004c8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c90:	00d0      	lsls	r0, r2, #3
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004c9a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bdb0      	pop	{r4, r5, r7, pc}

08004ca8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004cb6:	2205      	movs	r2, #5
 8004cb8:	492b      	ldr	r1, [pc, #172]	; (8004d68 <SYSVIEW_AddTask+0xc0>)
 8004cba:	68b8      	ldr	r0, [r7, #8]
 8004cbc:	f002 f944 	bl	8006f48 <memcmp>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d04b      	beq.n	8004d5e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004cc6:	4b29      	ldr	r3, [pc, #164]	; (8004d6c <SYSVIEW_AddTask+0xc4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b07      	cmp	r3, #7
 8004ccc:	d903      	bls.n	8004cd6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004cce:	4828      	ldr	r0, [pc, #160]	; (8004d70 <SYSVIEW_AddTask+0xc8>)
 8004cd0:	f002 f8ba 	bl	8006e48 <SEGGER_SYSVIEW_Warn>
    return;
 8004cd4:	e044      	b.n	8004d60 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004cd6:	4b25      	ldr	r3, [pc, #148]	; (8004d6c <SYSVIEW_AddTask+0xc4>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4926      	ldr	r1, [pc, #152]	; (8004d74 <SYSVIEW_AddTask+0xcc>)
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004cea:	4b20      	ldr	r3, [pc, #128]	; (8004d6c <SYSVIEW_AddTask+0xc4>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4921      	ldr	r1, [pc, #132]	; (8004d74 <SYSVIEW_AddTask+0xcc>)
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004d00:	4b1a      	ldr	r3, [pc, #104]	; (8004d6c <SYSVIEW_AddTask+0xc4>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	491b      	ldr	r1, [pc, #108]	; (8004d74 <SYSVIEW_AddTask+0xcc>)
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	3308      	adds	r3, #8
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d16:	4b15      	ldr	r3, [pc, #84]	; (8004d6c <SYSVIEW_AddTask+0xc4>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4916      	ldr	r1, [pc, #88]	; (8004d74 <SYSVIEW_AddTask+0xcc>)
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	330c      	adds	r3, #12
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004d2c:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <SYSVIEW_AddTask+0xc4>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4910      	ldr	r1, [pc, #64]	; (8004d74 <SYSVIEW_AddTask+0xcc>)
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	3310      	adds	r3, #16
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004d42:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <SYSVIEW_AddTask+0xc4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3301      	adds	r3, #1
 8004d48:	4a08      	ldr	r2, [pc, #32]	; (8004d6c <SYSVIEW_AddTask+0xc4>)
 8004d4a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 f8ca 	bl	8004ef0 <SYSVIEW_SendTaskInfo>
 8004d5c:	e000      	b.n	8004d60 <SYSVIEW_AddTask+0xb8>
    return;
 8004d5e:	bf00      	nop

}
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	08007084 	.word	0x08007084
 8004d6c:	20012e38 	.word	0x20012e38
 8004d70:	0800708c 	.word	0x0800708c
 8004d74:	20012d98 	.word	0x20012d98

08004d78 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004d80:	4b59      	ldr	r3, [pc, #356]	; (8004ee8 <SYSVIEW_DeleteTask+0x170>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80ab 	beq.w	8004ee0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	e00d      	b.n	8004dac <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004d90:	4956      	ldr	r1, [pc, #344]	; (8004eec <SYSVIEW_DeleteTask+0x174>)
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d008      	beq.n	8004db8 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3301      	adds	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	4b4e      	ldr	r3, [pc, #312]	; (8004ee8 <SYSVIEW_DeleteTask+0x170>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d3ec      	bcc.n	8004d90 <SYSVIEW_DeleteTask+0x18>
 8004db6:	e000      	b.n	8004dba <SYSVIEW_DeleteTask+0x42>
      break;
 8004db8:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004dba:	4b4b      	ldr	r3, [pc, #300]	; (8004ee8 <SYSVIEW_DeleteTask+0x170>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d111      	bne.n	8004dea <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4a46      	ldr	r2, [pc, #280]	; (8004eec <SYSVIEW_DeleteTask+0x174>)
 8004dd2:	4413      	add	r3, r2
 8004dd4:	2214      	movs	r2, #20
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f002 f8d1 	bl	8006f80 <memset>
    _NumTasks--;
 8004dde:	4b42      	ldr	r3, [pc, #264]	; (8004ee8 <SYSVIEW_DeleteTask+0x170>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	4a40      	ldr	r2, [pc, #256]	; (8004ee8 <SYSVIEW_DeleteTask+0x170>)
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	e07b      	b.n	8004ee2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8004dea:	4b3f      	ldr	r3, [pc, #252]	; (8004ee8 <SYSVIEW_DeleteTask+0x170>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d276      	bcs.n	8004ee2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8004df4:	4b3c      	ldr	r3, [pc, #240]	; (8004ee8 <SYSVIEW_DeleteTask+0x170>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	1e5a      	subs	r2, r3, #1
 8004dfa:	493c      	ldr	r1, [pc, #240]	; (8004eec <SYSVIEW_DeleteTask+0x174>)
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	6819      	ldr	r1, [r3, #0]
 8004e08:	4838      	ldr	r0, [pc, #224]	; (8004eec <SYSVIEW_DeleteTask+0x174>)
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4403      	add	r3, r0
 8004e16:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004e18:	4b33      	ldr	r3, [pc, #204]	; (8004ee8 <SYSVIEW_DeleteTask+0x170>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	1e5a      	subs	r2, r3, #1
 8004e1e:	4933      	ldr	r1, [pc, #204]	; (8004eec <SYSVIEW_DeleteTask+0x174>)
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	6819      	ldr	r1, [r3, #0]
 8004e2e:	482f      	ldr	r0, [pc, #188]	; (8004eec <SYSVIEW_DeleteTask+0x174>)
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4403      	add	r3, r0
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004e40:	4b29      	ldr	r3, [pc, #164]	; (8004ee8 <SYSVIEW_DeleteTask+0x170>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	1e5a      	subs	r2, r3, #1
 8004e46:	4929      	ldr	r1, [pc, #164]	; (8004eec <SYSVIEW_DeleteTask+0x174>)
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	3308      	adds	r3, #8
 8004e54:	6819      	ldr	r1, [r3, #0]
 8004e56:	4825      	ldr	r0, [pc, #148]	; (8004eec <SYSVIEW_DeleteTask+0x174>)
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4403      	add	r3, r0
 8004e64:	3308      	adds	r3, #8
 8004e66:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004e68:	4b1f      	ldr	r3, [pc, #124]	; (8004ee8 <SYSVIEW_DeleteTask+0x170>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	1e5a      	subs	r2, r3, #1
 8004e6e:	491f      	ldr	r1, [pc, #124]	; (8004eec <SYSVIEW_DeleteTask+0x174>)
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	440b      	add	r3, r1
 8004e7a:	330c      	adds	r3, #12
 8004e7c:	6819      	ldr	r1, [r3, #0]
 8004e7e:	481b      	ldr	r0, [pc, #108]	; (8004eec <SYSVIEW_DeleteTask+0x174>)
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4403      	add	r3, r0
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004e90:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <SYSVIEW_DeleteTask+0x170>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	1e5a      	subs	r2, r3, #1
 8004e96:	4915      	ldr	r1, [pc, #84]	; (8004eec <SYSVIEW_DeleteTask+0x174>)
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	3310      	adds	r3, #16
 8004ea4:	6819      	ldr	r1, [r3, #0]
 8004ea6:	4811      	ldr	r0, [pc, #68]	; (8004eec <SYSVIEW_DeleteTask+0x174>)
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4403      	add	r3, r0
 8004eb4:	3310      	adds	r3, #16
 8004eb6:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <SYSVIEW_DeleteTask+0x170>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	1e5a      	subs	r2, r3, #1
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4a09      	ldr	r2, [pc, #36]	; (8004eec <SYSVIEW_DeleteTask+0x174>)
 8004ec8:	4413      	add	r3, r2
 8004eca:	2214      	movs	r2, #20
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f002 f856 	bl	8006f80 <memset>
    _NumTasks--;
 8004ed4:	4b04      	ldr	r3, [pc, #16]	; (8004ee8 <SYSVIEW_DeleteTask+0x170>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	4a03      	ldr	r2, [pc, #12]	; (8004ee8 <SYSVIEW_DeleteTask+0x170>)
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e000      	b.n	8004ee2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8004ee0:	bf00      	nop
  }
}
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20012e38 	.word	0x20012e38
 8004eec:	20012d98 	.word	0x20012d98

08004ef0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	; 0x28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004efe:	f107 0314 	add.w	r3, r7, #20
 8004f02:	2214      	movs	r2, #20
 8004f04:	2100      	movs	r1, #0
 8004f06:	4618      	mov	r0, r3
 8004f08:	f002 f83a 	bl	8006f80 <memset>
  TaskInfo.TaskID     = TaskID;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004f20:	f107 0314 	add.w	r3, r7, #20
 8004f24:	4618      	mov	r0, r3
 8004f26:	f001 fb85 	bl	8006634 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004f2a:	bf00      	nop
 8004f2c:	3728      	adds	r7, #40	; 0x28
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004f3a:	4b26      	ldr	r3, [pc, #152]	; (8004fd4 <_DoInit+0xa0>)
 8004f3c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004f3e:	22a8      	movs	r2, #168	; 0xa8
 8004f40:	2100      	movs	r1, #0
 8004f42:	6838      	ldr	r0, [r7, #0]
 8004f44:	f002 f81c 	bl	8006f80 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2203      	movs	r2, #3
 8004f4c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2203      	movs	r2, #3
 8004f52:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	4a20      	ldr	r2, [pc, #128]	; (8004fd8 <_DoInit+0xa4>)
 8004f58:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	4a1f      	ldr	r2, [pc, #124]	; (8004fdc <_DoInit+0xa8>)
 8004f5e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f66:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2200      	movs	r2, #0
 8004f72:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2200      	movs	r2, #0
 8004f78:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	4a16      	ldr	r2, [pc, #88]	; (8004fd8 <_DoInit+0xa4>)
 8004f7e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	4a17      	ldr	r2, [pc, #92]	; (8004fe0 <_DoInit+0xac>)
 8004f84:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2210      	movs	r2, #16
 8004f8a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2200      	movs	r2, #0
 8004f96:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004f9e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	607b      	str	r3, [r7, #4]
 8004fa6:	e00c      	b.n	8004fc2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f1c3 030f 	rsb	r3, r3, #15
 8004fae:	4a0d      	ldr	r2, [pc, #52]	; (8004fe4 <_DoInit+0xb0>)
 8004fb0:	5cd1      	ldrb	r1, [r2, r3]
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	460a      	mov	r2, r1
 8004fba:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	607b      	str	r3, [r7, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b0f      	cmp	r3, #15
 8004fc6:	d9ef      	bls.n	8004fa8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004fc8:	f3bf 8f5f 	dmb	sy
}
 8004fcc:	bf00      	nop
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	2001440c 	.word	0x2001440c
 8004fd8:	080070dc 	.word	0x080070dc
 8004fdc:	20012e3c 	.word	0x20012e3c
 8004fe0:	2001323c 	.word	0x2001323c
 8004fe4:	08007110 	.word	0x08007110

08004fe8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08c      	sub	sp, #48	; 0x30
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004ff4:	4b3e      	ldr	r3, [pc, #248]	; (80050f0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ff6:	623b      	str	r3, [r7, #32]
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <SEGGER_RTT_ReadNoLock+0x1e>
 8005002:	f7ff ff97 	bl	8004f34 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4613      	mov	r3, r2
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	4413      	add	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	3360      	adds	r3, #96	; 0x60
 8005012:	4a37      	ldr	r2, [pc, #220]	; (80050f0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005014:	4413      	add	r3, r2
 8005016:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005028:	2300      	movs	r3, #0
 800502a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800502c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	429a      	cmp	r2, r3
 8005032:	d92b      	bls.n	800508c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4293      	cmp	r3, r2
 8005044:	bf28      	it	cs
 8005046:	4613      	movcs	r3, r2
 8005048:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	4413      	add	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	6939      	ldr	r1, [r7, #16]
 8005058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800505a:	f001 ff83 	bl	8006f64 <memcpy>
    NumBytesRead += NumBytesRem;
 800505e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	4413      	add	r3, r2
 8005064:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	4413      	add	r3, r2
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	4413      	add	r3, r2
 800507c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005084:	429a      	cmp	r2, r3
 8005086:	d101      	bne.n	800508c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005088:	2300      	movs	r3, #0
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4293      	cmp	r3, r2
 800509a:	bf28      	it	cs
 800509c:	4613      	movcs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d019      	beq.n	80050da <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	4413      	add	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	6939      	ldr	r1, [r7, #16]
 80050b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050b6:	f001 ff55 	bl	8006f64 <memcpy>
    NumBytesRead += NumBytesRem;
 80050ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	4413      	add	r3, r2
 80050c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80050c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	4413      	add	r3, r2
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	4413      	add	r3, r2
 80050d8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80050da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050e4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3730      	adds	r7, #48	; 0x30
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	2001440c 	.word	0x2001440c

080050f4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005102:	4b3d      	ldr	r3, [pc, #244]	; (80051f8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005110:	f7ff ff10 	bl	8004f34 <_DoInit>
  SEGGER_RTT_LOCK();
 8005114:	f3ef 8311 	mrs	r3, BASEPRI
 8005118:	f04f 0120 	mov.w	r1, #32
 800511c:	f381 8811 	msr	BASEPRI, r1
 8005120:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005122:	4b35      	ldr	r3, [pc, #212]	; (80051f8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005124:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800512a:	6939      	ldr	r1, [r7, #16]
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	4613      	mov	r3, r2
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	4413      	add	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	440b      	add	r3, r1
 800513a:	3304      	adds	r3, #4
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d008      	beq.n	8005154 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	3301      	adds	r3, #1
 8005146:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	429a      	cmp	r2, r3
 8005150:	dbeb      	blt.n	800512a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005152:	e000      	b.n	8005156 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005154:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	429a      	cmp	r2, r3
 800515e:	da3f      	bge.n	80051e0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005160:	6939      	ldr	r1, [r7, #16]
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	4613      	mov	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	4413      	add	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	440b      	add	r3, r1
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005174:	6939      	ldr	r1, [r7, #16]
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	4613      	mov	r3, r2
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	4413      	add	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	440b      	add	r3, r1
 8005184:	3304      	adds	r3, #4
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800518a:	6939      	ldr	r1, [r7, #16]
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	4613      	mov	r3, r2
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4413      	add	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	440b      	add	r3, r1
 8005198:	3320      	adds	r3, #32
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800519e:	6939      	ldr	r1, [r7, #16]
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	4613      	mov	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4413      	add	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	440b      	add	r3, r1
 80051ac:	3328      	adds	r3, #40	; 0x28
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80051b2:	6939      	ldr	r1, [r7, #16]
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	4613      	mov	r3, r2
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	4413      	add	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	440b      	add	r3, r1
 80051c0:	3324      	adds	r3, #36	; 0x24
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80051c6:	6939      	ldr	r1, [r7, #16]
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	4613      	mov	r3, r2
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4413      	add	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	440b      	add	r3, r1
 80051d4:	332c      	adds	r3, #44	; 0x2c
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051da:	f3bf 8f5f 	dmb	sy
 80051de:	e002      	b.n	80051e6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80051e0:	f04f 33ff 	mov.w	r3, #4294967295
 80051e4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80051ec:	69fb      	ldr	r3, [r7, #28]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3720      	adds	r7, #32
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	2001440c 	.word	0x2001440c

080051fc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	; 0x28
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800520a:	4b21      	ldr	r3, [pc, #132]	; (8005290 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800520c:	623b      	str	r3, [r7, #32]
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005218:	f7ff fe8c 	bl	8004f34 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800521c:	4b1c      	ldr	r3, [pc, #112]	; (8005290 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800521e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d82c      	bhi.n	8005280 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005226:	f3ef 8311 	mrs	r3, BASEPRI
 800522a:	f04f 0120 	mov.w	r1, #32
 800522e:	f381 8811 	msr	BASEPRI, r1
 8005232:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4613      	mov	r3, r2
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	4413      	add	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	3360      	adds	r3, #96	; 0x60
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00e      	beq.n	800526a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2200      	movs	r2, #0
 8005262:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2200      	movs	r2, #0
 8005268:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800526e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005270:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800527a:	2300      	movs	r3, #0
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
 800527e:	e002      	b.n	8005286 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005280:	f04f 33ff 	mov.w	r3, #4294967295
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005288:	4618      	mov	r0, r3
 800528a:	3728      	adds	r7, #40	; 0x28
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	2001440c 	.word	0x2001440c

08005294 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00f      	beq.n	80052ca <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80052aa:	e002      	b.n	80052b2 <_EncodeStr+0x1e>
      Len++;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	3301      	adds	r3, #1
 80052b0:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	4413      	add	r3, r2
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f6      	bne.n	80052ac <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d901      	bls.n	80052ca <_EncodeStr+0x36>
      Len = Limit;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2bfe      	cmp	r3, #254	; 0xfe
 80052ce:	d806      	bhi.n	80052de <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	60fa      	str	r2, [r7, #12]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]
 80052dc:	e011      	b.n	8005302 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	60fa      	str	r2, [r7, #12]
 80052e4:	22ff      	movs	r2, #255	; 0xff
 80052e6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	60fa      	str	r2, [r7, #12]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	0a19      	lsrs	r1, r3, #8
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	60fa      	str	r2, [r7, #12]
 80052fe:	b2ca      	uxtb	r2, r1
 8005300:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005306:	e00a      	b.n	800531e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	1c53      	adds	r3, r2, #1
 800530c:	60bb      	str	r3, [r7, #8]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	1c59      	adds	r1, r3, #1
 8005312:	60f9      	str	r1, [r7, #12]
 8005314:	7812      	ldrb	r2, [r2, #0]
 8005316:	701a      	strb	r2, [r3, #0]
    n++;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	3301      	adds	r3, #1
 800531c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	429a      	cmp	r2, r3
 8005324:	d3f0      	bcc.n	8005308 <_EncodeStr+0x74>
  }
  return pPayload;
 8005326:	68fb      	ldr	r3, [r7, #12]
}
 8005328:	4618      	mov	r0, r3
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3307      	adds	r3, #7
}
 8005340:	4618      	mov	r0, r3
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005352:	4b35      	ldr	r3, [pc, #212]	; (8005428 <_HandleIncomingPacket+0xdc>)
 8005354:	7e1b      	ldrb	r3, [r3, #24]
 8005356:	4618      	mov	r0, r3
 8005358:	1cfb      	adds	r3, r7, #3
 800535a:	2201      	movs	r2, #1
 800535c:	4619      	mov	r1, r3
 800535e:	f7ff fe43 	bl	8004fe8 <SEGGER_RTT_ReadNoLock>
 8005362:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d052      	beq.n	8005410 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800536a:	78fb      	ldrb	r3, [r7, #3]
 800536c:	2b80      	cmp	r3, #128	; 0x80
 800536e:	d031      	beq.n	80053d4 <_HandleIncomingPacket+0x88>
 8005370:	2b80      	cmp	r3, #128	; 0x80
 8005372:	dc40      	bgt.n	80053f6 <_HandleIncomingPacket+0xaa>
 8005374:	2b07      	cmp	r3, #7
 8005376:	dc15      	bgt.n	80053a4 <_HandleIncomingPacket+0x58>
 8005378:	2b00      	cmp	r3, #0
 800537a:	dd3c      	ble.n	80053f6 <_HandleIncomingPacket+0xaa>
 800537c:	3b01      	subs	r3, #1
 800537e:	2b06      	cmp	r3, #6
 8005380:	d839      	bhi.n	80053f6 <_HandleIncomingPacket+0xaa>
 8005382:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <_HandleIncomingPacket+0x3c>)
 8005384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005388:	080053ab 	.word	0x080053ab
 800538c:	080053b1 	.word	0x080053b1
 8005390:	080053b7 	.word	0x080053b7
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053c3 	.word	0x080053c3
 800539c:	080053c9 	.word	0x080053c9
 80053a0:	080053cf 	.word	0x080053cf
 80053a4:	2b7f      	cmp	r3, #127	; 0x7f
 80053a6:	d035      	beq.n	8005414 <_HandleIncomingPacket+0xc8>
 80053a8:	e025      	b.n	80053f6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80053aa:	f000 ffc9 	bl	8006340 <SEGGER_SYSVIEW_Start>
      break;
 80053ae:	e036      	b.n	800541e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80053b0:	f001 f880 	bl	80064b4 <SEGGER_SYSVIEW_Stop>
      break;
 80053b4:	e033      	b.n	800541e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80053b6:	f001 fa59 	bl	800686c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80053ba:	e030      	b.n	800541e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80053bc:	f001 fa1e 	bl	80067fc <SEGGER_SYSVIEW_SendTaskList>
      break;
 80053c0:	e02d      	b.n	800541e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80053c2:	f001 f89d 	bl	8006500 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80053c6:	e02a      	b.n	800541e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80053c8:	f001 fcec 	bl	8006da4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80053cc:	e027      	b.n	800541e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80053ce:	f001 fccb 	bl	8006d68 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80053d2:	e024      	b.n	800541e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053d4:	4b14      	ldr	r3, [pc, #80]	; (8005428 <_HandleIncomingPacket+0xdc>)
 80053d6:	7e1b      	ldrb	r3, [r3, #24]
 80053d8:	4618      	mov	r0, r3
 80053da:	1cfb      	adds	r3, r7, #3
 80053dc:	2201      	movs	r2, #1
 80053de:	4619      	mov	r1, r3
 80053e0:	f7ff fe02 	bl	8004fe8 <SEGGER_RTT_ReadNoLock>
 80053e4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d015      	beq.n	8005418 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f001 fc3a 	bl	8006c68 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80053f4:	e010      	b.n	8005418 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80053f6:	78fb      	ldrb	r3, [r7, #3]
 80053f8:	b25b      	sxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	da0e      	bge.n	800541c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <_HandleIncomingPacket+0xdc>)
 8005400:	7e1b      	ldrb	r3, [r3, #24]
 8005402:	4618      	mov	r0, r3
 8005404:	1cfb      	adds	r3, r7, #3
 8005406:	2201      	movs	r2, #1
 8005408:	4619      	mov	r1, r3
 800540a:	f7ff fded 	bl	8004fe8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800540e:	e005      	b.n	800541c <_HandleIncomingPacket+0xd0>
    }
  }
 8005410:	bf00      	nop
 8005412:	e004      	b.n	800541e <_HandleIncomingPacket+0xd2>
      break;
 8005414:	bf00      	nop
 8005416:	e002      	b.n	800541e <_HandleIncomingPacket+0xd2>
      break;
 8005418:	bf00      	nop
 800541a:	e000      	b.n	800541e <_HandleIncomingPacket+0xd2>
      break;
 800541c:	bf00      	nop
}
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20014254 	.word	0x20014254

0800542c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800542c:	b580      	push	{r7, lr}
 800542e:	b08c      	sub	sp, #48	; 0x30
 8005430:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005432:	2301      	movs	r3, #1
 8005434:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005436:	1d3b      	adds	r3, r7, #4
 8005438:	3301      	adds	r3, #1
 800543a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005440:	4b31      	ldr	r3, [pc, #196]	; (8005508 <_TrySendOverflowPacket+0xdc>)
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
 8005446:	e00b      	b.n	8005460 <_TrySendOverflowPacket+0x34>
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	b2da      	uxtb	r2, r3
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	1c59      	adds	r1, r3, #1
 8005450:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005452:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545c:	09db      	lsrs	r3, r3, #7
 800545e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	2b7f      	cmp	r3, #127	; 0x7f
 8005464:	d8f0      	bhi.n	8005448 <_TrySendOverflowPacket+0x1c>
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800546c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005476:	4b25      	ldr	r3, [pc, #148]	; (800550c <_TrySendOverflowPacket+0xe0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800547c:	4b22      	ldr	r3, [pc, #136]	; (8005508 <_TrySendOverflowPacket+0xdc>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	623b      	str	r3, [r7, #32]
 800548e:	e00b      	b.n	80054a8 <_TrySendOverflowPacket+0x7c>
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	b2da      	uxtb	r2, r3
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	1c59      	adds	r1, r3, #1
 8005498:	6279      	str	r1, [r7, #36]	; 0x24
 800549a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	09db      	lsrs	r3, r3, #7
 80054a6:	623b      	str	r3, [r7, #32]
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	2b7f      	cmp	r3, #127	; 0x7f
 80054ac:	d8f0      	bhi.n	8005490 <_TrySendOverflowPacket+0x64>
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	627a      	str	r2, [r7, #36]	; 0x24
 80054b4:	6a3a      	ldr	r2, [r7, #32]
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80054be:	4b12      	ldr	r3, [pc, #72]	; (8005508 <_TrySendOverflowPacket+0xdc>)
 80054c0:	785b      	ldrb	r3, [r3, #1]
 80054c2:	4618      	mov	r0, r3
 80054c4:	1d3b      	adds	r3, r7, #4
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	461a      	mov	r2, r3
 80054cc:	1d3b      	adds	r3, r7, #4
 80054ce:	4619      	mov	r1, r3
 80054d0:	f7fa fe7e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80054d4:	4603      	mov	r3, r0
 80054d6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80054de:	4a0a      	ldr	r2, [pc, #40]	; (8005508 <_TrySendOverflowPacket+0xdc>)
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80054e4:	4b08      	ldr	r3, [pc, #32]	; (8005508 <_TrySendOverflowPacket+0xdc>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	4b06      	ldr	r3, [pc, #24]	; (8005508 <_TrySendOverflowPacket+0xdc>)
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	e004      	b.n	80054fc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80054f2:	4b05      	ldr	r3, [pc, #20]	; (8005508 <_TrySendOverflowPacket+0xdc>)
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	3301      	adds	r3, #1
 80054f8:	4a03      	ldr	r2, [pc, #12]	; (8005508 <_TrySendOverflowPacket+0xdc>)
 80054fa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80054fc:	693b      	ldr	r3, [r7, #16]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3730      	adds	r7, #48	; 0x30
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20014254 	.word	0x20014254
 800550c:	e0001004 	.word	0xe0001004

08005510 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	; 0x28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800551c:	4b9a      	ldr	r3, [pc, #616]	; (8005788 <_SendPacket+0x278>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d010      	beq.n	8005546 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005524:	4b98      	ldr	r3, [pc, #608]	; (8005788 <_SendPacket+0x278>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 8129 	beq.w	8005780 <_SendPacket+0x270>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800552e:	4b96      	ldr	r3, [pc, #600]	; (8005788 <_SendPacket+0x278>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d109      	bne.n	800554a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005536:	f7ff ff79 	bl	800542c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800553a:	4b93      	ldr	r3, [pc, #588]	; (8005788 <_SendPacket+0x278>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b01      	cmp	r3, #1
 8005540:	f040 8120 	bne.w	8005784 <_SendPacket+0x274>
      goto SendDone;
    }
  }
Send:
 8005544:	e001      	b.n	800554a <_SendPacket+0x3a>
    goto Send;
 8005546:	bf00      	nop
 8005548:	e000      	b.n	800554c <_SendPacket+0x3c>
Send:
 800554a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b1f      	cmp	r3, #31
 8005550:	d809      	bhi.n	8005566 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005552:	4b8d      	ldr	r3, [pc, #564]	; (8005788 <_SendPacket+0x278>)
 8005554:	69da      	ldr	r2, [r3, #28]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	f040 8115 	bne.w	8005790 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b17      	cmp	r3, #23
 800556a:	d807      	bhi.n	800557c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3b01      	subs	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	b2da      	uxtb	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	e0c4      	b.n	8005706 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	2b7f      	cmp	r3, #127	; 0x7f
 8005588:	d912      	bls.n	80055b0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	09da      	lsrs	r2, r3, #7
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3b01      	subs	r3, #1
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	b2db      	uxtb	r3, r3
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	3a01      	subs	r2, #1
 80055a2:	60fa      	str	r2, [r7, #12]
 80055a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	e006      	b.n	80055be <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b7e      	cmp	r3, #126	; 0x7e
 80055c2:	d807      	bhi.n	80055d4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	701a      	strb	r2, [r3, #0]
 80055d2:	e098      	b.n	8005706 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055da:	d212      	bcs.n	8005602 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	09da      	lsrs	r2, r3, #7
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	3a01      	subs	r2, #1
 80055f4:	60fa      	str	r2, [r7, #12]
 80055f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	701a      	strb	r2, [r3, #0]
 8005600:	e081      	b.n	8005706 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005608:	d21d      	bcs.n	8005646 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	0b9a      	lsrs	r2, r3, #14
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3b01      	subs	r3, #1
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	09db      	lsrs	r3, r3, #7
 800561e:	b2db      	uxtb	r3, r3
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	3a01      	subs	r2, #1
 8005624:	60fa      	str	r2, [r7, #12]
 8005626:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800562a:	b2da      	uxtb	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	3a01      	subs	r2, #1
 8005638:	60fa      	str	r2, [r7, #12]
 800563a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800563e:	b2da      	uxtb	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	701a      	strb	r2, [r3, #0]
 8005644:	e05f      	b.n	8005706 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800564c:	d228      	bcs.n	80056a0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	0d5a      	lsrs	r2, r3, #21
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	3b01      	subs	r3, #1
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	b2d2      	uxtb	r2, r2
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	0b9b      	lsrs	r3, r3, #14
 8005662:	b2db      	uxtb	r3, r3
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	3a01      	subs	r2, #1
 8005668:	60fa      	str	r2, [r7, #12]
 800566a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800566e:	b2da      	uxtb	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	09db      	lsrs	r3, r3, #7
 8005678:	b2db      	uxtb	r3, r3
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	3a01      	subs	r2, #1
 800567e:	60fa      	str	r2, [r7, #12]
 8005680:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005684:	b2da      	uxtb	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	3a01      	subs	r2, #1
 8005692:	60fa      	str	r2, [r7, #12]
 8005694:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005698:	b2da      	uxtb	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	e032      	b.n	8005706 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	0f1a      	lsrs	r2, r3, #28
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	0d5b      	lsrs	r3, r3, #21
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	3a01      	subs	r2, #1
 80056ba:	60fa      	str	r2, [r7, #12]
 80056bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	0b9b      	lsrs	r3, r3, #14
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	3a01      	subs	r2, #1
 80056d0:	60fa      	str	r2, [r7, #12]
 80056d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	09db      	lsrs	r3, r3, #7
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	3a01      	subs	r2, #1
 80056e6:	60fa      	str	r2, [r7, #12]
 80056e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	3a01      	subs	r2, #1
 80056fa:	60fa      	str	r2, [r7, #12]
 80056fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005706:	4b21      	ldr	r3, [pc, #132]	; (800578c <_SendPacket+0x27c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800570c:	4b1e      	ldr	r3, [pc, #120]	; (8005788 <_SendPacket+0x278>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	623b      	str	r3, [r7, #32]
 800571e:	e00b      	b.n	8005738 <_SendPacket+0x228>
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	b2da      	uxtb	r2, r3
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	1c59      	adds	r1, r3, #1
 8005728:	6279      	str	r1, [r7, #36]	; 0x24
 800572a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	09db      	lsrs	r3, r3, #7
 8005736:	623b      	str	r3, [r7, #32]
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	2b7f      	cmp	r3, #127	; 0x7f
 800573c:	d8f0      	bhi.n	8005720 <_SendPacket+0x210>
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	627a      	str	r2, [r7, #36]	; 0x24
 8005744:	6a3a      	ldr	r2, [r7, #32]
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800574e:	4b0e      	ldr	r3, [pc, #56]	; (8005788 <_SendPacket+0x278>)
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	4618      	mov	r0, r3
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	461a      	mov	r2, r3
 800575c:	68f9      	ldr	r1, [r7, #12]
 800575e:	f7fa fd37 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005762:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800576a:	4a07      	ldr	r2, [pc, #28]	; (8005788 <_SendPacket+0x278>)
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	60d3      	str	r3, [r2, #12]
 8005770:	e00f      	b.n	8005792 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005772:	4b05      	ldr	r3, [pc, #20]	; (8005788 <_SendPacket+0x278>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	3301      	adds	r3, #1
 8005778:	b2da      	uxtb	r2, r3
 800577a:	4b03      	ldr	r3, [pc, #12]	; (8005788 <_SendPacket+0x278>)
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e008      	b.n	8005792 <_SendPacket+0x282>
    goto SendDone;
 8005780:	bf00      	nop
 8005782:	e006      	b.n	8005792 <_SendPacket+0x282>
      goto SendDone;
 8005784:	bf00      	nop
 8005786:	e004      	b.n	8005792 <_SendPacket+0x282>
 8005788:	20014254 	.word	0x20014254
 800578c:	e0001004 	.word	0xe0001004
      goto SendDone;
 8005790:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005792:	4b14      	ldr	r3, [pc, #80]	; (80057e4 <_SendPacket+0x2d4>)
 8005794:	7e1b      	ldrb	r3, [r3, #24]
 8005796:	4619      	mov	r1, r3
 8005798:	4a13      	ldr	r2, [pc, #76]	; (80057e8 <_SendPacket+0x2d8>)
 800579a:	460b      	mov	r3, r1
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	440b      	add	r3, r1
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	4413      	add	r3, r2
 80057a4:	336c      	adds	r3, #108	; 0x6c
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <_SendPacket+0x2d4>)
 80057aa:	7e1b      	ldrb	r3, [r3, #24]
 80057ac:	4618      	mov	r0, r3
 80057ae:	490e      	ldr	r1, [pc, #56]	; (80057e8 <_SendPacket+0x2d8>)
 80057b0:	4603      	mov	r3, r0
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	4403      	add	r3, r0
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	440b      	add	r3, r1
 80057ba:	3370      	adds	r3, #112	; 0x70
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d00b      	beq.n	80057da <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80057c2:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <_SendPacket+0x2d4>)
 80057c4:	789b      	ldrb	r3, [r3, #2]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d107      	bne.n	80057da <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80057ca:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <_SendPacket+0x2d4>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80057d0:	f7ff fdbc 	bl	800534c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80057d4:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <_SendPacket+0x2d4>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80057da:	bf00      	nop
 80057dc:	3728      	adds	r7, #40	; 0x28
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20014254 	.word	0x20014254
 80057e8:	2001440c 	.word	0x2001440c

080057ec <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08a      	sub	sp, #40	; 0x28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	3301      	adds	r3, #1
 8005802:	2b80      	cmp	r3, #128	; 0x80
 8005804:	d80a      	bhi.n	800581c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	1c59      	adds	r1, r3, #1
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6051      	str	r1, [r2, #4]
 8005810:	78fa      	ldrb	r2, [r7, #3]
 8005812:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b80      	cmp	r3, #128	; 0x80
 8005822:	d15a      	bne.n	80058da <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	627b      	str	r3, [r7, #36]	; 0x24
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	623b      	str	r3, [r7, #32]
 8005844:	e00b      	b.n	800585e <_StoreChar+0x72>
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	b2da      	uxtb	r2, r3
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	1c59      	adds	r1, r3, #1
 800584e:	6279      	str	r1, [r7, #36]	; 0x24
 8005850:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	09db      	lsrs	r3, r3, #7
 800585c:	623b      	str	r3, [r7, #32]
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	2b7f      	cmp	r3, #127	; 0x7f
 8005862:	d8f0      	bhi.n	8005846 <_StoreChar+0x5a>
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	627a      	str	r2, [r7, #36]	; 0x24
 800586a:	6a3a      	ldr	r2, [r7, #32]
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	61fb      	str	r3, [r7, #28]
 8005878:	2300      	movs	r3, #0
 800587a:	61bb      	str	r3, [r7, #24]
 800587c:	e00b      	b.n	8005896 <_StoreChar+0xaa>
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	b2da      	uxtb	r2, r3
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	1c59      	adds	r1, r3, #1
 8005886:	61f9      	str	r1, [r7, #28]
 8005888:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	701a      	strb	r2, [r3, #0]
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	09db      	lsrs	r3, r3, #7
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b7f      	cmp	r3, #127	; 0x7f
 800589a:	d8f0      	bhi.n	800587e <_StoreChar+0x92>
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	61fa      	str	r2, [r7, #28]
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	221a      	movs	r2, #26
 80058b2:	6939      	ldr	r1, [r7, #16]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7ff fe2b 	bl	8005510 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff fd38 	bl	8005334 <_PreparePacket>
 80058c4:	4602      	mov	r2, r0
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	611a      	str	r2, [r3, #16]
  }
}
 80058da:	bf00      	nop
 80058dc:	3728      	adds	r7, #40	; 0x28
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08a      	sub	sp, #40	; 0x28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80058f6:	2301      	movs	r3, #1
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80058fa:	2301      	movs	r3, #1
 80058fc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80058fe:	e007      	b.n	8005910 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005900:	6a3a      	ldr	r2, [r7, #32]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	fbb2 f3f3 	udiv	r3, r2, r3
 8005908:	623b      	str	r3, [r7, #32]
    Width++;
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	3301      	adds	r3, #1
 800590e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005910:	6a3a      	ldr	r2, [r7, #32]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	429a      	cmp	r2, r3
 8005916:	d2f3      	bcs.n	8005900 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	429a      	cmp	r2, r3
 800591e:	d901      	bls.n	8005924 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d11f      	bne.n	800596e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01c      	beq.n	800596e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <_PrintUnsigned+0x66>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d102      	bne.n	800594a <_PrintUnsigned+0x66>
        c = '0';
 8005944:	2330      	movs	r3, #48	; 0x30
 8005946:	76fb      	strb	r3, [r7, #27]
 8005948:	e001      	b.n	800594e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800594a:	2320      	movs	r3, #32
 800594c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800594e:	e007      	b.n	8005960 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	3b01      	subs	r3, #1
 8005954:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005956:	7efb      	ldrb	r3, [r7, #27]
 8005958:	4619      	mov	r1, r3
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f7ff ff46 	bl	80057ec <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <_PrintUnsigned+0x8a>
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596a:	429a      	cmp	r2, r3
 800596c:	d3f0      	bcc.n	8005950 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d903      	bls.n	800597c <_PrintUnsigned+0x98>
      NumDigits--;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	3b01      	subs	r3, #1
 8005978:	603b      	str	r3, [r7, #0]
 800597a:	e009      	b.n	8005990 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	fbb2 f3f3 	udiv	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	429a      	cmp	r2, r3
 800598c:	d200      	bcs.n	8005990 <_PrintUnsigned+0xac>
        break;
 800598e:	e005      	b.n	800599c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	fb02 f303 	mul.w	r3, r2, r3
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800599a:	e7e8      	b.n	800596e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80059b4:	4a15      	ldr	r2, [pc, #84]	; (8005a0c <_PrintUnsigned+0x128>)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	4413      	add	r3, r2
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	4619      	mov	r1, r3
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f7ff ff14 	bl	80057ec <_StoreChar>
    Digit /= Base;
 80059c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e3      	bne.n	800599c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80059d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d011      	beq.n	8005a02 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00e      	beq.n	8005a02 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059e4:	e006      	b.n	80059f4 <_PrintUnsigned+0x110>
        FieldWidth--;
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	3b01      	subs	r3, #1
 80059ea:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80059ec:	2120      	movs	r1, #32
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f7ff fefc 	bl	80057ec <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <_PrintUnsigned+0x11e>
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d3f1      	bcc.n	80059e6 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005a02:	bf00      	nop
 8005a04:	3728      	adds	r7, #40	; 0x28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	08007130 	.word	0x08007130

08005a10 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bfb8      	it	lt
 8005a24:	425b      	neglt	r3, r3
 8005a26:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a2c:	e007      	b.n	8005a3e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a36:	613b      	str	r3, [r7, #16]
    Width++;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	daf3      	bge.n	8005a2e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d901      	bls.n	8005a52 <_PrintInt+0x42>
    Width = NumDigits;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <_PrintInt+0x5e>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	db04      	blt.n	8005a68 <_PrintInt+0x58>
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <_PrintInt+0x5e>
    FieldWidth--;
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <_PrintInt+0x6e>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d016      	beq.n	8005aac <_PrintInt+0x9c>
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d111      	bne.n	8005aac <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00e      	beq.n	8005aac <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a8e:	e006      	b.n	8005a9e <_PrintInt+0x8e>
        FieldWidth--;
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005a96:	2120      	movs	r1, #32
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f7ff fea7 	bl	80057ec <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <_PrintInt+0x9c>
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d3f1      	bcc.n	8005a90 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	da07      	bge.n	8005ac2 <_PrintInt+0xb2>
    v = -v;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	425b      	negs	r3, r3
 8005ab6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005ab8:	212d      	movs	r1, #45	; 0x2d
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f7ff fe96 	bl	80057ec <_StoreChar>
 8005ac0:	e008      	b.n	8005ad4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005acc:	212b      	movs	r1, #43	; 0x2b
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff fe8c 	bl	80057ec <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d019      	beq.n	8005b12 <_PrintInt+0x102>
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d114      	bne.n	8005b12 <_PrintInt+0x102>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d111      	bne.n	8005b12 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00e      	beq.n	8005b12 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005af4:	e006      	b.n	8005b04 <_PrintInt+0xf4>
        FieldWidth--;
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005afc:	2130      	movs	r1, #48	; 0x30
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff fe74 	bl	80057ec <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <_PrintInt+0x102>
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d3f1      	bcc.n	8005af6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	9301      	str	r3, [sp, #4]
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7ff fedf 	bl	80058e4 <_PrintUnsigned>
}
 8005b26:	bf00      	nop
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b098      	sub	sp, #96	; 0x60
 8005b34:	af02      	add	r7, sp, #8
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b3c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b40:	f04f 0120 	mov.w	r1, #32
 8005b44:	f381 8811 	msr	BASEPRI, r1
 8005b48:	633b      	str	r3, [r7, #48]	; 0x30
 8005b4a:	48b7      	ldr	r0, [pc, #732]	; (8005e28 <_VPrintTarget+0x2f8>)
 8005b4c:	f7ff fbf2 	bl	8005334 <_PreparePacket>
 8005b50:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005b52:	4bb5      	ldr	r3, [pc, #724]	; (8005e28 <_VPrintTarget+0x2f8>)
 8005b54:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005b56:	2300      	movs	r3, #0
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	3301      	adds	r3, #1
 8005b62:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3301      	adds	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005b76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 8183 	beq.w	8005e86 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005b80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b84:	2b25      	cmp	r3, #37	; 0x25
 8005b86:	f040 8170 	bne.w	8005e6a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005b9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b9e:	3b23      	subs	r3, #35	; 0x23
 8005ba0:	2b0d      	cmp	r3, #13
 8005ba2:	d83f      	bhi.n	8005c24 <_VPrintTarget+0xf4>
 8005ba4:	a201      	add	r2, pc, #4	; (adr r2, 8005bac <_VPrintTarget+0x7c>)
 8005ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005baa:	bf00      	nop
 8005bac:	08005c15 	.word	0x08005c15
 8005bb0:	08005c25 	.word	0x08005c25
 8005bb4:	08005c25 	.word	0x08005c25
 8005bb8:	08005c25 	.word	0x08005c25
 8005bbc:	08005c25 	.word	0x08005c25
 8005bc0:	08005c25 	.word	0x08005c25
 8005bc4:	08005c25 	.word	0x08005c25
 8005bc8:	08005c25 	.word	0x08005c25
 8005bcc:	08005c05 	.word	0x08005c05
 8005bd0:	08005c25 	.word	0x08005c25
 8005bd4:	08005be5 	.word	0x08005be5
 8005bd8:	08005c25 	.word	0x08005c25
 8005bdc:	08005c25 	.word	0x08005c25
 8005be0:	08005bf5 	.word	0x08005bf5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be6:	f043 0301 	orr.w	r3, r3, #1
 8005bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	e01a      	b.n	8005c2a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf6:	f043 0302 	orr.w	r3, r3, #2
 8005bfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	e012      	b.n	8005c2a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c06:	f043 0304 	orr.w	r3, r3, #4
 8005c0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	e00a      	b.n	8005c2a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c16:	f043 0308 	orr.w	r3, r3, #8
 8005c1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e002      	b.n	8005c2a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005c24:	2300      	movs	r3, #0
 8005c26:	653b      	str	r3, [r7, #80]	; 0x50
 8005c28:	bf00      	nop
        }
      } while (v);
 8005c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1b0      	bne.n	8005b92 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005c30:	2300      	movs	r3, #0
 8005c32:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005c3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c40:	2b2f      	cmp	r3, #47	; 0x2f
 8005c42:	d912      	bls.n	8005c6a <_VPrintTarget+0x13a>
 8005c44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c48:	2b39      	cmp	r3, #57	; 0x39
 8005c4a:	d80e      	bhi.n	8005c6a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005c52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c54:	4613      	mov	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c62:	4413      	add	r3, r2
 8005c64:	3b30      	subs	r3, #48	; 0x30
 8005c66:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005c68:	e7e4      	b.n	8005c34 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005c76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c7a:	2b2e      	cmp	r3, #46	; 0x2e
 8005c7c:	d11d      	bne.n	8005cba <_VPrintTarget+0x18a>
        sFormat++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3301      	adds	r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005c8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c90:	2b2f      	cmp	r3, #47	; 0x2f
 8005c92:	d912      	bls.n	8005cba <_VPrintTarget+0x18a>
 8005c94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c98:	2b39      	cmp	r3, #57	; 0x39
 8005c9a:	d80e      	bhi.n	8005cba <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005ca2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	461a      	mov	r2, r3
 8005cae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3b30      	subs	r3, #48	; 0x30
 8005cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005cb8:	e7e4      	b.n	8005c84 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005cc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cc6:	2b6c      	cmp	r3, #108	; 0x6c
 8005cc8:	d003      	beq.n	8005cd2 <_VPrintTarget+0x1a2>
 8005cca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cce:	2b68      	cmp	r3, #104	; 0x68
 8005cd0:	d107      	bne.n	8005ce2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005ce0:	e7ef      	b.n	8005cc2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005ce2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ce6:	2b25      	cmp	r3, #37	; 0x25
 8005ce8:	f000 80b3 	beq.w	8005e52 <_VPrintTarget+0x322>
 8005cec:	2b25      	cmp	r3, #37	; 0x25
 8005cee:	f2c0 80b7 	blt.w	8005e60 <_VPrintTarget+0x330>
 8005cf2:	2b78      	cmp	r3, #120	; 0x78
 8005cf4:	f300 80b4 	bgt.w	8005e60 <_VPrintTarget+0x330>
 8005cf8:	2b58      	cmp	r3, #88	; 0x58
 8005cfa:	f2c0 80b1 	blt.w	8005e60 <_VPrintTarget+0x330>
 8005cfe:	3b58      	subs	r3, #88	; 0x58
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	f200 80ad 	bhi.w	8005e60 <_VPrintTarget+0x330>
 8005d06:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <_VPrintTarget+0x1dc>)
 8005d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0c:	08005e03 	.word	0x08005e03
 8005d10:	08005e61 	.word	0x08005e61
 8005d14:	08005e61 	.word	0x08005e61
 8005d18:	08005e61 	.word	0x08005e61
 8005d1c:	08005e61 	.word	0x08005e61
 8005d20:	08005e61 	.word	0x08005e61
 8005d24:	08005e61 	.word	0x08005e61
 8005d28:	08005e61 	.word	0x08005e61
 8005d2c:	08005e61 	.word	0x08005e61
 8005d30:	08005e61 	.word	0x08005e61
 8005d34:	08005e61 	.word	0x08005e61
 8005d38:	08005d91 	.word	0x08005d91
 8005d3c:	08005db7 	.word	0x08005db7
 8005d40:	08005e61 	.word	0x08005e61
 8005d44:	08005e61 	.word	0x08005e61
 8005d48:	08005e61 	.word	0x08005e61
 8005d4c:	08005e61 	.word	0x08005e61
 8005d50:	08005e61 	.word	0x08005e61
 8005d54:	08005e61 	.word	0x08005e61
 8005d58:	08005e61 	.word	0x08005e61
 8005d5c:	08005e61 	.word	0x08005e61
 8005d60:	08005e61 	.word	0x08005e61
 8005d64:	08005e61 	.word	0x08005e61
 8005d68:	08005e61 	.word	0x08005e61
 8005d6c:	08005e2d 	.word	0x08005e2d
 8005d70:	08005e61 	.word	0x08005e61
 8005d74:	08005e61 	.word	0x08005e61
 8005d78:	08005e61 	.word	0x08005e61
 8005d7c:	08005e61 	.word	0x08005e61
 8005d80:	08005ddd 	.word	0x08005ddd
 8005d84:	08005e61 	.word	0x08005e61
 8005d88:	08005e61 	.word	0x08005e61
 8005d8c:	08005e03 	.word	0x08005e03
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	1d19      	adds	r1, r3, #4
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6011      	str	r1, [r2, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005da4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005da8:	f107 0314 	add.w	r3, r7, #20
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff fd1c 	bl	80057ec <_StoreChar>
        break;
 8005db4:	e055      	b.n	8005e62 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	1d19      	adds	r1, r3, #4
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6011      	str	r1, [r2, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005dc4:	f107 0014 	add.w	r0, r7, #20
 8005dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dca:	9301      	str	r3, [sp, #4]
 8005dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dd2:	220a      	movs	r2, #10
 8005dd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dd6:	f7ff fe1b 	bl	8005a10 <_PrintInt>
        break;
 8005dda:	e042      	b.n	8005e62 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	1d19      	adds	r1, r3, #4
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6011      	str	r1, [r2, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005dea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dec:	f107 0014 	add.w	r0, r7, #20
 8005df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df2:	9301      	str	r3, [sp, #4]
 8005df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dfa:	220a      	movs	r2, #10
 8005dfc:	f7ff fd72 	bl	80058e4 <_PrintUnsigned>
        break;
 8005e00:	e02f      	b.n	8005e62 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	1d19      	adds	r1, r3, #4
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6011      	str	r1, [r2, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005e10:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e12:	f107 0014 	add.w	r0, r7, #20
 8005e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e18:	9301      	str	r3, [sp, #4]
 8005e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e20:	2210      	movs	r2, #16
 8005e22:	f7ff fd5f 	bl	80058e4 <_PrintUnsigned>
        break;
 8005e26:	e01c      	b.n	8005e62 <_VPrintTarget+0x332>
 8005e28:	20014284 	.word	0x20014284
      case 'p':
        v = va_arg(*pParamList, int);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	1d19      	adds	r1, r3, #4
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6011      	str	r1, [r2, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005e3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e3c:	f107 0014 	add.w	r0, r7, #20
 8005e40:	2300      	movs	r3, #0
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	2308      	movs	r3, #8
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	2308      	movs	r3, #8
 8005e4a:	2210      	movs	r2, #16
 8005e4c:	f7ff fd4a 	bl	80058e4 <_PrintUnsigned>
        break;
 8005e50:	e007      	b.n	8005e62 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005e52:	f107 0314 	add.w	r3, r7, #20
 8005e56:	2125      	movs	r1, #37	; 0x25
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff fcc7 	bl	80057ec <_StoreChar>
        break;
 8005e5e:	e000      	b.n	8005e62 <_VPrintTarget+0x332>
      default:
        break;
 8005e60:	bf00      	nop
      }
      sFormat++;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3301      	adds	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	e007      	b.n	8005e7a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005e6a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005e6e:	f107 0314 	add.w	r3, r7, #20
 8005e72:	4611      	mov	r1, r2
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff fcb9 	bl	80057ec <_StoreChar>
    }
  } while (*sFormat);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f47f ae72 	bne.w	8005b68 <_VPrintTarget+0x38>
 8005e84:	e000      	b.n	8005e88 <_VPrintTarget+0x358>
      break;
 8005e86:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d041      	beq.n	8005f12 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	643b      	str	r3, [r7, #64]	; 0x40
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e9e:	e00b      	b.n	8005eb8 <_VPrintTarget+0x388>
 8005ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ea6:	1c59      	adds	r1, r3, #1
 8005ea8:	6439      	str	r1, [r7, #64]	; 0x40
 8005eaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb4:	09db      	lsrs	r3, r3, #7
 8005eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eba:	2b7f      	cmp	r3, #127	; 0x7f
 8005ebc:	d8f0      	bhi.n	8005ea0 <_VPrintTarget+0x370>
 8005ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	643a      	str	r2, [r7, #64]	; 0x40
 8005ec4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ecc:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed6:	e00b      	b.n	8005ef0 <_VPrintTarget+0x3c0>
 8005ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	1c59      	adds	r1, r3, #1
 8005ee0:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ee2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eec:	09db      	lsrs	r3, r3, #7
 8005eee:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef4:	d8f0      	bhi.n	8005ed8 <_VPrintTarget+0x3a8>
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	63ba      	str	r2, [r7, #56]	; 0x38
 8005efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	701a      	strb	r2, [r3, #0]
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	69b9      	ldr	r1, [r7, #24]
 8005f0a:	221a      	movs	r2, #26
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff faff 	bl	8005510 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005f18:	bf00      	nop
 8005f1a:	3758      	adds	r7, #88	; 0x58
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f34:	4917      	ldr	r1, [pc, #92]	; (8005f94 <SEGGER_SYSVIEW_Init+0x74>)
 8005f36:	4818      	ldr	r0, [pc, #96]	; (8005f98 <SEGGER_SYSVIEW_Init+0x78>)
 8005f38:	f7ff f8dc 	bl	80050f4 <SEGGER_RTT_AllocUpBuffer>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	4b16      	ldr	r3, [pc, #88]	; (8005f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005f42:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005f44:	4b15      	ldr	r3, [pc, #84]	; (8005f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005f46:	785a      	ldrb	r2, [r3, #1]
 8005f48:	4b14      	ldr	r3, [pc, #80]	; (8005f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005f4a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f4c:	4b13      	ldr	r3, [pc, #76]	; (8005f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005f4e:	7e1b      	ldrb	r3, [r3, #24]
 8005f50:	4618      	mov	r0, r3
 8005f52:	2300      	movs	r3, #0
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	2308      	movs	r3, #8
 8005f58:	4a11      	ldr	r2, [pc, #68]	; (8005fa0 <SEGGER_SYSVIEW_Init+0x80>)
 8005f5a:	490f      	ldr	r1, [pc, #60]	; (8005f98 <SEGGER_SYSVIEW_Init+0x78>)
 8005f5c:	f7ff f94e 	bl	80051fc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005f60:	4b0e      	ldr	r3, [pc, #56]	; (8005f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f66:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <SEGGER_SYSVIEW_Init+0x84>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a0c      	ldr	r2, [pc, #48]	; (8005f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005f6c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f6e:	4a0b      	ldr	r2, [pc, #44]	; (8005f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005f74:	4a09      	ldr	r2, [pc, #36]	; (8005f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f7a:	4a08      	ldr	r2, [pc, #32]	; (8005f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005f80:	4a06      	ldr	r2, [pc, #24]	; (8005f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005f86:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	2001324c 	.word	0x2001324c
 8005f98:	080070e8 	.word	0x080070e8
 8005f9c:	20014254 	.word	0x20014254
 8005fa0:	2001424c 	.word	0x2001424c
 8005fa4:	e0001004 	.word	0xe0001004

08005fa8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005fb0:	4a04      	ldr	r2, [pc, #16]	; (8005fc4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6113      	str	r3, [r2, #16]
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	20014254 	.word	0x20014254

08005fc8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fd0:	f3ef 8311 	mrs	r3, BASEPRI
 8005fd4:	f04f 0120 	mov.w	r1, #32
 8005fd8:	f381 8811 	msr	BASEPRI, r1
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	4808      	ldr	r0, [pc, #32]	; (8006000 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005fe0:	f7ff f9a8 	bl	8005334 <_PreparePacket>
 8005fe4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	68b8      	ldr	r0, [r7, #8]
 8005fec:	f7ff fa90 	bl	8005510 <_SendPacket>
  RECORD_END();
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f383 8811 	msr	BASEPRI, r3
}
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20014284 	.word	0x20014284

08006004 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800600e:	f3ef 8311 	mrs	r3, BASEPRI
 8006012:	f04f 0120 	mov.w	r1, #32
 8006016:	f381 8811 	msr	BASEPRI, r1
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	4816      	ldr	r0, [pc, #88]	; (8006078 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800601e:	f7ff f989 	bl	8005334 <_PreparePacket>
 8006022:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	61fb      	str	r3, [r7, #28]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	61bb      	str	r3, [r7, #24]
 8006030:	e00b      	b.n	800604a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	b2da      	uxtb	r2, r3
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	1c59      	adds	r1, r3, #1
 800603a:	61f9      	str	r1, [r7, #28]
 800603c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	09db      	lsrs	r3, r3, #7
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b7f      	cmp	r3, #127	; 0x7f
 800604e:	d8f0      	bhi.n	8006032 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	61fa      	str	r2, [r7, #28]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	68f9      	ldr	r1, [r7, #12]
 8006064:	6938      	ldr	r0, [r7, #16]
 8006066:	f7ff fa53 	bl	8005510 <_SendPacket>
  RECORD_END();
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f383 8811 	msr	BASEPRI, r3
}
 8006070:	bf00      	nop
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20014284 	.word	0x20014284

0800607c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800607c:	b580      	push	{r7, lr}
 800607e:	b08c      	sub	sp, #48	; 0x30
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006088:	f3ef 8311 	mrs	r3, BASEPRI
 800608c:	f04f 0120 	mov.w	r1, #32
 8006090:	f381 8811 	msr	BASEPRI, r1
 8006094:	61fb      	str	r3, [r7, #28]
 8006096:	4825      	ldr	r0, [pc, #148]	; (800612c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006098:	f7ff f94c 	bl	8005334 <_PreparePacket>
 800609c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060aa:	e00b      	b.n	80060c4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b2:	1c59      	adds	r1, r3, #1
 80060b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	09db      	lsrs	r3, r3, #7
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	2b7f      	cmp	r3, #127	; 0x7f
 80060c8:	d8f0      	bhi.n	80060ac <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	623b      	str	r3, [r7, #32]
 80060e2:	e00b      	b.n	80060fc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	1c59      	adds	r1, r3, #1
 80060ec:	6279      	str	r1, [r7, #36]	; 0x24
 80060ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	09db      	lsrs	r3, r3, #7
 80060fa:	623b      	str	r3, [r7, #32]
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006100:	d8f0      	bhi.n	80060e4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	627a      	str	r2, [r7, #36]	; 0x24
 8006108:	6a3a      	ldr	r2, [r7, #32]
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	701a      	strb	r2, [r3, #0]
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	6979      	ldr	r1, [r7, #20]
 8006116:	69b8      	ldr	r0, [r7, #24]
 8006118:	f7ff f9fa 	bl	8005510 <_SendPacket>
  RECORD_END();
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f383 8811 	msr	BASEPRI, r3
}
 8006122:	bf00      	nop
 8006124:	3730      	adds	r7, #48	; 0x30
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20014284 	.word	0x20014284

08006130 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006130:	b580      	push	{r7, lr}
 8006132:	b08e      	sub	sp, #56	; 0x38
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800613e:	f3ef 8311 	mrs	r3, BASEPRI
 8006142:	f04f 0120 	mov.w	r1, #32
 8006146:	f381 8811 	msr	BASEPRI, r1
 800614a:	61fb      	str	r3, [r7, #28]
 800614c:	4832      	ldr	r0, [pc, #200]	; (8006218 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800614e:	f7ff f8f1 	bl	8005334 <_PreparePacket>
 8006152:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	637b      	str	r3, [r7, #52]	; 0x34
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	633b      	str	r3, [r7, #48]	; 0x30
 8006160:	e00b      	b.n	800617a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	b2da      	uxtb	r2, r3
 8006166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006168:	1c59      	adds	r1, r3, #1
 800616a:	6379      	str	r1, [r7, #52]	; 0x34
 800616c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006176:	09db      	lsrs	r3, r3, #7
 8006178:	633b      	str	r3, [r7, #48]	; 0x30
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	2b7f      	cmp	r3, #127	; 0x7f
 800617e:	d8f0      	bhi.n	8006162 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	637a      	str	r2, [r7, #52]	; 0x34
 8006186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	62bb      	str	r3, [r7, #40]	; 0x28
 8006198:	e00b      	b.n	80061b2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	b2da      	uxtb	r2, r3
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	1c59      	adds	r1, r3, #1
 80061a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	09db      	lsrs	r3, r3, #7
 80061b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b4:	2b7f      	cmp	r3, #127	; 0x7f
 80061b6:	d8f0      	bhi.n	800619a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	623b      	str	r3, [r7, #32]
 80061d0:	e00b      	b.n	80061ea <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	1c59      	adds	r1, r3, #1
 80061da:	6279      	str	r1, [r7, #36]	; 0x24
 80061dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	09db      	lsrs	r3, r3, #7
 80061e8:	623b      	str	r3, [r7, #32]
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	2b7f      	cmp	r3, #127	; 0x7f
 80061ee:	d8f0      	bhi.n	80061d2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	627a      	str	r2, [r7, #36]	; 0x24
 80061f6:	6a3a      	ldr	r2, [r7, #32]
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	6979      	ldr	r1, [r7, #20]
 8006204:	69b8      	ldr	r0, [r7, #24]
 8006206:	f7ff f983 	bl	8005510 <_SendPacket>
  RECORD_END();
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	f383 8811 	msr	BASEPRI, r3
}
 8006210:	bf00      	nop
 8006212:	3738      	adds	r7, #56	; 0x38
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	20014284 	.word	0x20014284

0800621c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800621c:	b580      	push	{r7, lr}
 800621e:	b090      	sub	sp, #64	; 0x40
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800622a:	f3ef 8311 	mrs	r3, BASEPRI
 800622e:	f04f 0120 	mov.w	r1, #32
 8006232:	f381 8811 	msr	BASEPRI, r1
 8006236:	61fb      	str	r3, [r7, #28]
 8006238:	4840      	ldr	r0, [pc, #256]	; (800633c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800623a:	f7ff f87b 	bl	8005334 <_PreparePacket>
 800623e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	63bb      	str	r3, [r7, #56]	; 0x38
 800624c:	e00b      	b.n	8006266 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	b2da      	uxtb	r2, r3
 8006252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006254:	1c59      	adds	r1, r3, #1
 8006256:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006258:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	701a      	strb	r2, [r3, #0]
 8006260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006262:	09db      	lsrs	r3, r3, #7
 8006264:	63bb      	str	r3, [r7, #56]	; 0x38
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	2b7f      	cmp	r3, #127	; 0x7f
 800626a:	d8f0      	bhi.n	800624e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800626c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	637b      	str	r3, [r7, #52]	; 0x34
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	633b      	str	r3, [r7, #48]	; 0x30
 8006284:	e00b      	b.n	800629e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	b2da      	uxtb	r2, r3
 800628a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628c:	1c59      	adds	r1, r3, #1
 800628e:	6379      	str	r1, [r7, #52]	; 0x34
 8006290:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	701a      	strb	r2, [r3, #0]
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	09db      	lsrs	r3, r3, #7
 800629c:	633b      	str	r3, [r7, #48]	; 0x30
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	2b7f      	cmp	r3, #127	; 0x7f
 80062a2:	d8f0      	bhi.n	8006286 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80062a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	637a      	str	r2, [r7, #52]	; 0x34
 80062aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80062bc:	e00b      	b.n	80062d6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c4:	1c59      	adds	r1, r3, #1
 80062c6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	09db      	lsrs	r3, r3, #7
 80062d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d8:	2b7f      	cmp	r3, #127	; 0x7f
 80062da:	d8f0      	bhi.n	80062be <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
 80062f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062f2:	623b      	str	r3, [r7, #32]
 80062f4:	e00b      	b.n	800630e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	1c59      	adds	r1, r3, #1
 80062fe:	6279      	str	r1, [r7, #36]	; 0x24
 8006300:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	09db      	lsrs	r3, r3, #7
 800630c:	623b      	str	r3, [r7, #32]
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	2b7f      	cmp	r3, #127	; 0x7f
 8006312:	d8f0      	bhi.n	80062f6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	627a      	str	r2, [r7, #36]	; 0x24
 800631a:	6a3a      	ldr	r2, [r7, #32]
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	6979      	ldr	r1, [r7, #20]
 8006328:	69b8      	ldr	r0, [r7, #24]
 800632a:	f7ff f8f1 	bl	8005510 <_SendPacket>
  RECORD_END();
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	f383 8811 	msr	BASEPRI, r3
}
 8006334:	bf00      	nop
 8006336:	3740      	adds	r7, #64	; 0x40
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20014284 	.word	0x20014284

08006340 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006340:	b580      	push	{r7, lr}
 8006342:	b08c      	sub	sp, #48	; 0x30
 8006344:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006346:	4b58      	ldr	r3, [pc, #352]	; (80064a8 <SEGGER_SYSVIEW_Start+0x168>)
 8006348:	2201      	movs	r2, #1
 800634a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800634c:	f3ef 8311 	mrs	r3, BASEPRI
 8006350:	f04f 0120 	mov.w	r1, #32
 8006354:	f381 8811 	msr	BASEPRI, r1
 8006358:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800635a:	4b53      	ldr	r3, [pc, #332]	; (80064a8 <SEGGER_SYSVIEW_Start+0x168>)
 800635c:	785b      	ldrb	r3, [r3, #1]
 800635e:	220a      	movs	r2, #10
 8006360:	4952      	ldr	r1, [pc, #328]	; (80064ac <SEGGER_SYSVIEW_Start+0x16c>)
 8006362:	4618      	mov	r0, r3
 8006364:	f7f9 ff34 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800636e:	200a      	movs	r0, #10
 8006370:	f7ff fe2a 	bl	8005fc8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006374:	f3ef 8311 	mrs	r3, BASEPRI
 8006378:	f04f 0120 	mov.w	r1, #32
 800637c:	f381 8811 	msr	BASEPRI, r1
 8006380:	60bb      	str	r3, [r7, #8]
 8006382:	484b      	ldr	r0, [pc, #300]	; (80064b0 <SEGGER_SYSVIEW_Start+0x170>)
 8006384:	f7fe ffd6 	bl	8005334 <_PreparePacket>
 8006388:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006392:	4b45      	ldr	r3, [pc, #276]	; (80064a8 <SEGGER_SYSVIEW_Start+0x168>)
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	62bb      	str	r3, [r7, #40]	; 0x28
 8006398:	e00b      	b.n	80063b2 <SEGGER_SYSVIEW_Start+0x72>
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	b2da      	uxtb	r2, r3
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	1c59      	adds	r1, r3, #1
 80063a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	09db      	lsrs	r3, r3, #7
 80063b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	2b7f      	cmp	r3, #127	; 0x7f
 80063b6:	d8f0      	bhi.n	800639a <SEGGER_SYSVIEW_Start+0x5a>
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
 80063cc:	4b36      	ldr	r3, [pc, #216]	; (80064a8 <SEGGER_SYSVIEW_Start+0x168>)
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	623b      	str	r3, [r7, #32]
 80063d2:	e00b      	b.n	80063ec <SEGGER_SYSVIEW_Start+0xac>
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	1c59      	adds	r1, r3, #1
 80063dc:	6279      	str	r1, [r7, #36]	; 0x24
 80063de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	701a      	strb	r2, [r3, #0]
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	09db      	lsrs	r3, r3, #7
 80063ea:	623b      	str	r3, [r7, #32]
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	2b7f      	cmp	r3, #127	; 0x7f
 80063f0:	d8f0      	bhi.n	80063d4 <SEGGER_SYSVIEW_Start+0x94>
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	627a      	str	r2, [r7, #36]	; 0x24
 80063f8:	6a3a      	ldr	r2, [r7, #32]
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	61fb      	str	r3, [r7, #28]
 8006406:	4b28      	ldr	r3, [pc, #160]	; (80064a8 <SEGGER_SYSVIEW_Start+0x168>)
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	61bb      	str	r3, [r7, #24]
 800640c:	e00b      	b.n	8006426 <SEGGER_SYSVIEW_Start+0xe6>
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	b2da      	uxtb	r2, r3
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	1c59      	adds	r1, r3, #1
 8006416:	61f9      	str	r1, [r7, #28]
 8006418:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	09db      	lsrs	r3, r3, #7
 8006424:	61bb      	str	r3, [r7, #24]
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	2b7f      	cmp	r3, #127	; 0x7f
 800642a:	d8f0      	bhi.n	800640e <SEGGER_SYSVIEW_Start+0xce>
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	61fa      	str	r2, [r7, #28]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	2300      	movs	r3, #0
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	e00b      	b.n	800645e <SEGGER_SYSVIEW_Start+0x11e>
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	b2da      	uxtb	r2, r3
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	1c59      	adds	r1, r3, #1
 800644e:	6179      	str	r1, [r7, #20]
 8006450:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	09db      	lsrs	r3, r3, #7
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b7f      	cmp	r3, #127	; 0x7f
 8006462:	d8f0      	bhi.n	8006446 <SEGGER_SYSVIEW_Start+0x106>
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	617a      	str	r2, [r7, #20]
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006474:	2218      	movs	r2, #24
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff f849 	bl	8005510 <_SendPacket>
      RECORD_END();
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006484:	4b08      	ldr	r3, [pc, #32]	; (80064a8 <SEGGER_SYSVIEW_Start+0x168>)
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800648c:	4b06      	ldr	r3, [pc, #24]	; (80064a8 <SEGGER_SYSVIEW_Start+0x168>)
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006492:	f000 f9eb 	bl	800686c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006496:	f000 f9b1 	bl	80067fc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800649a:	f000 fc83 	bl	8006da4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800649e:	bf00      	nop
 80064a0:	3730      	adds	r7, #48	; 0x30
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20014254 	.word	0x20014254
 80064ac:	08007124 	.word	0x08007124
 80064b0:	20014284 	.word	0x20014284

080064b4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064ba:	f3ef 8311 	mrs	r3, BASEPRI
 80064be:	f04f 0120 	mov.w	r1, #32
 80064c2:	f381 8811 	msr	BASEPRI, r1
 80064c6:	607b      	str	r3, [r7, #4]
 80064c8:	480b      	ldr	r0, [pc, #44]	; (80064f8 <SEGGER_SYSVIEW_Stop+0x44>)
 80064ca:	f7fe ff33 	bl	8005334 <_PreparePacket>
 80064ce:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80064d0:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <SEGGER_SYSVIEW_Stop+0x48>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d007      	beq.n	80064e8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80064d8:	220b      	movs	r2, #11
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6838      	ldr	r0, [r7, #0]
 80064de:	f7ff f817 	bl	8005510 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80064e2:	4b06      	ldr	r3, [pc, #24]	; (80064fc <SEGGER_SYSVIEW_Stop+0x48>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f383 8811 	msr	BASEPRI, r3
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20014284 	.word	0x20014284
 80064fc:	20014254 	.word	0x20014254

08006500 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b08c      	sub	sp, #48	; 0x30
 8006504:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006506:	f3ef 8311 	mrs	r3, BASEPRI
 800650a:	f04f 0120 	mov.w	r1, #32
 800650e:	f381 8811 	msr	BASEPRI, r1
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	4845      	ldr	r0, [pc, #276]	; (800662c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006516:	f7fe ff0d 	bl	8005334 <_PreparePacket>
 800651a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006524:	4b42      	ldr	r3, [pc, #264]	; (8006630 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
 800652a:	e00b      	b.n	8006544 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	b2da      	uxtb	r2, r3
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	1c59      	adds	r1, r3, #1
 8006534:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006536:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	701a      	strb	r2, [r3, #0]
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	09db      	lsrs	r3, r3, #7
 8006542:	62bb      	str	r3, [r7, #40]	; 0x28
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	2b7f      	cmp	r3, #127	; 0x7f
 8006548:	d8f0      	bhi.n	800652c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
 800655e:	4b34      	ldr	r3, [pc, #208]	; (8006630 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	623b      	str	r3, [r7, #32]
 8006564:	e00b      	b.n	800657e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	b2da      	uxtb	r2, r3
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	1c59      	adds	r1, r3, #1
 800656e:	6279      	str	r1, [r7, #36]	; 0x24
 8006570:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	09db      	lsrs	r3, r3, #7
 800657c:	623b      	str	r3, [r7, #32]
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	2b7f      	cmp	r3, #127	; 0x7f
 8006582:	d8f0      	bhi.n	8006566 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	627a      	str	r2, [r7, #36]	; 0x24
 800658a:	6a3a      	ldr	r2, [r7, #32]
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	4b25      	ldr	r3, [pc, #148]	; (8006630 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	61bb      	str	r3, [r7, #24]
 800659e:	e00b      	b.n	80065b8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	1c59      	adds	r1, r3, #1
 80065a8:	61f9      	str	r1, [r7, #28]
 80065aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	09db      	lsrs	r3, r3, #7
 80065b6:	61bb      	str	r3, [r7, #24]
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	2b7f      	cmp	r3, #127	; 0x7f
 80065bc:	d8f0      	bhi.n	80065a0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	61fa      	str	r2, [r7, #28]
 80065c4:	69ba      	ldr	r2, [r7, #24]
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	2300      	movs	r3, #0
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	e00b      	b.n	80065f0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	1c59      	adds	r1, r3, #1
 80065e0:	6179      	str	r1, [r7, #20]
 80065e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	09db      	lsrs	r3, r3, #7
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2b7f      	cmp	r3, #127	; 0x7f
 80065f4:	d8f0      	bhi.n	80065d8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	617a      	str	r2, [r7, #20]
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006606:	2218      	movs	r2, #24
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	68b8      	ldr	r0, [r7, #8]
 800660c:	f7fe ff80 	bl	8005510 <_SendPacket>
  RECORD_END();
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006616:	4b06      	ldr	r3, [pc, #24]	; (8006630 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800661e:	4b04      	ldr	r3, [pc, #16]	; (8006630 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	4798      	blx	r3
  }
}
 8006624:	bf00      	nop
 8006626:	3730      	adds	r7, #48	; 0x30
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	20014284 	.word	0x20014284
 8006630:	20014254 	.word	0x20014254

08006634 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006634:	b580      	push	{r7, lr}
 8006636:	b092      	sub	sp, #72	; 0x48
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800663c:	f3ef 8311 	mrs	r3, BASEPRI
 8006640:	f04f 0120 	mov.w	r1, #32
 8006644:	f381 8811 	msr	BASEPRI, r1
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	486a      	ldr	r0, [pc, #424]	; (80067f4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800664c:	f7fe fe72 	bl	8005334 <_PreparePacket>
 8006650:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	647b      	str	r3, [r7, #68]	; 0x44
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	4b66      	ldr	r3, [pc, #408]	; (80067f8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	643b      	str	r3, [r7, #64]	; 0x40
 8006666:	e00b      	b.n	8006680 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800666a:	b2da      	uxtb	r2, r3
 800666c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800666e:	1c59      	adds	r1, r3, #1
 8006670:	6479      	str	r1, [r7, #68]	; 0x44
 8006672:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667c:	09db      	lsrs	r3, r3, #7
 800667e:	643b      	str	r3, [r7, #64]	; 0x40
 8006680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006682:	2b7f      	cmp	r3, #127	; 0x7f
 8006684:	d8f0      	bhi.n	8006668 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	647a      	str	r2, [r7, #68]	; 0x44
 800668c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006694:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	63fb      	str	r3, [r7, #60]	; 0x3c
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	63bb      	str	r3, [r7, #56]	; 0x38
 80066a0:	e00b      	b.n	80066ba <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80066a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a8:	1c59      	adds	r1, r3, #1
 80066aa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80066ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	701a      	strb	r2, [r3, #0]
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	09db      	lsrs	r3, r3, #7
 80066b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	2b7f      	cmp	r3, #127	; 0x7f
 80066be:	d8f0      	bhi.n	80066a2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80066c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80066c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066c8:	b2d2      	uxtb	r2, r2
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ce:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	2220      	movs	r2, #32
 80066d6:	4619      	mov	r1, r3
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f7fe fddb 	bl	8005294 <_EncodeStr>
 80066de:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80066e0:	2209      	movs	r2, #9
 80066e2:	68f9      	ldr	r1, [r7, #12]
 80066e4:	6938      	ldr	r0, [r7, #16]
 80066e6:	f7fe ff13 	bl	8005510 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	637b      	str	r3, [r7, #52]	; 0x34
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	4b40      	ldr	r3, [pc, #256]	; (80067f8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	633b      	str	r3, [r7, #48]	; 0x30
 80066fe:	e00b      	b.n	8006718 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	b2da      	uxtb	r2, r3
 8006704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006706:	1c59      	adds	r1, r3, #1
 8006708:	6379      	str	r1, [r7, #52]	; 0x34
 800670a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	701a      	strb	r2, [r3, #0]
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	09db      	lsrs	r3, r3, #7
 8006716:	633b      	str	r3, [r7, #48]	; 0x30
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	2b7f      	cmp	r3, #127	; 0x7f
 800671c:	d8f0      	bhi.n	8006700 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800671e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	637a      	str	r2, [r7, #52]	; 0x34
 8006724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006726:	b2d2      	uxtb	r2, r2
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28
 8006738:	e00b      	b.n	8006752 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	b2da      	uxtb	r2, r3
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	1c59      	adds	r1, r3, #1
 8006742:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006744:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	09db      	lsrs	r3, r3, #7
 8006750:	62bb      	str	r3, [r7, #40]	; 0x28
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	2b7f      	cmp	r3, #127	; 0x7f
 8006756:	d8f0      	bhi.n	800673a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800675e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	627b      	str	r3, [r7, #36]	; 0x24
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	623b      	str	r3, [r7, #32]
 8006772:	e00b      	b.n	800678c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	b2da      	uxtb	r2, r3
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	1c59      	adds	r1, r3, #1
 800677c:	6279      	str	r1, [r7, #36]	; 0x24
 800677e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	09db      	lsrs	r3, r3, #7
 800678a:	623b      	str	r3, [r7, #32]
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	2b7f      	cmp	r3, #127	; 0x7f
 8006790:	d8f0      	bhi.n	8006774 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	627a      	str	r2, [r7, #36]	; 0x24
 8006798:	6a3a      	ldr	r2, [r7, #32]
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	61fb      	str	r3, [r7, #28]
 80067a6:	2300      	movs	r3, #0
 80067a8:	61bb      	str	r3, [r7, #24]
 80067aa:	e00b      	b.n	80067c4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	1c59      	adds	r1, r3, #1
 80067b4:	61f9      	str	r1, [r7, #28]
 80067b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067ba:	b2d2      	uxtb	r2, r2
 80067bc:	701a      	strb	r2, [r3, #0]
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	09db      	lsrs	r3, r3, #7
 80067c2:	61bb      	str	r3, [r7, #24]
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	2b7f      	cmp	r3, #127	; 0x7f
 80067c8:	d8f0      	bhi.n	80067ac <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	61fa      	str	r2, [r7, #28]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	701a      	strb	r2, [r3, #0]
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80067da:	2215      	movs	r2, #21
 80067dc:	68f9      	ldr	r1, [r7, #12]
 80067de:	6938      	ldr	r0, [r7, #16]
 80067e0:	f7fe fe96 	bl	8005510 <_SendPacket>
  RECORD_END();
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f383 8811 	msr	BASEPRI, r3
}
 80067ea:	bf00      	nop
 80067ec:	3748      	adds	r7, #72	; 0x48
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20014284 	.word	0x20014284
 80067f8:	20014254 	.word	0x20014254

080067fc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006800:	4b07      	ldr	r3, [pc, #28]	; (8006820 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006808:	4b05      	ldr	r3, [pc, #20]	; (8006820 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006812:	4b03      	ldr	r3, [pc, #12]	; (8006820 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	4798      	blx	r3
  }
}
 800681a:	bf00      	nop
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20014254 	.word	0x20014254

08006824 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800682c:	f3ef 8311 	mrs	r3, BASEPRI
 8006830:	f04f 0120 	mov.w	r1, #32
 8006834:	f381 8811 	msr	BASEPRI, r1
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	480b      	ldr	r0, [pc, #44]	; (8006868 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800683c:	f7fe fd7a 	bl	8005334 <_PreparePacket>
 8006840:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006842:	2280      	movs	r2, #128	; 0x80
 8006844:	6879      	ldr	r1, [r7, #4]
 8006846:	6938      	ldr	r0, [r7, #16]
 8006848:	f7fe fd24 	bl	8005294 <_EncodeStr>
 800684c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800684e:	220e      	movs	r2, #14
 8006850:	68f9      	ldr	r1, [r7, #12]
 8006852:	6938      	ldr	r0, [r7, #16]
 8006854:	f7fe fe5c 	bl	8005510 <_SendPacket>
  RECORD_END();
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f383 8811 	msr	BASEPRI, r3
}
 800685e:	bf00      	nop
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20014284 	.word	0x20014284

0800686c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800686c:	b590      	push	{r4, r7, lr}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006872:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d01a      	beq.n	80068b0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800687a:	4b13      	ldr	r3, [pc, #76]	; (80068c8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d015      	beq.n	80068b0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006884:	4b10      	ldr	r3, [pc, #64]	; (80068c8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4798      	blx	r3
 800688c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006890:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006892:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	000a      	movs	r2, r1
 80068a0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80068a2:	4613      	mov	r3, r2
 80068a4:	461a      	mov	r2, r3
 80068a6:	4621      	mov	r1, r4
 80068a8:	200d      	movs	r0, #13
 80068aa:	f7ff fbe7 	bl	800607c <SEGGER_SYSVIEW_RecordU32x2>
 80068ae:	e006      	b.n	80068be <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80068b0:	4b06      	ldr	r3, [pc, #24]	; (80068cc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4619      	mov	r1, r3
 80068b6:	200c      	movs	r0, #12
 80068b8:	f7ff fba4 	bl	8006004 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80068bc:	bf00      	nop
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd90      	pop	{r4, r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20014254 	.word	0x20014254
 80068cc:	e0001004 	.word	0xe0001004

080068d0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068d6:	f3ef 8311 	mrs	r3, BASEPRI
 80068da:	f04f 0120 	mov.w	r1, #32
 80068de:	f381 8811 	msr	BASEPRI, r1
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	4819      	ldr	r0, [pc, #100]	; (800694c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80068e6:	f7fe fd25 	bl	8005334 <_PreparePacket>
 80068ea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80068f0:	4b17      	ldr	r3, [pc, #92]	; (8006950 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	e00b      	b.n	800691c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	b2da      	uxtb	r2, r3
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	1c59      	adds	r1, r3, #1
 800690c:	6179      	str	r1, [r7, #20]
 800690e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006912:	b2d2      	uxtb	r2, r2
 8006914:	701a      	strb	r2, [r3, #0]
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	09db      	lsrs	r3, r3, #7
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b7f      	cmp	r3, #127	; 0x7f
 8006920:	d8f0      	bhi.n	8006904 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	617a      	str	r2, [r7, #20]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	b2d2      	uxtb	r2, r2
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006932:	2202      	movs	r2, #2
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	68b8      	ldr	r0, [r7, #8]
 8006938:	f7fe fdea 	bl	8005510 <_SendPacket>
  RECORD_END();
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f383 8811 	msr	BASEPRI, r3
}
 8006942:	bf00      	nop
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20014284 	.word	0x20014284
 8006950:	e000ed04 	.word	0xe000ed04

08006954 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800695a:	f3ef 8311 	mrs	r3, BASEPRI
 800695e:	f04f 0120 	mov.w	r1, #32
 8006962:	f381 8811 	msr	BASEPRI, r1
 8006966:	607b      	str	r3, [r7, #4]
 8006968:	4807      	ldr	r0, [pc, #28]	; (8006988 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800696a:	f7fe fce3 	bl	8005334 <_PreparePacket>
 800696e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006970:	2203      	movs	r2, #3
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6838      	ldr	r0, [r7, #0]
 8006976:	f7fe fdcb 	bl	8005510 <_SendPacket>
  RECORD_END();
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f383 8811 	msr	BASEPRI, r3
}
 8006980:	bf00      	nop
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	20014284 	.word	0x20014284

0800698c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006992:	f3ef 8311 	mrs	r3, BASEPRI
 8006996:	f04f 0120 	mov.w	r1, #32
 800699a:	f381 8811 	msr	BASEPRI, r1
 800699e:	607b      	str	r3, [r7, #4]
 80069a0:	4807      	ldr	r0, [pc, #28]	; (80069c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80069a2:	f7fe fcc7 	bl	8005334 <_PreparePacket>
 80069a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80069a8:	2212      	movs	r2, #18
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	6838      	ldr	r0, [r7, #0]
 80069ae:	f7fe fdaf 	bl	8005510 <_SendPacket>
  RECORD_END();
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f383 8811 	msr	BASEPRI, r3
}
 80069b8:	bf00      	nop
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20014284 	.word	0x20014284

080069c4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069ca:	f3ef 8311 	mrs	r3, BASEPRI
 80069ce:	f04f 0120 	mov.w	r1, #32
 80069d2:	f381 8811 	msr	BASEPRI, r1
 80069d6:	607b      	str	r3, [r7, #4]
 80069d8:	4807      	ldr	r0, [pc, #28]	; (80069f8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80069da:	f7fe fcab 	bl	8005334 <_PreparePacket>
 80069de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80069e0:	2211      	movs	r2, #17
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	6838      	ldr	r0, [r7, #0]
 80069e6:	f7fe fd93 	bl	8005510 <_SendPacket>
  RECORD_END();
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f383 8811 	msr	BASEPRI, r3
}
 80069f0:	bf00      	nop
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20014284 	.word	0x20014284

080069fc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b088      	sub	sp, #32
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a04:	f3ef 8311 	mrs	r3, BASEPRI
 8006a08:	f04f 0120 	mov.w	r1, #32
 8006a0c:	f381 8811 	msr	BASEPRI, r1
 8006a10:	617b      	str	r3, [r7, #20]
 8006a12:	4819      	ldr	r0, [pc, #100]	; (8006a78 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006a14:	f7fe fc8e 	bl	8005334 <_PreparePacket>
 8006a18:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a1e:	4b17      	ldr	r3, [pc, #92]	; (8006a7c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	61fb      	str	r3, [r7, #28]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	61bb      	str	r3, [r7, #24]
 8006a30:	e00b      	b.n	8006a4a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	1c59      	adds	r1, r3, #1
 8006a3a:	61f9      	str	r1, [r7, #28]
 8006a3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a40:	b2d2      	uxtb	r2, r2
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	09db      	lsrs	r3, r3, #7
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a4e:	d8f0      	bhi.n	8006a32 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	61fa      	str	r2, [r7, #28]
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	b2d2      	uxtb	r2, r2
 8006a5a:	701a      	strb	r2, [r3, #0]
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a60:	2208      	movs	r2, #8
 8006a62:	68f9      	ldr	r1, [r7, #12]
 8006a64:	6938      	ldr	r0, [r7, #16]
 8006a66:	f7fe fd53 	bl	8005510 <_SendPacket>
  RECORD_END();
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f383 8811 	msr	BASEPRI, r3
}
 8006a70:	bf00      	nop
 8006a72:	3720      	adds	r7, #32
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	20014284 	.word	0x20014284
 8006a7c:	20014254 	.word	0x20014254

08006a80 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a88:	f3ef 8311 	mrs	r3, BASEPRI
 8006a8c:	f04f 0120 	mov.w	r1, #32
 8006a90:	f381 8811 	msr	BASEPRI, r1
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	4819      	ldr	r0, [pc, #100]	; (8006afc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006a98:	f7fe fc4c 	bl	8005334 <_PreparePacket>
 8006a9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006aa2:	4b17      	ldr	r3, [pc, #92]	; (8006b00 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	61fb      	str	r3, [r7, #28]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	e00b      	b.n	8006ace <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	1c59      	adds	r1, r3, #1
 8006abe:	61f9      	str	r1, [r7, #28]
 8006ac0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	701a      	strb	r2, [r3, #0]
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	09db      	lsrs	r3, r3, #7
 8006acc:	61bb      	str	r3, [r7, #24]
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad2:	d8f0      	bhi.n	8006ab6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	61fa      	str	r2, [r7, #28]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006ae4:	2204      	movs	r2, #4
 8006ae6:	68f9      	ldr	r1, [r7, #12]
 8006ae8:	6938      	ldr	r0, [r7, #16]
 8006aea:	f7fe fd11 	bl	8005510 <_SendPacket>
  RECORD_END();
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f383 8811 	msr	BASEPRI, r3
}
 8006af4:	bf00      	nop
 8006af6:	3720      	adds	r7, #32
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20014284 	.word	0x20014284
 8006b00:	20014254 	.word	0x20014254

08006b04 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b0c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b10:	f04f 0120 	mov.w	r1, #32
 8006b14:	f381 8811 	msr	BASEPRI, r1
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	4819      	ldr	r0, [pc, #100]	; (8006b80 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006b1c:	f7fe fc0a 	bl	8005334 <_PreparePacket>
 8006b20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b26:	4b17      	ldr	r3, [pc, #92]	; (8006b84 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	61bb      	str	r3, [r7, #24]
 8006b38:	e00b      	b.n	8006b52 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	1c59      	adds	r1, r3, #1
 8006b42:	61f9      	str	r1, [r7, #28]
 8006b44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	701a      	strb	r2, [r3, #0]
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	09db      	lsrs	r3, r3, #7
 8006b50:	61bb      	str	r3, [r7, #24]
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	2b7f      	cmp	r3, #127	; 0x7f
 8006b56:	d8f0      	bhi.n	8006b3a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	61fa      	str	r2, [r7, #28]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	b2d2      	uxtb	r2, r2
 8006b62:	701a      	strb	r2, [r3, #0]
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b68:	2206      	movs	r2, #6
 8006b6a:	68f9      	ldr	r1, [r7, #12]
 8006b6c:	6938      	ldr	r0, [r7, #16]
 8006b6e:	f7fe fccf 	bl	8005510 <_SendPacket>
  RECORD_END();
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f383 8811 	msr	BASEPRI, r3
}
 8006b78:	bf00      	nop
 8006b7a:	3720      	adds	r7, #32
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	20014284 	.word	0x20014284
 8006b84:	20014254 	.word	0x20014254

08006b88 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08a      	sub	sp, #40	; 0x28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b92:	f3ef 8311 	mrs	r3, BASEPRI
 8006b96:	f04f 0120 	mov.w	r1, #32
 8006b9a:	f381 8811 	msr	BASEPRI, r1
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	4827      	ldr	r0, [pc, #156]	; (8006c40 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006ba2:	f7fe fbc7 	bl	8005334 <_PreparePacket>
 8006ba6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006bac:	4b25      	ldr	r3, [pc, #148]	; (8006c44 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	623b      	str	r3, [r7, #32]
 8006bbe:	e00b      	b.n	8006bd8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	1c59      	adds	r1, r3, #1
 8006bc8:	6279      	str	r1, [r7, #36]	; 0x24
 8006bca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	09db      	lsrs	r3, r3, #7
 8006bd6:	623b      	str	r3, [r7, #32]
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	2b7f      	cmp	r3, #127	; 0x7f
 8006bdc:	d8f0      	bhi.n	8006bc0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	627a      	str	r2, [r7, #36]	; 0x24
 8006be4:	6a3a      	ldr	r2, [r7, #32]
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	61fb      	str	r3, [r7, #28]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	e00b      	b.n	8006c10 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	1c59      	adds	r1, r3, #1
 8006c00:	61f9      	str	r1, [r7, #28]
 8006c02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	09db      	lsrs	r3, r3, #7
 8006c0e:	61bb      	str	r3, [r7, #24]
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	2b7f      	cmp	r3, #127	; 0x7f
 8006c14:	d8f0      	bhi.n	8006bf8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	61fa      	str	r2, [r7, #28]
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006c26:	2207      	movs	r2, #7
 8006c28:	68f9      	ldr	r1, [r7, #12]
 8006c2a:	6938      	ldr	r0, [r7, #16]
 8006c2c:	f7fe fc70 	bl	8005510 <_SendPacket>
  RECORD_END();
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f383 8811 	msr	BASEPRI, r3
}
 8006c36:	bf00      	nop
 8006c38:	3728      	adds	r7, #40	; 0x28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20014284 	.word	0x20014284
 8006c44:	20014254 	.word	0x20014254

08006c48 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006c50:	4b04      	ldr	r3, [pc, #16]	; (8006c64 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	1ad3      	subs	r3, r2, r3
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	20014254 	.word	0x20014254

08006c68 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08c      	sub	sp, #48	; 0x30
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006c72:	4b3b      	ldr	r3, [pc, #236]	; (8006d60 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d06d      	beq.n	8006d56 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006c7a:	4b39      	ldr	r3, [pc, #228]	; (8006d60 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006c80:	2300      	movs	r3, #0
 8006c82:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c84:	e008      	b.n	8006c98 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d007      	beq.n	8006ca2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	3301      	adds	r3, #1
 8006c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c98:	79fb      	ldrb	r3, [r7, #7]
 8006c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d3f2      	bcc.n	8006c86 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006ca0:	e000      	b.n	8006ca4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006ca2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d055      	beq.n	8006d56 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006caa:	f3ef 8311 	mrs	r3, BASEPRI
 8006cae:	f04f 0120 	mov.w	r1, #32
 8006cb2:	f381 8811 	msr	BASEPRI, r1
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	482a      	ldr	r0, [pc, #168]	; (8006d64 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006cba:	f7fe fb3b 	bl	8005334 <_PreparePacket>
 8006cbe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc8:	79fb      	ldrb	r3, [r7, #7]
 8006cca:	623b      	str	r3, [r7, #32]
 8006ccc:	e00b      	b.n	8006ce6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	1c59      	adds	r1, r3, #1
 8006cd6:	6279      	str	r1, [r7, #36]	; 0x24
 8006cd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	701a      	strb	r2, [r3, #0]
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	09db      	lsrs	r3, r3, #7
 8006ce4:	623b      	str	r3, [r7, #32]
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cea:	d8f0      	bhi.n	8006cce <SEGGER_SYSVIEW_SendModule+0x66>
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	627a      	str	r2, [r7, #36]	; 0x24
 8006cf2:	6a3a      	ldr	r2, [r7, #32]
 8006cf4:	b2d2      	uxtb	r2, r2
 8006cf6:	701a      	strb	r2, [r3, #0]
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	61fb      	str	r3, [r7, #28]
 8006d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	61bb      	str	r3, [r7, #24]
 8006d06:	e00b      	b.n	8006d20 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	1c59      	adds	r1, r3, #1
 8006d10:	61f9      	str	r1, [r7, #28]
 8006d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	09db      	lsrs	r3, r3, #7
 8006d1e:	61bb      	str	r3, [r7, #24]
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	2b7f      	cmp	r3, #127	; 0x7f
 8006d24:	d8f0      	bhi.n	8006d08 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	61fa      	str	r2, [r7, #28]
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2280      	movs	r2, #128	; 0x80
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f7fe faa8 	bl	8005294 <_EncodeStr>
 8006d44:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006d46:	2216      	movs	r2, #22
 8006d48:	68f9      	ldr	r1, [r7, #12]
 8006d4a:	6938      	ldr	r0, [r7, #16]
 8006d4c:	f7fe fbe0 	bl	8005510 <_SendPacket>
      RECORD_END();
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006d56:	bf00      	nop
 8006d58:	3730      	adds	r7, #48	; 0x30
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	2001427c 	.word	0x2001427c
 8006d64:	20014284 	.word	0x20014284

08006d68 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006d6e:	4b0c      	ldr	r3, [pc, #48]	; (8006da0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00f      	beq.n	8006d96 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006d76:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1f2      	bne.n	8006d7c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006d96:	bf00      	nop
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	2001427c 	.word	0x2001427c

08006da4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006daa:	f3ef 8311 	mrs	r3, BASEPRI
 8006dae:	f04f 0120 	mov.w	r1, #32
 8006db2:	f381 8811 	msr	BASEPRI, r1
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	4817      	ldr	r0, [pc, #92]	; (8006e18 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006dba:	f7fe fabb 	bl	8005334 <_PreparePacket>
 8006dbe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	4b14      	ldr	r3, [pc, #80]	; (8006e1c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	613b      	str	r3, [r7, #16]
 8006dce:	e00b      	b.n	8006de8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	1c59      	adds	r1, r3, #1
 8006dd8:	6179      	str	r1, [r7, #20]
 8006dda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	09db      	lsrs	r3, r3, #7
 8006de6:	613b      	str	r3, [r7, #16]
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	2b7f      	cmp	r3, #127	; 0x7f
 8006dec:	d8f0      	bhi.n	8006dd0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	617a      	str	r2, [r7, #20]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006dfe:	221b      	movs	r2, #27
 8006e00:	6879      	ldr	r1, [r7, #4]
 8006e02:	68b8      	ldr	r0, [r7, #8]
 8006e04:	f7fe fb84 	bl	8005510 <_SendPacket>
  RECORD_END();
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f383 8811 	msr	BASEPRI, r3
}
 8006e0e:	bf00      	nop
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20014284 	.word	0x20014284
 8006e1c:	20014280 	.word	0x20014280

08006e20 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006e20:	b40f      	push	{r0, r1, r2, r3}
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006e28:	f107 0314 	add.w	r3, r7, #20
 8006e2c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006e2e:	1d3b      	adds	r3, r7, #4
 8006e30:	461a      	mov	r2, r3
 8006e32:	2100      	movs	r1, #0
 8006e34:	6938      	ldr	r0, [r7, #16]
 8006e36:	f7fe fe7b 	bl	8005b30 <_VPrintTarget>
  va_end(ParamList);
}
 8006e3a:	bf00      	nop
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e44:	b004      	add	sp, #16
 8006e46:	4770      	bx	lr

08006e48 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b08a      	sub	sp, #40	; 0x28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e50:	f3ef 8311 	mrs	r3, BASEPRI
 8006e54:	f04f 0120 	mov.w	r1, #32
 8006e58:	f381 8811 	msr	BASEPRI, r1
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	4827      	ldr	r0, [pc, #156]	; (8006efc <SEGGER_SYSVIEW_Warn+0xb4>)
 8006e60:	f7fe fa68 	bl	8005334 <_PreparePacket>
 8006e64:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e66:	2280      	movs	r2, #128	; 0x80
 8006e68:	6879      	ldr	r1, [r7, #4]
 8006e6a:	6938      	ldr	r0, [r7, #16]
 8006e6c:	f7fe fa12 	bl	8005294 <_EncodeStr>
 8006e70:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	627b      	str	r3, [r7, #36]	; 0x24
 8006e76:	2301      	movs	r3, #1
 8006e78:	623b      	str	r3, [r7, #32]
 8006e7a:	e00b      	b.n	8006e94 <SEGGER_SYSVIEW_Warn+0x4c>
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	1c59      	adds	r1, r3, #1
 8006e84:	6279      	str	r1, [r7, #36]	; 0x24
 8006e86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e8a:	b2d2      	uxtb	r2, r2
 8006e8c:	701a      	strb	r2, [r3, #0]
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	09db      	lsrs	r3, r3, #7
 8006e92:	623b      	str	r3, [r7, #32]
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	2b7f      	cmp	r3, #127	; 0x7f
 8006e98:	d8f0      	bhi.n	8006e7c <SEGGER_SYSVIEW_Warn+0x34>
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	627a      	str	r2, [r7, #36]	; 0x24
 8006ea0:	6a3a      	ldr	r2, [r7, #32]
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	61fb      	str	r3, [r7, #28]
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61bb      	str	r3, [r7, #24]
 8006eb2:	e00b      	b.n	8006ecc <SEGGER_SYSVIEW_Warn+0x84>
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	1c59      	adds	r1, r3, #1
 8006ebc:	61f9      	str	r1, [r7, #28]
 8006ebe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	701a      	strb	r2, [r3, #0]
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	09db      	lsrs	r3, r3, #7
 8006eca:	61bb      	str	r3, [r7, #24]
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	2b7f      	cmp	r3, #127	; 0x7f
 8006ed0:	d8f0      	bhi.n	8006eb4 <SEGGER_SYSVIEW_Warn+0x6c>
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	61fa      	str	r2, [r7, #28]
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	b2d2      	uxtb	r2, r2
 8006edc:	701a      	strb	r2, [r3, #0]
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006ee2:	221a      	movs	r2, #26
 8006ee4:	68f9      	ldr	r1, [r7, #12]
 8006ee6:	6938      	ldr	r0, [r7, #16]
 8006ee8:	f7fe fb12 	bl	8005510 <_SendPacket>
  RECORD_END();
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f383 8811 	msr	BASEPRI, r3
}
 8006ef2:	bf00      	nop
 8006ef4:	3728      	adds	r7, #40	; 0x28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20014284 	.word	0x20014284

08006f00 <__libc_init_array>:
 8006f00:	b570      	push	{r4, r5, r6, lr}
 8006f02:	4d0d      	ldr	r5, [pc, #52]	; (8006f38 <__libc_init_array+0x38>)
 8006f04:	4c0d      	ldr	r4, [pc, #52]	; (8006f3c <__libc_init_array+0x3c>)
 8006f06:	1b64      	subs	r4, r4, r5
 8006f08:	10a4      	asrs	r4, r4, #2
 8006f0a:	2600      	movs	r6, #0
 8006f0c:	42a6      	cmp	r6, r4
 8006f0e:	d109      	bne.n	8006f24 <__libc_init_array+0x24>
 8006f10:	4d0b      	ldr	r5, [pc, #44]	; (8006f40 <__libc_init_array+0x40>)
 8006f12:	4c0c      	ldr	r4, [pc, #48]	; (8006f44 <__libc_init_array+0x44>)
 8006f14:	f000 f83c 	bl	8006f90 <_init>
 8006f18:	1b64      	subs	r4, r4, r5
 8006f1a:	10a4      	asrs	r4, r4, #2
 8006f1c:	2600      	movs	r6, #0
 8006f1e:	42a6      	cmp	r6, r4
 8006f20:	d105      	bne.n	8006f2e <__libc_init_array+0x2e>
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f28:	4798      	blx	r3
 8006f2a:	3601      	adds	r6, #1
 8006f2c:	e7ee      	b.n	8006f0c <__libc_init_array+0xc>
 8006f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f32:	4798      	blx	r3
 8006f34:	3601      	adds	r6, #1
 8006f36:	e7f2      	b.n	8006f1e <__libc_init_array+0x1e>
 8006f38:	08007148 	.word	0x08007148
 8006f3c:	08007148 	.word	0x08007148
 8006f40:	08007148 	.word	0x08007148
 8006f44:	0800714c 	.word	0x0800714c

08006f48 <memcmp>:
 8006f48:	b530      	push	{r4, r5, lr}
 8006f4a:	3901      	subs	r1, #1
 8006f4c:	2400      	movs	r4, #0
 8006f4e:	42a2      	cmp	r2, r4
 8006f50:	d101      	bne.n	8006f56 <memcmp+0xe>
 8006f52:	2000      	movs	r0, #0
 8006f54:	e005      	b.n	8006f62 <memcmp+0x1a>
 8006f56:	5d03      	ldrb	r3, [r0, r4]
 8006f58:	3401      	adds	r4, #1
 8006f5a:	5d0d      	ldrb	r5, [r1, r4]
 8006f5c:	42ab      	cmp	r3, r5
 8006f5e:	d0f6      	beq.n	8006f4e <memcmp+0x6>
 8006f60:	1b58      	subs	r0, r3, r5
 8006f62:	bd30      	pop	{r4, r5, pc}

08006f64 <memcpy>:
 8006f64:	440a      	add	r2, r1
 8006f66:	4291      	cmp	r1, r2
 8006f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f6c:	d100      	bne.n	8006f70 <memcpy+0xc>
 8006f6e:	4770      	bx	lr
 8006f70:	b510      	push	{r4, lr}
 8006f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f7a:	4291      	cmp	r1, r2
 8006f7c:	d1f9      	bne.n	8006f72 <memcpy+0xe>
 8006f7e:	bd10      	pop	{r4, pc}

08006f80 <memset>:
 8006f80:	4402      	add	r2, r0
 8006f82:	4603      	mov	r3, r0
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d100      	bne.n	8006f8a <memset+0xa>
 8006f88:	4770      	bx	lr
 8006f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f8e:	e7f9      	b.n	8006f84 <memset+0x4>

08006f90 <_init>:
 8006f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f92:	bf00      	nop
 8006f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f96:	bc08      	pop	{r3}
 8006f98:	469e      	mov	lr, r3
 8006f9a:	4770      	bx	lr

08006f9c <_fini>:
 8006f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9e:	bf00      	nop
 8006fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa2:	bc08      	pop	{r3}
 8006fa4:	469e      	mov	lr, r3
 8006fa6:	4770      	bx	lr
